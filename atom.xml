<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xgp &amp; Blog</title>
  
  <subtitle>Today is still beautiful</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsdlxgp.top/"/>
  <updated>2020-06-18T12:46:53.150Z</updated>
  <id>https://wsdlxgp.top/</id>
  
  <author>
    <name>Wu Shao Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>94 小案例</title>
    <link href="https://wsdlxgp.top/posts/a1c5.html"/>
    <id>https://wsdlxgp.top/posts/a1c5.html</id>
    <published>2019-11-02T16:00:00.000Z</published>
    <updated>2020-06-18T12:46:53.150Z</updated>
    
    <content type="html"><![CDATA[<h1>编写一个案例代码</h1><h2 id="1、name-function-py-文件内容">1、name_function.py 文件内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-string">'''</span><br><span class="hljs-string">编写函数或者类的时候，可以给他们编写测试。</span><br><span class="hljs-string">通过测试，可确定代码面对各种各样输入都能够按照既定的要求正常工作</span><br><span class="hljs-string">对于程序员来说，编写测试，可以在用户发现问题前预先找出错误。</span><br><span class="hljs-string"></span><br><span class="hljs-string">Python中的测试模块：</span><br><span class="hljs-string">'''</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_format_name</span><span class="hljs-params">(first,last)</span>:</span><br>    <span class="hljs-string">'''创建一个姓名'''</span><br>    full_name = first + <span class="hljs-string">' '</span> + last<br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-string">'''</span><br><span class="hljs-string">编写函数或者类的时候，可以给他们编写测试。</span><br><span class="hljs-string">通过测试，可确定代码面对各种各样输入都能够按照既定的要求正常工作</span><br><span class="hljs-string">对于程序员来说，编写测试，可以在用户发现问题前预先找出错误。</span><br><span class="hljs-string"></span><br><span class="hljs-string">Python中的测试模块：</span><br><span class="hljs-string">'''</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_format_name</span><span class="hljs-params">(first,last)</span>:</span><br>    <span class="hljs-string">'''创建一个姓名'''</span><br>    full_name = first + <span class="hljs-string">' '</span> + last<br>    <span class="hljs-keyword">return</span> full_name.title()<br></code></pre></td></tr></table></figure><h2 id="2、names-py-文件内容">2、<a href="http://names.py" target="_blank" rel="noopener">names.py</a> 文件内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">from</span> exam.name_function <span class="hljs-keyword">import</span> get_format_name<br><br>print(<span class="hljs-string">'请输入q在指定时间内退出。'</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    fist = input(<span class="hljs-string">'请输入你的姓：'</span>)<br>    <span class="hljs-keyword">if</span> fist == <span class="hljs-string">'q'</span>:<br>        <span class="hljs-keyword">break</span><br>    last = input(<span class="hljs-string">'请输入你的名：'</span>)<br>    <span class="hljs-keyword">if</span> last == <span class="hljs-string">'q'</span>:<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">from</span> exam.name_function <span class="hljs-keyword">import</span> get_format_name<br><br>print(<span class="hljs-string">'请输入q在指定时间内退出。'</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    fist = input(<span class="hljs-string">'请输入你的姓：'</span>)<br>    <span class="hljs-keyword">if</span> fist == <span class="hljs-string">'q'</span>:<br>        <span class="hljs-keyword">break</span><br>    last = input(<span class="hljs-string">'请输入你的名：'</span>)<br>    <span class="hljs-keyword">if</span> last == <span class="hljs-string">'q'</span>:<br>        <span class="hljs-keyword">break</span><br>    formatted_name = get_format_name(fist,last)<br>    print(formatted_name)<br></code></pre></td></tr></table></figure><h5 id="输出结果">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">请输入q在指定时间内退出。<br>请输入你的姓：x<br>请输入你的名：gp<br>X Gp<br></code></pre></td></tr></table></figure></blockquote><h1>3、编写测试案例代码</h1><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200617235518152.png" alt="image-20200617235518152"></p><h3 id="test-name-function-py-文件内容">test_name_function.py 文件内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> exam.name_function <span class="hljs-keyword">import</span> get_format_name<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameTestCase</span><span class="hljs-params">(unittest.TestCase)</span>:</span><br>    <span class="hljs-string">'''测试name_function.py'''</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_firt_last_name</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">'''能够正确处理某种格式的姓名'''</span><br>        formatted_name = get_format_name(<span class="hljs-string">'janis'</span>,<span class="hljs-string">'joplin'</span>)<br>        <span class="hljs-comment">#断言：期待的结果</span><br>        self.assertEqual(formatted_name,<span class="hljs-string">'janis Joplin'</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> exam.name_function <span class="hljs-keyword">import</span> get_format_name<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameTestCase</span><span class="hljs-params">(unittest.TestCase)</span>:</span><br>    <span class="hljs-string">'''测试name_function.py'''</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_firt_last_name</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">'''能够正确处理某种格式的姓名'''</span><br>        formatted_name = get_format_name(<span class="hljs-string">'janis'</span>,<span class="hljs-string">'joplin'</span>)<br>        <span class="hljs-comment">#断言：期待的结果</span><br>        self.assertEqual(formatted_name,<span class="hljs-string">'janis Joplin'</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><h5 id="输出结果-2">输出结果</h5><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617235503090.png" alt="image-20200617235503090"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;编写一个案例代码&lt;/h1&gt;
&lt;h2 id=&quot;1、name-function-py-文件内容&quot;&gt;1、name_function.py 文件内容&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="python" scheme="https://wsdlxgp.top/categories/python/"/>
    
    
      <category term="nfs" scheme="https://wsdlxgp.top/tags/nfs/"/>
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="pvc" scheme="https://wsdlxgp.top/tags/pvc/"/>
    
      <category term="dashboard" scheme="https://wsdlxgp.top/tags/dashboard/"/>
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="deployment" scheme="https://wsdlxgp.top/tags/deployment/"/>
    
      <category term="StorageClass" scheme="https://wsdlxgp.top/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>93 Python并发线程</title>
    <link href="https://wsdlxgp.top/posts/2b38.html"/>
    <id>https://wsdlxgp.top/posts/2b38.html</id>
    <published>2019-11-01T16:00:00.000Z</published>
    <updated>2020-06-18T12:46:57.791Z</updated>
    
    <content type="html"><![CDATA[<h1>开始学习Python线程</h1><p><strong>Python中使用线程有两种方式：函数或者用类来包装线程对象。</strong></p><p><strong>函数式：调用thread模块中的start_new_thread()函数来产生新线程。语法如下:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">thread.start_new_thread ( function, args[, kwargs] )<br></code></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><ul><li><strong>function - 线程函数。</strong></li><li><strong>args - 传递给线程函数的参数,他必须是个tuple类型。</strong></li><li><strong>kwargs - 可选参数。python</strong></li></ul><h2 id="简单的执行线程次数">简单的执行线程次数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding:utf-8</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hi</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-comment"># time.sleep(1)#延迟几秒</span><br>    print(<span class="hljs-string">'hello world!'</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>        <span class="hljs-comment"># 创建线程</span><br>        thread = threading.Thread(target=say_hi)<br>        <span class="hljs-comment"># 启动线程</span><br>        thread.start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># coding:utf-8</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hi</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-comment"># time.sleep(1)#延迟几秒</span><br>    print(<span class="hljs-string">'hello world!'</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>        <span class="hljs-comment"># 创建线程</span><br>        thread = threading.Thread(target=say_hi)<br>        <span class="hljs-comment"># 启动线程</span><br>        thread.start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    main()<br></code></pre></td></tr></table></figure><h5 id="输出结果">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">hello world!<br>hello world!<br>hello world!<br>hello world!<br>hello world!<br></code></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617232422565.png" alt="image-20200617232422565"></p><h2 id="1、单线程">1、单线程</h2><p><strong>在好些年前的MS-DOS时代，操作系统处理问题都是单任务的，我想做听音乐和看电影两件事儿，那么一定要先排一下顺序。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime,sleep<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">music</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        print(<span class="hljs-string">"I was listening to music. %s"</span> %ctime())<br>        sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        print(<span class="hljs-string">"I was at the movies! %s"</span> %ctime())<br>        sleep(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    music()<br>    move()<br>    print(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime,sleep<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">music</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        print(<span class="hljs-string">"I was listening to music. %s"</span> %ctime())<br>        sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        print(<span class="hljs-string">"I was at the movies! %s"</span> %ctime())<br>        sleep(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    music()<br>    move()<br>    print(<span class="hljs-string">"all over %s"</span> %ctime())<br></code></pre></td></tr></table></figure><p><strong>我们先听了一首音乐，通过for循环来控制音乐的播放了两次，每首音乐播放需要1秒钟，sleep()来控制音乐播放的时长。接着我们又看了一场电影，每一场电影需要5秒钟，因为太好看了，所以我也通过for循环看两遍。在整个休闲娱乐活动结束后，我通过<code>print(&quot;all over %s&quot; %ctime())</code>看了一下当前时间，差不多该睡觉了</strong></p><h5 id="输出结果-2">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs python">I was listening to music. Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">18</span> <span class="hljs-number">2020</span><br>I was listening to music. Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">19</span> <span class="hljs-number">2020</span><br>I was at the movies! Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">20</span> <span class="hljs-number">2020</span><br>I was at the movies! Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">25</span> <span class="hljs-number">2020</span><br>all over Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">30</span> <span class="hljs-number"><code class="language-hljs python">I was listening to music. Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">18</span> <span class="hljs-number">2020</span><br>I was listening to music. Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">19</span> <span class="hljs-number">2020</span><br>I was at the movies! Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">20</span> <span class="hljs-number">2020</span><br>I was at the movies! Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">25</span> <span class="hljs-number">2020</span><br>all over Wed Jun <span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span>:<span class="hljs-number">30</span> <span class="hljs-number">2020</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>其实，music()和move()更应该被看作是音乐和视频播放器，至于要播放什么歌曲和视频应该由我们使用时决定。所以，我们对上面代码做了改造：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime,sleep<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">music</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"I was listening to %s. %s"</span> %(func,ctime()))<br>        sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"I was at the %s! %s"</span> %(func,ctime()))<br>        sleep(<span class="hljs-number">5</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    music(<span class="hljs-string">u'爱情买卖'</span>)<br>    move(<span class="hljs-string">u'阿凡达'</span>)<br><br>    <span class="hljs-keyword">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime,sleep<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">music</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"I was listening to %s. %s"</span> %(func,ctime()))<br>        sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"I was at the %s! %s"</span> %(func,ctime()))<br>        sleep(<span class="hljs-number">5</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    music(<span class="hljs-string">u'爱情买卖'</span>)<br>    move(<span class="hljs-string">u'阿凡达'</span>)<br><br>    <span class="hljs-keyword">print</span> (<span class="hljs-string">"all over %s"</span> %ctime())<br></code></pre></td></tr></table></figure><h5 id="输出结果-3">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs python">I was listening to 爱情买卖. Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">48</span>:<span class="hljs-number">59</span> <span class="hljs-number">2014</span><br>I was listening to 爱情买卖. Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">00</span> <span class="hljs-number">2014</span><br>I was at the 阿凡达! Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">01</span> <span class="hljs-number">2014</span><br>I was at the 阿凡达! Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">06</span> <span class="hljs-number">2014</span><br>all over Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">11</span> <span class="hljs-number"><code class="language-hljs python">I was listening to 爱情买卖. Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">48</span>:<span class="hljs-number">59</span> <span class="hljs-number">2014</span><br>I was listening to 爱情买卖. Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">00</span> <span class="hljs-number">2014</span><br>I was at the 阿凡达! Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">01</span> <span class="hljs-number">2014</span><br>I was at the 阿凡达! Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">06</span> <span class="hljs-number">2014</span><br>all over Thu Apr <span class="hljs-number">17</span> <span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">11</span> <span class="hljs-number">2014</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="2、多线程">2、多线程</h2><p><strong>Python3 通过两个标准库 _thread (python2中是thread模块）和 threading 提供对线程的支持。</strong><br><strong>_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。</strong></p><h4 id="（1）使用-thread模块">（1）使用_thread模块</h4><p><strong>调用_thread模块中的start_new_thread()函数来产生新线程。</strong><br><strong>先用一个实例感受一下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> _thread<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-comment"># 为线程定义一个函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay)</span>:</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">5</span>:<br>        time.sleep(delay)<br>        count += <span class="hljs-number">1</span><br>        print(<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br><br><br><span class="hljs-comment"># 创建两个线程</span><br><span class="hljs-keyword">try</span>:<br>    _thread.start_new_thread(print_time, (<span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">2</span>,))<br>    _thread.start_new_thread(print_time, (<span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">4</span>,))<br><span class="hljs-keyword">except</span>:<br>    print(<span class="hljs-string">"Error: unable to start thread"</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">pass</span><br><br>print(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">import</span> _thread<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-comment"># 为线程定义一个函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay)</span>:</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">5</span>:<br>        time.sleep(delay)<br>        count += <span class="hljs-number">1</span><br>        print(<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br><br><br><span class="hljs-comment"># 创建两个线程</span><br><span class="hljs-keyword">try</span>:<br>    _thread.start_new_thread(print_time, (<span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">2</span>,))<br>    _thread.start_new_thread(print_time, (<span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">4</span>,))<br><span class="hljs-keyword">except</span>:<br>    print(<span class="hljs-string">"Error: unable to start thread"</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">pass</span><br><br>print(<span class="hljs-string">"Main Finished"</span>)<br></code></pre></td></tr></table></figure><h5 id="输出结果-4">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs python">Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">47</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">49</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">49</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">51</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">53</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">53</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">55</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">57</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">01</span> <span class="hljs-number"><code class="language-hljs python">Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">47</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">49</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">49</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">51</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">53</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">53</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">55</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span>:<span class="hljs-number">57</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">01</span> <span class="hljs-number">2017</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="注意到，在主线程写了"><strong>注意到，在主线程写了:</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>   <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>   <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p><strong>这是让主线程一直在等待.</strong><br><strong>如果去掉上面两行，那就直接输出并结束程序执行:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-string"><code class="language-hljs bash"><span class="hljs-string">"Main Finished"</span><br></code></pre></td></tr></table></figure><h1>线程模块</h1><p><strong>Python通过两个标准库thread和threading提供对线程的支持。thread提供了低级别的、原始的线程以及一个简单的锁。</strong></p><p><strong>threading 模块提供的其他方法：</strong></p><ul><li><strong>threading.currentThread(): 返回当前的线程变量。</strong></li><li><strong>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</strong></li><li><strong>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</strong></li></ul><p><strong>除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:</strong></p><ul><li><p><strong>run(): 用以表示线程活动的方法。</strong></p></li><li><p><strong>start():</strong></p><p><strong>启动线程活动。</strong></p></li><li><p><strong>join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</strong></p></li><li><p><strong>isAlive(): 返回线程是否活动的。</strong></p></li><li><p><strong>getName(): 返回线程名。</strong></p></li><li><p><strong>setName(): 设置线程名。</strong></p></li></ul><h2 id="1、直接创建线程">1、直接创建线程</h2><p><strong>接上面的听音乐和看电影的例子，我们可以直接使用threading.Thread 创建线程，并指定执行的方法以及传递的参数：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime,sleep<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">music</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"I was listening to %s. %s"</span> %(func,ctime()))<br>        sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"I was at the %s! %s"</span> %(func,ctime()))<br>        sleep(<span class="hljs-number">5</span>)<br><br>threads = []<br>t1 = threading.Thread(target=music,args=(<span class="hljs-string">u'爱情买卖'</span>,))<br>threads.append(t1)<br>t2 = threading.Thread(target=move,args=(<span class="hljs-string">u'阿凡达'</span>,))<br>threads.append(t2)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br><br>    <span class="hljs-keyword">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime,sleep<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">music</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"I was listening to %s. %s"</span> %(func,ctime()))<br>        sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"I was at the %s! %s"</span> %(func,ctime()))<br>        sleep(<span class="hljs-number">5</span>)<br><br>threads = []<br>t1 = threading.Thread(target=music,args=(<span class="hljs-string">u'爱情买卖'</span>,))<br>threads.append(t1)<br>t2 = threading.Thread(target=move,args=(<span class="hljs-string">u'阿凡达'</span>,))<br>threads.append(t2)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br><br>    <span class="hljs-keyword">print</span> (<span class="hljs-string">"all over %s"</span> %ctime())<br></code></pre></td></tr></table></figure><h5 id="输出结果-5">输出结果</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs css"><span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">listening</span> <span class="hljs-selector-tag">to</span> 爱情买卖. <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo">:12</span> 2017<br><span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">the</span> 阿凡达! <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo">:12</span> 2017<br><span class="hljs-selector-tag">all</span> <span class="hljs-selector-tag">over</span> <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo">:12</span> 2017<br><span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">listening</span> <span class="hljs-selector-tag">to</span> 爱情买卖. <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo">:13</span> 2017<br><span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">the</span> 阿凡达! <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo"><code class="language-hljs css"><span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">listening</span> <span class="hljs-selector-tag">to</span> 爱情买卖. <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo">:12</span> 2017<br><span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">the</span> 阿凡达! <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo">:12</span> 2017<br><span class="hljs-selector-tag">all</span> <span class="hljs-selector-tag">over</span> <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo">:12</span> 2017<br><span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">listening</span> <span class="hljs-selector-tag">to</span> 爱情买卖. <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo">:13</span> 2017<br><span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">the</span> 阿凡达! <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 16<span class="hljs-selector-pseudo">:57</span><span class="hljs-selector-pseudo">:17</span> 2017<br></code></pre></td></tr></table></figure><h2 id="2、使用Threading模块创建线程（构造线程类）">2、使用Threading模块创建线程（构造线程类）</h2><p><strong>我们也可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法</strong></p><p><strong>使用Threading模块创建线程，直接从<code>threading.Thread</code>继承，然后重写<code>init</code>方法和<code>run</code>方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>exitFlag = <span class="hljs-number">0</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, counter)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.counter = counter<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开始线程："</span> + self.name)<br>        print_time(self.name, self.counter, <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"退出线程："</span> + self.name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay, counter)</span>:</span><br>    <span class="hljs-keyword">while</span> counter:<br>        <span class="hljs-keyword">if</span> exitFlag:<br>            threadName.exit()<br>        time.sleep(delay)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br>        counter -= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 创建新线程</span><br>thread1 = myThread(<span class="hljs-number">1</span>, <span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">1</span>)<br>thread2 = myThread(<span class="hljs-number">2</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 开启新线程</span><br>thread1.start()<br>thread2.start()<br><span class="hljs-keyword">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>exitFlag = <span class="hljs-number">0</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, counter)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.counter = counter<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开始线程："</span> + self.name)<br>        print_time(self.name, self.counter, <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"退出线程："</span> + self.name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay, counter)</span>:</span><br>    <span class="hljs-keyword">while</span> counter:<br>        <span class="hljs-keyword">if</span> exitFlag:<br>            threadName.exit()<br>        time.sleep(delay)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br>        counter -= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 创建新线程</span><br>thread1 = myThread(<span class="hljs-number">1</span>, <span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">1</span>)<br>thread2 = myThread(<span class="hljs-number">2</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 开启新线程</span><br>thread1.start()<br>thread2.start()<br><span class="hljs-keyword">print</span> (<span class="hljs-string">"退出主线程"</span>)<br></code></pre></td></tr></table></figure><h5 id="输出结果-6">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs python">开始线程：Thread<span class="hljs-number">-1</span><br>开始线程：Thread<span class="hljs-number">-2</span><br>退出主线程<br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">41</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">42</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">42</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">43</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">44</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">44</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">45</span> <span class="hljs-number">2017</span><br>退出线程：Thread<span class="hljs-number">-1</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">46</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">48</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">50</span> <span class="hljs-number">2017</span><br>退出线程：Thread<span class="hljs-number"><code class="language-hljs python">开始线程：Thread<span class="hljs-number">-1</span><br>开始线程：Thread<span class="hljs-number">-2</span><br>退出主线程<br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">41</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">42</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">42</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">43</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">44</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">44</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">45</span> <span class="hljs-number">2017</span><br>退出线程：Thread<span class="hljs-number">-1</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">46</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">48</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">50</span> <span class="hljs-number">2017</span><br>退出线程：Thread<span class="hljs-number">-2</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>从结果可以看到，为什么我们开启了两个线程之后，主线程立即退出了？因为我们没有使用join方法，对于主线程来说，thread1和thread2是子线程，使用join方法，会让主线程等待子线程执行解说再继续执行。</strong></p><h3 id="join-方法">join()方法</h3><p><strong>我们修改一下代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>exitFlag = <span class="hljs-number">0</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, counter)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.counter = counter<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开始线程："</span> + self.name)<br>        print_time(self.name, self.counter, <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"退出线程："</span> + self.name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay, counter)</span>:</span><br>    <span class="hljs-keyword">while</span> counter:<br>        <span class="hljs-keyword">if</span> exitFlag:<br>            threadName.exit()<br>        time.sleep(delay)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br>        counter -= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 创建新线程</span><br>thread1 = myThread(<span class="hljs-number">1</span>, <span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">1</span>)<br>thread2 = myThread(<span class="hljs-number">2</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 开启新线程</span><br>thread1.start()<br>thread2.start()<br>thread1.join()<br>thread2.join()<br><span class="hljs-keyword">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>exitFlag = <span class="hljs-number">0</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, counter)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.counter = counter<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开始线程："</span> + self.name)<br>        print_time(self.name, self.counter, <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"退出线程："</span> + self.name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay, counter)</span>:</span><br>    <span class="hljs-keyword">while</span> counter:<br>        <span class="hljs-keyword">if</span> exitFlag:<br>            threadName.exit()<br>        time.sleep(delay)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br>        counter -= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 创建新线程</span><br>thread1 = myThread(<span class="hljs-number">1</span>, <span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">1</span>)<br>thread2 = myThread(<span class="hljs-number">2</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 开启新线程</span><br>thread1.start()<br>thread2.start()<br>thread1.join()<br>thread2.join()<br><span class="hljs-keyword">print</span> (<span class="hljs-string">"退出主线程"</span>)<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs python">开始线程：Thread<span class="hljs-number">-1</span><br>开始线程：Thread<span class="hljs-number">-2</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">07</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">08</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">08</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">09</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">10</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">10</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">11</span> <span class="hljs-number">2017</span><br>退出线程：Thread<span class="hljs-number">-1</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">12</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">14</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">16</span> <span class="hljs-number">2017</span><br>退出线程：Thread<span class="hljs-number"><code class="language-hljs python">开始线程：Thread<span class="hljs-number">-1</span><br>开始线程：Thread<span class="hljs-number">-2</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">07</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">08</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">08</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">09</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">10</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">10</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-1</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">11</span> <span class="hljs-number">2017</span><br>退出线程：Thread<span class="hljs-number">-1</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">12</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">14</span> <span class="hljs-number">2017</span><br>Thread<span class="hljs-number">-2</span>: Thu Aug <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span>:<span class="hljs-number">16</span> <span class="hljs-number">2017</span><br>退出线程：Thread<span class="hljs-number">-2</span><br>退出主线程<br></code></pre></td></tr></table></figure></blockquote><p><strong>可以看到 退出主线程 在最后才被打印出来。</strong></p><h3 id="setDaemon-方法">setDaemon()方法</h3><p><strong>有一个方法常常拿来与join方法做比较，那就是setDaemon()方法。我们首先来看一下setDaemon()方法的使用效果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>exitFlag = <span class="hljs-number">0</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, counter)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.counter = counter<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开始线程："</span> + self.name)<br>        print_time(self.name, self.counter, <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"退出线程："</span> + self.name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay, counter)</span>:</span><br>    <span class="hljs-keyword">while</span> counter:<br>        <span class="hljs-keyword">if</span> exitFlag:<br>            threadName.exit()<br>        time.sleep(delay)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br>        counter -= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 创建新线程</span><br>thread1 = myThread(<span class="hljs-number">1</span>, <span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">1</span>)<br>thread2 = myThread(<span class="hljs-number">2</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 开启新线程</span><br>thread1.setDaemon(<span class="hljs-literal">True</span>)<br>thread2.setDaemon(<span class="hljs-literal">True</span>)<br>thread1.start()<br>thread2.start()<br><br><span class="hljs-keyword">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>exitFlag = <span class="hljs-number">0</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, counter)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.counter = counter<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开始线程："</span> + self.name)<br>        print_time(self.name, self.counter, <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"退出线程："</span> + self.name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay, counter)</span>:</span><br>    <span class="hljs-keyword">while</span> counter:<br>        <span class="hljs-keyword">if</span> exitFlag:<br>            threadName.exit()<br>        time.sleep(delay)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br>        counter -= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 创建新线程</span><br>thread1 = myThread(<span class="hljs-number">1</span>, <span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">1</span>)<br>thread2 = myThread(<span class="hljs-number">2</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 开启新线程</span><br>thread1.setDaemon(<span class="hljs-literal">True</span>)<br>thread2.setDaemon(<span class="hljs-literal">True</span>)<br>thread1.start()<br>thread2.start()<br><br><span class="hljs-keyword">print</span> (<span class="hljs-string">"退出主线程"</span>)<br></code></pre></td></tr></table></figure><h5 id="输出结果-7">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs python">开始线程：Thread<span class="hljs-number">-1</span><br>开始线程：Thread<span class="hljs-number"><code class="language-hljs python">开始线程：Thread<span class="hljs-number">-1</span><br>开始线程：Thread<span class="hljs-number">-2</span><br>退出主线程<br></code></pre></td></tr></table></figure></blockquote><p><strong>可以看到，在主线程结束之后，程序就终止了，也就是说两个子线程也被终止了，这就是setDaemon方法的作用。主线程A中，创建了子线程B，并且在主线程A中调用了B.setDaemon(),这个的意思是，把主线程A设置为守护线程，这时候，要是主线程A执行结束了，就不管子线程B是否完成,一并和主线程A退出.这就是setDaemon方法的含义，这基本和join是相反的。此外，还有个要特别注意的：必须在start() 方法调用之前设置，如果不设置为守护线程，程序会被无限挂起。</strong></p><h2 id="3、两个疑问">3、两个疑问</h2><p><strong>我们刚才介绍了两种使用多线程的方式，一种是直接调用threading.Thread 创建线程，另一种是从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动进程。学到这里，我就抛出了两个疑问，为什么第一种方法中我们可以为不同的线程指定运行的方法，而第二种我们都运行的是同一个方法，那么它内部的实现机制是什么呢？第二个疑问是，第二种方法中，我们没有实例化start()方法，那么run和start这两个方法的联系是什么呢？</strong><br><strong>首先，start方法和run方法的关系如下：用start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体代码执行完毕而直接继续执行下面的代码。通过调用Thread类的start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里方法 run()称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。</strong></p><p><strong>而run()方法的源码如下，可以看到，如果我们指定了target即线程执行的函数的话，run方法可以转而调用那个函数，如果没有的话，将不执行，而我们在自定义的Thread类里面重写了这个run 方法，所以程序会执行这一段。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>    <span class="hljs-string">"""Method representing the thread's activity.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    You may override this method in a subclass. The standard run() method</span><br><span class="hljs-string">    invokes the callable object passed to the object's constructor as the</span><br><span class="hljs-string">    target argument, if any, with sequential and keyword arguments taken</span><br><span class="hljs-string">    from the args and kwargs arguments, respectively.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    """</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> self._target:<br>            self._target(*self._args, **self._kwargs)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># Avoid a refcycle if the thread is running a function with</span><br>        <span class="hljs-comment"># an argument that has a member that points to the thread.</span><br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>    <span class="hljs-string">"""Method representing the thread's activity.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    You may override this method in a subclass. The standard run() method</span><br><span class="hljs-string">    invokes the callable object passed to the object's constructor as the</span><br><span class="hljs-string">    target argument, if any, with sequential and keyword arguments taken</span><br><span class="hljs-string">    from the args and kwargs arguments, respectively.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    """</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> self._target:<br>            self._target(*self._args, **self._kwargs)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># Avoid a refcycle if the thread is running a function with</span><br>        <span class="hljs-comment"># an argument that has a member that points to the thread.</span><br>        <span class="hljs-keyword">del</span> self._target, self._args, self._kwargs<br></code></pre></td></tr></table></figure><h2 id="4、按时间为批次执行线程">4、按时间为批次执行线程</h2><p><strong>线程有不确定性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding:utf-8</span><br><br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hi</span><span class="hljs-params">(count, name)</span>:</span><br>    <span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">'hello'</span>, name)<br>        count -= <span class="hljs-number">1</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    username = [<span class="hljs-string">'Alan'</span>, <span class="hljs-string">'Bob'</span>, <span class="hljs-string">'Cendy'</span>, <span class="hljs-string">'Kily'</span>,<span class="hljs-string">'Heny'</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>        thread = threading.Thread(target=say_hi,args=(<span class="hljs-number">50</span>,username[i]))<br>        thread.start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># coding:utf-8</span><br><br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hi</span><span class="hljs-params">(count, name)</span>:</span><br>    <span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">'hello'</span>, name)<br>        count -= <span class="hljs-number">1</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    username = [<span class="hljs-string">'Alan'</span>, <span class="hljs-string">'Bob'</span>, <span class="hljs-string">'Cendy'</span>, <span class="hljs-string">'Kily'</span>,<span class="hljs-string">'Heny'</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>        thread = threading.Thread(target=say_hi,args=(<span class="hljs-number">50</span>,username[i]))<br>        thread.start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    main()<br></code></pre></td></tr></table></figure><h5 id="输出结果-8">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">hello Alan<br>hello Alan<br>hello Alan<br>hello Alan<br>hello hello Bob<br>hello Bob<br>hello Bob<br>hello Bob<br>hello Bob<br>Alanhello Cendy<br>hello Cendyhello Bob<br>hello<br>hello Alanhello Cendy<br></code></pre></td></tr></table></figure></blockquote><h2 id="5、继承的方法">5、继承的方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding:utf-8</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hi</span><span class="hljs-params">(count,name)</span>:</span><br>    <span class="hljs-comment"># time.sleep(1)#延迟几秒</span><br>    <span class="hljs-comment"># print('hello world!')</span><br>    <span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">'hello'</span>, name)<br>        count -= <span class="hljs-number">1</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    username = [<span class="hljs-string">'Alan'</span>,<span class="hljs-string">'Bob'</span>,<span class="hljs-string">'Cendy'</span>,<span class="hljs-string">'Kily'</span>,<span class="hljs-string">'Heny'</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>        <span class="hljs-comment"># thread = threading.Thread(target=say_hi,args=(10,username[i]))</span><br>        thread = MyThread(<span class="hljs-number">10</span>,username[i])<br>        thread.start()<br>    <span class="hljs-comment"># for i in range(5):</span><br>    <span class="hljs-comment">#     # 创建线程</span><br>    <span class="hljs-comment">#     thread = threading.Thread(target=say_hi)</span><br>    <span class="hljs-comment">#     # 启动线程</span><br>    <span class="hljs-comment">#     thread.start()</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, count, name)</span>:</span><br>        super().__init__()<br>        self.count = count<br>        self.name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">while</span> self.count &gt; <span class="hljs-number">0</span>:<br>            print(<span class="hljs-string">'hello'</span>, self.name)<br>            self.count -= <span class="hljs-number">1</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_main</span><span class="hljs-params">()</span>:</span><br>    username = [<span class="hljs-string">'Alan'</span>, <span class="hljs-string">'Bob'</span>, <span class="hljs-string">'Cendy'</span>, <span class="hljs-string">'Kily'</span>, <span class="hljs-string">'Heny'</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>        <span class="hljs-comment"># thread = threading.Thread(target=say_hi, args=(10, username[i]))</span><br>        thread = MyThread(<span class="hljs-number">10</span>,username[i])<br>        thread.start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># coding:utf-8</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hi</span><span class="hljs-params">(count,name)</span>:</span><br>    <span class="hljs-comment"># time.sleep(1)#延迟几秒</span><br>    <span class="hljs-comment"># print('hello world!')</span><br>    <span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">'hello'</span>, name)<br>        count -= <span class="hljs-number">1</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    username = [<span class="hljs-string">'Alan'</span>,<span class="hljs-string">'Bob'</span>,<span class="hljs-string">'Cendy'</span>,<span class="hljs-string">'Kily'</span>,<span class="hljs-string">'Heny'</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>        <span class="hljs-comment"># thread = threading.Thread(target=say_hi,args=(10,username[i]))</span><br>        thread = MyThread(<span class="hljs-number">10</span>,username[i])<br>        thread.start()<br>    <span class="hljs-comment"># for i in range(5):</span><br>    <span class="hljs-comment">#     # 创建线程</span><br>    <span class="hljs-comment">#     thread = threading.Thread(target=say_hi)</span><br>    <span class="hljs-comment">#     # 启动线程</span><br>    <span class="hljs-comment">#     thread.start()</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, count, name)</span>:</span><br>        super().__init__()<br>        self.count = count<br>        self.name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">while</span> self.count &gt; <span class="hljs-number">0</span>:<br>            print(<span class="hljs-string">'hello'</span>, self.name)<br>            self.count -= <span class="hljs-number">1</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_main</span><span class="hljs-params">()</span>:</span><br>    username = [<span class="hljs-string">'Alan'</span>, <span class="hljs-string">'Bob'</span>, <span class="hljs-string">'Cendy'</span>, <span class="hljs-string">'Kily'</span>, <span class="hljs-string">'Heny'</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>        <span class="hljs-comment"># thread = threading.Thread(target=say_hi, args=(10, username[i]))</span><br>        thread = MyThread(<span class="hljs-number">10</span>,username[i])<br>        thread.start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    run_main()<br></code></pre></td></tr></table></figure><h5 id="输出结果-9">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">hello Alan<br>hello Alan<br>hello Bob<br>hello Bob<br>hello Cendy<br>hello Cendy<br>hello Kily<br>hello Kily<br>hello Heny<br>hello Heny<br></code></pre></td></tr></table></figure></blockquote><h1>线程同步</h1><p><strong>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。</strong></p><p><strong>使用Thread对象的Lock和Rlock可以实现简单的线程同步，这两个对象都有acquire方法和release方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到acquire和release方法之间。如下：</strong></p><p><strong>多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。</strong></p><p><strong>考虑这样一种情况：一个列表里所有元素都是0，线程&quot;set&quot;从后向前把所有元素改成1，而线程&quot;print&quot;负责从前往后读取列表并打印。</strong></p><p><strong>那么，可能线程&quot;set&quot;开始改的时候，线程&quot;print&quot;便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。</strong></p><p><strong>锁有两种状态——锁定和未锁定。每当一个线程比如&quot;set&quot;要访问共享数据时，必须先获得锁定；如果已经有别的线程比如&quot;print&quot;获得锁定了，那么就让线程&quot;set&quot;暂停，也就是同步阻塞；等到线程&quot;print&quot;访问完毕，释放锁以后，再让线程&quot;set&quot;继续。</strong></p><p><strong>经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, counter)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.counter = counter<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开启线程： "</span> + self.name)<br>        <span class="hljs-comment"># 获取锁，用于线程同步</span><br>        threadLock.acquire()<br>        print_time(self.name, self.counter, <span class="hljs-number">3</span>)<br>        <span class="hljs-comment"># 释放锁，开启下一个线程</span><br>        threadLock.release()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay, counter)</span>:</span><br>    <span class="hljs-keyword">while</span> counter:<br>        time.sleep(delay)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br>        counter -= <span class="hljs-number">1</span><br><br>threadLock = threading.Lock()<br>threads = []<br><br><span class="hljs-comment"># 创建新线程</span><br>thread1 = myThread(<span class="hljs-number">1</span>, <span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">1</span>)<br>thread2 = myThread(<span class="hljs-number">2</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 开启新线程</span><br>thread1.start()<br>thread2.start()<br><br><span class="hljs-comment"># 添加线程到线程列表</span><br>threads.append(thread1)<br>threads.append(thread2)<br><br><span class="hljs-comment"># 等待所有线程完成</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.join()<br><span class="hljs-keyword">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, counter)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.counter = counter<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开启线程： "</span> + self.name)<br>        <span class="hljs-comment"># 获取锁，用于线程同步</span><br>        threadLock.acquire()<br>        print_time(self.name, self.counter, <span class="hljs-number">3</span>)<br>        <span class="hljs-comment"># 释放锁，开启下一个线程</span><br>        threadLock.release()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay, counter)</span>:</span><br>    <span class="hljs-keyword">while</span> counter:<br>        time.sleep(delay)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))<br>        counter -= <span class="hljs-number">1</span><br><br>threadLock = threading.Lock()<br>threads = []<br><br><span class="hljs-comment"># 创建新线程</span><br>thread1 = myThread(<span class="hljs-number">1</span>, <span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">1</span>)<br>thread2 = myThread(<span class="hljs-number">2</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 开启新线程</span><br>thread1.start()<br>thread2.start()<br><br><span class="hljs-comment"># 添加线程到线程列表</span><br>threads.append(thread1)<br>threads.append(thread2)<br><br><span class="hljs-comment"># 等待所有线程完成</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.join()<br><span class="hljs-keyword">print</span> (<span class="hljs-string">"退出主线程"</span>)<br></code></pre></td></tr></table></figure><h5 id="输出结果-10">输出结果</h5><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs css">开启线程： <span class="hljs-selector-tag">Thread-1</span><br>开启线程： <span class="hljs-selector-tag">Thread-2</span><br><span class="hljs-selector-tag">Thread-1</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:59</span> 2017<br><span class="hljs-selector-tag">Thread-1</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo">:00</span> 2017<br><span class="hljs-selector-tag">Thread-1</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo">:01</span> 2017<br><span class="hljs-selector-tag">Thread-2</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo">:03</span> 2017<br><span class="hljs-selector-tag">Thread-2</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo">:05</span> 2017<br><span class="hljs-selector-tag">Thread-2</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo"><code class="language-hljs css">开启线程： <span class="hljs-selector-tag">Thread-1</span><br>开启线程： <span class="hljs-selector-tag">Thread-2</span><br><span class="hljs-selector-tag">Thread-1</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:59</span> 2017<br><span class="hljs-selector-tag">Thread-1</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo">:00</span> 2017<br><span class="hljs-selector-tag">Thread-1</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo">:01</span> 2017<br><span class="hljs-selector-tag">Thread-2</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo">:03</span> 2017<br><span class="hljs-selector-tag">Thread-2</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo">:05</span> 2017<br><span class="hljs-selector-tag">Thread-2</span>: <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">Aug</span> 10 20<span class="hljs-selector-pseudo">:46</span><span class="hljs-selector-pseudo">:07</span> 2017<br>退出主线程<br></code></pre></td></tr></table></figure></blockquote><h1>线程优先级队列（ Queue）</h1><p><strong>Python的Queue模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列PriorityQueue。这些队列都实现了锁原语，能够在多线程中直接使用。可以使用队列来实现线程间的同步。</strong></p><h4 id="Queue模块中的常用方法">Queue模块中的常用方法:</h4><ul><li><strong>Queue.qsize() 返回队列的大小</strong></li><li><strong>Queue.empty() 如果队列为空，返回True,反之False</strong></li><li><strong>Queue.full() 如果队列满了，返回True,反之False</strong></li><li><strong>Queue.full 与 maxsize 大小对应</strong></li><li><strong>Queue.get([block[, timeout]])获取队列，timeout等待时间</strong></li><li><strong>Queue.get_nowait() 相当Queue.get(False)</strong></li><li><strong>Queue.put(item) 写入队列，timeout等待时间</strong></li><li><strong>Queue.put_nowait(item) 相当Queue.put(item, False)</strong></li><li><strong>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</strong></li><li><strong>Queue.join() 实际上意味着等到队列为空，再执行别的操作</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>exitFlag = <span class="hljs-number">0</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, q)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.q = q<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开启线程："</span> + self.name)<br>        process_data(self.name, self.q)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"退出线程："</span> + self.name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_data</span><span class="hljs-params">(threadName, q)</span>:</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> exitFlag:<br>        queueLock.acquire()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> workQueue.empty():<br>            data = q.get()<br>            queueLock.release()<br>            <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s processing %s"</span> % (threadName, data))<br>        <span class="hljs-keyword">else</span>:<br>            queueLock.release()<br>        time.sleep(<span class="hljs-number">1</span>)<br><br>threadList = [<span class="hljs-string">"Thread-1"</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-string">"Thread-3"</span>]<br>nameList = [<span class="hljs-string">"One"</span>, <span class="hljs-string">"Two"</span>, <span class="hljs-string">"Three"</span>, <span class="hljs-string">"Four"</span>, <span class="hljs-string">"Five"</span>]<br>queueLock = threading.Lock()<br>workQueue = queue.Queue(<span class="hljs-number">10</span>)<br>threads = []<br>threadID = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 创建新线程</span><br><span class="hljs-keyword">for</span> tName <span class="hljs-keyword">in</span> threadList:<br>    thread = myThread(threadID, tName, workQueue)<br>    thread.start()<br>    threads.append(thread)<br>    threadID += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 填充队列</span><br>queueLock.acquire()<br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> nameList:<br>    workQueue.put(word)<br>queueLock.release()<br><br><span class="hljs-comment"># 等待队列清空</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> workQueue.empty():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 通知线程是时候退出</span><br>exitFlag = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 等待所有线程完成</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.join()<br><span class="hljs-keyword">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>exitFlag = <span class="hljs-number">0</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, q)</span>:</span><br>        threading.Thread.__init__(self)<br>        self.threadID = threadID<br>        self.name = name<br>        self.q = q<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开启线程："</span> + self.name)<br>        process_data(self.name, self.q)<br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">"退出线程："</span> + self.name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_data</span><span class="hljs-params">(threadName, q)</span>:</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> exitFlag:<br>        queueLock.acquire()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> workQueue.empty():<br>            data = q.get()<br>            queueLock.release()<br>            <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s processing %s"</span> % (threadName, data))<br>        <span class="hljs-keyword">else</span>:<br>            queueLock.release()<br>        time.sleep(<span class="hljs-number">1</span>)<br><br>threadList = [<span class="hljs-string">"Thread-1"</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-string">"Thread-3"</span>]<br>nameList = [<span class="hljs-string">"One"</span>, <span class="hljs-string">"Two"</span>, <span class="hljs-string">"Three"</span>, <span class="hljs-string">"Four"</span>, <span class="hljs-string">"Five"</span>]<br>queueLock = threading.Lock()<br>workQueue = queue.Queue(<span class="hljs-number">10</span>)<br>threads = []<br>threadID = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 创建新线程</span><br><span class="hljs-keyword">for</span> tName <span class="hljs-keyword">in</span> threadList:<br>    thread = myThread(threadID, tName, workQueue)<br>    thread.start()<br>    threads.append(thread)<br>    threadID += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 填充队列</span><br>queueLock.acquire()<br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> nameList:<br>    workQueue.put(word)<br>queueLock.release()<br><br><span class="hljs-comment"># 等待队列清空</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> workQueue.empty():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 通知线程是时候退出</span><br>exitFlag = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 等待所有线程完成</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.join()<br><span class="hljs-keyword">print</span> (<span class="hljs-string">"退出主线程"</span>)<br></code></pre></td></tr></table></figure><p><strong>上面的代码每次执行的结果是不一样的，取决于哪个进程先获得锁，一次运行的输出如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs python">开启线程：Thread<span class="hljs-number">-1</span><br>开启线程：Thread<span class="hljs-number">-2</span><br>开启线程：Thread<span class="hljs-number">-3</span><br>Thread<span class="hljs-number">-2</span> processing One<br>Thread<span class="hljs-number">-3</span> processing Two<br>Thread<span class="hljs-number">-1</span> processing Three<br>Thread<span class="hljs-number">-3</span> processing Four<br>Thread<span class="hljs-number">-1</span> processing Five<br>退出线程：Thread<span class="hljs-number">-3</span><br>退出线程：Thread<span class="hljs-number">-2</span><br>退出线程：Thread<span class="hljs-number"><code class="language-hljs python">开启线程：Thread<span class="hljs-number">-1</span><br>开启线程：Thread<span class="hljs-number">-2</span><br>开启线程：Thread<span class="hljs-number">-3</span><br>Thread<span class="hljs-number">-2</span> processing One<br>Thread<span class="hljs-number">-3</span> processing Two<br>Thread<span class="hljs-number">-1</span> processing Three<br>Thread<span class="hljs-number">-3</span> processing Four<br>Thread<span class="hljs-number">-1</span> processing Five<br>退出线程：Thread<span class="hljs-number">-3</span><br>退出线程：Thread<span class="hljs-number">-2</span><br>退出线程：Thread<span class="hljs-number">-1</span><br>退出主线程<br></code></pre></td></tr></table></figure><h1>总结</h1><p><strong>如果你的代码是IO密集型的，线程和多进程可以帮到你。多进程比线程更易用，但是消耗更多的内存。如果你的代码是CPU密集型的，多进程就明显是更好的选择——特别是所使用的机器是多核或多CPU的。对于网络应用，在你需要扩展到多台机器上执行任务，RQ是更好的选择。</strong></p><h1>注：关于并发、并行区别与联系</h1><ul><li><strong>并发是指，程序在运行的过程中存在多于一个的执行上下文。这些执行上下文一般对应着不同的调用栈。</strong></li></ul><p><strong>在单处理器上，并发程序虽然有多个上下文运行环境，但某一个时刻只有一个任务在运行。</strong></p><p><strong>但在多处理器上，因为有了多个执行单元，就可以同时有数个任务在跑。</strong></p><ul><li><strong>这种物理上同一时刻有多个任务同时运行的方式就是并行。</strong></li></ul><p><strong>和并发相比，并行更加强调多个任务同时在运行。</strong></p><p><strong>而且并行还有一个层次问题，比如是指令间的并行还是任务间的并行。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;开始学习Python线程&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Python中使用线程有两种方式：函数或者用类来包装线程对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数式：调用thread模块中的start_new_thread()函数来产生新线程。语法如下:&lt;/s
      
    
    </summary>
    
    
      <category term="python" scheme="https://wsdlxgp.top/categories/python/"/>
    
    
      <category term="nfs" scheme="https://wsdlxgp.top/tags/nfs/"/>
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="pvc" scheme="https://wsdlxgp.top/tags/pvc/"/>
    
      <category term="dashboard" scheme="https://wsdlxgp.top/tags/dashboard/"/>
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="deployment" scheme="https://wsdlxgp.top/tags/deployment/"/>
    
      <category term="StorageClass" scheme="https://wsdlxgp.top/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>92 Python并发线程介绍</title>
    <link href="https://wsdlxgp.top/posts/f802.html"/>
    <id>https://wsdlxgp.top/posts/f802.html</id>
    <published>2019-10-31T16:00:00.000Z</published>
    <updated>2020-06-18T12:47:01.741Z</updated>
    
    <content type="html"><![CDATA[<h1>Python 多线程</h1><p><strong>多线程类似于同时执行多个不同程序，多线程运行有如下优点：</strong></p><ul><li><strong>使用线程可以把占据长时间的程序中的任务放到后台去处理。</strong></li><li><strong>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度</strong></li><li><strong>程序的运行速度可能加快</strong></li><li><strong>在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。</strong></li></ul><p><strong>线程在执行过程中与进程还是有区别的。每个独立的进程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</strong></p><p><strong>每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。</strong></p><p><strong>指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。</strong></p><ul><li><strong>线程可以被抢占（中断）。</strong></li><li><strong>在其他线程正在运行时，线程可以暂时搁置（也称为睡眠） – 这就是线程的退让。</strong></li></ul><h2 id="线程和进程">线程和进程</h2><p><strong>计算机，用于计算的机器。计算机的核心是CPU，在现在多核心的电脑很常见了。为了充分利用cpu核心做计算任务，程序实现了多线程模型。通过多线程实现多任务的并行执行。</strong></p><p><strong>现在的操作系统多是多任务操作系统。每个应用程序都有一个自己的进程。操作系统会为这些进程分配一些执行资源，例如内存空间等。在进程中，又可以创建一些线程，他们共享这些内存空间，并由操作系统调用，以便并行计算。</strong></p><h2 id="线程状态">线程状态</h2><p><strong>创建线程之后，线程并不是始终保持一个状态。其状态大概如下：</strong></p><ul><li><strong><code>New</code> 创建。</strong></li><li><strong><code>Runnable</code> 就绪。等待调度</strong></li><li><strong><code>Running</code> 运行。</strong></li><li><strong><code>Blocked</code> 阻塞。阻塞可能在 <code>Wait</code> <code>Locked</code> <code>Sleeping</code></strong></li><li><strong><code>Dead</code> 消亡</strong></li></ul><p><strong>这些状态之间是可以相互转换的，一图胜千颜色：</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617230746843.png" alt="image-20200617230746843"></p><p><strong>线程中执行到阻塞，可能有3种情况：</strong></p><blockquote><ul><li><strong>同步：线程中获取同步锁，但是资源已经被其他线程锁定时，进入Locked状态，直到该资源可获取（获取的顺序由Lock队列控制）</strong></li></ul></blockquote><blockquote><ul><li><strong>睡眠：线程运行sleep()或join()方法后，线程进入Sleeping状态。区别在于sleep等待固定的时间，而join是等待子线程执行完。当然join也可以指定一个“超时时间”。从语义上来说，如果两个线程a,b, 在a中调用b.join()，相当于合并(join)成一个线程。最常见的情况是在主线程中join所有的子线程。</strong></li></ul></blockquote><blockquote><ul><li><strong>等待：线程中执行wait()方法后，线程进入Waiting状态，等待其他线程的通知(notify）</strong>。</li></ul></blockquote><h2 id="线程类型">线程类型</h2><p><strong>线程有着不同的状态，也有不同的类型。大致可分为：</strong></p><ul><li><strong>主线程</strong></li><li><strong>子线程</strong></li><li><strong>守护线程（后台线程）</strong></li><li><strong>前台线程</strong></li></ul><h2 id="Python线程与GIL">Python线程与GIL</h2><p><strong>相比进程，线程更加轻量，可以实现并发。可是在python的世界里，对于线程，就不得不说一句GIL(全局解释器锁)。GIL的存在让python的多线程多少有点鸡肋了。Cpython的线程是操作系统原生的线程在解释器解释执行任何Python代码时，都需要先获得这把锁才行，在遇到 I/O 操作时会释放这把锁。因为python的进程做为一个整体，解释器进程内只有一个线程在执行，其它的线程都处于等待状态等着GIL的释放。</strong></p><p><strong>关于GIL可以有更多的趣事，一时半会都说不完。总之python想用多线程并发，效果可能还不如单线程（线程切换耗时间）。想要利用多核，可以考虑使用多进程。</strong></p><h2 id="线程和进程-2">线程和进程</h2><p><strong>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231007827.png" alt="image-20200617231007827"></p><p><strong>假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231015022.png" alt="image-20200617231015022"></p><p><strong>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231026133.png" alt="image-20200617231026133"></p><p><strong>一个车间里，可以有很多工人。他们协同完成一个任务。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231043032.png" alt="image-20200617231043032"></p><p><strong>线程就好比车间里的工人。一个进程可以包括多个线程。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231052605.png" alt="image-20200617231052605"></p><p><strong>车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231102445.png" alt="image-20200617231102445"></p><p><strong>可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231110670.png" alt="image-20200617231110670"></p><p><strong>一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫&quot;互斥锁&quot;（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231119981.png" alt="image-20200617231119981"></p><p><strong>还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231128469.png" alt="image-20200617231128469"></p><p><strong>这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做&quot;信号量&quot;（Semaphore），用来保证多个线程不会互相冲突。</strong><br><strong>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617231134847.png" alt="image-20200617231134847"></p><h2 id="多线程与多进程">多线程与多进程</h2><p><strong>从上面关于线程和进程的的通俗解释来看，多线程和多进程的含义如下：</strong><br><strong>多进程：允许多个任务同时进行</strong><br><strong>多线程：允许单个任务分成不同的部分运行</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Python 多线程&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;多线程类似于同时执行多个不同程序，多线程运行有如下优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用线程可以把占据长时间的程序中的任务放到后台去处理。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;str
      
    
    </summary>
    
    
      <category term="python" scheme="https://wsdlxgp.top/categories/python/"/>
    
    
      <category term="nfs" scheme="https://wsdlxgp.top/tags/nfs/"/>
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="pvc" scheme="https://wsdlxgp.top/tags/pvc/"/>
    
      <category term="dashboard" scheme="https://wsdlxgp.top/tags/dashboard/"/>
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="deployment" scheme="https://wsdlxgp.top/tags/deployment/"/>
    
      <category term="StorageClass" scheme="https://wsdlxgp.top/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>91 Python 操作 MySQL 写入读出 CSV 文件</title>
    <link href="https://wsdlxgp.top/posts/5bf9.html"/>
    <id>https://wsdlxgp.top/posts/5bf9.html</id>
    <published>2019-10-29T16:00:00.000Z</published>
    <updated>2020-06-18T12:47:06.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-Python-操作-MySQL-写入读出-CSV-文件">一.Python 操作 MySQL 写入读出 CSV 文件</h2><p><strong>有一个数据文件，是 csv 格式，大约 1T 数据，要导入到 MySQL，要求正确高效。</strong></p><p>csv 数据格式这个样子的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@python ~]<span class="hljs-comment"># cat data.csv</span><br>Symbol,Price,Date<br>AA, <span class="hljs-number">39.48</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>AIG, <span class="hljs-number">71.38</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>AXP, <span class="hljs-number">62.58</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>BA, <span class="hljs-number">98.31</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>C, <span class="hljs-number">53.08</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>CAT, <span class="hljs-number">78.29</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number"><code class="language-hljs python">[root@python ~]<span class="hljs-comment"># cat data.csv</span><br>Symbol,Price,Date<br>AA, <span class="hljs-number">39.48</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>AIG, <span class="hljs-number">71.38</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>AXP, <span class="hljs-number">62.58</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>BA, <span class="hljs-number">98.31</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>C, <span class="hljs-number">53.08</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br>CAT, <span class="hljs-number">78.29</span>, <span class="hljs-number">6</span>/<span class="hljs-number">11</span>/<span class="hljs-number">2007</span><br></code></pre></td></tr></table></figure><p><strong>正好最近要写再测试数据库的脚本，虽然两者不搭边，总归都是操作数据库的，正好测试的时候就用 python 连了</strong></p><p><strong>首先 Python 数据库接口支持很多数据库，什么关系型的像 mysql 啊、PG（PostgreSQL） 啊、SQL Server、Oracle，非关系型的像 MongoDB 啊，Redis 啊， Hbase 等等，</strong></p><p><strong>这里就以 MySQL 数据库为例，毕竟我要用的 MySQL 嘛，而且面试题也是，当然操作其他数据库道理也都一样，从一个 csv 文件中读入数据，插入到数据库中，再将数据库中的数据读出，保存到另一个 csv 文件。</strong></p><h2 id="介绍">介绍</h2><p><strong>主要定义两个对象，一个用于管理连接的 Connection（count） 了，另一个是用于执行查询的 Cursor （cur）对象。</strong></p><h2 id="Python-操作数据库的大致思路">Python 操作数据库的大致思路</h2><ul><li><strong>导入模块</strong></li><li><strong>连接数据库</strong></li><li><strong>执行查询返回结果</strong></li></ul><h2 id="步骤：">步骤：</h2><ul><li><strong>导入数据库模块 <code>import MySQLdb</code></strong></li><li><strong>连接数据库 <code>connect</code> ，返回一个 <code>conn</code> 对象</strong></li><li><strong>通过该对象的 <code>cursor()</code> 成员函数返回一个 <code>cur</code> 对象</strong></li><li><strong>通过 <code>cur</code> 对象的 <code>execute()</code> 方法执行 SQL 语句</strong></li><li><strong>关闭 <code>cur</code> 和 <code>conn</code>对象</strong></li></ul><h2 id="1、读文件">1、读文件</h2><p><strong>如何用Python像操作Excel一样提取其中的一列，即一个字段，利用Python自带的<a href="https://docs.python.org/2/library/csv.html" target="_blank" rel="noopener">csv模块</a>，有两种方法可以实现：</strong></p><p><strong>第一种方法使用reader函数，接收一个可迭代的对象（比如csv文件），能返回一个生成器，就可以从其中解析出csv的内容：比如下面的代码可以读取csv的全部内容，以行为单位：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br><br><span class="hljs-string">'''读取csv文件'''</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'data.csv'</span>) <span class="hljs-keyword">as</span> f:<br>    f_csv = csv.reader(f)<br>    <span class="hljs-comment"># 取出csv文件头：表头</span><br>    headers = next(f_csv)<br>    <span class="hljs-comment"># 遍历表头以外的所有行</span><br>    d = namedtuple(<span class="hljs-string">'Row'</span>, <span class="hljs-string">'headers'</span>)<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br><br><span class="hljs-string">'''读取csv文件'''</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'data.csv'</span>) <span class="hljs-keyword">as</span> f:<br>    f_csv = csv.reader(f)<br>    <span class="hljs-comment"># 取出csv文件头：表头</span><br>    headers = next(f_csv)<br>    <span class="hljs-comment"># 遍历表头以外的所有行</span><br>    d = namedtuple(<span class="hljs-string">'Row'</span>, <span class="hljs-string">'headers'</span>)<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> f_csv:<br>        row = d(r)<br>        print(row)<br></code></pre></td></tr></table></figure><h5 id="输出结果">输出结果</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs python">Row(headers=[<span class="hljs-string">'AA'</span>, <span class="hljs-string">' 39.48'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'AIG'</span>, <span class="hljs-string">' 71.38'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'AXP'</span>, <span class="hljs-string">' 62.58'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'BA'</span>, <span class="hljs-string">' 98.31'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'C'</span>, <span class="hljs-string">' 53.08'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'CAT'</span>, <span class="hljs-string">' 78.29'</span>, <span class="hljs-string"><code class="language-hljs python">Row(headers=[<span class="hljs-string">'AA'</span>, <span class="hljs-string">' 39.48'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'AIG'</span>, <span class="hljs-string">' 71.38'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'AXP'</span>, <span class="hljs-string">' 62.58'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'BA'</span>, <span class="hljs-string">' 98.31'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'C'</span>, <span class="hljs-string">' 53.08'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br>Row(headers=[<span class="hljs-string">'CAT'</span>, <span class="hljs-string">' 78.29'</span>, <span class="hljs-string">' 6/11/2007'</span>])<br></code></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>__author__ = <span class="hljs-string">'mayi'</span><br><br><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-comment">#读</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"data.csv"</span>, <span class="hljs-string">"r"</span>, encoding = <span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    rows = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>__author__ = <span class="hljs-string">'mayi'</span><br><br><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-comment">#读</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"data.csv"</span>, <span class="hljs-string">"r"</span>, encoding = <span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    rows = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]<br><br>print(rows)<br></code></pre></td></tr></table></figure><h5 id="输出结果-2">输出结果</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs python">[[<span class="hljs-string">'Symbol'</span>, <span class="hljs-string">'Price'</span>, <span class="hljs-string">'Date'</span>], <br> [<span class="hljs-string">'AA'</span>, <span class="hljs-string">' 39.48'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'AIG'</span>, <span class="hljs-string">' 71.38'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'AXP'</span>, <span class="hljs-string">' 62.58'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'BA'</span>, <span class="hljs-string">' 98.31'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'C'</span>, <span class="hljs-string">' 53.08'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'CAT'</span>, <span class="hljs-string">' 78.29'</span>, <span class="hljs-string"><code class="language-hljs python">[[<span class="hljs-string">'Symbol'</span>, <span class="hljs-string">'Price'</span>, <span class="hljs-string">'Date'</span>], <br> [<span class="hljs-string">'AA'</span>, <span class="hljs-string">' 39.48'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'AIG'</span>, <span class="hljs-string">' 71.38'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'AXP'</span>, <span class="hljs-string">' 62.58'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'BA'</span>, <span class="hljs-string">' 98.31'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'C'</span>, <span class="hljs-string">' 53.08'</span>, <span class="hljs-string">' 6/11/2007'</span>], <br> [<span class="hljs-string">'CAT'</span>, <span class="hljs-string">' 78.29'</span>, <span class="hljs-string">' 6/11/2007'</span>]]<br></code></pre></td></tr></table></figure><h3 id="要提取其中某一列，可以用下面的代码：">要提取其中某一列，可以用下面的代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>__author__ = <span class="hljs-string">'mayi'</span><br><br><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-comment">#读取第二列的内容</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"data.csv"</span>, <span class="hljs-string">"r"</span>, encoding = <span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    column = [row[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>__author__ = <span class="hljs-string">'mayi'</span><br><br><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-comment">#读取第二列的内容</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"data.csv"</span>, <span class="hljs-string">"r"</span>, encoding = <span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    column = [row[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]<br><br>print(column)<br></code></pre></td></tr></table></figure><h5 id="输出结果-3">输出结果</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python">[<span class="hljs-string">'Price'</span>, <span class="hljs-string">' 39.48'</span>, <span class="hljs-string">' 71.38'</span>, <span class="hljs-string">' 62.58'</span>, <span class="hljs-string">' 98.31'</span>, <span class="hljs-string">' 53.08'</span>, <span class="hljs-string"><code class="language-hljs python">[<span class="hljs-string">'Price'</span>, <span class="hljs-string">' 39.48'</span>, <span class="hljs-string">' 71.38'</span>, <span class="hljs-string">' 62.58'</span>, <span class="hljs-string">' 98.31'</span>, <span class="hljs-string">' 53.08'</span>, <span class="hljs-string">' 78.29'</span>]<br></code></pre></td></tr></table></figure><p><strong>注意从csv读出的都是str类型。这种方法要事先知道列的序号，比如Name在第2列，而不能根据’Name’这个标题查询。这时可以采用第二种方法：</strong></p><h2 id="2、第二种方法">2、第二种方法</h2><p><strong>是使用DictReader，和reader函数类似，接收一个可迭代的对象，能返回一个生成器，但是返回的每一个单元格都放在一个字典的值内，而这个字典的键则是这个单元格的标题（即列头）。用下面的代码可以看到DictReader的结构：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>__author__ = <span class="hljs-string">'mayi'</span><br><br><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-comment">#读</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"data.csv"</span>, <span class="hljs-string">"r"</span>, encoding = <span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> f:<br>    reader = csv.DictReader(f)<br>    column = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>__author__ = <span class="hljs-string">'mayi'</span><br><br><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-comment">#读</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"data.csv"</span>, <span class="hljs-string">"r"</span>, encoding = <span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> f:<br>    reader = csv.DictReader(f)<br>    column = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]<br><br>print(column)<br></code></pre></td></tr></table></figure><h5 id="输出结果-4">输出结果</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs python">[&#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'AA'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 39.48'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'AIG'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 71.38'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'AXP'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 62.58'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'BA'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 98.31'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'C'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 53.08'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'CAT'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 78.29'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string"><code class="language-hljs python">[&#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'AA'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 39.48'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'AIG'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 71.38'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'AXP'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 62.58'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'BA'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 98.31'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'C'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 53.08'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;, <br> &#123;<span class="hljs-string">'Symbol'</span>: <span class="hljs-string">'CAT'</span>, <span class="hljs-string">'Price'</span>: <span class="hljs-string">' 78.29'</span>, <span class="hljs-string">'Date'</span>: <span class="hljs-string">' 6/11/2007'</span>&#125;]<br></code></pre></td></tr></table></figure><h2 id="3、把-csv-中的数据读出来放到插入到-mysql-表">3、把 csv 中的数据读出来放到插入到 mysql 表</h2><p><strong>对于 mysql 数据库，需要安装第三方模块 Mysql-python 。安装完以后，在程序中导入模块即可。</strong></p><p><strong>库名：student_info</strong><br><strong>表名：data_csv</strong></p><p><strong>首先要导入 MySQLdb 模块先安装 MySQLdb</strong></p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">pip install MySQLdb<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> pymysql <span class="hljs-keyword">as</span> db<br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_conn</span><span class="hljs-params">(**kwargs)</span>:</span><br>    <span class="hljs-string">'''获取mysql数据库连接'''</span><br>    conn = db.connect(<br>        host=kwargs.get(<span class="hljs-string">'host'</span>),<br>        user=kwargs.get(<span class="hljs-string">'user'</span>),<br>        passwd=kwargs.get(<span class="hljs-string">'passwd'</span>),<br>        port=kwargs.get(<span class="hljs-string">'port'</span>, <span class="hljs-number">3306</span>),<br>        db=kwargs.get(<span class="hljs-string">'db'</span>))<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> conn<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">if</span> conn:<br>            conn.close()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span><span class="hljs-params">(filename)</span>:</span><br>    <span class="hljs-string">'''读取csv文件'''</span><br>    <span class="hljs-keyword">with</span> open(filename) <span class="hljs-keyword">as</span> f:<br>        f_csv = csv.reader(f)<br>        <span class="hljs-comment"># 取出csv文件头：表头</span><br>        headers = next(f_csv)<br>        <span class="hljs-comment"># 遍历表头以外的所有行</span><br>        Row = namedtuple(<span class="hljs-string">"Row"</span>, [<span class="hljs-string">'Symbol'</span>, <span class="hljs-string">'Price'</span>, <span class="hljs-string">'Date'</span>])<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> f_csv:<br>            <span class="hljs-keyword">yield</span> Row(*r)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">execute_sql</span><span class="hljs-params">(conn, sql)</span>:</span><br>    <span class="hljs-string">'''执行SQL的函数'''</span><br>    <span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>        cur.execute(sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_table</span><span class="hljs-params">(conn)</span>:</span><br>    <span class="hljs-string">'''创建新表'''</span><br>    sql_drop_table = <span class="hljs-string">'drop table if exists data_csv'</span><br>    sql_create_table = <span class="hljs-string">'''create table `data_csv`(</span><br><span class="hljs-string">    `Symbol` varchar (20) not null,</span><br><span class="hljs-string">    `Price` decimal not null,</span><br><span class="hljs-string">    `Date` varchar (20)  default null) engine=innodb default charset=utf8mb4</span><br><span class="hljs-string">    '''</span><br>    <span class="hljs-keyword">for</span> sql <span class="hljs-keyword">in</span> [sql_drop_table, sql_create_table]:<br>        execute_sql(conn, sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_data</span><span class="hljs-params">(conn, symbol, price, date)</span>:</span><br>    insert_format = <span class="hljs-string">"insert into data_csv values('&#123;0&#125;','&#123;1&#125;','&#123;2&#125;')"</span><br>    sql = insert_format.format(symbol, price, date)<br>    execute_sql(conn, sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    conn_args = dict(host=<span class="hljs-string">'127.0.0.1'</span>,<br>                     user=<span class="hljs-string">'root'</span>,<br>                     passwd=<span class="hljs-string">'123456'</span>,<br>                     port=<span class="hljs-number">3306</span>,<br>                     db=<span class="hljs-string">'student_info'</span>)<br><br>    <span class="hljs-keyword">with</span> get_conn(**conn_args) <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>            create_table(conn)<br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> get_data(<span class="hljs-string">'data.csv'</span>):<br>                insert_data(conn, t.Symbol, t.Price, t.Date)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> pymysql <span class="hljs-keyword">as</span> db<br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_conn</span><span class="hljs-params">(**kwargs)</span>:</span><br>    <span class="hljs-string">'''获取mysql数据库连接'''</span><br>    conn = db.connect(<br>        host=kwargs.get(<span class="hljs-string">'host'</span>),<br>        user=kwargs.get(<span class="hljs-string">'user'</span>),<br>        passwd=kwargs.get(<span class="hljs-string">'passwd'</span>),<br>        port=kwargs.get(<span class="hljs-string">'port'</span>, <span class="hljs-number">3306</span>),<br>        db=kwargs.get(<span class="hljs-string">'db'</span>))<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> conn<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">if</span> conn:<br>            conn.close()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span><span class="hljs-params">(filename)</span>:</span><br>    <span class="hljs-string">'''读取csv文件'''</span><br>    <span class="hljs-keyword">with</span> open(filename) <span class="hljs-keyword">as</span> f:<br>        f_csv = csv.reader(f)<br>        <span class="hljs-comment"># 取出csv文件头：表头</span><br>        headers = next(f_csv)<br>        <span class="hljs-comment"># 遍历表头以外的所有行</span><br>        Row = namedtuple(<span class="hljs-string">"Row"</span>, [<span class="hljs-string">'Symbol'</span>, <span class="hljs-string">'Price'</span>, <span class="hljs-string">'Date'</span>])<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> f_csv:<br>            <span class="hljs-keyword">yield</span> Row(*r)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">execute_sql</span><span class="hljs-params">(conn, sql)</span>:</span><br>    <span class="hljs-string">'''执行SQL的函数'''</span><br>    <span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>        cur.execute(sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_table</span><span class="hljs-params">(conn)</span>:</span><br>    <span class="hljs-string">'''创建新表'''</span><br>    sql_drop_table = <span class="hljs-string">'drop table if exists data_csv'</span><br>    sql_create_table = <span class="hljs-string">'''create table `data_csv`(</span><br><span class="hljs-string">    `Symbol` varchar (20) not null,</span><br><span class="hljs-string">    `Price` decimal not null,</span><br><span class="hljs-string">    `Date` varchar (20)  default null) engine=innodb default charset=utf8mb4</span><br><span class="hljs-string">    '''</span><br>    <span class="hljs-keyword">for</span> sql <span class="hljs-keyword">in</span> [sql_drop_table, sql_create_table]:<br>        execute_sql(conn, sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_data</span><span class="hljs-params">(conn, symbol, price, date)</span>:</span><br>    insert_format = <span class="hljs-string">"insert into data_csv values('&#123;0&#125;','&#123;1&#125;','&#123;2&#125;')"</span><br>    sql = insert_format.format(symbol, price, date)<br>    execute_sql(conn, sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    conn_args = dict(host=<span class="hljs-string">'127.0.0.1'</span>,<br>                     user=<span class="hljs-string">'root'</span>,<br>                     passwd=<span class="hljs-string">'123456'</span>,<br>                     port=<span class="hljs-number">3306</span>,<br>                     db=<span class="hljs-string">'student_info'</span>)<br><br>    <span class="hljs-keyword">with</span> get_conn(**conn_args) <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>            create_table(conn)<br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> get_data(<span class="hljs-string">'data.csv'</span>):<br>                insert_data(conn, t.Symbol, t.Price, t.Date)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    main()<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617221438084.png" alt="image-20200617221438084"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-Python-操作-MySQL-写入读出-CSV-文件&quot;&gt;一.Python 操作 MySQL 写入读出 CSV 文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;有一个数据文件，是 csv 格式，大约 1T 数据，要导入到 MySQL，要求正确高效。&lt;/strong&gt;&lt;/
      
    
    </summary>
    
    
      <category term="python" scheme="https://wsdlxgp.top/categories/python/"/>
    
    
      <category term="nfs" scheme="https://wsdlxgp.top/tags/nfs/"/>
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="pvc" scheme="https://wsdlxgp.top/tags/pvc/"/>
    
      <category term="dashboard" scheme="https://wsdlxgp.top/tags/dashboard/"/>
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="deployment" scheme="https://wsdlxgp.top/tags/deployment/"/>
    
      <category term="StorageClass" scheme="https://wsdlxgp.top/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>90 Python 操作 MySQL 数据库</title>
    <link href="https://wsdlxgp.top/posts/26aa.html"/>
    <id>https://wsdlxgp.top/posts/26aa.html</id>
    <published>2019-10-28T16:00:00.000Z</published>
    <updated>2020-06-18T12:47:12.120Z</updated>
    
    <content type="html"><![CDATA[<h1>Python 操作 MySQL 数据库</h1><p><strong>Python 标准数据库接口为 Python DB-API，Python DB-API为开发人员提供了数据库应用编程接口。</strong></p><p><strong>Python 数据库接口支持非常多的数据库，你可以选择适合你项目的数据库：</strong></p><ul><li><strong>GadFly</strong></li><li><strong>mSQL</strong></li><li><strong>MySQL</strong></li><li><strong>PostgreSQL</strong></li><li><strong>Microsoft SQL Server 2000</strong></li><li><strong>Informix</strong></li><li><strong>Interbase</strong></li><li><strong>Oracle</strong></li><li><strong>Sybase</strong></li></ul><p><strong>你可以访问<a href="https://wiki.python.org/moin/DatabaseInterfaces" target="_blank" rel="noopener">Python数据库接口及API</a>查看详细的支持数据库列表。</strong></p><p><strong>不同的数据库你需要下载不同的DB API模块，例如你需要访问Oracle数据库和Mysql数据，你需要下载Oracle和MySQL数据库模块。</strong></p><p><strong>DB-API 是一个规范. 它定义了一系列必须的对象和数据库存取方式, 以便为各种各样的底层数据库系统和多种多样的数据库接口程序提供一致的访问接口 。</strong></p><p><strong>Python的DB-API，为大多数的数据库实现了接口，使用它连接各数据库后，就可以用相同的方式操作各数据库。</strong></p><p><strong>Python DB-API使用流程：</strong></p><ul><li><strong>引入 API 模块。</strong></li><li><strong>获取与数据库的连接。</strong></li><li><strong>执行SQL语句和存储过程。</strong></li><li><strong>关闭数据库连接。</strong></li></ul><h2 id="1、什么是MySQLdb">1、什么是MySQLdb?</h2><p><strong>MySQLdb 是用于Python链接Mysql数据库的接口，它实现了 Python 数据库 API 规范 V2.0，基于 MySQL C API 上建立的。</strong></p><h2 id="2、如何安装MySQLdb">2、如何安装MySQLdb?</h2><p><strong>为了用DB-API编写MySQL脚本，必须确保已经安装了MySQL。复制以下代码，并执行：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br></code></pre></td></tr></table></figure><p><strong>如果执行后的输出结果如下所示，意味着你没有安装 MySQLdb 模块：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs python">Traceback (most recent call last):<br>  File <span class="hljs-string">"test.py"</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword"><code class="language-hljs python">Traceback (most recent call last):<br>  File <span class="hljs-string">"test.py"</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">import</span> MySQLdb<br>ImportError: No module named MySQLdb<br></code></pre></td></tr></table></figure><p><strong>安装MySQLdb，请访问 <a href="http://sourceforge.net/projects/mysql-python" target="_blank" rel="noopener">http://sourceforge.net/projects/mysql-python</a> ，(Linux平台可以访问：<a href="https://pypi.python.org/pypi/MySQL-python" target="_blank" rel="noopener">https://pypi.python.org/pypi/MySQL-python</a>)从这里可选择适合您的平台的安装包，分为预编译的二进制文件和源代码安装包。</strong></p><p><strong>如果您选择二进制文件发行版本的话，安装过程基本安装提示即可完成。如果从源代码进行安装的话，则需要切换到MySQLdb发行版本的顶级目录，并键入下列命令:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs python">$ gunzip MySQL-python<span class="hljs-number">-1.2</span><span class="hljs-number">.2</span>.tar.gz<br>$ tar -xvf MySQL-python<span class="hljs-number">-1.2</span><span class="hljs-number">.2</span>.tar<br>$ cd MySQL-python<span class="hljs-number">-1.2</span><span class="hljs-number"><code class="language-hljs python">$ gunzip MySQL-python<span class="hljs-number">-1.2</span><span class="hljs-number">.2</span>.tar.gz<br>$ tar -xvf MySQL-python<span class="hljs-number">-1.2</span><span class="hljs-number">.2</span>.tar<br>$ cd MySQL-python<span class="hljs-number">-1.2</span><span class="hljs-number">.2</span><br>$ python setup.py build<br>$ python setup.py install<br></code></pre></td></tr></table></figure><blockquote><p>**注意：**请确保您有root权限来安装上述模块。</p></blockquote><h2 id="3、数据库连接">3、数据库连接</h2><p><strong>连接数据库前，请先确认以下事项：</strong></p><ul><li><strong>您已经创建了数据库 TESTDB.</strong></li><li><strong>在TESTDB数据库中您已经创建了表 EMPLOYEE</strong></li><li><strong>EMPLOYEE表字段为 FIRST_NAME, LAST_NAME, AGE, SEX 和 INCOME。</strong></li><li><strong>连接数据库TESTDB使用的用户名为 “testuser” ，密码为 “test123”,你可以可以自己设定或者直接使用root用户名及其密码，Mysql数据库用户授权请使用Grant命令。</strong></li><li><strong>在你的机子上已经安装了 Python MySQLdb 模块。</strong></li><li><strong>如果您对sql语句不熟悉，可以访问我们的 <a href="https://www.runoob.com/sql/sql-tutorial.html" target="_blank" rel="noopener">SQL基础教程</a></strong></li></ul><h3 id="实例1：">实例1：</h3><p><strong>以下实例链接Mysql的student_info数据库：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标</span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># 使用execute方法执行SQL语句</span><br>cursor.execute(<span class="hljs-string">"SELECT VERSION()"</span>)<br><br><span class="hljs-comment"># 使用 fetchone() 方法获取一条数据</span><br>data = cursor.fetchone()<br><br>print(<span class="hljs-string">"Database version : %s"</span> % data)<br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标</span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># 使用execute方法执行SQL语句</span><br>cursor.execute(<span class="hljs-string">"SELECT VERSION()"</span>)<br><br><span class="hljs-comment"># 使用 fetchone() 方法获取一条数据</span><br>data = cursor.fetchone()<br><br>print(<span class="hljs-string">"Database version : %s"</span> % data)<br><br><span class="hljs-comment"># 关闭数据库连接</span><br>db.close()<br></code></pre></td></tr></table></figure><h5 id="执行以上脚本输出结果如下：">执行以上脚本输出结果如下：</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python">Database version : <span class="hljs-number">5.7</span><span class="hljs-number"><code class="language-hljs python">Database version : <span class="hljs-number">5.7</span><span class="hljs-number">.14</span>-log<br></code></pre></td></tr></table></figure></blockquote><h3 id="实例2：">实例2：</h3><p><strong>以下实例链接Mysql的student_info数据库并查看user表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># encoding=utf-8</span><br><span class="hljs-keyword">import</span> pymysql <span class="hljs-keyword">as</span> db<br><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_conn</span><span class="hljs-params">(**kwargs)</span>:</span><br>    <span class="hljs-string">'''获取mysql数据库连接'''</span><br>    conn = db.connect(<br>        host=kwargs.get(<span class="hljs-string">'host'</span>),<br>        user=kwargs.get(<span class="hljs-string">'user'</span>),<br>        passwd=kwargs.get(<span class="hljs-string">'passwd'</span>),<br>        port=kwargs.get(<span class="hljs-string">'port'</span>, <span class="hljs-number">3306</span>),<br>        db=kwargs.get(<span class="hljs-string">'db'</span>))<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> conn<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">if</span> conn:<br>            conn.close()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">execute_sql</span><span class="hljs-params">(conn, sql)</span>:</span><br>    <span class="hljs-string">'''执行SQL的函数'''</span><br>    <span class="hljs-comment"># cur = conn.cursor()</span><br>    <span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>        cur.execute(sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_table</span><span class="hljs-params">(conn)</span>:</span><br>    <span class="hljs-string">'''创建新表'''</span><br>    sql_drop_table = <span class="hljs-string">'drop table if exists student'</span><br>    sql_create_table = <span class="hljs-string">'''create table `student`(</span><br><span class="hljs-string">    `sno` int(11) not null,</span><br><span class="hljs-string">    `sname` varchar(25) default null,</span><br><span class="hljs-string">    `sage` int(11) default null,</span><br><span class="hljs-string">    primary key (`sno`)) engine=innodb default charset=utf8mb4</span><br><span class="hljs-string">    '''</span><br>    <span class="hljs-keyword">for</span> sql <span class="hljs-keyword">in</span> [sql_drop_table, sql_create_table]:<br>        execute_sql(conn, sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_data</span><span class="hljs-params">(conn, sno, sname, sage)</span>:</span><br>    insert_format = <span class="hljs-string">"insert into student values(&#123;0&#125;,'&#123;1&#125;',&#123;2&#125;)"</span><br>    sql = insert_format.format(sno, sname, sage)<br>    execute_sql(conn, sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    conn_args = dict(host=<span class="hljs-string">'127.0.0.1'</span>,<br>                     user=<span class="hljs-string">'root'</span>,<br>                     passwd=<span class="hljs-string">'123456'</span>,<br>                     port=<span class="hljs-number">3306</span>,<br>                     db=<span class="hljs-string">'student_info'</span>)<br><br>    <span class="hljs-keyword">with</span> get_conn(**conn_args) <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>            cur.execute(<span class="hljs-string">'select * from user'</span>)<br>            rows = cur.fetchall()<br>            <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:<br>                print(row)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># encoding=utf-8</span><br><span class="hljs-keyword">import</span> pymysql <span class="hljs-keyword">as</span> db<br><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_conn</span><span class="hljs-params">(**kwargs)</span>:</span><br>    <span class="hljs-string">'''获取mysql数据库连接'''</span><br>    conn = db.connect(<br>        host=kwargs.get(<span class="hljs-string">'host'</span>),<br>        user=kwargs.get(<span class="hljs-string">'user'</span>),<br>        passwd=kwargs.get(<span class="hljs-string">'passwd'</span>),<br>        port=kwargs.get(<span class="hljs-string">'port'</span>, <span class="hljs-number">3306</span>),<br>        db=kwargs.get(<span class="hljs-string">'db'</span>))<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> conn<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">if</span> conn:<br>            conn.close()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">execute_sql</span><span class="hljs-params">(conn, sql)</span>:</span><br>    <span class="hljs-string">'''执行SQL的函数'''</span><br>    <span class="hljs-comment"># cur = conn.cursor()</span><br>    <span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>        cur.execute(sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_table</span><span class="hljs-params">(conn)</span>:</span><br>    <span class="hljs-string">'''创建新表'''</span><br>    sql_drop_table = <span class="hljs-string">'drop table if exists student'</span><br>    sql_create_table = <span class="hljs-string">'''create table `student`(</span><br><span class="hljs-string">    `sno` int(11) not null,</span><br><span class="hljs-string">    `sname` varchar(25) default null,</span><br><span class="hljs-string">    `sage` int(11) default null,</span><br><span class="hljs-string">    primary key (`sno`)) engine=innodb default charset=utf8mb4</span><br><span class="hljs-string">    '''</span><br>    <span class="hljs-keyword">for</span> sql <span class="hljs-keyword">in</span> [sql_drop_table, sql_create_table]:<br>        execute_sql(conn, sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_data</span><span class="hljs-params">(conn, sno, sname, sage)</span>:</span><br>    insert_format = <span class="hljs-string">"insert into student values(&#123;0&#125;,'&#123;1&#125;',&#123;2&#125;)"</span><br>    sql = insert_format.format(sno, sname, sage)<br>    execute_sql(conn, sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    conn_args = dict(host=<span class="hljs-string">'127.0.0.1'</span>,<br>                     user=<span class="hljs-string">'root'</span>,<br>                     passwd=<span class="hljs-string">'123456'</span>,<br>                     port=<span class="hljs-number">3306</span>,<br>                     db=<span class="hljs-string">'student_info'</span>)<br><br>    <span class="hljs-keyword">with</span> get_conn(**conn_args) <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>            cur.execute(<span class="hljs-string">'select * from user'</span>)<br>            rows = cur.fetchall()<br>            <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:<br>                print(row)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    main()<br></code></pre></td></tr></table></figure><h5 id="执行以上脚本输出结果如下：-2">执行以上脚本输出结果如下：</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python">(<span class="hljs-number"><code class="language-hljs python">(<span class="hljs-number">111</span>,)<br></code></pre></td></tr></table></figure></blockquote><h2 id="4、创建数据库表">4、创建数据库表</h2><p><strong>如果数据库连接存在我们可以使用execute()方法来为数据库创建表，如下所示创建表EMPLOYEE：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># 如果数据表已经存在使用 execute() 方法删除表。</span><br>cursor.execute(<span class="hljs-string">"DROP TABLE IF EXISTS EMPLOYEE"</span>)<br><br><span class="hljs-comment"># 创建数据表SQL语句</span><br>sql = <span class="hljs-string">"""CREATE TABLE EMPLOYEE (</span><br><span class="hljs-string">         FIRST_NAME  CHAR(20) NOT NULL,</span><br><span class="hljs-string">         LAST_NAME  CHAR(20),</span><br><span class="hljs-string">         AGE INT,  </span><br><span class="hljs-string">         SEX CHAR(1),</span><br><span class="hljs-string">         INCOME FLOAT )"""</span><br><br>cursor.execute(sql)<br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># 如果数据表已经存在使用 execute() 方法删除表。</span><br>cursor.execute(<span class="hljs-string">"DROP TABLE IF EXISTS EMPLOYEE"</span>)<br><br><span class="hljs-comment"># 创建数据表SQL语句</span><br>sql = <span class="hljs-string">"""CREATE TABLE EMPLOYEE (</span><br><span class="hljs-string">         FIRST_NAME  CHAR(20) NOT NULL,</span><br><span class="hljs-string">         LAST_NAME  CHAR(20),</span><br><span class="hljs-string">         AGE INT,  </span><br><span class="hljs-string">         SEX CHAR(1),</span><br><span class="hljs-string">         INCOME FLOAT )"""</span><br><br>cursor.execute(sql)<br><br><span class="hljs-comment"># 关闭数据库连接</span><br>db.close()<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617213425719.png" alt="image-20200617213425719"></p><h2 id="5、数据库插入操作">5、数据库插入操作</h2><p><strong>以下实例使用执行 SQL INSERT 语句向表 EMPLOYEE 插入记录</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 插入语句</span><br>sql = <span class="hljs-string">"""INSERT INTO EMPLOYEE(FIRST_NAME,</span><br><span class="hljs-string">         LAST_NAME, AGE, SEX, INCOME)</span><br><span class="hljs-string">         VALUES ('Mac', 'Mohan', 20, 'M', 2000)"""</span><br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行sql语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 提交到数据库执行</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"># Rollback in case there is any error</span><br>   db.rollback()<br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 插入语句</span><br>sql = <span class="hljs-string">"""INSERT INTO EMPLOYEE(FIRST_NAME,</span><br><span class="hljs-string">         LAST_NAME, AGE, SEX, INCOME)</span><br><span class="hljs-string">         VALUES ('Mac', 'Mohan', 20, 'M', 2000)"""</span><br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行sql语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 提交到数据库执行</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"># Rollback in case there is any error</span><br>   db.rollback()<br><br><span class="hljs-comment"># 关闭数据库连接</span><br>db.close()<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617213609033.png" alt="image-20200617213609033"></p><h4 id="以上例子也可以写成如下形式：">以上例子也可以写成如下形式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 插入语句</span><br>sql = <span class="hljs-string">"INSERT INTO EMPLOYEE(FIRST_NAME, \</span><br><span class="hljs-string">       LAST_NAME, AGE, SEX, INCOME) \</span><br><span class="hljs-string">       VALUES (%s, %s, %s, %s, %s )"</span> % \<br>       (<span class="hljs-string">'Mac'</span>, <span class="hljs-string">'Mohan'</span>, <span class="hljs-number">20</span>, <span class="hljs-string">'M'</span>, <span class="hljs-number">2000</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行sql语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 提交到数据库执行</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"># 发生错误时回滚</span><br>   db.rollback()<br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 插入语句</span><br>sql = <span class="hljs-string">"INSERT INTO EMPLOYEE(FIRST_NAME, \</span><br><span class="hljs-string">       LAST_NAME, AGE, SEX, INCOME) \</span><br><span class="hljs-string">       VALUES (%s, %s, %s, %s, %s )"</span> % \<br>       (<span class="hljs-string">'Mac'</span>, <span class="hljs-string">'Mohan'</span>, <span class="hljs-number">20</span>, <span class="hljs-string">'M'</span>, <span class="hljs-number">2000</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行sql语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 提交到数据库执行</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"># 发生错误时回滚</span><br>   db.rollback()<br><br><span class="hljs-comment"># 关闭数据库连接</span><br>db.close()<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617213609033.png" alt="image-20200617213609033"></p><h2 id="6、数据库查询操作">6、数据库查询操作</h2><p><strong>Python查询Mysql使用 fetchone() 方法获取单条数据, 使用fetchall() 方法获取多条数据。</strong></p><ul><li><strong><code>fetchone():</code> 该方法获取下一个查询结果集。结果集是一个对象</strong></li><li><strong><code>fetchall():</code>接收全部的返回结果行.</strong></li><li><strong><code>rowcount:</code> 这是一个只读属性，并返回执行execute()方法后影响的行数。</strong></li></ul><h3 id="实例：">实例：</h3><p><strong>查询EMPLOYEE表中salary（工资）字段大于1000的所有数据：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标</span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 查询语句</span><br>sql = <span class="hljs-string">"SELECT * FROM EMPLOYEE \</span><br><span class="hljs-string">       WHERE INCOME &gt; %s"</span> % (<span class="hljs-number">1000</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行SQL语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 获取所有记录列表</span><br>   results = cursor.fetchall()<br>   <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> results:<br>      fname = row[<span class="hljs-number">0</span>]<br>      lname = row[<span class="hljs-number">1</span>]<br>      age = row[<span class="hljs-number">2</span>]<br>      sex = row[<span class="hljs-number">3</span>]<br>      income = row[<span class="hljs-number">4</span>]<br>      <span class="hljs-comment"># 打印结果</span><br>      print(<span class="hljs-string">"fname=%s,lname=%s,age=%s,sex=%s,income=%s"</span> % \<br>             (fname, lname, age, sex, income ))<br><span class="hljs-keyword">except</span>:<br>   print(<span class="hljs-string">"Error: unable to fecth data"</span>)<br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标</span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 查询语句</span><br>sql = <span class="hljs-string">"SELECT * FROM EMPLOYEE \</span><br><span class="hljs-string">       WHERE INCOME &gt; %s"</span> % (<span class="hljs-number">1000</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行SQL语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 获取所有记录列表</span><br>   results = cursor.fetchall()<br>   <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> results:<br>      fname = row[<span class="hljs-number">0</span>]<br>      lname = row[<span class="hljs-number">1</span>]<br>      age = row[<span class="hljs-number">2</span>]<br>      sex = row[<span class="hljs-number">3</span>]<br>      income = row[<span class="hljs-number">4</span>]<br>      <span class="hljs-comment"># 打印结果</span><br>      print(<span class="hljs-string">"fname=%s,lname=%s,age=%s,sex=%s,income=%s"</span> % \<br>             (fname, lname, age, sex, income ))<br><span class="hljs-keyword">except</span>:<br>   print(<span class="hljs-string">"Error: unable to fecth data"</span>)<br><br><span class="hljs-comment"># 关闭数据库连接</span><br>db.close()<br></code></pre></td></tr></table></figure><h5 id="以上脚本执行结果如下：">以上脚本执行结果如下：</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python">fname=Mac,lname=Mohan,age=<span class="hljs-number">20</span>,sex=M,income=<span class="hljs-number"><code class="language-hljs python">fname=Mac,lname=Mohan,age=<span class="hljs-number">20</span>,sex=M,income=<span class="hljs-number">2000.0</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="7、数据库更新操作">7、数据库更新操作</h2><p><strong>更新操作用于更新数据表的的数据，以下实例将 EMPLOYEE 表中的 SEX 字段为 ‘M’ 的 AGE 字段递增 1：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 更新语句</span><br>sql = <span class="hljs-string">"UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = '%c'"</span> % (<span class="hljs-string">'M'</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行SQL语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 提交到数据库执行</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"># 发生错误时回滚</span><br>   db.rollback()<br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 更新语句</span><br>sql = <span class="hljs-string">"UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = '%c'"</span> % (<span class="hljs-string">'M'</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行SQL语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 提交到数据库执行</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"># 发生错误时回滚</span><br>   db.rollback()<br><br><span class="hljs-comment"># 关闭数据库连接</span><br>db.close()<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617214133953.png" alt="image-20200617214133953"></p><h2 id="8、删除操作">8、删除操作</h2><p><strong>删除操作用于删除数据表中的数据，以下实例演示了删除数据表 EMPLOYEE 中 AGE 大于 20 的所有数据：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 删除语句</span><br>sql = <span class="hljs-string">"DELETE FROM EMPLOYEE WHERE AGE &gt; %s"</span> % (<span class="hljs-number">20</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行SQL语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 提交修改</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"># 发生错误时回滚</span><br>   db.rollback()<br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-comment"># 打开数据库连接</span><br>db = MySQLdb.connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123456"</span>, <span class="hljs-string">"student_info"</span>, charset=<span class="hljs-string">'utf8'</span> )<br><span class="hljs-comment">#db = MySQLdb.connect("ip地址", "用户", "密码", "数据库", charset='utf8' )</span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标 </span><br>cursor = db.cursor()<br><br><span class="hljs-comment"># SQL 删除语句</span><br>sql = <span class="hljs-string">"DELETE FROM EMPLOYEE WHERE AGE &gt; %s"</span> % (<span class="hljs-number">20</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行SQL语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 提交修改</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"># 发生错误时回滚</span><br>   db.rollback()<br><br><span class="hljs-comment"># 关闭连接</span><br>db.close()<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200617214249962.png" alt="image-20200617214249962"></p><h2 id="9、执行事务">9、执行事务</h2><p><strong>事务机制可以确保数据一致性。</strong></p><p><strong>事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</strong></p><ul><li><strong>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</strong></li><li><strong>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</strong></li><li><strong>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</strong></li><li><strong>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</strong></li></ul><p><strong>Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。</strong></p><h3 id="实例：-2">实例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># SQL删除记录语句</span><br>sql = <span class="hljs-string">"DELETE FROM EMPLOYEE WHERE AGE &gt; %s"</span> % (<span class="hljs-number">20</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行SQL语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 向数据库提交</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment"># SQL删除记录语句</span><br>sql = <span class="hljs-string">"DELETE FROM EMPLOYEE WHERE AGE &gt; %s"</span> % (<span class="hljs-number">20</span>)<br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-comment"># 执行SQL语句</span><br>   cursor.execute(sql)<br>   <span class="hljs-comment"># 向数据库提交</span><br>   db.commit()<br><span class="hljs-keyword">except</span>:<br>   <span class="hljs-comment"># 发生错误时回滚</span><br>   db.rollback()<br></code></pre></td></tr></table></figure><p><strong>对于支持事务的数据库， 在Python数据库编程中，当游标建立之时，就自动开始了一个隐形的数据库事务。</strong></p><p><strong>commit()方法游标的所有更新操作，rollback（）方法回滚当前游标的所有操作。每一个方法都开始了一个新的事务。</strong></p><h2 id="10、错误处理">10、错误处理</h2><p><strong>DB API中定义了一些数据库操作的错误及异常，下表列出了这些错误和异常:</strong></p><table><thead><tr><th style="text-align:left">异常</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Warning</td><td style="text-align:left">当有严重警告时触发，例如插入数据是被截断等等。必须是 StandardError 的子类。</td></tr><tr><td style="text-align:left">Error</td><td style="text-align:left">警告以外所有其他错误类。必须是 StandardError 的子类。</td></tr><tr><td style="text-align:left">InterfaceError</td><td style="text-align:left">当有数据库接口模块本身的错误（而不是数据库的错误）发生时触发。 必须是Error的子类。</td></tr><tr><td style="text-align:left">DatabaseError</td><td style="text-align:left">和数据库有关的错误发生时触发。 必须是Error的子类。</td></tr><tr><td style="text-align:left">DataError</td><td style="text-align:left">当有数据处理时的错误发生时触发，例如：除零错误，数据超范围等等。 必须是DatabaseError的子类。</td></tr><tr><td style="text-align:left">OperationalError</td><td style="text-align:left">指非用户控制的，而是操作数据库时发生的错误。例如：连接意外断开、 数据库名未找到、事务处理失败、内存分配错误等等操作数据库是发生的错误。 必须是DatabaseError的子类。</td></tr><tr><td style="text-align:left">IntegrityError</td><td style="text-align:left">完整性相关的错误，例如外键检查失败等。必须是DatabaseError子类。</td></tr><tr><td style="text-align:left">InternalError</td><td style="text-align:left">数据库的内部错误，例如游标（cursor）失效了、事务同步失败等等。 必须是DatabaseError子类。</td></tr><tr><td style="text-align:left">ProgrammingError</td><td style="text-align:left">程序错误，例如数据表（table）没找到或已存在、SQL语句语法错误、 参数数量错误等等。必须是DatabaseError的子类。</td></tr><tr><td style="text-align:left">NotSupportedError</td><td style="text-align:left">不支持错误，指使用了数据库不支持的函数或API等。例如在连接对象上 使用.rollback()函数，然而数据库并不支持事务或者事务已关闭。 必须是DatabaseError的子类。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Python 操作 MySQL 数据库&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Python 标准数据库接口为 Python DB-API，Python DB-API为开发人员提供了数据库应用编程接口。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python 数据库接口支持
      
    
    </summary>
    
    
      <category term="python" scheme="https://wsdlxgp.top/categories/python/"/>
    
    
      <category term="nfs" scheme="https://wsdlxgp.top/tags/nfs/"/>
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="pvc" scheme="https://wsdlxgp.top/tags/pvc/"/>
    
      <category term="dashboard" scheme="https://wsdlxgp.top/tags/dashboard/"/>
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="deployment" scheme="https://wsdlxgp.top/tags/deployment/"/>
    
      <category term="StorageClass" scheme="https://wsdlxgp.top/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>89 Python 中的上下文管理器</title>
    <link href="https://wsdlxgp.top/posts/7aea.html"/>
    <id>https://wsdlxgp.top/posts/7aea.html</id>
    <published>2019-10-27T16:00:00.000Z</published>
    <updated>2020-06-18T12:47:18.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-with语句上下文管理的两种实现方法">python with语句上下文管理的两种实现方法</h2><p><strong>在编程中会经常碰到这种情况：有一个特殊的语句块，在执行这个语句块之前需要先执行一些准备动作；当语句块执行完成后，需要继续执行一些收尾动作。例如，文件读写后需要关闭，数据库读写完毕需要关闭连接，资源的加锁和解锁等情况。</strong><br><strong>对于这种情况python提供了上下文管理器（Context Manager）的概念，可以通过上下文管理器来定义/控制代码块执行前的准备动作，以及执行后的收尾动作。</strong></p><h3 id="上下文管理器">上下文管理器</h3><p><strong>with语句:可以确保某些事情(如关闭资源、释放锁)一定会发生。</strong></p><p><strong>先创建一个<code>t.txt</code>文件，里面随便写点东西</strong></p><p><strong>然后编写代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">try</span>:<br>    f = open(<span class="hljs-string">'t.txt'</span>)<br>    print(f.read())<br><span class="hljs-keyword">finally</span>:<br>    f.close()<br><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'t.txt'</span>) <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">try</span>:<br>    f = open(<span class="hljs-string">'t.txt'</span>)<br>    print(f.read())<br><span class="hljs-keyword">finally</span>:<br>    f.close()<br><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'t.txt'</span>) <span class="hljs-keyword">as</span> f:<br>    print(f.read())<br></code></pre></td></tr></table></figure><h5 id="输出结果">输出结果</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">fewfwefwewef<br>fewfwefwewef<br></code></pre></td></tr></table></figure><h1>一、为何使用上下文管理器</h1><p><strong>在我看来，这和 Python 崇尚的优雅风格有关。</strong></p><ol><li><strong>可以以一种更加优雅的方式，操作（创建/获取/释放）资源，如文件操作、数据库连接；</strong></li><li><strong>可以以一种更加优雅的方式，处理异常；</strong></li></ol><p><strong>第一种，我们上面已经以资源的连接为例讲过了。</strong></p><p><strong>而第二种，会被大多数人所忽略。这里会重点讲一下。</strong></p><p><strong>大家都知道，处理异常，通常都是使用 <code>try...execept..</code> 来捕获处理的。这样做一个不好的地方是，在代码的主逻辑里，会有大量的异常处理代理，这会很大的影响我们的可读性。</strong></p><p><strong>好一点的做法呢，可以使用 <code>with</code> 将异常的处理隐藏起来。</strong></p><h2 id="1、不使用上下文管理器的情况">1、不使用上下文管理器的情况</h2><p><strong>通过try…finally语句执行异常处理和关闭句柄的动作。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs python">logger = open(<span class="hljs-string">"t.txt"</span>, <span class="hljs-string">"w"</span>)<br><span class="hljs-keyword">try</span>:<br>    logger.write(<span class="hljs-string">'Hello '</span>)<br>    logger.write(<span class="hljs-string">'World'</span>)<br><span class="hljs-keyword"><code class="language-hljs python">logger = open(<span class="hljs-string">"t.txt"</span>, <span class="hljs-string">"w"</span>)<br><span class="hljs-keyword">try</span>:<br>    logger.write(<span class="hljs-string">'Hello '</span>)<br>    logger.write(<span class="hljs-string">'World'</span>)<br><span class="hljs-keyword">finally</span>:<br>    logger.close()<br><br>print(logger.closed)<br></code></pre></td></tr></table></figure><h2 id="2、使用上下文管理器">2、使用上下文管理器</h2><p><strong>默认文件Python的内置file类型是支持上下文管理协议的。</strong><br><strong>使用上下文管理器with使得依据精简了很多。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs PYTHON"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"t.txt"</span>, <span class="hljs-string">"w"</span>) <span class="hljs-keyword">as</span> logger:<br>    logger.write(<span class="hljs-string">'Hello '</span>)<br>    logger.write(<span class="hljs-string"><code class="language-hljs PYTHON"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"t.txt"</span>, <span class="hljs-string">"w"</span>) <span class="hljs-keyword">as</span> logger:<br>    logger.write(<span class="hljs-string">'Hello '</span>)<br>    logger.write(<span class="hljs-string">'World'</span>)<br><br>print(logger.closed)<br></code></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> codecs<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Open</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, filename, mode, encoding=<span class="hljs-string">'utf-8'</span>)</span>:</span><br>        self.fp = codecs.open(filename, mode, encoding)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.fp<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exc_type, exc_val, exc_tb)</span>:</span><br>        self.fp.close()<br><br><br>data = <span class="hljs-string">u'Hello World'</span><br><span class="hljs-keyword">with</span> Open(<span class="hljs-string">'t.txt'</span>,<span class="hljs-string">'w'</span>) <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> codecs<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Open</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, filename, mode, encoding=<span class="hljs-string">'utf-8'</span>)</span>:</span><br>        self.fp = codecs.open(filename, mode, encoding)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.fp<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exc_type, exc_val, exc_tb)</span>:</span><br>        self.fp.close()<br><br><br>data = <span class="hljs-string">u'Hello World'</span><br><span class="hljs-keyword">with</span> Open(<span class="hljs-string">'t.txt'</span>,<span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data)<br></code></pre></td></tr></table></figure><p><strong>以上三种方法都会在<code>t.txt</code>中写入<code>Hello World</code>数据。</strong></p><h1>二、实现上下文管理器</h1><h3 id="实现上下文管理器有两种方式实现。">实现上下文管理器有两种方式实现。</h3><ul><li><strong>方法一：类实现enter和exit方法。</strong></li><li><strong>方法二：contextlib模块装饰器和生成器实现。</strong></li></ul><p><strong>下面我们通过两种方法分别实现一个自定义的上下文管理器。</strong></p><h2 id="1、方法一：通过类实现-enter-和-exit-方法">1、方法一：通过类实现__enter__和__exit__方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, file_name, method)</span>:</span><br>        self.file_obj = open(file_name, method)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.file_obj<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, type, value, traceback)</span>:</span><br>        self.file_obj.close()<br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> opened_file:<br>    opened_file.write(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, file_name, method)</span>:</span><br>        self.file_obj = open(file_name, method)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.file_obj<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, type, value, traceback)</span>:</span><br>        self.file_obj.close()<br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> opened_file:<br>    opened_file.write(<span class="hljs-string">'Hola!'</span>)<br></code></pre></td></tr></table></figure><p><strong>以上这种方法会在<code>t.txt</code>中写入<code>Hola!</code>数据。</strong></p><p><strong>实现<code>__enter__</code>和<code>__exit__</code>方法后，就能通过with语句进行上下文管理。</strong></p><h3 id="a、底层都发生了什么？">a、底层都发生了什么？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-number">1</span>、<span class="hljs-keyword">with</span>语句先暂存了File类的__exit__方法，然后它调用File类的__enter__方法。<br><span class="hljs-number">2</span>、__enter__方法打开文件并返回给<span class="hljs-keyword">with</span>语句，打开的文件句柄被传递给opened_file参数。<br><span class="hljs-number">3</span>、<span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-number">1</span>、<span class="hljs-keyword">with</span>语句先暂存了File类的__exit__方法，然后它调用File类的__enter__方法。<br><span class="hljs-number">2</span>、__enter__方法打开文件并返回给<span class="hljs-keyword">with</span>语句，打开的文件句柄被传递给opened_file参数。<br><span class="hljs-number">3</span>、<span class="hljs-keyword">with</span>语句调用之前暂存的__exit__方法，__exit__方法关闭了文件。<br></code></pre></td></tr></table></figure><h3 id="b、异常处理">b、异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs python">关于异常处理，<span class="hljs-keyword">with</span>语句会采取哪些步骤。<br><span class="hljs-number">1.</span> 它把异常的type,value和traceback传递给__exit__方法<br><span class="hljs-number">2.</span> 它让__exit__方法来处理异常 <br><span class="hljs-number">3.</span> 如果__exit__返回的是<span class="hljs-literal">True</span>，那么这个异常就被忽略。<br><span class="hljs-number">4.</span> 如果__exit__返回的是<span class="hljs-literal">True</span>以外的任何东西，那么这个异常将被<span class="hljs-keyword"><code class="language-hljs python">关于异常处理，<span class="hljs-keyword">with</span>语句会采取哪些步骤。<br><span class="hljs-number">1.</span> 它把异常的type,value和traceback传递给__exit__方法<br><span class="hljs-number">2.</span> 它让__exit__方法来处理异常 <br><span class="hljs-number">3.</span> 如果__exit__返回的是<span class="hljs-literal">True</span>，那么这个异常就被忽略。<br><span class="hljs-number">4.</span> 如果__exit__返回的是<span class="hljs-literal">True</span>以外的任何东西，那么这个异常将被<span class="hljs-keyword">with</span>语句抛出。<br></code></pre></td></tr></table></figure><h2 id="（1）异常抛出">（1）异常抛出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#异常抛出，_exit__返回的是True以外的任何东西，那么这个异常将被with语句抛出</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, file_name, method)</span>:</span><br>        self.file_obj = open(file_name, method)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.file_obj<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, type, value, traceback)</span>:</span><br>        self.file_obj.close()<br>        print(<span class="hljs-string">"type:"</span>,type)<br>        print(<span class="hljs-string">"value:"</span>,value)<br>        print(<span class="hljs-string">"traceback:"</span>,traceback)<br><br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> opened_file:<br>    opened_file.undefined_function(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#异常抛出，_exit__返回的是True以外的任何东西，那么这个异常将被with语句抛出</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, file_name, method)</span>:</span><br>        self.file_obj = open(file_name, method)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.file_obj<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, type, value, traceback)</span>:</span><br>        self.file_obj.close()<br>        print(<span class="hljs-string">"type:"</span>,type)<br>        print(<span class="hljs-string">"value:"</span>,value)<br>        print(<span class="hljs-string">"traceback:"</span>,traceback)<br><br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> opened_file:<br>    opened_file.undefined_function(<span class="hljs-string">'Hola!'</span>)<br></code></pre></td></tr></table></figure><h5 id="输出结果-2">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs python">type: &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">AttributeError</span>'&gt;</span><br><span class="hljs-class"><span class="hljs-title">value</span>:</span> <span class="hljs-string">'_io.TextIOWrapper'</span> object has no attribute <span class="hljs-string">'undefined_function'</span><br>traceback: &lt;traceback object at <span class="hljs-number">0x000001BEB1AD7F00</span>&gt;<br>Traceback (most recent call last):<br>  File <span class="hljs-string">"G:/四期/python/Pytghon_MySQL/上下文管理器/666.py"</span>, line <span class="hljs-number">15</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    opened_file.undefined_function(<span class="hljs-string">'Hola!'</span>)<br>AttributeError: <span class="hljs-string">'_io.TextIOWrapper'</span> object has no attribute <span class="hljs-string"><code class="language-hljs python">type: &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">AttributeError</span>'&gt;</span><br><span class="hljs-class"><span class="hljs-title">value</span>:</span> <span class="hljs-string">'_io.TextIOWrapper'</span> object has no attribute <span class="hljs-string">'undefined_function'</span><br>traceback: &lt;traceback object at <span class="hljs-number">0x000001BEB1AD7F00</span>&gt;<br>Traceback (most recent call last):<br>  File <span class="hljs-string">"G:/四期/python/Pytghon_MySQL/上下文管理器/666.py"</span>, line <span class="hljs-number">15</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    opened_file.undefined_function(<span class="hljs-string">'Hola!'</span>)<br>AttributeError: <span class="hljs-string">'_io.TextIOWrapper'</span> object has no attribute <span class="hljs-string">'undefined_function'</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="（2）异常忽略：">（2）异常忽略：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 异常忽略，__exit__返回的是True，那么这个异常就被忽略。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, file_name, method)</span>:</span><br>        self.file_obj = open(file_name, method)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.file_obj<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exception_type, exception_value, traceback)</span>:</span><br>        print(<span class="hljs-string">"Exception has been handled"</span>)<br>        self.file_obj.close()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> opened_file:<br>    opened_file.undefined_function(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 异常忽略，__exit__返回的是True，那么这个异常就被忽略。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, file_name, method)</span>:</span><br>        self.file_obj = open(file_name, method)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.file_obj<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exception_type, exception_value, traceback)</span>:</span><br>        print(<span class="hljs-string">"Exception has been handled"</span>)<br>        self.file_obj.close()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> opened_file:<br>    opened_file.undefined_function(<span class="hljs-string">'Hola!'</span>)<br></code></pre></td></tr></table></figure><h5 id="输出结果-3">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">Exception has been handled<br></code></pre></td></tr></table></figure></blockquote><h2 id="2、方法二：contextlib模块装饰器和生成器实现">2、方法二：contextlib模块装饰器和生成器实现</h2><p><strong>这种方式实现更优雅，我个人更喜欢这种方式。</strong></p><p><strong>yield之前的代码由<code>__enter__</code>方法执行，yield之后的代码由<code>__exit__</code>方法执行。本质上还是<code>__enter__</code>和<code>__exit__</code>方法。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Open</span><span class="hljs-params">(filename,mode,encoding=<span class="hljs-string">'utf-8'</span>)</span>:</span><br>    fp = codecs.open(filename,mode,encoding)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> fp<br>    <span class="hljs-keyword">finally</span>:<br>        fp.close()<br>data = <span class="hljs-string">u'上下文--管理器'</span><br><span class="hljs-keyword">with</span> Open(<span class="hljs-string">'t.txt'</span>,<span class="hljs-string">'w'</span>) <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Open</span><span class="hljs-params">(filename,mode,encoding=<span class="hljs-string">'utf-8'</span>)</span>:</span><br>    fp = codecs.open(filename,mode,encoding)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> fp<br>    <span class="hljs-keyword">finally</span>:<br>        fp.close()<br>data = <span class="hljs-string">u'上下文--管理器'</span><br><span class="hljs-keyword">with</span> Open(<span class="hljs-string">'t.txt'</span>,<span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data)<br></code></pre></td></tr></table></figure><p><strong>以上这种方法会在<code>t.txt</code>中写入<code>上下文--管理器</code>数据。</strong></p><p><strong>或</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> closing<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OpenMyFile</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, path)</span>:</span><br>        print(<span class="hljs-string">"opening the txt"</span>)<br>        self.f = open(path, <span class="hljs-string">"w"</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span><span class="hljs-params">(self, string)</span>:</span><br>        self.f.write(string)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"closing the txt"</span>)<br>        self.f.close()<br><br><br><span class="hljs-keyword">with</span> closing(OpenMyFile(<span class="hljs-string">"t.txt"</span>)) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-string">"this is demo4"</span>)<br><br><span class="hljs-comment"># 输出：</span><br>print(<span class="hljs-string">"opening the txt"</span>)<br>print(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> closing<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OpenMyFile</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, path)</span>:</span><br>        print(<span class="hljs-string">"opening the txt"</span>)<br>        self.f = open(path, <span class="hljs-string">"w"</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span><span class="hljs-params">(self, string)</span>:</span><br>        self.f.write(string)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"closing the txt"</span>)<br>        self.f.close()<br><br><br><span class="hljs-keyword">with</span> closing(OpenMyFile(<span class="hljs-string">"t.txt"</span>)) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-string">"this is demo4"</span>)<br><br><span class="hljs-comment"># 输出：</span><br>print(<span class="hljs-string">"opening the txt"</span>)<br>print(<span class="hljs-string">"closing the txt"</span>)<br></code></pre></td></tr></table></figure><p><strong>以上这种方法会在<code>t.txt</code>中写入<code>this is demo4</code>数据。</strong></p><h5 id="输出结果-4">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">opening the txt<br>closing the txt<br>opening the txt<br>closing the txt<br></code></pre></td></tr></table></figure></blockquote><h2 id="3、方法三（-contextmanager）">3、方法三（@contextmanager）</h2><p><strong>利用contextlib中的contextmanager装饰器。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_my_file</span><span class="hljs-params">(path)</span>:</span><br>    print(<span class="hljs-string">"opening the txt"</span>)<br>    f = open(<span class="hljs-string">"t.txt"</span>, <span class="hljs-string">"w"</span>)<br>    <span class="hljs-keyword">yield</span> f<br>    print(<span class="hljs-string">"closing the txt"</span>)<br>    f.close()<br><br><br><span class="hljs-keyword">with</span> open_my_file(<span class="hljs-string">"t.txt"</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-string">"this is demo3"</span>)<br><br><span class="hljs-comment"># 输出：</span><br>print(<span class="hljs-string">"opening the txt"</span>)<br>print(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_my_file</span><span class="hljs-params">(path)</span>:</span><br>    print(<span class="hljs-string">"opening the txt"</span>)<br>    f = open(<span class="hljs-string">"t.txt"</span>, <span class="hljs-string">"w"</span>)<br>    <span class="hljs-keyword">yield</span> f<br>    print(<span class="hljs-string">"closing the txt"</span>)<br>    f.close()<br><br><br><span class="hljs-keyword">with</span> open_my_file(<span class="hljs-string">"t.txt"</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-string">"this is demo3"</span>)<br><br><span class="hljs-comment"># 输出：</span><br>print(<span class="hljs-string">"opening the txt"</span>)<br>print(<span class="hljs-string">"closing the txt"</span>)<br></code></pre></td></tr></table></figure><p><strong>以上这种方法会在<code>t.txt</code>中写入<code>this is demo3</code>数据。</strong></p><h5 id="输出结果-5">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">opening the txt<br>closing the txt<br>opening the txt<br>closing the txt<br></code></pre></td></tr></table></figure></blockquote><h2 id="4、with语句上多个下文关联">4、with语句上多个下文关联</h2><p><strong>直接通过一个with语句打开多个上下文，即可同时使用多个上下文变量，而不必需嵌套使用with语句。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, file_name, method)</span>:</span><br>        self.file_obj = open(file_name, method)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.file_obj<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exception_type, exception_value, traceback)</span>:</span><br>        self.file_obj.close()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f1, File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, file_name, method)</span>:</span><br>        self.file_obj = open(file_name, method)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.file_obj<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exception_type, exception_value, traceback)</span>:</span><br>        self.file_obj.close()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f1, File(<span class="hljs-string">'t.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f2:<br>    print(f1, f2)<br></code></pre></td></tr></table></figure><h5 id="输出结果-6">输出结果</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python">&lt;_io.TextIOWrapper name=<span class="hljs-string">'t.txt'</span> mode=<span class="hljs-string">'w'</span> encoding=<span class="hljs-string">'cp936'</span>&gt; &lt;_io.TextIOWrapper name=<span class="hljs-string">'t.txt'</span> mode=<span class="hljs-string">'w'</span> encoding=<span class="hljs-string"><code class="language-hljs python">&lt;_io.TextIOWrapper name=<span class="hljs-string">'t.txt'</span> mode=<span class="hljs-string">'w'</span> encoding=<span class="hljs-string">'cp936'</span>&gt; &lt;_io.TextIOWrapper name=<span class="hljs-string">'t.txt'</span> mode=<span class="hljs-string">'w'</span> encoding=<span class="hljs-string">'cp936'</span>><br></code></pre></td></tr></table></figure></blockquote><h1>总结</h1><p><strong>本文介绍了Python中的上下文管理器，以及如何结合with语句来使用上下文管理器。</strong></p><p><strong>总结一下with 语句的执行流程：</strong></p><ul><li><strong>执行context_expr 以获取上下文管理器对象</strong></li><li><strong>调用上下文管理器的 enter() 方法</strong><ul><li><strong>如果有 as var 从句，则将 enter() 方法的返回值赋给 var</strong></li></ul></li><li><strong>执行代码块 with_suite</strong></li><li><strong>调用上下文管理器的 exit() 方法，如果 with_suite 产生异常，那么该异常的 type、value 和 traceback 会作为参数传给 exit()，否则传三个 None</strong><ul><li><strong>如果 with_suite 产生异常，并且 exit() 的返回值等于 False，那么这个异常将被重新抛出到上层</strong></li><li><strong>如果 with_suite 产生异常，兵器 exit() 的返回值等于 True，那么这个异常就被忽略，继续执行后面的代码</strong></li></ul></li></ul><p><strong>在很多情况下，with语句可以简化代码，并增加代码的健壮性。</strong></p><h3 id="使用上下文管理器有三个好处：">使用上下文管理器有三个好处：</h3><ul><li><strong>提高代码的复用率；</strong></li><li><strong>提高代码的优雅度；</strong></li><li><strong>提高代码的可读性；</strong></li></ul><h3 id="With-语句的实际执行流程是这样的：">With 语句的实际执行流程是这样的：</h3><ul><li><strong>执行 context_exp 以获取上下文管理器</strong></li><li><strong>加载上下文管理器的 <code>__exit__()</code> 方法以备稍后调用</strong></li><li><strong>调用上下文管理器的 <code>__enter__()</code> 方法</strong></li><li><strong>如果有 as var 从句，则将 <code>__enter__()</code> 方法的返回值赋给 var</strong></li><li><strong>执行子代码块 with_suit</strong></li><li><strong>调用上下文管理器的 <code>__exit__()</code> 方法，如果 with_suit 的退出是由异常引发的，那么该异常的 type、value 和 traceback 会作为参数传给 <code>__exit__()</code>，否则传三个 None</strong></li><li><strong>如果 with_suit 的退出由异常引发，并且 <code>__exit__()</code> 的返回值等于 False，那么这个异常将被重新引发一次；如果 <code>__exit__()</code> 的返回值等于 True，那么这个异常就被无视掉，继续执行后面的代码</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python-with语句上下文管理的两种实现方法&quot;&gt;python with语句上下文管理的两种实现方法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在编程中会经常碰到这种情况：有一个特殊的语句块，在执行这个语句块之前需要先执行一些准备动作；当语句块执行完成后，需要继续执行一
      
    
    </summary>
    
    
      <category term="python" scheme="https://wsdlxgp.top/categories/python/"/>
    
    
      <category term="nfs" scheme="https://wsdlxgp.top/tags/nfs/"/>
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="pvc" scheme="https://wsdlxgp.top/tags/pvc/"/>
    
      <category term="dashboard" scheme="https://wsdlxgp.top/tags/dashboard/"/>
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="deployment" scheme="https://wsdlxgp.top/tags/deployment/"/>
    
      <category term="StorageClass" scheme="https://wsdlxgp.top/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>77 python自动化管理Ansible（Ansible，Fabric，hosts）</title>
    <link href="https://wsdlxgp.top/posts/5017.html"/>
    <id>https://wsdlxgp.top/posts/5017.html</id>
    <published>2019-10-15T16:00:00.000Z</published>
    <updated>2020-06-18T13:09:23.697Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Ansible介绍</h1><p><strong>Ansible是一个简单的自动化运维工具，可完成配置管理、应用部署、服务编排以及其他各种IT需求。Ansible也是一款基于Python语言实现的开源软件，其依赖Jinja2、paramiko和PYYAML这几个Python库。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs txt"><code class="language-hljs txt">Ansible的作者是Michael Dehaan，Michael Dehaan同时也是知名软件Cobber的作者和Func的共同作者。Michael Dehaan与2012年创建了AnsibleWorks公司，之后改名为Ansible公司。Ansible公司与2015年10月被红帽公司（Red Hat）收购。<br></code></pre></td></tr></table></figure><p><strong>在这一小节，我们将首先介绍Ansible的优点，然后比较Ansible与Fabric之间的差异。</strong></p><h2 id="1、Ansible的优点">1、Ansible的优点</h2><p><strong>Ansible作为配置工具，通常与Puppet、Chef、Saltstack进行比较，如下所示：</strong></p><table><thead><tr><th>工具</th><th>发布时间</th><th>语言</th><th>架构</th><th>协议</th></tr></thead><tbody><tr><td>Puppet</td><td>2005年</td><td>Ruby</td><td>C/S</td><td>http</td></tr><tr><td>Chef</td><td>2008年</td><td>Ruby</td><td>C/S</td><td>http</td></tr><tr><td>Saltstack</td><td>2012年</td><td>Python</td><td>C/S（可无Client）</td><td>ssh/zmq/raet</td></tr><tr><td>Ansible</td><td>2013年</td><td>Python</td><td>无Client</td><td>ssh</td></tr></tbody></table><p><strong>从发布时间来看，Ansible完全没有优势，那么，是什么特性让Ansible进入了工程师的视野，并且逐步获得青睐呢？我们需要了解一下Ansible有哪些优点。</strong></p><h3 id="Ansible具有以下几个优点："><strong>Ansible具有以下几个优点：</strong></h3><h4 id="（1）部署简单">（1）部署简单</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">只需要在主控端部署Ansible环境，被控端无须做任何操作。换句话说，在安装Ansible时，远程服务器无烦安装任何依赖。因此，相对于其他配置管理器，Ansible安装部署非常简单，省去了客户端的安装。在数千台规模的大型数据中心意味着少了一些路由和安全策略的配置，省去了很多不必要的麻烦。<br></code></pre></td></tr></table></figure><h4 id="（2）基于ssh进行配置管理，充分利用现成的机制">（2）基于ssh进行配置管理，充分利用现成的机制</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">Ansible不依赖与客户端，直接使用ssh进行配置管理，在Ansible早期版本中，默认使用paramiko进行配置管理，从Ansible1.3版本开始，Ansible默认使用OpenSSH实现个服务器间通信。<br></code></pre></td></tr></table></figure><h4 id="（3）Ansible不需要守护进程">（3）Ansible不需要守护进程</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">因为Ansible依赖OpenSSH进行通信，不需要安装客户端，因此服务端也不需要像其他配置管理一样使用一个守护进程。Ansible的安装和维护都变得更加简单，系统更加安全可靠。<br></code></pre></td></tr></table></figure><h4 id="（4）日志集中存储">（4）日志集中存储</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">所有操作日志都存储在Ansible发起服务器，可以采用自定义的格式，这样可以很方便地知晓哪些服务器操作有问题，哪些已经成功，也便于日后追溯。<br></code></pre></td></tr></table></figure><h4 id="（5）Ansible简单易用">（5）Ansible简单易用</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">Ansible和其他配置管理工具一样，运行一个部署命令就可以完成应用部署，使用非常简单。此外，Ansible使用YAML语法管理配置，YAML本身是一种可读性非常强的标记语言，工程师几乎像阅读英文一样阅读YAML的配置文件。因为Ansible使用YAML管理配置，所以使用Ansible不需要使用者具有任何编程背景。运维自动化工具本身是用来简化运维工作的，如果本身比较复杂（如Puppet），甚至需要一定的程序开发能力，那么就会增加使用者的使用难度和犯错的概率。<br></code></pre></td></tr></table></figure><h4 id="（6）Ansible功能强大">（6）Ansible功能强大</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">Ansible通过模块来实现各种功能，目前，Ansible已经有了950多个模块，工程师也可以使用任何语言编写自定义的Ansible模块。<br></code></pre></td></tr></table></figure><h4 id="（7）Ansible设计优秀，便于分享">（7）Ansible设计优秀，便于分享</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">Ansible使用role组织Playbook，并提供了分享role的平台（galaxy.ansible.com），便于大家分享和复用。充分使用role，可以编写可读性更强的配置文件。使用开源的role，能够有效节省编写Playbook的时间。<br></code></pre></td></tr></table></figure><h4 id="（8）Ansible对云计算和大数据平台都有很好的支持">（8）Ansible对云计算和大数据平台都有很好的支持</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">从Ansible的模块列表可以看到，Ansible包含了大量与云服务、AWS、OpenStack、Docker等相关的模块。并且，Ansible便于扩展，当出现新事务时可以根据需要编写自定义的模块。<br></code></pre></td></tr></table></figure><p><strong>Ansible作为自动化系统运维的一大利器，在构建整个体系过程中有着举足轻重的地位。其简单易用、易于安装、功能强大、便于分享、内含大量模板等都是它的魅力所在，再加上易封装、接口调用方便，Ansible正在被越来越多的大公司采用。</strong></p><h2 id="2、Ansible与Fabric之间的比较">2、Ansible与Fabric之间的比较</h2><p><strong>简单来说，Fabric像是一个工具箱，提供了很多好用的工具，用于在远程服务器执行命令。而Ansible则提供了一套简单的流程，只需要按照它的流程来做就能轻松完成任务。这就像是库和框架的关系一样，其中，Fabric是库，Ansible是框架。</strong></p><h3 id="（1）Fabric与Ansible之间的共同点">（1）Fabric与Ansible之间的共同点</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1.都是基于paramiko开发；<br>2.都使用ssh和远程服务器通讯，不需要在远程服务器上安装客户端。<br></code></pre></td></tr></table></figure><h3 id="（2）Fabric与Ansible之间的主要区别">（2）Fabric与Ansible之间的主要区别</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. Fabric简单，Ansible复杂。因此，Fabric学习成本低，Ansible的学习成本高；<br>2. Fabric通过ssh执行简单的命令，Ansible将模块拷贝到远程服务器后执行，执行完成以后删除模块；<br>3. 使用Fabric需要具有Python编程背景，使用Ansible则不需要；<br>4. Fabric对常用的管理操作和ssh连接操作进行了封装，工程师通过编写简单的代码就能完成要做的事情。Ansible不需要工程师编写任何代码，直接编写YAML格式的配置文件来描述要做的事情；<br>5. Fabric提供了基本的接口，业务逻辑需要用户自己实现；Ansible提供了大量的模块，用户只需要学习模块的用法即可完成复杂的任务。<br></code></pre></td></tr></table></figure><h1>二、Ansible使用入门</h1><p><strong>在这一小节我们介绍Ansible的安装与基本使用，然后在接下来的章节中介绍Ansible的高级用法。</strong></p><h3 id="ansible使用原则：">ansible使用原则：</h3><ul><li><strong>确定要操作哪些服务器（服务器列表）</strong></li><li><strong>确定对这些服务器进行什么样的操作（命令</strong>）</li></ul><h3 id="关于hosts文件：">关于hosts文件：</h3><ul><li><strong>默认读取/etc/ansible/hosts文件</strong></li><li><strong>通过命令行参数-i指定hosts文件</strong></li><li><strong>通过/etc/ansible/ansible.cfg里面的inventory选项指定hosts文件</strong></li></ul><h2 id="1、安装Ansible"><strong>1、安装Ansible</strong></h2><p><strong>Ansible不需要安装客户端，因此，相对于其他配置管理工具，Ansible的安装简单得多，只需要在控制端安装Ansible即可。Ansible使用Python语言开发，我们可以直接使用pip进行安装，也可以使用Linux下的包管理工具(如yumI、apt-get)进行安装。如下所示:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# pip3 install ansible<br></code></pre></td></tr></table></figure><p><strong>检查Ansible是否安装成功，如下所示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible --version<br>ansible 2.9.9<br>  config file = /etc/ansible/ansible.cfg<br>  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']<br>  ansible python module location = /usr/lib/python2.7/site-packages/ansible<br>  executable location = /usr/bin/ansible<br>  python version = 2.7.5 (default, Aug  7 2019, 00:51:29) [GCC 4.8.5 20150623 (Red Hat 4.8.5-39)]<br></code></pre></td></tr></table></figure><p><strong>Ansible依赖Python与SSH，因此服务器需要安装SSH和Python 2.5或2.5以上版本的Python。SSH和Python是大多数操作系统中默认安装的软件，这进一步降低了Ansible安装部署的难度。除了SSH和Python以外，服务器端不需要再预装任何软件。在控制端（Ansible命令运行的那台机器）需要安装Python 2.6或更高版本的Python程序，且Ansible的控制端只能运行在Linux下。</strong><br><strong>与其他库和工具不同的是，Ansible包含了多个工具。安装完Ansible以后，控制端会增加以下几个可执行程序：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">ansible<br>ansible-doc<br>ansible-playbook<br>ansible-vault<br>ansible-console<br>ansible-galaxy<br>ansible-pull<br></code></pre></td></tr></table></figure><p><strong>这些可执行程序将在之后使用时进行详细介绍。</strong></p><h2 id="2、Ansible的架构">2、Ansible的架构</h2><p><strong>为了更好的理解Ansible，在介绍Ansible的使用之前，我们先看一下Ansible的架构图，如下所示：</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200520221310187.png" alt="image-20200520221310187"></p><p><strong>在Ansible中，用户通过编排引擎操作主机。其中，主机可以通过配置文件配置，调用云计算的接口获取，或者访问CMDB中的数据库。Ansible的编排引擎有Inventory、API、Modules（模块）和Plugins组成。Ansible的典型用法是：工程师将需要远程服务器执行的操作写在Ansible Playbook中，然后使用Ansible执行Playbook中的操作。</strong></p><h2 id="3、Ansible的运行环境"><strong>3、Ansible的运行环境</strong></h2><p><strong>使用Ansible操作远程服务器时，首先需要确定的是操作哪些服务器，然后再确定对这些服务器执行哪些操作。</strong></p><p><strong>Ansible会默认读取/etc/ansible/hosts文件中配置的远程服务器列表。在我们这一小节，/etc/ansible/hosts文件内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# mkdir /etc/ansible<br>[root@python ~]# vim /etc/ansible/hosts<br><br>[test]<br>127.0.0.1<br>192.168.1.80<br></code></pre></td></tr></table></figure><p><strong>Ansible中存在一个名为ping的模块，该模块并不是测试服务器的网络是否连接，而是尝试建立SSH连接，以便验证用户的SSH是否已经正确配置。如下所示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible test -m ping<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200518155344725.png" alt="image-20200518155344725"></p><h2 id="修改test的权限">修改test的权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# chmod  755 /etc/sudoers<br>[root@python ~]# vim /etc/sudoers<br>test    ALL=(ALL)       ALL                   #92行左右添加<br>[root@python ~]# vim /etc/ansible/hosts<br><br>[test]<br>127.0.0.1 ansible_user=root ansible_port=22<br>192.168.1.80<br></code></pre></td></tr></table></figure><h3 id="再次测试一下">再次测试一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">root@python ~]# ansible test -m ping<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200518160500524.png" alt="image-20200518160500524"></p><h5 id="常见错误解决方案如下：">常见错误解决方案如下：</h5><h6 id="（1）ansible管理节点生成ssh-key">（1）ansible管理节点生成ssh-key</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"><code class="language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># ssh-keygen</span><br></code></pre></td></tr></table></figure><p><strong>执行成功后，将会在~/.ssh目录下生成2个文件：id_rsa和id_rsa.pub</strong></p><h6 id="（2）添加目标节点的ssh认证信息">（2）添加目标节点的ssh认证信息</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># ssh-copy-id root@47.100.98.242</span><br>[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"><code class="language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># ssh-copy-id root@47.100.98.242</span><br>[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># ssh-copy-id root@192.168.79.133</span><br></code></pre></td></tr></table></figure><h6 id="（3）测试">（3）测试</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># ansible test -m ping</span><br>192.168.79.133 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">"ansible_facts"</span>: &#123;<br>        <span class="hljs-string">"discovered_interpreter_python"</span>: <span class="hljs-string">"/usr/bin/python"</span><br>    &#125;,<br>    <span class="hljs-string">"changed"</span>: false,<br>    <span class="hljs-string">"ping"</span>: <span class="hljs-string">"pong"</span><br>&#125;<br>47.100.98.242 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">"ansible_facts"</span>: &#123;<br>        <span class="hljs-string">"discovered_interpreter_python"</span>: <span class="hljs-string">"/usr/bin/python"</span><br>    &#125;,<br>    <span class="hljs-string">"changed"</span>: false,<br>    <span class="hljs-string">"ping"</span>: <span class="hljs-string"><code class="language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># ansible test -m ping</span><br>192.168.79.133 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">"ansible_facts"</span>: &#123;<br>        <span class="hljs-string">"discovered_interpreter_python"</span>: <span class="hljs-string">"/usr/bin/python"</span><br>    &#125;,<br>    <span class="hljs-string">"changed"</span>: false,<br>    <span class="hljs-string">"ping"</span>: <span class="hljs-string">"pong"</span><br>&#125;<br>47.100.98.242 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">"ansible_facts"</span>: &#123;<br>        <span class="hljs-string">"discovered_interpreter_python"</span>: <span class="hljs-string">"/usr/bin/python"</span><br>    &#125;,<br>    <span class="hljs-string">"changed"</span>: false,<br>    <span class="hljs-string">"ping"</span>: <span class="hljs-string">"pong"</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Ansible默认使用当前用户和默认的22端口号与远程服务器建立SSH连接。如果需要使用其他用户，或者使用非默认的SSH端口号，可以在host之后增加用户名和端口号的配置。如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs pypthon"><code class="language-hljs pypthon">[root@192 ~]# cat &#x2F;etc&#x2F;ansible&#x2F;hosts<br>[test]<br>192.168.79.133 ansible_user&#x3D;test ansible_port&#x3D;22<br>47.100.98.242 ansible_user&#x3D;laoyu ansible_port&#x3D;80<br></code></pre></td></tr></table></figure><p><strong>一般情况下，工作环境的服务器ssh用户名和ssh端口号都是相同的。如果我们有很多的远程服务器，每一台服务器都需要配置ansible_user或ansible_port参数，如果依然使用前面的配置方式进行配置，会显得非常冗余。对于这种情况，可以在Ansible配置文件中修改相应的配置。</strong></p><p><strong>Ansible默认使用/etc/ansible/ansible.cfg文件，我们可以在ansible.cfg中设定一些默认值，这样就需要对同样的内容输入多次。如下所示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># cat /etc/ansible/ansible.cfg</span><br>[defaults]<br>remote_port = <span class="hljs-number"><code class="language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># cat /etc/ansible/ansible.cfg</span><br>[defaults]<br>remote_port = <span class="hljs-number">2090</span><br>remote_user = test<br></code></pre></td></tr></table></figure><h2 id="4、Ansible的ad-hoc模式">4、Ansible的ad-hoc模式</h2><p><strong>ping模块是Ansible中最简单的模块，而command模块则是工程师最熟悉的模块。command模块的作用非常简单，就是在服务器中执行shell命令。在Ansible中，通过-m参数指定模块名称，通过-a参数指定模块的参数。因此，使用command模块在远程服务器执行shell命令的语句如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible test -m command -a "hostname"<br>127.0.0.1 | CHANGED | rc=0 >><br>python<br>192.168.1.80 | CHANGED | rc=0 >><br>python<br>[root@python ~]# ansible test -m command -a "whoami"<br>192.168.1.80 | CHANGED | rc=0 >><br>root<br>127.0.0.1 | CHANGED | rc=0 >><br>root<br></code></pre></td></tr></table></figure><p><strong>command是Ansible中的默认模块，当我们省略-m参数时，默认使用command模块。如下所示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible test -m command -a "whoami"<br>192.168.1.80 | CHANGED | rc=0 >><br>root<br>127.0.0.1 | CHANGED | rc=0 >><br>root<br></code></pre></td></tr></table></figure><p><strong>大部分情况下，Ansible的模块包含多个参数，参数使用“key=value”的形式表示，各个参数之间使用空格分隔。如下所示：</strong></p><h3 id="（1）创建ansible-cfg文件">（1）创建ansible.cfg文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# vim /etc/ansible/ansible.cfg<br>[defaults]<br>remote_port = 22<br>remote_user = root<br></code></pre></td></tr></table></figure><h4 id="再次测试一下-2">再次测试一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible test -m ping<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200518155344725.png" alt="image-20200518155344725"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible test -m command -a "hostname"<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200518162026972.png" alt="image-20200518162026972"></p><h3 id="（2）将本地文件拷贝到服务器">（2）将本地文件拷贝到服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# cd /tmp/<br>[root@python tmp]# mkdir abc<br>[root@python tmp]# cd abc/<br>[root@python abc]# ls<br>nginx.conf  restart.sh     #要拷贝的文件<br></code></pre></td></tr></table></figure><h4 id="进行拷贝">进行拷贝</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python abc]# ansible test -m copy -a "src=/tmp/abc/nginx.conf dest=/opt/nginx.conf"<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200518162720950.png" alt="image-20200518162720950"></p><h4 id="查看一下是否有拷贝的文件">查看一下是否有拷贝的文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python abc]# ls /opt/ | grep nginx.conf<br>nginx.conf<br></code></pre></td></tr></table></figure><h3 id="1-创建剧本（拷贝）">&lt;1&gt;创建剧本（拷贝）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python abc]# vim test_playbook.yml<br><br>---<br>- hosts: test<br>  become: yes               #是否支持root权限<br>  become_method: sudo<br>  tasks:                    #任务<br>  - name: copy file         #描叙<br>    copy: src=/opt/nginx.conf dest=/tmp/abc/nginx.conf #拷贝的<br><br>  - name: package install   #描叙<br>    yum: name=&#123;&#123;item&#125;&#125; state=present        #安装的<br>    with_items:<br>      - tmux<br></code></pre></td></tr></table></figure><h4 id="执行一下">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python abc]# ansible-playbook test_playbook.yml<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200518164022081.png" alt="image-20200518164022081"></p><h4 id="查看是否有拷贝的文件">查看是否有拷贝的文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python abc]# ls | grep nginx.conf <br>nginx.conf<br></code></pre></td></tr></table></figure><h3 id="（3）在远程服务器中安装软件">（3）在远程服务器中安装软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python abc]# ansible test -m yum -a "name=tmux state=present" -become<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200518163338271.png" alt="image-20200518163338271"></p><h2 id="5、使用playbook控制服务器">5、使用playbook控制服务器</h2><p><strong>前面通过Ansible命令执行操作的方式，称为ad-hoc。我们可以使用ad-hoc来执行非常简单的操作，也可以使用ad-hoc的方式来学习模块的使用方式。但是，在实际的生产环境中，我们一般将远程服务器需要做的事情写在一个YAML配置文件中。</strong></p><p><strong>例如，将本地文件拷贝到远程服务器并修改文件所有者，然后安装软件的功能，写在YAML的配置文件中以后，其内容如下：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs yaml"><span class="hljs-string">[root@192</span> <span class="hljs-string">~]#</span> <span class="hljs-string">cat</span> <span class="hljs-string">test_playbook.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">become:</span> <span class="hljs-literal">yes</span><br>  <span class="hljs-attr">become_method:</span> <span class="hljs-string">sudo</span><br>  <span class="hljs-attr">tasks:</span><br>true<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">file</span><br>      <span class="hljs-attr">copy:</span> <span class="hljs-string">src=~/s.txt</span> <span class="hljs-string">dest=/opt/s.txt</span><br>true<br>true<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">change</span> <span class="hljs-string">mode</span><br>      <span class="hljs-attr">file:</span> <span class="hljs-string">dest=/opt/s.txt</span> <span class="hljs-string">mode=500</span> <span class="hljs-string">owner=root</span> <span class="hljs-string">group=root</span><br>true<br>true<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ensure</span> <span class="hljs-string">packages</span> <span class="hljs-string">installed</span><br>      <span class="hljs-attr">yum:</span> <span class="hljs-string">name=&#123;&#123;item&#125;&#125;</span> <span class="hljs-string">state=present</span><br>true  <span class="hljs-attr">with_items:</span><br>true    <span class="hljs-bullet">-</span> <span class="hljs-string">git</span><br>true    <span class="hljs-bullet">-</span> <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-string">[root@192</span> <span class="hljs-string">~]#</span> <span class="hljs-string">cat</span> <span class="hljs-string">test_playbook.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">become:</span> <span class="hljs-literal">yes</span><br>  <span class="hljs-attr">become_method:</span> <span class="hljs-string">sudo</span><br>  <span class="hljs-attr">tasks:</span><br>true<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">file</span><br>      <span class="hljs-attr">copy:</span> <span class="hljs-string">src=~/s.txt</span> <span class="hljs-string">dest=/opt/s.txt</span><br>true<br>true<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">change</span> <span class="hljs-string">mode</span><br>      <span class="hljs-attr">file:</span> <span class="hljs-string">dest=/opt/s.txt</span> <span class="hljs-string">mode=500</span> <span class="hljs-string">owner=root</span> <span class="hljs-string">group=root</span><br>true<br>true<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ensure</span> <span class="hljs-string">packages</span> <span class="hljs-string">installed</span><br>      <span class="hljs-attr">yum:</span> <span class="hljs-string">name=&#123;&#123;item&#125;&#125;</span> <span class="hljs-string">state=present</span><br>true  <span class="hljs-attr">with_items:</span><br>true    <span class="hljs-bullet">-</span> <span class="hljs-string">git</span><br>true    <span class="hljs-bullet">-</span> <span class="hljs-string">tmux</span><br></code></pre></td></tr></table></figure><p><strong>这个YAML文件称为Ansible Playbook。Playbook中首先包含了一些声明信息，如hosts关键字声明该Playbook应用的服务器列表，become和become_method表示在远程服务器通过sudo执行操作。Playbook最后包含了若干个task，每一个task对应于前面的一条ad-hoc命令。具体执行时，多个task按序执行。如果你不能完全理解YAML文件，现在只需要对Ansible的执行方式有一个认识即可。后续小节将会详细讲解如何编写Ansible Playbook。</strong></p><p><strong>有了Playbook以后，通过ansible-playbook命令执行，如下所示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># ansible-playbook test_palybook.yml</span><br>PLAY [test] ****************************************************************************************************************<br><br>TASK [Gathering Facts] *****************************************************************************************************<br>ok: [<span class="hljs-number">47.100</span><span class="hljs-number">.98</span><span class="hljs-number">.242</span>]<br>ok: [<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>]<br><br>TASK [copy file] ***********************************************************************************************************<br>ok: [<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>]<br>ok: [<span class="hljs-number">47.100</span><span class="hljs-number">.98</span><span class="hljs-number">.242</span>]<br><br>TASK [change mode] *********************************************************************************************************<br>ok: [<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>]<br>ok: [<span class="hljs-number">47.100</span><span class="hljs-number">.98</span><span class="hljs-number">.242</span>]<br><br>TASK [ensure packages installed] *******************************************************************************************<br>[DEPRECATION WARNING]: Invoking <span class="hljs-string">"yum"</span> only once <span class="hljs-keyword">while</span> using a loop via squash_actions <span class="hljs-keyword">is</span> deprecated. Instead of using a <br>loop to supply multiple items <span class="hljs-keyword">and</span> specifying `name: <span class="hljs-string">"&#123;&#123;item&#125;&#125;"</span>`, please use `name: [<span class="hljs-string">'git'</span>, <span class="hljs-string">'tmux'</span>]` <span class="hljs-keyword">and</span> remove the loop. <br>This feature will be removed <span class="hljs-keyword">in</span> version <span class="hljs-number">2.11</span>. Deprecation warnings can be disabled by setting deprecation_warnings=<span class="hljs-literal">False</span> <span class="hljs-keyword">in</span><br> ansible.cfg.<br>[DEPRECATION WARNING]: Invoking <span class="hljs-string">"yum"</span> only once <span class="hljs-keyword">while</span> using a loop via squash_actions <span class="hljs-keyword">is</span> deprecated. Instead of using a <br>loop to supply multiple items <span class="hljs-keyword">and</span> specifying `name: <span class="hljs-string">"&#123;&#123;item&#125;&#125;"</span>`, please use `name: [<span class="hljs-string">'git'</span>, <span class="hljs-string">'tmux'</span>]` <span class="hljs-keyword">and</span> remove the loop. <br>This feature will be removed <span class="hljs-keyword">in</span> version <span class="hljs-number">2.11</span>. Deprecation warnings can be disabled by setting deprecation_warnings=<span class="hljs-literal">False</span> <span class="hljs-keyword">in</span><br> ansible.cfg.<br>changed: [47.100.98.242] =&gt; (item=['git', 'tmux'])<br>changed: [127.0.0.1] =&gt; (item=['git', 'tmux'])<br><br>PLAY RECAP *****************************************************************************************************************<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>                  : ok=<span class="hljs-number">4</span>    changed=<span class="hljs-number">1</span>    unreachable=<span class="hljs-number">0</span>    failed=<span class="hljs-number">0</span>    skipped=<span class="hljs-number">0</span>    rescued=<span class="hljs-number">0</span>    ignored=<span class="hljs-number">0</span>   <br><span class="hljs-number">47.100</span><span class="hljs-number">.98</span><span class="hljs-number">.242</span>              : ok=<span class="hljs-number">4</span>    changed=<span class="hljs-number">1</span>    unreachable=<span class="hljs-number">0</span>    failed=<span class="hljs-number">0</span>    skipped=<span class="hljs-number">0</span>    rescued=<span class="hljs-number">0</span>    ignored=<span class="hljs-number">0</span>   <br><br>[root@desktop-kh5f5dc ~]<span class="hljs-comment"><code class="language-hljs python">[root@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># ansible-playbook test_palybook.yml</span><br>PLAY [test] ****************************************************************************************************************<br><br>TASK [Gathering Facts] *****************************************************************************************************<br>ok: [<span class="hljs-number">47.100</span><span class="hljs-number">.98</span><span class="hljs-number">.242</span>]<br>ok: [<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>]<br><br>TASK [copy file] ***********************************************************************************************************<br>ok: [<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>]<br>ok: [<span class="hljs-number">47.100</span><span class="hljs-number">.98</span><span class="hljs-number">.242</span>]<br><br>TASK [change mode] *********************************************************************************************************<br>ok: [<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>]<br>ok: [<span class="hljs-number">47.100</span><span class="hljs-number">.98</span><span class="hljs-number">.242</span>]<br><br>TASK [ensure packages installed] *******************************************************************************************<br>[DEPRECATION WARNING]: Invoking <span class="hljs-string">"yum"</span> only once <span class="hljs-keyword">while</span> using a loop via squash_actions <span class="hljs-keyword">is</span> deprecated. Instead of using a <br>loop to supply multiple items <span class="hljs-keyword">and</span> specifying `name: <span class="hljs-string">"&#123;&#123;item&#125;&#125;"</span>`, please use `name: [<span class="hljs-string">'git'</span>, <span class="hljs-string">'tmux'</span>]` <span class="hljs-keyword">and</span> remove the loop. <br>This feature will be removed <span class="hljs-keyword">in</span> version <span class="hljs-number">2.11</span>. Deprecation warnings can be disabled by setting deprecation_warnings=<span class="hljs-literal">False</span> <span class="hljs-keyword">in</span><br> ansible.cfg.<br>[DEPRECATION WARNING]: Invoking <span class="hljs-string">"yum"</span> only once <span class="hljs-keyword">while</span> using a loop via squash_actions <span class="hljs-keyword">is</span> deprecated. Instead of using a <br>loop to supply multiple items <span class="hljs-keyword">and</span> specifying `name: <span class="hljs-string">"&#123;&#123;item&#125;&#125;"</span>`, please use `name: [<span class="hljs-string">'git'</span>, <span class="hljs-string">'tmux'</span>]` <span class="hljs-keyword">and</span> remove the loop. <br>This feature will be removed <span class="hljs-keyword">in</span> version <span class="hljs-number">2.11</span>. Deprecation warnings can be disabled by setting deprecation_warnings=<span class="hljs-literal">False</span> <span class="hljs-keyword">in</span><br> ansible.cfg.<br>changed: [47.100.98.242] =&gt; (item=['git', 'tmux'])<br>changed: [127.0.0.1] =&gt; (item=['git', 'tmux'])<br><br>PLAY RECAP *****************************************************************************************************************<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>                  : ok=<span class="hljs-number">4</span>    changed=<span class="hljs-number">1</span>    unreachable=<span class="hljs-number">0</span>    failed=<span class="hljs-number">0</span>    skipped=<span class="hljs-number">0</span>    rescued=<span class="hljs-number">0</span>    ignored=<span class="hljs-number">0</span>   <br><span class="hljs-number">47.100</span><span class="hljs-number">.98</span><span class="hljs-number">.242</span>              : ok=<span class="hljs-number">4</span>    changed=<span class="hljs-number">1</span>    unreachable=<span class="hljs-number">0</span>    failed=<span class="hljs-number">0</span>    skipped=<span class="hljs-number">0</span>    rescued=<span class="hljs-number">0</span>    ignored=<span class="hljs-number">0</span>   <br><br>[root@desktop-kh5f5dc ~]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><strong>上面这条命令的效果与上一小节中多条ad-hoc命令的效果是一样的。关于YAML的语法，如何编写playbook以及模块的使用方式等，将在本章的后续小节中进行详细讲解。在这一小节中，我们只需要知道Ansible有两种操作远程服务器的方式，分别是：ad-hoc与Playbook。</strong></p><h1>三、Inventory管理</h1><p><strong>在Ansible中，将可管理的服务器的集合称为Inventory。因此，Inventory管理便是服务器管理。这一节中，我们将会详细讨论Inventory管理。</strong></p><h2 id="1、hosts文件位置">1、hosts文件位置</h2><p><strong>我们已经演示了Ansible如何对远程服务器执行操作，可以看到，Ansible在执行操作是，首先需要确定对哪些服务器执行操作。默认情况下，Ansible读取/etc/ansible/hosts文件中的服务器配置，获取需要操作的服务器列表。Ansible定义与获取服务器列表的方式比这个要灵活得多。</strong></p><p><strong>在Ansible中，有3种方式制定hosts文件，分别是：</strong></p><blockquote><ul><li><strong>默认读取/etc/ansible/hosts文件；</strong></li></ul><ol start="2"><li><strong>通过命令行参数-i指定hosts文件；</strong></li><li><strong>通过ansible.cfg文件中的inventory选项（老版本的Ansible中通过hostfile选项指定）指定hosts文件。</strong></li></ol></blockquote><p><strong>例如：当前系统中除了/etc/ansible/hosts文件以外，在test用户的home目录下也存在一个名为hosts的文件，该hosts文件的内容如下所示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[test]<br>127.0.0.1<br>192.168.1.80<br></code></pre></td></tr></table></figure><p><strong>使用/etc/ansible/hosts文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible test --list-hosts<br>  hosts (2):<br>    127.0.0.1<br>    192.168.1.80<br></code></pre></td></tr></table></figure><p><strong>-i选项指定hosts文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible test -i hosts --list-hosts<br>  hosts (2):<br>    127.0.0.1<br>    192.168.1.80<br></code></pre></td></tr></table></figure><p><strong>修改ansible.cfg文件，添加inventory选项，指定hosts文件的路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# vim /etc/ansible/ansible.cfg <br><br>[defaults]<br>remote_user = root<br>remote_port = 22<br>inventory = /etc/ansible/hosts<br></code></pre></td></tr></table></figure><h2 id="2、灵活定义hosts文件内容">2、灵活定义hosts文件内容</h2><h3 id="（1）分组定义服务器">（1）分组定义服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# vim /etc/ansible/hosts <br><br>[demo]<br>127.0.0.1<br>[xgp]<br>192.168.1.80<br>[wsd]<br>192.168.1.60<br></code></pre></td></tr></table></figure><h4 id="1）查看单个分组的服务器列表">1）查看单个分组的服务器列表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible demo --list-hosts<br>  hosts (1):<br>    127.0.0.1<br>[root@python ~]# ansible xgp --list-hosts<br>  hosts (1):<br>    192.168.1.80<br>[root@python ~]# ansible wsd --list-hosts<br>  hosts (1):<br>    192.168.1.60<br>[root@python ~]# ansible all --list-hosts<br>  hosts (3):<br>    127.0.0.1<br>    192.168.1.80<br>    192.168.1.60<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200519163251885.png" alt="image-20200519163251885"></p><h4 id="2）查看多个分组的服务器列表（冒号分隔组名）">2）查看多个分组的服务器列表（冒号分隔组名）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible xgp:wsd -i hosts --list-hosts<br>  hosts (2):<br>    192.168.1.80<br>    192.168.1.60<br></code></pre></td></tr></table></figure><h4 id="3）使用all和星号匹配服务器">3）使用all和星号匹配服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible '*' -i hosts --list-hosts<br>[root@python ~]# ansible 'all' -i hosts --list-hosts<br>  hosts (3):<br>    127.0.0.1<br>    192.168.1.60<br>    192.168.1.80<br></code></pre></td></tr></table></figure><h3 id="（2）Ansible定义组匹配服务器">（2）Ansible定义组匹配服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# vim hosts<br>[demo]<br>127.0.0.1<br>[xgp]<br>192.168.1.80<br>[wsd]<br>192.168.1.60<br>[common:children]<br>xgp<br>wsd<br></code></pre></td></tr></table></figure><h4 id="查看服务器列表">查看服务器列表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible common -i hosts --list-hosts<br>  hosts (2):<br>    192.168.1.80<br>    192.168.1.60<br></code></pre></td></tr></table></figure><h3 id="（3）批量定义服务器">（3）批量定义服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# vim hosts<br><br>[demo]<br>127.0.0.1<br>[xgp]<br>192.168.1.80<br>[1:3].xgp.top<br>[wsd]<br>192.168.1.60<br>[a:d].xgp.top<br>[common:children]<br>xgp<br>wsd<br></code></pre></td></tr></table></figure><h4 id="查看服务列表">查看服务列表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible xgp:wsd -i hosts --list-hosts<br>  hosts (9):<br>    192.168.1.80<br>    1.xgp.top<br>    2.xgp.top<br>    3.xgp.top<br>    192.168.1.60<br>    a.xgp.top<br>    b.xgp.top<br>    c.xgp.top<br>    d.xgp.top<br></code></pre></td></tr></table></figure><h2 id="3、灵活匹配hosts文件内容">3、灵活匹配hosts文件内容</h2><p><strong>Ansible还支持通配符和正则表达式等更灵活的方式来匹配服务器。</strong></p><p><strong>Ansible官方给出了ansible命令的语法格式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">ansible <pattern_goes_here> -m <module_name> -a <arguments><br></code></pre></td></tr></table></figure><p><strong>例如：重启所有web服务器中的Apache进程：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs python">ansible webservers -m service -a <span class="hljs-string">"name=httpd state=restarted"</span><br>ansible web*.duxuejun.com =-m service -a <span class="hljs-string"><code class="language-hljs python">ansible webservers -m service -a <span class="hljs-string">"name=httpd state=restarted"</span><br>ansible web*.duxuejun.com =-m service -a <span class="hljs-string">"name=httpd state=restarted"</span><br></code></pre></td></tr></table></figure><p><strong>远程服务器匹配规则：</strong></p><table><thead><tr><th>匹配规则</th><th>含义</th></tr></thead><tbody><tr><td>192.168.1.10 或者 <a href="http://web.duxuejun.com" target="_blank" rel="noopener">web.duxuejun.com</a></td><td>匹配目标IP地址或服务器名称，如果含有多个IP或服务器，使用“:”分隔</td></tr><tr><td>webservers</td><td>匹配目标为webservers，多个分组使用“:”分隔</td></tr><tr><td>all或者&quot;*&quot;</td><td>匹配所有的服务器</td></tr><tr><td>webservers:!dbservers</td><td>匹配在webservers中，不在dbservers组中的服务器</td></tr><tr><td>webservers:&amp;dbservers</td><td>匹配同时在webservers组以及dbservers组中的服务器</td></tr><tr><td>*.duxujun.com或192.168.*</td><td>使用通配符进行匹配</td></tr><tr><td>webservers[0],webservers[1:],webservers[-1]</td><td>使用索引或切片操作的方式匹配组中的服务器</td></tr><tr><td>~(web|db).*.duxuejun.com</td><td>以~开头的匹配，表示使用正则表达式匹配</td></tr></tbody></table><h2 id="4、Inventory行为参数">4、Inventory行为参数</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs properties"><span class="hljs-meta">参数</span>                             <span class="hljs-string">默认值                说明</span><br><span class="hljs-attr">ansible_ssh_host</span>                <span class="hljs-string">主机的名字            ssh的目的主机或ip</span><br><span class="hljs-attr">ansible_ssh_port</span>                <span class="hljs-string">22                  ssh目的端口</span><br><span class="hljs-attr">ansible_ssh_user</span>                <span class="hljs-string">root                ssh登陆使用的用户名</span><br><span class="hljs-attr">ansible_ssh_pass</span>                <span class="hljs-string">none                ssh认证所使用的密码</span><br><span class="hljs-attr">ansible_connection</span>              <span class="hljs-string">smart               Ansible使用何种连接模式连接到主机</span><br><span class="hljs-attr">ansible_ssh_private_key_file</span>    <span class="hljs-string">none                ssh认证所使用的私钥</span><br><span class="hljs-attr">ansible_shell_type</span>              <span class="hljs-string">sh                  命令所使用的shell</span><br><span class="hljs-attr">ansible_python_interpreter</span>      <span class="hljs-string">/usr/bin/python     主机上的python解释器</span><br><span class="hljs-meta">ansible_*_interpreter</span>           <span class="hljs-string"><code class="language-hljs properties"><span class="hljs-meta">参数</span>                             <span class="hljs-string">默认值                说明</span><br><span class="hljs-attr">ansible_ssh_host</span>                <span class="hljs-string">主机的名字            ssh的目的主机或ip</span><br><span class="hljs-attr">ansible_ssh_port</span>                <span class="hljs-string">22                  ssh目的端口</span><br><span class="hljs-attr">ansible_ssh_user</span>                <span class="hljs-string">root                ssh登陆使用的用户名</span><br><span class="hljs-attr">ansible_ssh_pass</span>                <span class="hljs-string">none                ssh认证所使用的密码</span><br><span class="hljs-attr">ansible_connection</span>              <span class="hljs-string">smart               Ansible使用何种连接模式连接到主机</span><br><span class="hljs-attr">ansible_ssh_private_key_file</span>    <span class="hljs-string">none                ssh认证所使用的私钥</span><br><span class="hljs-attr">ansible_shell_type</span>              <span class="hljs-string">sh                  命令所使用的shell</span><br><span class="hljs-attr">ansible_python_interpreter</span>      <span class="hljs-string">/usr/bin/python     主机上的python解释器</span><br><span class="hljs-meta">ansible_*_interpreter</span>           <span class="hljs-string">none                类似python解释器的其他语言版</span><br></code></pre></td></tr></table></figure><h2 id="5、改变行为参数的默认值">5、改变行为参数的默认值</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs properties"><span class="hljs-meta">可以在ansible.cfg文件的[defaults]部分更改一些行为参数的默认值</span>              <span class="hljs-string"></span><br><span class="hljs-meta">ansible.cfg文件</span>  <span class="hljs-string">inventory文件     </span><br><span class="hljs-attr">ansible_ssh_user</span>                <span class="hljs-string">remote_user</span><br><span class="hljs-attr">ansible_ssh_port</span>                <span class="hljs-string">remote_port</span><br><span class="hljs-attr">ansible_ssh_private_key_file</span>    <span class="hljs-string">private_key_file</span><br><span class="hljs-attr">ansible_shell_type</span>              <span class="hljs-string"><code class="language-hljs properties"><span class="hljs-meta">可以在ansible.cfg文件的[defaults]部分更改一些行为参数的默认值</span>              <span class="hljs-string"></span><br><span class="hljs-meta">ansible.cfg文件</span>  <span class="hljs-string">inventory文件     </span><br><span class="hljs-attr">ansible_ssh_user</span>                <span class="hljs-string">remote_user</span><br><span class="hljs-attr">ansible_ssh_port</span>                <span class="hljs-string">remote_port</span><br><span class="hljs-attr">ansible_ssh_private_key_file</span>    <span class="hljs-string">private_key_file</span><br><span class="hljs-attr">ansible_shell_type</span>              <span class="hljs-string">executable</span><br></code></pre></td></tr></table></figure><h2 id="6、定义服务器变量">6、定义服务器变量</h2><p><strong>在hosts文件中，除了定义行为参数以外，还可以定义普通的变量，以便在不同的服务器中使用不同的配置。比如：可以在2台服务器中分别启动MySQL，1台服务器的MySQL的端口是3306，另一台服务器MySQL的端口是3307。定义普通参数和定义行为参数的方法是一样的，只是行为参数的名字有Ansible预先定义，普通参数的名称有我们自己定义。在Ansible中，参数名必须为字母、数字和下划线的组合，并且首字符必须为字母。</strong></p><h3 id="（1）变量的取值不同"><strong>（1）变量的取值不同</strong></h3><p><strong>假定，我们在/etc/ansible/hosts文件中为不同的服务器定义一个相同的变量名，但是取值不同。如下所示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# vim hosts<br><br>[test]<br>192.168.1.60 ansible_port=22<br>192.168.1.80 ansible_port=22<br></code></pre></td></tr></table></figure><p><strong>在测试环境中，我们可以通过echo方式显示变量的值。如下所示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible  test -i ./hosts -a 'echo &#123;&#123;ansible_port&#125;&#125;' <br>192.168.1.60 | CHANGED | rc=0 >><br>22<br>192.168.1.80 | CHANGED | rc=0 >><br>22<br></code></pre></td></tr></table></figure><h3 id="（2）变量的取值相同">（2）变量的取值相同</h3><p><strong>如果test组下的两个服务器mysql_port变量取值相同，我们也可以通过组的名称加上“:vars”后缀来定义变量，如下所示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# vim hosts<br><br>[test]<br>192.168.1.40<br>192.168.1.80<br><br>[test:vars]<br>ansible_port = 22<br></code></pre></td></tr></table></figure><p><strong>随着业务的发展，管理的hosts文件越来越大，使用的变量越来越多了，依然使用一个hosts文件管理服务器和变量的话，就会逐渐变得难以管理。</strong></p><p><strong>Ansible提供了更好的方法来管理服务器和群组的变量，即：为每个服务器和群组创建独立的变量文件。其定义方式是，将组的变量存放在一个名为group_vars命令下，目录下的文件名与组的名称相同，文件的扩展名可以是.yml或.yaml，也可以没有任何扩展名。服务器的变量存放在一个名为host_vars目录下，该目录下的文件名为服务器的名称。</strong></p><p><strong>Ansible将依次在Playbook所在的目录、hosts文件所在的目录和/etc/ansible目录下寻找group_vars目录和host_vars目录。目前，假设group_vars目录和host_var目录都位于/etc/ansible目录下。</strong></p><p><strong>对于我们前面定义mysql_port变量的例子，将变量存放在独立的文件以后，/etc/ansible目录的结构如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@192 ansible]# tree<br>.<br>├── ansible.cfg<br>├── group_vars<br>│   └── test.yaml<br>├── hosts<br>└── host_vars<br>    └── 127.0.0.1.yaml<br></code></pre></td></tr></table></figure><p><strong>其中，test.yaml文件定义了hosts文件中test组的变量，127.0.0.1.yaml文件定义了hosts文件中127.0.0.1这台服务器使用的变量。如：test.yaml文件的内容如下：</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs yml"><span class="hljs-string">[root@192</span> <span class="hljs-string">ansible]#</span> <span class="hljs-string">cat</span> <span class="hljs-string">group_vars/test.yaml</span> <br><span class="hljs-attr">ansible_port:</span> <span class="hljs-number"><code class="language-hljs yml"><span class="hljs-string">[root@192</span> <span class="hljs-string">ansible]#</span> <span class="hljs-string">cat</span> <span class="hljs-string">group_vars/test.yaml</span> <br><span class="hljs-attr">ansible_port:</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p><strong>注意：我们在hosts文件中定义变量时，使用的是“var = value”格式定义。将变量保存在一个独立的文件时，使用的是“var:value”格式定义。这是因为Ansible解析这两个文件时，认为hosts是一个ini格式的文件，而保存变量的文件是一个YAML格式的文件。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible  test -i ./hosts -a 'echo &#123;&#123;ansible_port&#125;&#125;' <br>192.168.1.40 | CHANGED | rc=0 >><br>22<br>192.168.1.80 | CHANGED | rc=0 >><br>22<br></code></pre></td></tr></table></figure><h1>四、YAML语法</h1><h2 id="1、YAML语法规则">1、YAML语法规则</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. YAML文件第一行为“---”，表示这是一个YAML文件；<br>2. YAML中字段大小写敏感；<br>3. YAML与Python一样，通过缩进来表示层级关系；<br>4. YAML的缩进不允许使用Tab键，只允许使用空格，且空格的数目不重要，只要相同层级的元素左侧对齐即可；<br>5. “#”表示注释，从这个字符一直到行尾都会被解析器忽略<br></code></pre></td></tr></table></figure><h2 id="2、YAML支持的3中格式数据">2、YAML支持的3中格式数据</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. 对象：键值对的集合，有称为映射，类似于Python中的字典；<br>2. 数组：一组按次序排列的值，有称为序列（sequence），类似于Python的列表；<br>3. 纯量（scalars）：单个的、不可再分的值，比如：字符串、布尔值与数字。<br></code></pre></td></tr></table></figure><h2 id="3、安装PyYAML库">3、安装PyYAML库</h2><p><strong>Python标准库没有包含解析YAML格式的库，需要安装第三方的PyYAML库。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">pip3 install -i https://pypi.douban.com/simple/ PyYAML<br></code></pre></td></tr></table></figure><h2 id="4、定义与解析YAML文件"><strong>4、定义与解析YAML文件</strong></h2><h3 id="（1）数组格式"><strong>（1）数组格式</strong></h3><p><strong>使用YAML表示数组非常容易，只需要用“-”将元素按序列出即可。假设我们有下面这样一个YAML文件，文件的内容保存在一个名为data.yaml的文件中，如下所示：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment"># 一个美味的水果列表</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Apple</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Orange</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Strawberry</span><br><span class="hljs-bullet">-</span> <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment"># 一个美味的水果列表</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Apple</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Orange</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Strawberry</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Mango</span><br></code></pre></td></tr></table></figure><h4 id="解析结果：">解析结果：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> yaml                                                                <br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-keyword">with</span> open(<span class="hljs-string">'data.yaml'</span>) <span class="hljs-keyword">as</span> f: <br>   ...:     print(yaml.load(f)) <br>   ...:                                                                            <br>[<span class="hljs-string">'Apple'</span>, <span class="hljs-string">'Orange'</span>, <span class="hljs-string">'Strawberry'</span>, <span class="hljs-string"><code class="language-hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> yaml                                                                <br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-keyword">with</span> open(<span class="hljs-string">'data.yaml'</span>) <span class="hljs-keyword">as</span> f: <br>   ...:     print(yaml.load(f)) <br>   ...:                                                                            <br>[<span class="hljs-string">'Apple'</span>, <span class="hljs-string">'Orange'</span>, <span class="hljs-string">'Strawberry'</span>, <span class="hljs-string">'Mango'</span>]<br></code></pre></td></tr></table></figure><h3 id="（2）对象">（2）对象</h3><p><strong>在YAML中，对象以“key:value”的形式进行定义，如下所示：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment"># 一个职工的记录</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">爱运维</span><br><span class="hljs-attr">job:</span> <span class="hljs-string">devops</span><br><span class="hljs-attr">skill:</span> <span class="hljs-string">Elite</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">23</span><br><span class="hljs-attr">knowoop:</span> <span class="hljs-literal">True</span><br><span class="hljs-attr">likes_emacs:</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-attr">users_cvs:</span> <span class="hljs-literal"><code class="language-hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment"># 一个职工的记录</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">爱运维</span><br><span class="hljs-attr">job:</span> <span class="hljs-string">devops</span><br><span class="hljs-attr">skill:</span> <span class="hljs-string">Elite</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">23</span><br><span class="hljs-attr">knowoop:</span> <span class="hljs-literal">True</span><br><span class="hljs-attr">likes_emacs:</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-attr">users_cvs:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="解析结果：-2">解析结果：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs python">In [<span class="hljs-number">3</span>]: <span class="hljs-keyword">with</span> open(<span class="hljs-string">'dev.yaml'</span>) <span class="hljs-keyword">as</span> f: <br>   ...:     print(yaml.load(f)) <br>   ...:<br>&#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'爱运维'</span>, <span class="hljs-string">'job'</span>: <span class="hljs-string">'devops'</span>, <span class="hljs-string">'skill'</span>: <span class="hljs-string">'Elite'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">23</span>, <span class="hljs-string">'knowoop'</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">'likes_emacs'</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">'users_cvs'</span>: <span class="hljs-literal"><code class="language-hljs python">In [<span class="hljs-number">3</span>]: <span class="hljs-keyword">with</span> open(<span class="hljs-string">'dev.yaml'</span>) <span class="hljs-keyword">as</span> f: <br>   ...:     print(yaml.load(f)) <br>   ...:<br>&#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'爱运维'</span>, <span class="hljs-string">'job'</span>: <span class="hljs-string">'devops'</span>, <span class="hljs-string">'skill'</span>: <span class="hljs-string">'Elite'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">23</span>, <span class="hljs-string">'knowoop'</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">'likes_emacs'</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">'users_cvs'</span>: <span class="hljs-literal">False</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>YAML中可以使用多种方式制定布尔值，如以上YAML文件中的“True”、“TRUE”、“false”，转换为Python代码后，对变量的取值进行了格式化。</strong></p><h3 id="（3）对象和数组嵌套">（3）对象和数组嵌套</h3><p><strong>YAML中的对象和数组是可以任意嵌套的，如下所示：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment"># 一个职工的记录</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">爱运维</span><br><span class="hljs-attr">job:</span> <span class="hljs-string">devops</span><br><span class="hljs-attr">skill:</span> <span class="hljs-string">Elite</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">23</span><br><span class="hljs-attr">knowoop:</span> <span class="hljs-literal">True</span><br><span class="hljs-attr">likes_emacs:</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-attr">users_cvs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">foods:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Apple</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Orange</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Strawberry</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Mango</span><br><span class="hljs-attr">languages:</span><br>    <span class="hljs-attr">ruby:</span> <span class="hljs-string">Elite</span><br>    <span class="hljs-attr">python:</span> <span class="hljs-string">Elite</span><br>    <span class="hljs-attr">shell:</span> <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment"># 一个职工的记录</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">爱运维</span><br><span class="hljs-attr">job:</span> <span class="hljs-string">devops</span><br><span class="hljs-attr">skill:</span> <span class="hljs-string">Elite</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">23</span><br><span class="hljs-attr">knowoop:</span> <span class="hljs-literal">True</span><br><span class="hljs-attr">likes_emacs:</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-attr">users_cvs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">foods:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Apple</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Orange</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Strawberry</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Mango</span><br><span class="hljs-attr">languages:</span><br>    <span class="hljs-attr">ruby:</span> <span class="hljs-string">Elite</span><br>    <span class="hljs-attr">python:</span> <span class="hljs-string">Elite</span><br>    <span class="hljs-attr">shell:</span> <span class="hljs-string">Lame</span><br></code></pre></td></tr></table></figure><h3 id="（4）注意事项">（4）注意事项</h3><p><strong>在YAML中定义字符串的时候，不需要使用单引号或者双引号，直接将字符串写在文件中即可。如下所示：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs yaml"><span class="hljs-attr">str:</span> <span class="hljs-string">this</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-attr">str:</span> <span class="hljs-string">this</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">string</span><br></code></pre></td></tr></table></figure><p><strong>如果字符串中包含了特殊字符，需要使用双引号包含起来。比如：字符串中包含冒号。冒号是YAML中的特殊字符，因此需要使用双引号包含起来。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs yaml"><span class="hljs-attr">foo:</span> <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-attr">foo:</span> <span class="hljs-string">"somebody said I should put a colon here: so I did"</span><br></code></pre></td></tr></table></figure><p><strong>如果字符串内容比较长，可以使用“&gt;”来折叠换行。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs yaml"><span class="hljs-attr">that:</span> <span class="hljs-string">&gt;</span><br>    <span class="hljs-string">Foo</span><br>    <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-attr">that:</span> <span class="hljs-string">&gt;</span><br>    <span class="hljs-string">Foo</span><br>    <span class="hljs-string">Bar</span><br></code></pre></td></tr></table></figure><p><strong>将以上YAML文件转换为Python的内部对象后，“Foo”和“Bar”都是字符串的一部分。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python">&#123;<span class="hljs-string">'that'</span>: <span class="hljs-string"><code class="language-hljs python">&#123;<span class="hljs-string">'that'</span>: <span class="hljs-string">'Foo Bar\n'</span>&#125;<br></code></pre></td></tr></table></figure><h1>五、Ansible模块</h1><h2 id="1、Ansible的模块工作原理">1、Ansible的模块工作原理</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. 将模块拷贝到远程服务器<br>2. 执行模块定义的操作，完成对服务器的修改<br>3. 在远程服务器删除模块<br></code></pre></td></tr></table></figure><p><strong>Ansible中的模块是幂等的，也就是说，多次执行相同的操作，只有第一次会起作用。这也是在编写自定义的Ansible模块的时候需要注意的。</strong></p><h2 id="2、模块列表与帮助信息"><strong>2、模块列表与帮助信息</strong></h2><p><strong>Ansible模块非常多，如果以模块的功能进行分类的话，可以分为以下模块：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs txt"><code class="language-hljs txt">云模块<br>命令模块<br>数据库模块<br>文件模块<br>资产模块<br>消息模块<br>监控模块<br>网络模块<br>通知模块<br>包管理模块<br>源码控制模块<br>系统模块<br>单元模块<br>web设施模块<br>Windows模块<br>……<br></code></pre></td></tr></table></figure><p><strong>查看Ansible模块帮助信息，如下所示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@python ~]<span class="hljs-comment"><code class="language-hljs python">[root@python ~]<span class="hljs-comment"># ansible-doc -l</span><br></code></pre></td></tr></table></figure><p><strong>查看指定模块的帮助信息，如下所示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@python ~]<span class="hljs-comment"># ansible file</span><br>[WARNING]: Could <span class="hljs-keyword">not</span> match supplied host pattern, ignoring: file<br>[WARNING]: No hosts matched, nothing to do<br>usage: ansible [-h] [--version] [-v] [-b] [--become-method BECOME_METHOD] [--become-user BECOME_USER] [-K] [-i INVENTORY]<br>               [--list-hosts] [-l SUBSET] [-P POLL_INTERVAL] [-B SECONDS] [-o] [-t TREE] [-k]<br>               [--private-key PRIVATE_KEY_FILE] [-u REMOTE_USER] [-c CONNECTION] [-T TIMEOUT]<br>               [--ssh-common-args SSH_COMMON_ARGS] [--sftp-extra-args SFTP_EXTRA_ARGS] [--scp-extra-args SCP_EXTRA_ARGS]<br>               [--ssh-extra-args SSH_EXTRA_ARGS] [-C] [--syntax-check] [-D] [-e EXTRA_VARS] [--vault-id VAULT_IDS]<br>               [--ask-vault-<span class="hljs-keyword"><code class="language-hljs python">[root@python ~]<span class="hljs-comment"># ansible file</span><br>[WARNING]: Could <span class="hljs-keyword">not</span> match supplied host pattern, ignoring: file<br>[WARNING]: No hosts matched, nothing to do<br>usage: ansible [-h] [--version] [-v] [-b] [--become-method BECOME_METHOD] [--become-user BECOME_USER] [-K] [-i INVENTORY]<br>               [--list-hosts] [-l SUBSET] [-P POLL_INTERVAL] [-B SECONDS] [-o] [-t TREE] [-k]<br>               [--private-key PRIVATE_KEY_FILE] [-u REMOTE_USER] [-c CONNECTION] [-T TIMEOUT]<br>               [--ssh-common-args SSH_COMMON_ARGS] [--sftp-extra-args SFTP_EXTRA_ARGS] [--scp-extra-args SCP_EXTRA_ARGS]<br>               [--ssh-extra-args SSH_EXTRA_ARGS] [-C] [--syntax-check] [-D] [-e EXTRA_VARS] [--vault-id VAULT_IDS]<br>               [--ask-vault-<span class="hljs-keyword">pass</span> | --vault-password-file VAULT_PASSWORD_FILES] [-f<br></code></pre></td></tr></table></figure><h2 id="3、常用的Ansible模块">3、常用的Ansible模块</h2><p><strong>Ansible提供的功能越丰富，所需要的模块也就越多。默认情况下，模块存储在/usr/share/ansible目录中。</strong></p><h3 id="（1）ping">（1）ping</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible test -m ping<br>192.168.1.40 | SUCCESS => &#123;<br>    "ansible_facts": &#123;<br>        "discovered_interpreter_python": "/usr/bin/python"<br>    &#125;, <br>    "changed": false, <br>    "ping": "pong"<br>&#125;<br>Enter passphrase for key '/root/.ssh/id_rsa': <br>192.168.1.80 | SUCCESS => &#123;<br>    "ansible_facts": &#123;<br>        "discovered_interpreter_python": "/usr/bin/python"<br>    &#125;, <br>    "changed": false, <br>    "ping": "pong"<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（2）远程命令模块">（2）远程命令模块</h3><h4 id="1）command模块">1）command模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs python">ansible test -m command -a <span class="hljs-string">'hostname'</span><br>ansible test -m command -a <span class="hljs-string">'/sbin/shutdown -t now'</span><br>ansible test -a <span class="hljs-string"><code class="language-hljs python">ansible test -m command -a <span class="hljs-string">'hostname'</span><br>ansible test -m command -a <span class="hljs-string">'/sbin/shutdown -t now'</span><br>ansible test -a <span class="hljs-string">'hostname'</span><br></code></pre></td></tr></table></figure><p><strong>command模块在执行Linux命令时，不能使用管道。如下所示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs python">ansible test -m command -a <span class="hljs-string"><code class="language-hljs python">ansible test -m command -a <span class="hljs-string">'cat /etc/passwd | wc -l'</span><br></code></pre></td></tr></table></figure><p><strong>执行后报错如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.40</span> | FAILED | rc=<span class="hljs-number">1</span> &gt;&gt;<br>cat：无效选项 -- l<br>Try <span class="hljs-string">'cat --help'</span> <span class="hljs-keyword">for</span> more information.non-zero <span class="hljs-keyword">return</span> code<br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.80</span> | FAILED | rc=<span class="hljs-number">1</span> &gt;&gt;<br>cat：无效选项 -- l<br>Try <span class="hljs-string">'cat --help'</span> <span class="hljs-keyword">for</span> more information.non-zero <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.40</span> | FAILED | rc=<span class="hljs-number">1</span> &gt;&gt;<br>cat：无效选项 -- l<br>Try <span class="hljs-string">'cat --help'</span> <span class="hljs-keyword">for</span> more information.non-zero <span class="hljs-keyword">return</span> code<br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.80</span> | FAILED | rc=<span class="hljs-number">1</span> &gt;&gt;<br>cat：无效选项 -- l<br>Try <span class="hljs-string">'cat --help'</span> <span class="hljs-keyword">for</span> more information.non-zero <span class="hljs-keyword">return</span> code<br></code></pre></td></tr></table></figure><h4 id="2）raw模块">2）raw模块</h4><p><strong>如果执行的命令需要使用管道，可以使用raw模块，如下所示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@python ~]<span class="hljs-comment">#  ansible test -m raw -a 'cat /etc/passwd | wc -l'</span><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.80</span> | CHANGED | rc=<span class="hljs-number">0</span> &gt;&gt;<br><span class="hljs-number">45</span><br>Shared connection to <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.80</span> closed.<br><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.40</span> | CHANGED | rc=<span class="hljs-number">0</span> &gt;&gt;<br><span class="hljs-number">44</span><br>Shared connection to <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number"><code class="language-hljs python">[root@python ~]<span class="hljs-comment">#  ansible test -m raw -a 'cat /etc/passwd | wc -l'</span><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.80</span> | CHANGED | rc=<span class="hljs-number">0</span> &gt;&gt;<br><span class="hljs-number">45</span><br>Shared connection to <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.80</span> closed.<br><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.40</span> | CHANGED | rc=<span class="hljs-number">0</span> &gt;&gt;<br><span class="hljs-number">44</span><br>Shared connection to <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.40</span> closed.<br></code></pre></td></tr></table></figure><p><strong>raw模块相当于使用ssh直接执行Linux命令，不会进入到Ansible的模块的子系统中。</strong></p><h4 id="3）shell模块">3）shell模块</h4><p><strong>除了使用raw模块以外，也可以使用shell模块，如下所示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs python">[root@python ~]<span class="hljs-comment"># ansible test -m shell -a 'cat /etc/passwd | wc -l'</span><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.40</span> | CHANGED | rc=<span class="hljs-number">0</span> &gt;&gt;<br><span class="hljs-number">44</span><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.80</span> | CHANGED | rc=<span class="hljs-number">0</span> &gt;&gt;<br><span class="hljs-number"><code class="language-hljs python">[root@python ~]<span class="hljs-comment"># ansible test -m shell -a 'cat /etc/passwd | wc -l'</span><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.40</span> | CHANGED | rc=<span class="hljs-number">0</span> &gt;&gt;<br><span class="hljs-number">44</span><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.80</span> | CHANGED | rc=<span class="hljs-number">0</span> &gt;&gt;<br><span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><p><strong>shell模块还可以执行远程服务器上的shell脚本，其中，脚本文件的路径需要使用绝对路径，如下所示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">ansible test -m shell -a '/home/test/test.sh'<br></code></pre></td></tr></table></figure><h4 id="统计某个文件有多少行">统计某个文件有多少行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible common -m raw -a 'cat /etc/passwd | wc -l'<br>192.168.1.40 | CHANGED | rc=0 >><br>43<br>Shared connection to 192.168.1.40 closed.<br><br>192.168.1.80 | CHANGED | rc=0 >><br>45<br>Shared connection to 192.168.1.80 closed.<br><br>[root@python ~]# ansible common -m shell -a 'cat /etc/passwd | wc -l'<br>192.168.1.40 | CHANGED | rc=0 >><br>43<br>192.168.1.80 | CHANGED | rc=0 >><br>45<br></code></pre></td></tr></table></figure><p><strong>引用文件的方式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@python ~]# vim test.sh <br><br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell">[root@python ~]# vim test.sh <br><br><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span><br>cat /etc/passwd | wc -l<br>[root@python ~]# ansible common -m script -a 'test.sh'<br>192.168.1.40 | CHANGED => &#123;<br>    "changed": true, <br>    "rc": 0, <br>    "stderr": "Shared connection to 192.168.1.40 closed.\r\n", <br>    "stderr_lines": [<br>        "Shared connection to 192.168.1.40 closed."<br>    ], <br>    "stdout": "43\r\n", <br>    "stdout_lines": [<br>        "43"<br>    ]<br>&#125;<br>192.168.1.80 | CHANGED => &#123;<br>    "changed": true, <br>    "rc": 0, <br>    "stderr": "Shared connection to 192.168.1.80 closed.\r\n", <br>    "stderr_lines": [<br>        "Shared connection to 192.168.1.80 closed."<br>    ], <br>    "stdout": "45\r\n", <br>    "stdout_lines": [<br>        "45"<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（3）file">（3）file</h5><p><strong>file模块主要用于对远程服务器上的文件（包括链接和目录）进行操作，包括修改文件的权限、修改文件的所有者、创建文件、删除文件等。</strong></p><h4 id="file模块使用示例："><strong>file模块使用示例：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 创建一个目录</span><br>ansible test -m file -a <span class="hljs-string">'path=/tmp/dd state=directory mode=0o755'</span><br><br><span class="hljs-comment"># 修改文件的权限</span><br>ansible test -m file -a <span class="hljs-string">"path=/tmp/dd state=touch mode='u=rw,g=r,o=r'"</span><br><br><span class="hljs-comment"># 创建一个软链接</span><br>ansible test -m file -a <span class="hljs-string">'src=/tmp/dd dest=/tmp/dd1 state=link owner=root group=root'</span><br><br><span class="hljs-comment"># 修改一个文件的所有者</span><br>ansible test -m file -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 创建一个目录</span><br>ansible test -m file -a <span class="hljs-string">'path=/tmp/dd state=directory mode=0o755'</span><br><br><span class="hljs-comment"># 修改文件的权限</span><br>ansible test -m file -a <span class="hljs-string">"path=/tmp/dd state=touch mode='u=rw,g=r,o=r'"</span><br><br><span class="hljs-comment"># 创建一个软链接</span><br>ansible test -m file -a <span class="hljs-string">'src=/tmp/dd dest=/tmp/dd1 state=link owner=root group=root'</span><br><br><span class="hljs-comment"># 修改一个文件的所有者</span><br>ansible test -m file -a <span class="hljs-string">"path=/tmp/dd owner=root group=root mode=0o644"</span> -become<br></code></pre></td></tr></table></figure><h4 id="file模块中重要选项："><strong>file模块中重要选项：</strong></h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. path: 指定文件/目录的路径<br>2. recurse: 递归设置文件属性，只对目录有效<br>3. group: 定义文件/目录的组<br>4. mode: 定义文件/目录的权限<br>5. owner: 定义文件/目录的所有者<br>6. src: 要被链接的源文件路径，只应用于state为link的情况<br>7. dest: 被链接到的路径，只应用于state为link的情况<br>8. force: 在两种情况下会强制创建软链接，一种情况是源文件不存在，但之后会建立的情况；另一种情况是目标软链接已经存在，需要先取消了之前的软链接，然后再创建新的软链接，默认取值为no<br>9. state: 该选项有多个取值，包括directory、file、link、hard、touch、absent。各个取值的含义如下：取值为directory，如果目录不存在，创建目录；取值为file时，即使文件不存在也不会被创建；取值为link时，创建软链接；取值为hard时，创建硬链接；取值为touch时，如果文件不存就创建一个新文件，如果文件或目录已经存在，更新其最后访问时间和修改时间；取值为absent时，删除目录、文件或者链接<br></code></pre></td></tr></table></figure><h4 id="1-创建文件">&lt;1&gt;创建文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible  common -m file -a 'path=/opt/test.md state=touch'<br></code></pre></td></tr></table></figure><h5 id="查看一下">查看一下</h5><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200520213902203.png" alt="image-20200520213902203"></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200520213917288.png" alt="image-20200520213917288"></p><h4 id="2-创建目录">&lt;2&gt;创建目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible  common -m file -a 'path=/opt/test mode=0755 state=directory'<br></code></pre></td></tr></table></figure><h5 id="查看一下-2">查看一下</h5><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200520214344689.png" alt="image-20200520214344689"></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200520214401233.png" alt="image-20200520214401233"></p><h4 id="3-创建并删除文件">&lt;3&gt;创建并删除文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible  common -m file -a 'path=/opt/abc mode=0640 state=touch'<br>//创建<br></code></pre></td></tr></table></figure><h5 id="查看一下-3"><strong>查看一下</strong></h5><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200520215349872.png" alt="image-20200520215349872"></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200520215415349.png" alt="image-20200520215415349"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible  common -m file -a 'path=/opt/abc mode=0640 state=absent'<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200520215645645.png" alt="image-20200520215645645"></p><h4 id="4-创建并改变文件所有者">&lt;4&gt;创建并改变文件所有者</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible  common -m file -a 'path=/opt/abc mode=0640 state=touch'<br><br>[root@python ~]# ansible  common -m file -a 'path=/opt/abc mode=0640 owner=test group=root' -become<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200520220049916.png" alt="image-20200520220049916"></p><h3 id="（4）copy">（4）copy</h3><p><strong>copy模块用来将主控节点的文件或者目录拷贝到远程服务器上，类似于Linux下的scp命令。但是，copy模块比scp命令更强大，在拷贝文件到远程服务器上的同时，也可以设置文件在远程服务器上的权限和所有者。</strong></p><p><strong>copy模块的使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 拷贝文件到远程服务器</span><br>ansible test -m copy -a <span class="hljs-string">'src=test.sh dest=/tmp/test.sh'</span><br><br><span class="hljs-comment"># 拷贝文件到远程服务器，如果远程服务器已经存在这个文件，则备份文件</span><br>ansible test -m copy -a <span class="hljs-string">'src=test.sh dest=/tmp/test.sh backup=yes force=yes'</span><br><br><span class="hljs-comment"># 拷贝文件到远程服务器，并且修改文件的所有者和权限</span><br>ansible test -m copy -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 拷贝文件到远程服务器</span><br>ansible test -m copy -a <span class="hljs-string">'src=test.sh dest=/tmp/test.sh'</span><br><br><span class="hljs-comment"># 拷贝文件到远程服务器，如果远程服务器已经存在这个文件，则备份文件</span><br>ansible test -m copy -a <span class="hljs-string">'src=test.sh dest=/tmp/test.sh backup=yes force=yes'</span><br><br><span class="hljs-comment"># 拷贝文件到远程服务器，并且修改文件的所有者和权限</span><br>ansible test -m copy -a <span class="hljs-string">'src=tes.sh dest=/tmp/tes.sh owner=root group=root mode=644 force=yes'</span> -become<br></code></pre></td></tr></table></figure><p><strong>copy模块中重要选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. src：要复制到远程服务器的文件地址，可以是绝对路径，也可以是相对路径。如果路径时一个目录，将递归复制。在这种情况下，如果使用“/”结尾，则复制目录里的内容；如果没有用“/”来结尾，则将包含目录在内的整个内容复制，类似于rsync<br>2. dest：文件要复制到的目的地，必须是一个绝对路径，如果源文件是一个目录，那么dest指向的也必须是一个目录<br>3. force：默认取值为yes，表示目标主机包含该文件，但是内容不同时，会强制覆盖；如果该选项设置为no，只有当目标主机的目标位置不存在该文件时，才会进行复制<br>4. backup：默认取值为no，如果取值为yes，那么在覆盖之前将原文件进行备份<br>5. directory_mode：递归设定目录权限，默认为系统默认权限<br>6. others：所有file模块里的选项都可以在这里使用<br></code></pre></td></tr></table></figure><h3 id="（5）user-group"><strong>（5）user/group</strong></h3><p><strong>user模块请求的是useradd、userdel、usermod这三个指令，group模块请求的是groupadd、groupdel、groupmod这三个指令。</strong></p><p><strong>user/group模块的使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 创建一个用户</span><br>ansible test -m user -a <span class="hljs-string">'name=John comment="John Doe" uid=1239 group=root'</span> -become<br><br><span class="hljs-comment"># 删除一个用户</span><br>ansible test -m user -a <span class="hljs-string">'name=John state=absent'</span> -become<br><br><span class="hljs-comment"># 创建一个用户，并且产生一对密钥</span><br>ansible test -m user -a <span class="hljs-string">'name=John comment="John Doe" generate_ssh_key=yes ssh_key_bits=2048'</span> -become<br><br><span class="hljs-comment"># 创建群组</span><br>ansible test -m group -a <span class="hljs-string">'name=ansible state=present gid=1234'</span> -become<br><br><span class="hljs-comment"># 删除群组</span><br>ansible test -m group -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 创建一个用户</span><br>ansible test -m user -a <span class="hljs-string">'name=John comment="John Doe" uid=1239 group=root'</span> -become<br><br><span class="hljs-comment"># 删除一个用户</span><br>ansible test -m user -a <span class="hljs-string">'name=John state=absent'</span> -become<br><br><span class="hljs-comment"># 创建一个用户，并且产生一对密钥</span><br>ansible test -m user -a <span class="hljs-string">'name=John comment="John Doe" generate_ssh_key=yes ssh_key_bits=2048'</span> -become<br><br><span class="hljs-comment"># 创建群组</span><br>ansible test -m group -a <span class="hljs-string">'name=ansible state=present gid=1234'</span> -become<br><br><span class="hljs-comment"># 删除群组</span><br>ansible test -m group -a <span class="hljs-string">'name=ansible state=absent'</span> -become<br></code></pre></td></tr></table></figure><p><strong>user/group模块重要选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. name：需要操作的用户名或群组名<br>2. comment：用户的描述信息<br>3. createhome：创建用户时，是否创建家目录，默认为yes<br>4. home：指定用户的家目录，需要与createhome选项配合使用<br>5. group：指定用户的属组<br>6. uid：设置用户的id<br>7. gid：设置群组的id<br>8. password：设置用户的密码<br>9. state：是创建用户或群组，还是删除用户后群组，取值包括present和absent<br>10. expires：用户的过期时间<br>11. shell：指定用户的shell环境<br></code></pre></td></tr></table></figure><h3 id="（6）yum"><strong>（6）yum</strong></h3><p><strong>yum模块可以帮助我们在远程主机上通过yum源管理软件包。</strong></p><p><strong>yum模块使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 安装软件包</span><br>ansible test -m yum -a <span class="hljs-string">'name=nginx disable_gpg_check=yes'</span><br>ansible test -m yum -a <span class="hljs-string">'name=nginx state=present disable_gpg_check=yes'</span><br>ansible test -m yum -a <span class="hljs-string">'name=nginx state=installed disable_gpg_check=yes'</span><br>ansible test -m yum -a <span class="hljs-string">'name=nginx state=latest disable_gpg_check=yes'</span><br><br><span class="hljs-comment"># 卸载软件包</span><br>ansible test70 -m yum -a <span class="hljs-string">'name=nginx state=absent'</span><br>ansible test70 -m yum -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 安装软件包</span><br>ansible test -m yum -a <span class="hljs-string">'name=nginx disable_gpg_check=yes'</span><br>ansible test -m yum -a <span class="hljs-string">'name=nginx state=present disable_gpg_check=yes'</span><br>ansible test -m yum -a <span class="hljs-string">'name=nginx state=installed disable_gpg_check=yes'</span><br>ansible test -m yum -a <span class="hljs-string">'name=nginx state=latest disable_gpg_check=yes'</span><br><br><span class="hljs-comment"># 卸载软件包</span><br>ansible test70 -m yum -a <span class="hljs-string">'name=nginx state=absent'</span><br>ansible test70 -m yum -a <span class="hljs-string">'name=nginx state=removed'</span><br></code></pre></td></tr></table></figure><p><strong>yum模块重要选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. name：必须参数，用于指定需要管理的软件包，比如nginx<br>2. state：用于指定软件包的状态 ，默认值为present，表示确保软件包已经安装，除了present，其他可用值有installed、latest、absent、removed，其中installed与present等效，latest表示安装yum中最新的版本，absent和removed等效，表示删除对应的软件包<br>3. disable_gpg_check：用于禁用对rpm包的公钥gpg验证，默认值为no，表示不禁用验证，设置为yes表示禁用验证，即不验证包，直接安装，在对应的yum源没有开启gpg验证的情况下，需要将此参数的值设置为yes，否则会报错而无法进行安装<br>4. enablerepo：用于指定安装软件包时临时启用的yum源，假如你想要从A源中安装软件，但是你不确定A源是否启用了，你可以在安装软件包时将此参数的值设置为yes，即使A源的设置是未启用，也可以在安装软件包时临时启用A源<br>5. disablerepo：用于指定安装软件包时临时禁用的yum源，某些场景下需要此参数，比如，当多个yum源中同时存在要安装的软件包时，你可以使用此参数临时禁用某个源，这样设置后，在安装软件包时则不会从对应的源中选择安装包<br>6. enablerepo参数和disablerepo参数可以同时使用<br></code></pre></td></tr></table></figure><h3 id="（7）get-url"><strong>（7）get_url</strong></h3><p><strong>从互联网上下载数据到本地，作用类似于Linux下的curl命令。get_url模块比curl命令更加灵活，可以控制下载以后的数据所有者、权限以及检查下载数据的checksum等。</strong></p><p><strong>get_url模块使用示例：</strong></p><blockquote><p><strong>为了进行get_url测试，使用命令“python -m http.server”启动一个下载服务器，将下载服务器中的文件地址传给url选项。</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 下载文件到远程服务器</span><br>ansible test -m get_url -a <span class="hljs-string">'url=http://localhost:8000/data.tar.gz dest=/tmp/data.tar.gz'</span><br><br><span class="hljs-comment"># 下载文件到远程服务器，并且修改文件的权限</span><br>ansible test -m get_url -a <span class="hljs-string">'url=http://localhost:8000/data.tar.gz dest=/tmp/data.tar.gz mode=0777'</span><br><br><span class="hljs-comment"># 下载文件到远程服务器，并且检查文件的MD5校验是否与控制端的MD5校验相同</span><br>[root@bogon ~]<span class="hljs-comment"># md5sum s.txt</span><br>d41d8cd98f00b204e9800998ecf8427e  s.txt<br>[root@bogon ~]<span class="hljs-comment"># ansible 127.0.0.1 -m get_url -a 'url=http://localhost:8000/s.txt dest=/tmp/s.txt checksum=md5:d41d8cd98f00b204e9800998ecf8427e'</span><br>127.0.0.1 | CHANGED =&gt; &#123;<br>    <span class="hljs-string">"ansible_facts"</span>: &#123;<br>        <span class="hljs-string">"discovered_interpreter_python"</span>: <span class="hljs-string">"/usr/bin/python"</span><br>    &#125;,<br>    <span class="hljs-string">"changed"</span>: true,<br>    <span class="hljs-string">"checksum_dest"</span>: null,<br>    <span class="hljs-string">"checksum_src"</span>: <span class="hljs-string">"da39a3ee5e6b4b0d3255bfef95601890afd80709"</span>,<br>    <span class="hljs-string">"dest"</span>: <span class="hljs-string">"/tmp/s.txt"</span>,<br>    <span class="hljs-string">"elapsed"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"gid"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"group"</span>: <span class="hljs-string">"root"</span>,<br>    <span class="hljs-string">"md5sum"</span>: <span class="hljs-string">"d41d8cd98f00b204e9800998ecf8427e"</span>,<br>    <span class="hljs-string">"mode"</span>: <span class="hljs-string">"0644"</span>,<br>    <span class="hljs-string">"msg"</span>: <span class="hljs-string">"OK (0 bytes)"</span>,<br>    <span class="hljs-string">"owner"</span>: <span class="hljs-string">"root"</span>,<br>    <span class="hljs-string">"secontext"</span>: <span class="hljs-string">"unconfined_u:object_r:admin_home_t:s0"</span>,<br>    <span class="hljs-string">"size"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"src"</span>: <span class="hljs-string">"/root/.ansible/tmp/ansible-tmp-1584171703.8607588-137457225931919/tmpG3otIP"</span>,<br>    <span class="hljs-string">"state"</span>: <span class="hljs-string">"file"</span>,<br>    <span class="hljs-string">"status_code"</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-string">"uid"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"url"</span>: <span class="hljs-string">"http://localhost:8000/s.txt"</span><br>&#125;<br>[root@bogon ~]<span class="hljs-comment"># ansible 127.0.0.1 -m get_url -a 'url=http://localhost:8000/s.txt dest=/tmp/s.txt checksum=md5:d41d8cd98f00b204e9800998ecf84270'</span><br>127.0.0.1 | FAILED! =&gt; &#123;<br>    <span class="hljs-string">"ansible_facts"</span>: &#123;<br>        <span class="hljs-string">"discovered_interpreter_python"</span>: <span class="hljs-string">"/usr/bin/python"</span><br>    &#125;,<br>    <span class="hljs-string">"changed"</span>: false,<br>    <span class="hljs-string">"checksum_dest"</span>: <span class="hljs-string">"da39a3ee5e6b4b0d3255bfef95601890afd80709"</span>,<br>    <span class="hljs-string">"checksum_src"</span>: <span class="hljs-string">"da39a3ee5e6b4b0d3255bfef95601890afd80709"</span>,<br>    <span class="hljs-string">"dest"</span>: <span class="hljs-string">"/tmp/s.txt"</span>,<br>    <span class="hljs-string">"elapsed"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"msg"</span>: <span class="hljs-string">"The checksum for /tmp/s.txt did not match d41d8cd98f00b204e9800998ecf84277e; it was d41d8cd98f00b204e9800998ecf8427e."</span>,<br>    <span class="hljs-string">"src"</span>: <span class="hljs-string">"/root/.ansible/tmp/ansible-tmp-1584171717.7448506-78799482489470/tmpyczfH3"</span>,<br>    <span class="hljs-string">"url"</span>: <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 下载文件到远程服务器</span><br>ansible test -m get_url -a <span class="hljs-string">'url=http://localhost:8000/data.tar.gz dest=/tmp/data.tar.gz'</span><br><br><span class="hljs-comment"># 下载文件到远程服务器，并且修改文件的权限</span><br>ansible test -m get_url -a <span class="hljs-string">'url=http://localhost:8000/data.tar.gz dest=/tmp/data.tar.gz mode=0777'</span><br><br><span class="hljs-comment"># 下载文件到远程服务器，并且检查文件的MD5校验是否与控制端的MD5校验相同</span><br>[root@bogon ~]<span class="hljs-comment"># md5sum s.txt</span><br>d41d8cd98f00b204e9800998ecf8427e  s.txt<br>[root@bogon ~]<span class="hljs-comment"># ansible 127.0.0.1 -m get_url -a 'url=http://localhost:8000/s.txt dest=/tmp/s.txt checksum=md5:d41d8cd98f00b204e9800998ecf8427e'</span><br>127.0.0.1 | CHANGED =&gt; &#123;<br>    <span class="hljs-string">"ansible_facts"</span>: &#123;<br>        <span class="hljs-string">"discovered_interpreter_python"</span>: <span class="hljs-string">"/usr/bin/python"</span><br>    &#125;,<br>    <span class="hljs-string">"changed"</span>: true,<br>    <span class="hljs-string">"checksum_dest"</span>: null,<br>    <span class="hljs-string">"checksum_src"</span>: <span class="hljs-string">"da39a3ee5e6b4b0d3255bfef95601890afd80709"</span>,<br>    <span class="hljs-string">"dest"</span>: <span class="hljs-string">"/tmp/s.txt"</span>,<br>    <span class="hljs-string">"elapsed"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"gid"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"group"</span>: <span class="hljs-string">"root"</span>,<br>    <span class="hljs-string">"md5sum"</span>: <span class="hljs-string">"d41d8cd98f00b204e9800998ecf8427e"</span>,<br>    <span class="hljs-string">"mode"</span>: <span class="hljs-string">"0644"</span>,<br>    <span class="hljs-string">"msg"</span>: <span class="hljs-string">"OK (0 bytes)"</span>,<br>    <span class="hljs-string">"owner"</span>: <span class="hljs-string">"root"</span>,<br>    <span class="hljs-string">"secontext"</span>: <span class="hljs-string">"unconfined_u:object_r:admin_home_t:s0"</span>,<br>    <span class="hljs-string">"size"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"src"</span>: <span class="hljs-string">"/root/.ansible/tmp/ansible-tmp-1584171703.8607588-137457225931919/tmpG3otIP"</span>,<br>    <span class="hljs-string">"state"</span>: <span class="hljs-string">"file"</span>,<br>    <span class="hljs-string">"status_code"</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-string">"uid"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"url"</span>: <span class="hljs-string">"http://localhost:8000/s.txt"</span><br>&#125;<br>[root@bogon ~]<span class="hljs-comment"># ansible 127.0.0.1 -m get_url -a 'url=http://localhost:8000/s.txt dest=/tmp/s.txt checksum=md5:d41d8cd98f00b204e9800998ecf84270'</span><br>127.0.0.1 | FAILED! =&gt; &#123;<br>    <span class="hljs-string">"ansible_facts"</span>: &#123;<br>        <span class="hljs-string">"discovered_interpreter_python"</span>: <span class="hljs-string">"/usr/bin/python"</span><br>    &#125;,<br>    <span class="hljs-string">"changed"</span>: false,<br>    <span class="hljs-string">"checksum_dest"</span>: <span class="hljs-string">"da39a3ee5e6b4b0d3255bfef95601890afd80709"</span>,<br>    <span class="hljs-string">"checksum_src"</span>: <span class="hljs-string">"da39a3ee5e6b4b0d3255bfef95601890afd80709"</span>,<br>    <span class="hljs-string">"dest"</span>: <span class="hljs-string">"/tmp/s.txt"</span>,<br>    <span class="hljs-string">"elapsed"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">"msg"</span>: <span class="hljs-string">"The checksum for /tmp/s.txt did not match d41d8cd98f00b204e9800998ecf84277e; it was d41d8cd98f00b204e9800998ecf8427e."</span>,<br>    <span class="hljs-string">"src"</span>: <span class="hljs-string">"/root/.ansible/tmp/ansible-tmp-1584171717.7448506-78799482489470/tmpyczfH3"</span>,<br>    <span class="hljs-string">"url"</span>: <span class="hljs-string">"http://localhost:8000/s.txt"</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>get_url模块重要选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. dest：必传选项，指定将文件下载的绝对路径<br>2. url：必传选项，文件的下载地址（网址）<br>3. url_username: 用于http基本认证的用户名<br>4. url_password： 用于http基本认证的密码<br>5. validate_certs： 如果否，SSL证书将不会验证。这只应在使用自签名证书的个人控制站点上使用<br>6. owner： 指定属主<br>7. group： 指定属组<br>8. mode： 指定权限<br>9. checksum：文件的校验码<br>10. headers：传递给下载服务器的HTTP Headers<br>11. backup：如果本地已经存在同名文件，备份文件<br>12. timeout：下载的超时时间<br></code></pre></td></tr></table></figure><h3 id="（8）unarchive"><strong>（8）unarchive</strong></h3><p><strong>unarchive模块用于解压文件，其作用类似于Linux下的tar命令。默认情况下，unarchive的作用是将控制节点的压缩包拷贝到远程服务器，然后进行解压。</strong></p><p><strong>unarchive模块使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 先创建一个目录</span><br>ansible test - m file -a <span class="hljs-string">'path=/tmp/data state=directory'</span><br><br><span class="hljs-comment"># 解压本地文件</span><br>ansible test - m unarchive -a <span class="hljs-string">'src=data.tar.gz dest=/tmp/data list_files=yes'</span><br><br><span class="hljs-comment"># 将本地文件拷贝到远程服务器</span><br>ansible test -m copy -a <span class="hljs-string">'src=data.tar.bz2 dest=/tmp/data.tar.bz2'</span><br><br><span class="hljs-comment"># 解压远程的文件</span><br>ansible test -m unarchive -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 先创建一个目录</span><br>ansible test - m file -a <span class="hljs-string">'path=/tmp/data state=directory'</span><br><br><span class="hljs-comment"># 解压本地文件</span><br>ansible test - m unarchive -a <span class="hljs-string">'src=data.tar.gz dest=/tmp/data list_files=yes'</span><br><br><span class="hljs-comment"># 将本地文件拷贝到远程服务器</span><br>ansible test -m copy -a <span class="hljs-string">'src=data.tar.bz2 dest=/tmp/data.tar.bz2'</span><br><br><span class="hljs-comment"># 解压远程的文件</span><br>ansible test -m unarchive -a <span class="hljs-string">'src=/tmp/data.tar.bz2 dest=/tmp remote_src=yes'</span><br></code></pre></td></tr></table></figure><p><strong>unarchive模块重要选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. remote_src：该选项可以取值为yes或no，用来表示解压的文件存在远程服务器中，还是存在控制节点所在的服务器中。默认取值为no，表示在解压文件之前，先将控制节点的文件复制到远程主机中，然后在进行解压<br>2. src：指定压缩文件的路径，该选项的取值取决于remote_src的取值。如果remote_src取值为yes，则src指定的是远程服务器中压缩包的地址；如果remote_src的取值为no，则src指向的是控制节点中的路径<br>3. dest：该选项指定的是远程服务器上的绝对路径，表示压缩文件解压的路径<br>4. list_files：默认情况下该选项取值为no，如果该选项取值为yes，也会解压文件，并且在ansible的返回值中列出压缩包里的文件<br>5. exclude：解压文件时排除exclude选项指定的文件或目录列表<br>6. keep_newer：默认取值为False，如果该选项取值为True，那么当目标地址中存在同名的文件，并且文件比压缩包中的文件更新时，不进行覆盖<br>7. owner：文件或目录解压以后的所有者<br>8. group：文件或目录解压以后所属的群组<br>9. mode：文件或目录解压以后的权限<br></code></pre></td></tr></table></figure><h3 id="（9）git"><strong>（9）git</strong></h3><p><strong>git模块非常好理解，就是在远程服务器执行git相关的操作。该模块一般应用于需要源码安装软件时，从github这样的源码托管网站将软件下载到本地，然后执行命令进行源码安装。需要注意的是，该模块依赖于git软件，因此在使用该模块前应该使用yum模块先安装git软件。</strong></p><p><strong>git模块的使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#将requests克隆到/tmp/requests目录下</span><br>ansible test -m git -a <span class="hljs-string">'repo=https://github.com/psf/requests.git dest=/tmp/requests version=HEAD'</span><br><br><span class="hljs-comment"># 从源码安装requests</span><br>ansible test -a <span class="hljs-string">'python setup.py install chdir=/tmp/requests'</span> -become<br><br><span class="hljs-comment"># 验证requests是否安装成功</span><br>ansible test -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#将requests克隆到/tmp/requests目录下</span><br>ansible test -m git -a <span class="hljs-string">'repo=https://github.com/psf/requests.git dest=/tmp/requests version=HEAD'</span><br><br><span class="hljs-comment"># 从源码安装requests</span><br>ansible test -a <span class="hljs-string">'python setup.py install chdir=/tmp/requests'</span> -become<br><br><span class="hljs-comment"># 验证requests是否安装成功</span><br>ansible test -a <span class="hljs-string">"python -c 'import requests'"</span><br></code></pre></td></tr></table></figure><p><strong>git模块常用选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. repo：远程git库的地址，可以是一个git协议、ssh协议或http协议的git库地址<br>2. dest：必选选项，git库clone到本地服务器以后保存的绝对路径<br>3. version：克隆远程git库的版本，取值可以为HEAD、分支的名称、tag的名称，也可以是一个commit的hash值<br>4. force：默认取值为no，当该选项取值为yes时，如果本地的git库有修改，将会抛弃本地的修改<br>5. accept_hostkey：当该选项取值为yes时，如果git库的服务器不在know_hosts中，则添加到konw_hosts中，key_file指定克隆远程git库地址是使用的私钥<br></code></pre></td></tr></table></figure><h3 id="（10）stat"><strong>（10）stat</strong></h3><p><strong>stat模块用于获取远程服务器上的文件信息，其作用类似于Linux下的stat命令。stat模块可以获取atime、ctime、mtime、checksum、size、uid、gid等信息。</strong></p><p><strong>stat只有path这一个必选选项，用来指定文件或目录的路径。stat模块的使用方法如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 获取文件的详细信息</span><br>ansible test -m stat -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 获取文件的详细信息</span><br>ansible test -m stat -a <span class="hljs-string">'path=/etc/passwd'</span><br></code></pre></td></tr></table></figure><h3 id="（11）cron"><strong>（11）cron</strong></h3><p><strong>顾名思义，cron是管理Linux下计划任务的模块。</strong></p><p><strong>cron模块的使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 增加一个crontab任务</span><br>ansible test -m cron -a <span class="hljs-string">'backup=yes name="测试计划任务" minute=*/2 hour=* job="ls /tmp &gt;/dev/null"'</span><br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment"># 增加一个crontab任务</span><br>ansible test -m cron -a <span class="hljs-string">'backup=yes name="测试计划任务" minute=*/2 hour=* job="ls /tmp &gt;/dev/null"'</span><br><br><span class="hljs-comment"># 进入服务器，查看新增的crontab任务</span><br>crontab -l<br></code></pre></td></tr></table></figure><p><strong>该模块包含以下重要选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. backup：取值为yes或no，默认为no，表示修改之前先做备份<br>2. state：取值为present或absent，用来确认该任务计划是创建还是删除<br>3. name：该任务的描述<br>4. job：添加或删除任务，主要取决于state的取值<br>5. user：操作哪一个用户的crontab<br>6. cron_file：如果指定该选项，则用该文件替换远程主机上cron.d命令下的用户任务计划<br>7. month weekday 打印minute hour：取值与crontab类似。例如：对于minute的取值范围0~59，也可以选择“*”表示每分钟运行，或者“*/5”表示每5分钟运行<br></code></pre></td></tr></table></figure><h3 id="（12）service"><strong>（12）service</strong></h3><p><strong>service模块的作用类似于Linux下的service命令，用来启动、停止、重启服务。</strong></p><p><strong>service模块的使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 安装Apache，默认情况下，Apache安装完成以后就会启动</span><br>ansible test -m yum -a <span class="hljs-string">'name=httpd state=present'</span> -become<br><br><span class="hljs-comment"># 停止Apache</span><br>ansible test -m service -a <span class="hljs-string">'name=httpd state=stopped'</span><br><br><span class="hljs-comment"># 重启Apache</span><br>ansible <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -m service -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 安装Apache，默认情况下，Apache安装完成以后就会启动</span><br>ansible test -m yum -a <span class="hljs-string">'name=httpd state=present'</span> -become<br><br><span class="hljs-comment"># 停止Apache</span><br>ansible test -m service -a <span class="hljs-string">'name=httpd state=stopped'</span><br><br><span class="hljs-comment"># 重启Apache</span><br>ansible <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -m service -a <span class="hljs-string">'name=httpd state=restarted'</span><br></code></pre></td></tr></table></figure><p><strong>service模块的常用选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. name：服务的名称，该选项为必选项<br>2. state：可以取值为started、stopped、restarted和reload。其中，started和stopped是幂等的，也就是说，如果服务已经启动了，执行started不会执行任何操作<br>3. sleep：重启的过程中，先停止服务，然后sleep几秒在启动<br>4. pattern：定义一个模式，ansible首先通过status命令查看服务的状态，依次判断服务是否在运行。如果通过status查看服务状态时没有响应，ansible会尝试匹配ps命令的输出，当匹配到相应模式时，认为服务已经启动，否则认为服务没有启动<br>5. enabled：取值为yes或no，用来设置服务是否开机启动<br></code></pre></td></tr></table></figure><h3 id="（13）sysctl"><strong>（13）sysctl</strong></h3><p><strong>该模块的作用与Linux下的sysctl命令相似，用于控制Linux的内核参数。</strong></p><p><strong>sysctl模块使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 设置overcommit_memory参数的值为1</span><br>ansible test -m sysctl -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 设置overcommit_memory参数的值为1</span><br>ansible test -m sysctl -a <span class="hljs-string">'name=vm.overcommit_memory value=1'</span> -become<br></code></pre></td></tr></table></figure><p><strong>sysctl模块的常用选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. name：需要设置的参数<br>2. value：需要设置的值<br>3. sysctl_file：sysctl.conf文件的绝对路径，默认路径是/etc/sysctl.conf<br>4. reload：该选项可以取值为yes或no，默认为yes，用于表示设置完成以后是否需要执行sysctl -p操作<br></code></pre></td></tr></table></figure><h3 id="（14）setup"><strong>（14）setup</strong></h3><p><strong>setup模块用于收集远程主机的信息</strong></p><p><strong>setup模块的使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 获取IP地址</span><br>ansible test -m setup -a <span class="hljs-string">'filter=ansible_default_ipv4'</span><br><br><span class="hljs-comment"># 获取内存信息</span><br>ansible test -m setup -a <span class="hljs-string">'filter=ansible_memory_mb'</span><br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment"># 获取IP地址</span><br>ansible test -m setup -a <span class="hljs-string">'filter=ansible_default_ipv4'</span><br><br><span class="hljs-comment"># 获取内存信息</span><br>ansible test -m setup -a <span class="hljs-string">'filter=ansible_memory_mb'</span><br><br><span class="hljs-comment"># 获取主机完整信息</span><br>ansible test -m setup<br></code></pre></td></tr></table></figure><h3 id="（15）mount"><strong>（15）mount</strong></h3><p><strong>在远程服务器上挂载磁盘，当进行挂盘操作是，如果挂载点指定的路径不存在，将创建该路径。</strong></p><p><strong>mount模块使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 挂载/dev/vda盘到/mnt/data目录</span><br>ansible test -m mount -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 挂载/dev/vda盘到/mnt/data目录</span><br>ansible test -m mount -a <span class="hljs-string">'name=/mnt/data src=/dev/vda fstype=ext4 state=mounted'</span><br></code></pre></td></tr></table></figure><p><strong>mount模块常用选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. name：挂载点的路径<br>2. state：可以取值为present、absent、mounted、unmounted，其中，mounted与unmounted用来处理磁盘的挂载和卸载，并且会正确配置fstab文件，present与absent只会设置fstab文件，不会去操作磁盘<br>3. fstype：指定文件系统类型，当state取值为present或mounted时，该选项为必填选项<br>4. src：挂载的设备<br></code></pre></td></tr></table></figure><h3 id="（16）synchronize"><strong>（16）synchronize</strong></h3><p><strong>synchronize模块是对rsync命令的封装，以便对常见的rsync任务进行处理。我们也可以使用command模块调用rsync命令执行相应的操作。rsync是一个比较复杂的命令，相对来说，使用synchronize简单一些。</strong></p><p><strong>synchronize模块的使用示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#  同步本地目录到远程服务器</span><br>ansible test -m synchronize -a <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#  同步本地目录到远程服务器</span><br>ansible test -m synchronize -a <span class="hljs-string">'src=test dest=/tmp'</span><br></code></pre></td></tr></table></figure><p><strong>synchronize模块的常用选项：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs tex"><code class="language-hljs tex">1. src：需要同步到远程服务器的文件和目录<br>2. dest：远程服务器保存数据的路径<br>3. archive：默认取值为yes，相当于同时开启recursive、links、perms、times、owner、group、-D等选项<br>4. compress：默认为yes，表示在文件同步过程中是否启用压缩<br>5. delete：默认为no，当取值为yes时，表示删除dest中存在而src中不存在的文件<br></code></pre></td></tr></table></figure><h4 id="4、模块的返回值"><strong>4、模块的返回值</strong></h4><p><strong>Ansible通过模块来执行具体的操作，由于模块的功能千差万别，所以执行模块操作后，Ansible会根据不同的需要返回不同的结果。虽然如此，Ansible中也有一些常见的返回值。如下所示：</strong></p><table><thead><tr><th><strong>返回值的名称</strong></th><th><strong>返回值的含义</strong></th></tr></thead><tbody><tr><td><strong>changed</strong></td><td><strong>几乎所有的Ansible模块都会返回该变量，表示模块是否对远程主机执行了修改操作</strong></td></tr><tr><td><strong>failed</strong></td><td><strong>如果模块未能执行完成，将返回failed为True</strong></td></tr><tr><td><strong>msg</strong></td><td><strong>模块执行失败的原因，常见的错误如ssh连接失败，没有权限执行模块等</strong></td></tr><tr><td><strong>rc</strong></td><td><strong>与命令行工具相关的模块会返回rc，表示执行Linux命令的返回码</strong></td></tr><tr><td><strong>stdout</strong></td><td><strong>与rc类似，返回的是标准输出的结果</strong></td></tr><tr><td><strong>stderr</strong></td><td><strong>与rc类似，返回的是错误输出的结果</strong></td></tr><tr><td><strong>backup_file</strong></td><td><strong>所有存在backup选项的模块，用来返回备份文件的路径</strong></td></tr><tr><td><strong>results</strong></td><td><strong>应用在Playbook中存在循环的情况，返回多个结果</strong></td></tr></tbody></table><p><strong>错误的</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@python ~]# ansible  test -i hosts -a 'echo &#123;&#123;ansible_port&#125;&#125;'192.168.1.60 | CHANGED | rc=0 >><br>22<br>192.168.1.80 | CHANGED | rc=0 >><br>22<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、Ansible介绍&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Ansible是一个简单的自动化运维工具，可完成配置管理、应用部署、服务编排以及其他各种IT需求。Ansible也是一款基于Python语言实现的开源软件，其依赖Jinja2、paramiko和PYYAML这几个Py
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="nfs" scheme="https://wsdlxgp.top/tags/nfs/"/>
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="pvc" scheme="https://wsdlxgp.top/tags/pvc/"/>
    
      <category term="dashboard" scheme="https://wsdlxgp.top/tags/dashboard/"/>
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="StorageClass" scheme="https://wsdlxgp.top/tags/StorageClass/"/>
    
      <category term="python" scheme="https://wsdlxgp.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>45 k8s复习</title>
    <link href="https://wsdlxgp.top/posts/h8er.html"/>
    <id>https://wsdlxgp.top/posts/h8er.html</id>
    <published>2019-09-13T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:59.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建镜像的方法">创建镜像的方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# vim Dockerfile<br>FROM nginx<br>ADD index.htm /usr/share/nginx/html/<br>//创建Dockerfile<br><br>[root@master test]# echo "<h1>version 01 wsd</h1>" > index.html<br>[root@master test]# docker build -t 192.168.1.1:5000/nginx .<br>[root@master test]# echo "<h1>version 02 wsd</h1>" > index.html <br>[root@master test]# docker build -t 192.168.1.1:5000/nginx:v1.14 <br>[root@master test]# echo "<h1>version 03 wsd</h1>" > index.html .<br>[root@master test]# docker build -t 192.168.1.1:5000/nginx:v1.15 .<br>//创建不同index.html文件，生成测试镜像<br><br>[root@master test]# docker push 192.168.1.1:5000/nginx<br>[root@master test]# docker push 192.168.1.1:5000/nginx:v1.14<br>[root@master test]# docker push 192.168.1.1:5000/nginx:v1.15<br>//上传镜像<br></code></pre></td></tr></table></figure><h1>2) deployment名字为:nginx,保证运行3个Pod.service名字为：nginx-svc。映射到主机端口：31234.（10分）</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# docker pull nginx<br>//下载nginx镜像<br>[root@master yaml]# vim deployment.yaml <br>//编写deployment和service的yaml文件<br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nginx<br>spec:<br>  replicas: 3<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx<br>    spec:<br>      containers:<br>      - name: nginx<br>        image: nginx<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx-svc<br>spec:<br>  type: NodePort<br>  selector:<br>    app: nginx<br>  ports:<br>    - port: 80<br>      targetPort: 80<br>      nodePort: 31234<br></code></pre></td></tr></table></figure><h2 id="执行一下">执行一下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f deployment.yaml<br></code></pre></td></tr></table></figure><h2 id="查看一下">查看一下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><img src="http://q9npprkue.bkt.clouddn.com/image-20200315100201329.png" alt="image-20200315100201329"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get svc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315100228967.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315100228967.png" alt="image-20200315100228967"></a></p><h2 id="访问一下http-192-168-1-21-31234">访问一下http://192.168.1.21:31234/</h2><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315100419217.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315100419217.png" alt="image-20200315100419217"></a></p><h1>3) 共有3个版本，版本1对应image镜像为：nginx，版本2对应的image为：nginx:1.14.版本3对应的版本为:nginx:1.15.分别运行各版本，每个版本要有在浏览器的访问验证。（10分）</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# docker pull nginx<br>[root@master yaml]# docker pull nginx:1.14<br>[root@master yaml]# docker pull nginx:1.15<br>//下载所需镜像<br></code></pre></td></tr></table></figure><h2 id="编写deployment的yaml文件">编写deployment的yaml文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim banben1.yaml<br>//编写deployment和service的yaml文件<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nginx<br>spec:<br>  replicas: 3<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx-svc        <br>    spec:<br>      containers:<br>      - name: nginx         <br>        image: nginx         #更改一下镜像（1.14和1.15的）<br>[root@master yaml]# vim banben2.yaml<br>//编写deployment和service的yaml文件<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nginx2<br>spec:<br>  replicas: 3<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx-svc        <br>    spec:<br>      containers:<br>      - name: nginx         <br>        image: nginx:1.14        #更改一下镜像（1.14和1.15的）<br>[root@master yaml]# vim banben3.yaml<br>//编写deployment和service的yaml文件<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nginx3<br>spec:<br>  replicas: 3<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx-svc        <br>    spec:<br>      containers:<br>      - name: nginx         <br>        image: nginx:1.15         #更改一下镜像（1.14和1.15的）<br></code></pre></td></tr></table></figure><h2 id="编写service的yaml文件">编写service的yaml文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim ngnix-svc.yaml <br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx-svc<br>spec:<br>  type: NodePort<br>  selector:<br>    app: nginx-svc<br>  ports:<br>    - port: 80<br>      targetPort: 80<br>      nodePort: 31235<br></code></pre></td></tr></table></figure><h3 id="执行一下（记录版本信息）">执行一下（记录版本信息）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f banben1.yaml --record <br>[root@master yaml]# kubectl apply -f banben2.yaml --record <br>[root@master yaml]# kubectl apply -f banben3.yaml --record <br>[root@master yaml]# kubectl apply -f ngnix-svc.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-2">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315145551904.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315145551904.png" alt="image-20200315145551904"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get svc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315142530998.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315142530998.png" alt="image-20200315142530998"></a></p><h3 id="访问一下-http-192-168-1-21-31235">访问一下 <a href="http://192.168.1.21:31235/" target="_blank" rel="noopener">http://192.168.1.21:31235/</a></h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315143242088.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315143242088.png" alt="image-20200315143242088"></a></p><h1>4)运行到版本3之后，进行回滚操作回滚到版本4.（5分）</h1><h2 id="查看记录的版本信息">查看记录的版本信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]#  kubectl rollout history deployment nginx<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315142738558.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315142738558.png" alt="image-20200315142738558"></a></p><h3 id="回滚到指定版本">回滚到指定版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl rollout undo deployment nginx --to-revision=4<br>//这里指定的是版本信息的编号<br></code></pre></td></tr></table></figure><h3 id="访问一下">访问一下</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315143715792.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315143715792.png" alt="image-20200315143715792"></a></p><h1>5) 此时更改默认的3个Pod的访问界面,.版本1的访问界面内容为：考生名称+version:No1.版本2的访问界面:考生名称+version:No2,以此类推。（5分）</h1><h3 id="修改POD页面内容（三台不一样）">修改POD页面内容（三台不一样）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl exec -it xgp-web-8d5f9656f-8z7d9 /bin/bash<br>//根据pod名称进入pod之中<br></code></pre></td></tr></table></figure><h3 id="进入容器后修改页面内容">进入容器后修改页面内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">1<br>[root@master yaml]# kubectl exec -it nginx-d6c5c85cb-8vcvt /bin/bash<br>root@nginx-d6c5c85cb-8vcvt:/# echo "<h1>version 01 wushaodong</h1>"   > /usr/share/nginx/html/index.html <br>root@nginx-d6c5c85cb-8vcvt:/# exit<br><br>2<br>[root@master yaml]# kubectl exec -it nginx-d6c5c85cb-bxvvt /bin/bash<br>root@nginx-d6c5c85cb-bxvvt:/# echo "<h1>version 02 wushaodong</h1>"   > /usr/share/nginx/html/index.html<br>root@nginx-d6c5c85cb-bxvvt:/# exit<br><br>3<br>[root@master yaml]# kubectl exec -it nginx-d6c5c85cb-lhlz9 /bin/bash<br>root@nginx-d6c5c85cb-lhlz9:/# echo "<h1>version 03 wushaodong</h1>"   > /usr/share/nginx/html/index.html<br>root@nginx-d6c5c85cb-lhlz9:/# exit<br></code></pre></td></tr></table></figure><h1>6) 验证界面是否会会有轮训效果，并加以分析论述。（5分）</h1><p><em><strong>不要在浏览器里测试轮询，有缓存</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# curl 127.0.0.1:31235<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315150130146.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315150130146.png" alt="image-20200315150130146"></a></p><p><strong>答：会有轮询的效果，kubernetes 内部的负载均衡是通过 iptables 的 probability 特性来做到的，kube-proxy通过iptables 将访问 Service 的流量转发到后端 Pod，而且使用类似轮询的负载均衡策略。</strong></p><h1>7) 创建一个NFS PV，NFS共享目录为：考生名称。PV名称为：new-pv。创建一个PVC，名称为new-pvc。单独创建一个pod，使用new-pv，运行之后，验证nfs是否使用成功。（10分）</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# yum -y install nfs-utils rpcbind<br><br>[root@master yaml]# mkdir /wushaodong<br>//创建指定名称的共享目录<br>[root@master yaml]# echo "/wushaodong *(rw,sync,no_root_squash)" > /etc/exports<br>//编写共享目录的权限<br><br>[root@master ~]#  systemctl start nfs-server<br>[root@master ~]#  systemctl start rpcbind<br>//启动服务<br><br>[root@master yaml]# showmount -e<br>//测试一下<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315152012176.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315152012176.png" alt="image-20200315152012176"></a></p><h2 id="1、创建一个NFS-PV的yaml文件">1、创建一个NFS PV的yaml文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim new-pv.yaml<br><br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: new-xgp<br>spec:<br>  capacity:<br>    storage: 1Gi<br>  accessModes:<br>    - ReadWriteOnce<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs<br>  nfs:<br>    path: /wushaodong/new-pv<br>    server: 192.168.1.21<br><br>[root@master yaml]# mkdir /wushaodong/new-pv<br>//创建指定目录<br></code></pre></td></tr></table></figure><h3 id="执行一下-2">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply  -f  new-pv.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-3">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pv<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315152639218.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315152639218.png" alt="image-20200315152639218"></a></p><h2 id="2、创建一个PVC的yaml文件">2、创建一个PVC的yaml文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim new-pvc.yaml<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: new-pvc<br>spec:<br>  accessModes:            #要和pv的一直否则关联不成功<br>  - ReadWriteOnce<br>  resources:<br>    requests:<br>      storage: 1Gi<br>  storageClassName: nfs   #要和pv的一直否则关联不成功<br></code></pre></td></tr></table></figure><h3 id="执行一下-3">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply  -f  new-pvc.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-4">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pvc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315153049267.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315153049267.png" alt="image-20200315153049267"></a></p><h2 id="3、单独创建一个pod，使用new-pv">3、单独创建一个pod，使用new-pv</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim pod.yaml<br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: xgp-pod<br>spec:<br>  containers:<br>  - name: xgp-pod<br>    image: busybox<br>    args:<br>    - /bin/sh<br>    - -c<br>    - sleep 300000<br>    volumeMounts:<br>    - mountPath: /wushaodong  #容器的被挂载目录<br>      name: volumedata<br>  volumes:<br>    - name: volumedata<br>      persistentVolumeClaim:<br>        claimName: new-pvc<br></code></pre></td></tr></table></figure><h3 id="执行一下-4">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f pod.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-5">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315153837882.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315153837882.png" alt="image-20200315153837882"></a></p><h2 id="4、测试一下">4、测试一下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master yaml]# kubectl exec -it xgp-pod /bin/sh<br>//进入pod<br><span class="hljs-meta">#</span><span class="bash">  <span class="hljs-built_in">echo</span> <span class="hljs-string">"xgpIwsd"</span> &gt; /wushaodong/xgp.txt</span><br>//添加内容到挂载目录<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in"><code class="language-hljs shell">[root@master yaml]# kubectl exec -it xgp-pod /bin/sh<br>//进入pod<br><span class="hljs-meta">#</span><span class="bash">  <span class="hljs-built_in">echo</span> <span class="hljs-string">"xgpIwsd"</span> &gt; /wushaodong/xgp.txt</span><br>//添加内容到挂载目录<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">exit</span></span><br></code></pre></td></tr></table></figure><h3 id="查看一下，挂载目录是否有添加内容">查看一下，挂载目录是否有添加内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# cat /wushaodong/new-pv/xgp.txt<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315154239587.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315154239587.png" alt="image-20200315154239587"></a></p><h1>8）请简述k8s集群中，master节点有哪些组件，node节点有哪些组件，作用分别有什么作用，各组件又是怎么交互的。（5分）</h1><h2 id="master节点">master节点</h2><p><strong>1. API server[资源操作入口]</strong>：是k8s集群的前端接口，各种各样客户端工具以及k8s的其他组件可以通过它管理k8s集群的各种资源。它提供了HTTP/HTTPS RESTful API,即K8S API。</p><blockquote><ul><li>提供了资源对象的唯一操作入口，其他所有组件都必须通过它提供的API来操作资源数据，只有API Server与存储通信，其他模块通过API Server访问集群状态。</li></ul><p>第一，是为了保证集群状态访问的安全。</p><p>第二，是为了隔离集群状态访问的方式和后端存储实现的方式：API Server是状态访问的方式，不会因为后端存储技术etcd的改变而改变。</p><ul><li>作为kubernetes系统的入口，封装了核心对象的增删改查操作，以<a href="https://www.centos.bz/tag/restful/" target="_blank" rel="noopener">RESTFul</a>接口方式提供给外部客户和内部组件调用。对相关的资源数据“全量查询”+“变化监听”，实时完成相关的业务功能。</li></ul></blockquote><p><strong>2. Scheduler[集群分发调度器]</strong>：负责决定将Pod放在哪个Node上运行。在调度时，会充分考虑集群的拓扑结构，当前各个节点的负载情况，以及应对高可用、性能、数据亲和性和需求。</p><blockquote><p>1.Scheduler收集和分析当前Kubernetes集群中所有Minion节点的资源(内存、CPU)负载情况，然后依此分发新建的Pod到Kubernetes集群中可用的节点。</p><p>2.实时监测Kubernetes集群中未分发和已分发的所有运行的Pod。</p><p>3.Scheduler也监测Minion节点信息，由于会频繁查找Minion节点，Scheduler会缓存一份最新的信息在本地。</p><p>4.最后，Scheduler在分发Pod到指定的Minion节点后，会把Pod相关的信息Binding写回API Server。</p></blockquote><p><strong>4. Controller Manager[内部管理控制中心]</strong>：负责管理集群的各种资源，保证资源处于预期的状态。它由多种Controller组成，包括Replication Controller、Endpoints Controller、Namespace Controller、Serviceaccounts Controller等。</p><blockquote><p>实现集群故障检测和恢复的自动化工作，负责执行各种控制器，主要有：</p><p>1.endpoint-controller：定期关联<a href="https://www.centos.bz/tag/service/" target="_blank" rel="noopener">service</a>和pod(关联信息由endpoint对象维护)，保证service到pod的映射总是最新的。</p><p>2.replication-controller：定期关联replicationController和pod，保证replicationController定义的复制数量与实际运行pod的数量总是一致的。</p></blockquote><p>**5. Etcd：**负责保存k8s集群的配置信息和各种资源的状态信息。当数据发生变化时，etcd会快速的通知k8s相关组件。<a href="https://wsdlxgp.top/posts/gssl.html">（第三方组件）它有可替换方案。Consul、zookeeper</a></p><p><strong>6. Pod:</strong> k8s集群的最小组成单位。一个Pod内，可以运行一个或多个容器。大多数情况下，一个Pod内只有一个Container容器。</p><p>**7. Flanner：**是k8s集群网络，可以保证Pod的跨主机通信。也有替换方案。</p><h2 id="Node节点">Node节点</h2><p><strong>Kubelet[节点上的Pod管家]</strong>：它是Node的agent(代理)，当Scheduler确定某 个Node上运行Pod之后，会将Pod的具体配置信息发送给该节点的kubelet,kubelet会根据这些信息创建和运行容器，并向Master报告运行状态。</p><blockquote><ul><li>负责Node节点上pod的创建、修改、监控、删除等全生命周期的管理</li><li>定时上报本Node的状态信息给API Server。</li><li>kubelet是Master API Server和Minion之间的桥梁，接收Master API Server分配给它的commands和work，与持久性键值存储etcd、file、server和http进行交互，读取配置信息。</li><li>具体的工作如下：</li></ul><p>设置容器的环境变量、给容器绑定<a href="https://www.centos.bz/tag/volume/" target="_blank" rel="noopener">Volume</a>、给容器绑定Port、根据指定的Pod运行一个单一容器、给指定的Pod创建network 容器。</p><p>同步Pod的状态、同步Pod的状态、从<a href="https://www.centos.bz/tag/cadvisor/" target="_blank" rel="noopener">cAdvisor</a>获取<a href="https://www.centos.bz/tag/container/" target="_blank" rel="noopener">Container</a> info、 pod info、 root info、 <a href="https://www.centos.bz/tag/machine/" target="_blank" rel="noopener">machine</a> info。</p><p>在容器中运行命令、杀死容器、删除Pod的所有容器。</p></blockquote><p>**kube-proxy[负载均衡、路由转发]:**负责将访问service的TCP/UDP数据流转发到后端的容器。如果有多个<br>副本，kube-proxy会实现负载均衡。</p><blockquote><ul><li>Proxy是为了解决外部网络能够访问跨机器集群中容器提供的应用服务而设计的，运行在每个Node上。Proxy提供TCP/UDP sockets的proxy，每创建一种Service，Proxy主要从etcd获取Services和Endpoints的配置信息（也可以从file获取），然后根据配置信息在Minion上启动一个Proxy的进程并监听相应的服务端口，当外部请求发生时，Proxy会根据Load Balancer将请求分发到后端正确的容器处理。</li><li>Proxy不但解决了同一主宿机相同服务端口冲突的问题，还提供了Service转发服务端口对外提供服务的能力，Proxy后端使用了随机、轮循负载均衡算法。</li></ul></blockquote><h2 id="各个组件的作用以及架构工作流程">各个组件的作用以及架构工作流程:</h2><p><strong>1) kubectl发送部署 请求到API server</strong><br><strong>2) APIserver通知Controller Manager创建一个Deployment资源。</strong><br><strong>3) Scheduler执行调度任务,将两个副本Pod分发到node01和node02. 上。</strong><br><strong>4) node01和node02, 上的kubelet在各自节点上创建并运行Pod。</strong></p><h3 id="补充">补充</h3><p><strong>1.应用的配置和当前的状态信息保存在etcd中，执行kubectl get pod时API server会从etcd中读取这些数据。</strong></p><p><strong>2.flannel会为每个Pod分配一个IP。 但此时没有创建Service资源，目前kube-proxy还没有参与进来。</strong></p><h1>9）部署一个dashboard。（5分）</h1><h2 id="1、下载所需yaml文件和镜像">1、下载所需yaml文件和镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml<br>[root@master https]# docker pull kubernetesui/dashboard:v2.0.0-rc5<br></code></pre></td></tr></table></figure><h2 id="2、修改-recommended-yaml">2、修改 recommended.yaml</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]#vim recommended.yaml <br>---<br>kind: Service<br>apiVersion: v1<br>metadata:<br>  labels:<br>    k8s-app: kubernetes-dashboard<br>  name: kubernetes-dashboard<br>  namespace: kubernetes-dashboard<br>spec:<br>  type: NodePort            #添加40<br>  ports:<br>    - port: 443<br>      targetPort: 8443<br>  selector:<br>    k8s-app: kubernetes-dashboard<br></code></pre></td></tr></table></figure><h3 id="执行一下-5">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl apply -f recommended.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-6">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get svc -n kubernetes-dashboard<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315154708443.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315154708443.png" alt="image-20200315154708443"></a></p><h2 id="3、浏览器访问https-192-168-1-21-30949">3、浏览器访问https://192.168.1.21:30949/</h2><p><strong>PS:如果是使用的旧版本的dashboard, 使用Google浏览器登录，可能是不成功的，需要换成其他的浏览器，比如:火狐。</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315154859800.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315154859800.png" alt="image-20200315154859800"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315154929279.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315154929279.png" alt="image-20200315154929279"></a></p><h2 id="4、基于token的方法登录dashboard">4、基于token的方法登录dashboard</h2><h3 id="1-创建一个dashboard的管理用户">&lt;1&gt;创建一个dashboard的管理用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl create serviceaccount dashboard-admin -n kube-system<br></code></pre></td></tr></table></figure><h3 id="2-绑定用户为集群管理用户">&lt;2&gt;绑定用户为集群管理用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin<br></code></pre></td></tr></table></figure><h3 id="3-获取Token">&lt;3&gt;获取Token</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get secrets -n kube-system | grep dashboard-admin<br>//先得到Token的名称<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315155029875.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315155029875.png" alt="image-20200315155029875"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl describe secrets -n kube-system  dashboard-admin-token-j874n<br>//查看上述得到的secret资源的详细信息，会得到token<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315155147297.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315155147297.png" alt="image-20200315155147297"></a></p><h3 id="4-在浏览器上使用token登录。">&lt;4&gt;在浏览器上使用token登录。</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315155307433.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315155307433.png" alt="image-20200315155307433"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315155326746.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315155326746.png" alt="image-20200315155326746"></a></p><p><strong>成功界面</strong></p><h1>10）使用helm的方式，部署mysql服务，要求使用storageclass作为持久化存储，服务运行之后，进入数据库，创建一个test库，库中一张test表，内容为： 9527.</h1><h1>然后模拟数据库Pod失败，待Pod重启后，查看对应数据是否还存在？（10分）</h1><h2 id="1、安装部署helm工具">1、安装部署helm工具</h2><h3 id="（1）下载helm的包">（1）下载helm的包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]#docker pull gcr.io/kubernetes-helm/tiller:v2.14.3<br>[root@master ~]# wget https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="（2）把helm包的命令，复制到本地">（2）把helm包的命令，复制到本地</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# mv linux-amd64/helm /usr/local/bin/<br>//移动命令目录到/usr/local/bin/<br>[root@master helm]# chmod +x /usr/local/bin/helm <br>//给予执行权限<br>[root@master helm]# helm help<br>//验证是否安装成功<br></code></pre></td></tr></table></figure><h3 id="（3）设置命令自动补全">（3）设置命令自动补全</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]#  echo 'source <(helm completion bash)' >> /etc/profile<br>[root@master helm]# . /etc/profile<br>//刷新一下<br></code></pre></td></tr></table></figure><h2 id="2、安装Tiller-server（服务端，需要创建授权用户）">2、安装Tiller server（服务端，需要创建授权用户）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim tiller-rbac.yaml   #创建授权用户<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: tiller<br>  namespace: kube-system<br>---<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: tiller<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: cluster-admin<br>subjects:<br>  - kind: ServiceAccount<br>    name: tiller<br>    namespace: kube-system<br></code></pre></td></tr></table></figure><h4 id="执行一下-6">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl apply -f tiller-rbac.yaml<br></code></pre></td></tr></table></figure><h3 id="（1）Tiller-server的环境初始化">（1）Tiller server的环境初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# helm init  --service-account=tiller<br>//helm的服务端就是Tiller（因为是访问外国的网站，可能需要多次执行）<br></code></pre></td></tr></table></figure><h4 id="查看一下-7">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# kubectl get deployment. -n kube-system<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315163043816.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315163043816.png" alt="image-20200315163043816"></a></p><p><strong>现在发现没有开启，那是因为默认下载的Google的镜像，下载不下来</strong></p><h3 id="（2）设置镜像源改为阿里云的">（2）设置镜像源改为阿里云的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts<br></code></pre></td></tr></table></figure><h4 id="查看一下-8">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# helm version<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315163313031.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315163313031.png" alt="image-20200315163313031"></a></p><h2 id="3、基于NFS服务，创建共享。">3、基于NFS服务，创建共享。</h2><p><strong>因为上面已经做过了，所以现在只需创建目录和设置权限即可</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master heml]# mkdir /xgpwsd<br>//创建目录<br>[root@master heml]# echo '/xgpwsd *(rw,sync,no_root_squash)' >> /etc/exports<br>//设置共享目录权限<br>[root@master heml]# systemctl restart nfs-server<br>[root@master heml]# systemctl restart rpcbind<br>//重启nfs服务<br>[root@master heml]# showmount -e<br>//测试一下<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315164157425.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315164157425.png" alt="image-20200315164157425"></a></p><h2 id="4、创建pv">4、创建pv</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# vim nfs-pv1.yml <br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: mysqlpv<br>spec:<br>  capacity:<br>    storage: 8Gi<br>  accessModes:<br>    - ReadWriteOnce<br>  persistentVolumeReclaimPolicy: Recycle<br>  nfs:<br>    path: /xgpwsd/xgp<br>    server: 192.168.1.21<br>[root@master xgp]# mkdir /xgpwsd/xgp<br>//创建所需目录<br></code></pre></td></tr></table></figure><h4 id="执行一下-7">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# kubectl apply -f nfs-pv1.yml<br></code></pre></td></tr></table></figure><h4 id="查看一下-9">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# kubectl get pv<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315182950429.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315182950429.png" alt="image-20200315182950429"></a></p><h2 id="5、创建StorageClass资源对象。">5、创建StorageClass资源对象。</h2><h3 id="（1）创建rbac权限。">（1）创建rbac权限。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim rbac.yaml <br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: nfs-provisioner<br>  namespace: default<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  name: nfs-provisioner-runner<br>  namespace: default<br>rules:<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumes"]<br>      verbs: ["get", "list", "watch", "create", "delete"]<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumeclaims"]<br>      verbs: ["get", "list", "watch", "update"]<br>   -  apiGroups: ["storage.k8s.io"]<br>      resources: ["storageclasses"]<br>      verbs: ["get", "list", "watch"]<br>   -  apiGroups: [""]<br>      resources: ["events"]<br>      verbs: ["watch", "create", "update", "patch"]<br>   -  apiGroups: [""]<br>      resources: ["services", "endpoints"]<br>      verbs: ["get","create","list", "watch","update"]<br>   -  apiGroups: ["extensions"]<br>      resources: ["podsecuritypolicies"]<br>      resourceNames: ["nfs-provisioner"]<br>      verbs: ["use"]<br>---<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: run-nfs-provisioner<br>subjects:<br>  - kind: ServiceAccount<br>    name: nfs-provisioner<br>    namespace: default        #必写字段<br>roleRef:<br>  kind: ClusterRole<br>  name: nfs-provisioner-runner<br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h4 id="执行一下-8">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f rbac.yaml<br></code></pre></td></tr></table></figure><h3 id="（2）创建Deployment资源对象，用Pod代替-真正的NFS服务。">（2）创建Deployment资源对象，用Pod代替 真正的NFS服务。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim nfs-deployment.yaml <br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nfs-client-provisioner<br>spec:<br>  replicas: 1<br>  strategy:<br>    type: Recreate<br>  template:<br>    metadata:<br>      labels:<br>        app: nfs-client-provisioner<br>    spec:<br>      serviceAccount: nfs-provisioner<br>      containers:<br>        - name: nfs-client-provisioner<br>          image: registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner<br>          volumeMounts:<br>            - name: nfs-client-root<br>              mountPath:  /persistentvolumes<br>          env:<br>            - name: PROVISIONER_NAME<br>              value: xgp<br>            - name: NFS_SERVER<br>              value: 192.168.1.21<br>            - name: NFS_PATH<br>              value: /xgpwsd/wsd<br>      volumes:<br>        - name: nfs-client-root<br>          nfs:<br>            server: 192.168.1.21<br>            path: /xgpwsd/wsd<br>            <br>[root@master heml]# mkdir /xgpwsd/wsd<br>//创建指定目录<br></code></pre></td></tr></table></figure><h4 id="执行一下-9">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-deployment.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-10">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315164706266.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315164706266.png" alt="image-20200315164706266"></a></p><h3 id="（3）创建storageclass的yaml文件">（3）创建storageclass的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim xgp-storageclass.yaml <br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  name: xgp-nfs<br>provisioner: xgp  #通过provisioner字段关联到上述Deploy<br>reclaimPolicy: Retain<br></code></pre></td></tr></table></figure><h4 id="执行一下-10">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f xgp-storageclass.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-11">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get sc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315164758857.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315164758857.png" alt="image-20200315164758857"></a></p><h2 id="6、创建一个mysql服务">6、创建一个mysql服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# docker pull mysql:5.7.14<br>//下载所需镜像<br>[root@master yaml]# helm fetch stable/mysql<br>//直接下载stable/mysql的chart包<br>[root@master yaml]# tar -zxf mysql-0.3.5.tgz <br>//解压mysql包<br>[root@master yaml]# cd mysql/<br>[root@master mysql]# vim values.yaml <br>//修改values.yaml文件，添加storageClass存储卷<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315173613775.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315173613775.png" alt="image-20200315173613775"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# helm install stable/mysql -n xgp-mysql --set mysqlRootPassword=123.com -f values.yaml <br>//基于values.yaml和stable/mysql开启一个密码为123.com的mysqlpod<br></code></pre></td></tr></table></figure><h3 id="查看一下-12">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# kubectl get svc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315173526818.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315173526818.png" alt="image-20200315173526818"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# kubectl get pod -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315173702896.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315173702896.png" alt="image-20200315173702896"></a></p><h2 id="7、进入mysql数据库，创建一个test库，库中一张test表，内容为：-9527。">7、进入mysql数据库，创建一个test库，库中一张test表，内容为： 9527。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# kubectl exec -it bdqn-mysql-mysql-7b89c7b99-8ff2r -- mysql -u root -p123.com<br></code></pre></td></tr></table></figure><h3 id="创建数据库">创建数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> create database <span class="hljs-built_in"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> create database <span class="hljs-built_in">test</span>;</span><br></code></pre></td></tr></table></figure><h3 id="切换数据库">切换数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> use <span class="hljs-built_in"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> use <span class="hljs-built_in">test</span>;</span><br></code></pre></td></tr></table></figure><h3 id="创建表">创建表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> create table <span class="hljs-built_in"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> create table <span class="hljs-built_in">test</span>( id int(4))；</span><br></code></pre></td></tr></table></figure><h3 id="在表中插入数据">在表中插入数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> insert <span class="hljs-built_in"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> insert <span class="hljs-built_in">test</span> values(9527);</span><br></code></pre></td></tr></table></figure><h3 id="查看表">查看表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> select * from <span class="hljs-built_in"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> select * from <span class="hljs-built_in">test</span>;</span><br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315181155502.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315181155502.png" alt="image-20200315181155502"></a></p><h2 id="8、模拟数据库Pod失败，待Pod重启后，查看对应数据是否还存在？">8、模拟数据库Pod失败，待Pod重启后，查看对应数据是否还存在？</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# kubectl delete pod xgp-mysql-mysql-67c6fb5f9-4h4kz<br>//删除这个pod让他重新生成<br>[root@master mysql]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315181626553.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315181626553.png" alt="image-20200315181626553"></a></p><h3 id="进入新的pod查看">进入新的pod查看</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master mysql]# kubectl exec -it xgp-mysql-mysql-67c6fb5f9-k4c29 -- mysql -u root -p123.com<br><span class="hljs-meta">mysql&gt;</span><span class="bash"> use <span class="hljs-built_in">test</span>;</span><br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br><span class="hljs-meta">mysql&gt;</span><span class="bash"> select * from <span class="hljs-built_in"><code class="language-hljs shell">[root@master mysql]# kubectl exec -it xgp-mysql-mysql-67c6fb5f9-k4c29 -- mysql -u root -p123.com<br><span class="hljs-meta">mysql&gt;</span><span class="bash"> use <span class="hljs-built_in">test</span>;</span><br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br><span class="hljs-meta">mysql&gt;</span><span class="bash"> select * from <span class="hljs-built_in">test</span>;</span><br>+------+<br>| id   |<br>+------+<br>| 9527 |<br>+------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315181720939.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315181720939.png" alt="image-20200315181720939"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建镜像的方法&quot;&gt;创建镜像的方法&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="nfs" scheme="https://wsdlxgp.top/tags/nfs/"/>
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="pvc" scheme="https://wsdlxgp.top/tags/pvc/"/>
    
      <category term="dashboard" scheme="https://wsdlxgp.top/tags/dashboard/"/>
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="deployment" scheme="https://wsdlxgp.top/tags/deployment/"/>
    
      <category term="StorageClass" scheme="https://wsdlxgp.top/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>44 k8s的持续集成（jenkins+gitlab+k8s）</title>
    <link href="https://wsdlxgp.top/posts/b04b.html"/>
    <id>https://wsdlxgp.top/posts/b04b.html</id>
    <published>2019-09-12T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:52.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用场景：">应用场景：</h2><p><strong><code>问题</code>项目分为app和后台两种，为了保证再同一个环境下面测试，所以不可能链接开发本地服务进行测试，所以需要搭建一个测试环境，供app进行开发测试。这个时候就有一个问题，如果开发新增加功能或者app调试的时候发现问题，这个时候就需要提交新的代码或者修复bug，然后重新发布到测试环境中去。但是后台人员又不能进入Linux服务器中，只能通过Linux运维人员来重新部署，这样的效率就会极低。</strong></p><p><strong><code>方案：</code>基于这种模式下面的，我们引入了Jenkins工具，通过Jenkins来拉取svn/git代码到服务器中，再Jenkins中编写Linux运行脚本，通过脚本我们就可以对代码进行编译运行，然后重新发布到服务器中运行。后端人员也不需要通知Linux运维人员来执行这个操作，直接再Jenkins的控制台就可以执行了。</strong></p><h2 id="实验环境">实验环境</h2><table><thead><tr><th>IP</th><th>主机名称</th><th>服务</th></tr></thead><tbody><tr><td><strong>192.168.1.21</strong></td><td><strong>master</strong></td><td><strong>k8s</strong></td></tr><tr><td><strong>192.168.1.22</strong></td><td><strong>node01</strong></td><td><strong>k8s</strong></td></tr><tr><td><strong>192.168.1.10</strong></td><td><strong>git</strong></td><td><strong>gitlab</strong></td></tr><tr><td><strong>192.168.1.13</strong></td><td><strong>jenkins</strong></td><td><strong>jenkins</strong></td></tr></tbody></table><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309134708695.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309134708695.png" alt="image-20200309134708695"></a></p><p><strong>总体流程：</strong></p><ul><li><strong>在开发机开发代码后提交到gitlab</strong></li><li><strong>之后通过webhook插件触发jenkins进行构建，jenkins将代码打成docker镜像，push到docker-registry</strong></li><li><strong>之后将在k8s-master上执行rc、service的创建，进而创建Pod，从私服拉取镜像，根据该镜像启动容器</strong></li></ul><p><strong>应用构建和发布流程说明。</strong></p><ol><li><strong>用户向Gitlab提交代码，代码中必须包含<code>Dockerfile</code></strong></li><li><strong>将代码提交到远程仓库</strong></li><li><strong>用户在发布应用时需要填写git仓库地址和分支、服务类型、服务名称、资源数量、实例个数，确定后触发Jenkins自动构建</strong></li><li><strong>Jenkins的CI流水线自动编译代码并打包成docker镜像推送到Harbor镜像仓库</strong></li><li><strong>Jenkins的CI流水线中包括了自定义脚本，根据我们已准备好的kubernetes的YAML模板，将其中的变量替换成用户输入的选项</strong></li><li><strong>生成应用的kubernetes YAML配置文件</strong></li><li><strong>更新Ingress的配置，根据新部署的应用的名称，在ingress的配置文件中增加一条路由信息</strong></li><li><strong>更新PowerDNS，向其中插入一条DNS记录，IP地址是边缘节点的IP地址。关于边缘节点，请查看<a href="https://jimmysong.io/kubernetes-handbook/practice/edge-node-configuration.html" target="_blank" rel="noopener">边缘节点配置</a></strong></li><li><strong>Jenkins调用kubernetes的API，部署应用</strong></li></ol><h1>一、前期工作</h1><h2 id="1、先验证k8s集群（1-21和1-22）">1、先验证k8s集群（1.21和1.22）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl get nodes<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306083959440.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306083959440.png" alt="image-20200306083959440"></a></p><h2 id="2、master部署私有仓库">2、master部署私有仓库</h2><h3 id="Docker01部署"><strong>Docker01部署</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">72 docker pull registry<br>//下载registry镜像<br><br>73 docker run -itd --name registry -p 5000:5000 --restart=always registry:latest<br>//基于registry镜像，启动一台容器<br><br>78 vim /usr/lib/systemd/system/docker.service #13行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry 192.168.1.21:5000 <br><br>80 systemctl daemon-reload<br>81 systemctl restart docker.service<br>//重启docker<br><br>76 docker tag httpd:latest 192.168.1.11:5000/web:v1 <br>76 docker tag httpd:latest 192.168.1.11:5000/web:v2<br>//把容器重命名一个标签<br><br>77 docker ps<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309101144205.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309101144205.png" alt="image-20200309101144205"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">78 vim /usr/lib/systemd/system/docker.service #13行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry 192.168.1.11:5000 <br><br><br>80 systemctl daemon-reload<br>81 systemctl restart docker.service<br>//重启docker<br><br>100 docker push 192.168.1.11:5000/web:v1<br>100 docker push 192.168.1.11:5000/web:v2<br>//上传容器到私有仓库<br></code></pre></td></tr></table></figure><h3 id="Docker02和docker03加入私有仓库"><strong>Docker02和docker03加入私有仓库</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">78 vim /usr/lib/systemd/system/docker.service #13行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry 192.168.1.11:5000  <br><br>80 systemctl daemon-reload<br>81 systemctl restart docker.service<br>//重启docker<br><br>99 docker pull 192.168.1.21:5000/web:v1<br>//测试下载<br></code></pre></td></tr></table></figure><h2 id="3、然后重要的地方到了，建立-yaml配置文件让kubernetes自己控制容器集群。"><strong>3、然后重要的地方到了，建立 yaml配置文件让kubernetes自己控制容器集群。</strong></h2><p><em><strong>用来模拟我们部署的服务</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master app]# vim deploy.yaml<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: web<br>spec:<br>  replicas: 2<br>  template:<br>    metadata:<br>      labels:<br>        name: web<br>    spec:<br>      containers:<br>      - name: web<br>        image: 192.168.1.21:5000/web:v1<br>        imagePullPolicy: Always     #改为本地仓库下载<br>        ports:<br>        - containerPort: 80<br></code></pre></td></tr></table></figure><h4 id="执行一下">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master app]# kubectl apply -f deploy.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master app]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306085507559.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306085507559.png" alt="image-20200306085507559"></a></p><h3 id="可是容器的ip只能在容器本机上访问，集群内的其他主机和集群外的主机都没办法访问，这个时候就需要将容器的端口映射到服务器上的端口了，所以需要做一个service的模板。service-模板可以将容器的端口映射到服务器的端口上，并且可以固定映射在服务器上的端口。"><strong>可是容器的ip只能在容器本机上访问，集群内的其他主机和集群外的主机都没办法访问，这个时候就需要将容器的端口映射到服务器上的端口了，所以需要做一个service的模板。service 模板可以将容器的端口映射到服务器的端口上，并且可以固定映射在服务器上的端口。</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master app]# vim deploy-svc.yaml<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  labels:<br>    name: web<br>  name: web<br>spec:<br>  type: NodePort<br>  ports:<br>  - port: 80<br>    targetPort: 80<br>    nodePort: 31234<br>  selector:<br>    name: web<br></code></pre></td></tr></table></figure><p><strong>执行一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master app]# kubectl apply -f deploy-svc.yaml<br></code></pre></td></tr></table></figure><p><strong>查看一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master app]# kubectl get svc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306085725863.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306085725863.png" alt="image-20200306085725863"></a></p><p><strong>访问一下http://192.168.1.21:31234/</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306085846077.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306085846077.png" alt="image-20200306085846077"></a></p><h3 id="《ok-kubernetes-完毕，-开始配置-jenkins-gitlab联动》"><strong>《ok kubernetes</strong> <strong>完毕， 开始配置 jenkins+gitlab联动》</strong></h3><h3 id="4、git和jenkins加入私有仓库">4、git和jenkins加入私有仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">78 vim /usr/lib/systemd/system/docker.service #13行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry 192.168.1.11:5000  <br><br>80 systemctl daemon-reload<br>81 systemctl restart docker.service<br>//重启docker<br><br>99 docker pull 192.168.1.11/busybox:v1<br>//测试下载<br></code></pre></td></tr></table></figure><h3 id="5、jenkins服务器向k8smaster做免密登录">5、jenkins服务器向k8smaster做免密登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">100 ssh-copy-id 192.168.1.21<br></code></pre></td></tr></table></figure><h1>二、安装jenkins（1.13）</h1><h3 id="安装java环境">安装java环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@jenkins ~]# tar -zxf jdk-8u231-linux-x64.tar.gz<br><br>[root@jenkins ~]# mv jdk1.8.0_131 /usr/java<br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell">[root@jenkins ~]# tar -zxf jdk-8u231-linux-x64.tar.gz<br><br>[root@jenkins ~]# mv jdk1.8.0_131 /usr/java<br><span class="hljs-meta">#</span><span class="bash">注意 这里有位置敏感，不要多一个“/”</span><br>[root@jenkins ~]# vim /etc/profile #在最下面写<br><br>export JAVA_HOME=/usr/java<br>export JRE_HOME=/usr/java/jre<br>export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH<br>export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar<br><br>[root@jenkins ~]#  source /etc/profile<br>//环境变量生效<br>[root@jenkins ~]#  java -version<br>//验证环境变量<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306091443071.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306091443071.png" alt="image-20200306091443071"></a></p><h3 id="安装tomcat">安装tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@jenkins ~]# tar -zxf apache-tomcat-7.0.54.tar.gz <br>[root@jenkins ~]# mv apache-tomcat-7.0.54 /usr/tomcat7<br>[root@jenkins ~]# cd /usr/tomcat7/webapps/<br>[root@jenkins webapps]# rm -rf *<br>[root@jenkins webapps]# cp /root/jenkins.war . #这几步是jenkins的包放进了tomcat里<br>[root@jenkins webapps]# vim /usr/tomcat7/conf/server.xml <br>//修改tomcat的字符集<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306092022390.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306092022390.png" alt="image-20200306092022390"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@jenkins webapps]# cd /usr/tomcat7/bin/<br><br>[root@jenkins bin]# vim catalina.sh <br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell">[root@jenkins webapps]# cd /usr/tomcat7/bin/<br><br>[root@jenkins bin]# vim catalina.sh <br><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>export CATALINA_OPTS="-DJENKINS_HOME=/data/jenkins"<br>export JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Dhudson.ClassicPluginStrategy.noBytecodeTransformer=true"<br>//这两行添加的是jenkins的家目录位置，这个很重要<br><br>[root@jenkins bin]# ./catalina.sh start <br>//启动tomcat<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306092523262.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306092523262.png" alt="image-20200306092523262"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@jenkins bin]# netstat -anput | grep 8080<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306110511541.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306110511541.png" alt="image-20200306110511541"></a></p><h3 id="浏览器安装jenkins">浏览器安装jenkins</h3><p><a href="http://192.168.1.11:8080/jenkins" target="_blank" rel="noopener">http://192.168.1.11:8080/jenkins</a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306110627790.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306110627790.png" alt="image-20200306110627790"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@jenkins bin]# cat /data/jenkins/secrets/initialAdminPassword<br>c577cbf75d934878a94b0f9e00ada328   //复制密码<br></code></pre></td></tr></table></figure><h3 id="（1）推荐安装">（1）推荐安装</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200308124155279.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200308124155279.png" alt="image-20200308124155279"></a></p><p><strong>#左边是自动安装， 右边是自定义安装，我们选左边的，如果不是这个画面则说明网络很卡或者没有网(推荐使用右边的，然后选择不安装插件，之后可以自定义安装）</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151852889.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151852889.png" alt="image-20200306151852889"></a></p><h3 id="（2）这个是自定义安装（自己上传的包）">（2）这个是自定义安装（自己上传的包）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@autoweb bin]# ./catalina.sh stop<br>[root@autoweb ~]# cd /data/jenkins/plugins/<br>[root@autoweb jenkins]# mv plugins plugins/.bk<br>然后上传plugins.tar.gz包：<br>[root@autoweb jenkins]# tar -zxf plugins.tar.gz <br>[root@autoweb ~]# cd /usr/tomcat7/bin/<br>[root@autoweb bin]# ./catalina.sh stop<br>[root@autoweb bin]# ./catalina.sh start<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306110627790.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306110627790.png" alt="image-20200306110627790"></a></p><p><strong>输入密码后断网</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200308124449039.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200308124449039.png" alt="image-20200308124449039"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200308123936170.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200308123936170.png" alt="image-20200308123936170"></a></p><h3 id="（3）两个剩下的方法一样">（3）两个剩下的方法一样</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151900827.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151900827.png" alt="image-20200306151900827"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151905668.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151905668.png" alt="image-20200306151905668"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151911675.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151911675.png" alt="image-20200306151911675"></a></p><h4 id="下载中文插件"><strong>下载中文插件</strong></h4><p><strong>系统管理-----&gt;插件管理-----&gt;avalilable(可选)然后搜索localization-zh-cn</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306152834083.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306152834083.png" alt="image-20200306152834083"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306152957419.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306152957419.png" alt="image-20200306152957419"></a></p><p><strong>然后还需要3个插件</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306153713286.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306153713286.png" alt="image-20200306153713286"></a></p><h1>三、安装gitlab（1.10）</h1><p><strong>GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 .gitlab-ci.yaml 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机(vmware、virtualbox)进行 build等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309140112958.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309140112958.png" alt="image-20200309140112958"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">#</span><span class="bash"> yum -y install curl policycoreutils openssh-server openssh-clients postfix git</span><br><span class="hljs-meta">#</span><span class="bash"> systemctl <span class="hljs-built_in">enable</span> sshd</span><br><span class="hljs-meta">#</span><span class="bash"> systemctl start sshd</span><br><span class="hljs-meta">#</span><span class="bash"> systemctl <span class="hljs-built_in">enable</span> postfix</span><br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">#</span><span class="bash"> yum -y install curl policycoreutils openssh-server openssh-clients postfix git</span><br><span class="hljs-meta">#</span><span class="bash"> systemctl <span class="hljs-built_in">enable</span> sshd</span><br><span class="hljs-meta">#</span><span class="bash"> systemctl start sshd</span><br><span class="hljs-meta">#</span><span class="bash"> systemctl <span class="hljs-built_in">enable</span> postfix</span><br><span class="hljs-meta">#</span><span class="bash"> systemctl start postfix</span><br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306112315163.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306112315163.png" alt="image-20200306112315163"></a></p><h3 id="安装gitlab-ce"><strong>安装gitlab-ce</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@git ~]# curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash<br></code></pre></td></tr></table></figure><p><strong>注：由于网络问题，国内用户，使用清华大学的镜像源进行安装：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@git ~]# vim /etc/yum.repos.d/gitlab-ce.repo<br>[gitlab-ce]<br>name=gitlab-ce<br>baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7<br>repo_gpgcheck=0<br>gpgcheck=0<br>enabled=1<br>gpgkey=https://packages.gitlab.com/gpg.key<br><br>[root@git ~]# yum makecache<br>//保存到本地<br><br>[root@git ~]# yum -y install gitlab-ce <br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell">[root@git ~]# vim /etc/yum.repos.d/gitlab-ce.repo<br>[gitlab-ce]<br>name=gitlab-ce<br>baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7<br>repo_gpgcheck=0<br>gpgcheck=0<br>enabled=1<br>gpgkey=https://packages.gitlab.com/gpg.key<br><br>[root@git ~]# yum makecache<br>//保存到本地<br><br>[root@git ~]# yum -y install gitlab-ce <br><span class="hljs-meta">#</span><span class="bash">这两条命令是把gitlab源先加入了yum，然后yum下载gitlab</span><br><br>[root@git ~]# vim /etc/gitlab/gitlab.rb <br>//修改端口是为了防止端口冲突，因为80默认是http服务的 <br><br>external_url 'http://192.168.1.21:90'  #端口， unicorn默认是8080 也是tomcat的端口 <br>unicorn['listen'] = '127.0.0.1'<br>unicorn['port'] = 3000 <br><br><br>[root@git ~]# gitlab-ctl reconfigure <br>//启动gitlab，这个过程可能会有点慢<br><br><br>[root@git ~]# ls /etc/yum.repos.d/<br>//查看一下<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306141100803.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306141100803.png" alt="image-20200306141100803"></a></p><h3 id="访问192-168-1-10-90">访问192.168.1.10:90</h3><p><strong>在网页配置用户密码后则安装完毕。用户默认root，这里让设置一个密码再登录，<a href="http://xn--12345-of3np30ehqhlqe.com/" target="_blank" rel="noopener">这里设置12345.com</a>（相对较短的密码不让设置）</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306141728312.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306141728312.png" alt="image-20200306141728312"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306142041682.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306142041682.png" alt="image-20200306142041682"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306142219600.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306142219600.png" alt="image-20200306142219600"></a></p><h1>四、jenkins和gitlab相互关联</h1><p><strong>jenkins：工具集成平台</strong></p><p><strong>gitlab: 软件托管平台</strong></p><p><strong>部署这两个服务的联动，需要经过ssh验证。</strong></p><h2 id="1、首先我们需要在gitlab上绑定jenkins服务器的ssh公钥，这里我们使用的是root用户的公私钥，切记生产环境是不允许随便用root的">1、<strong>首先我们需要在gitlab上绑定jenkins服务器的ssh公钥，这里我们使用的是root用户的公私钥，切记生产环境是不允许随便用root的</strong></h2><h3 id="（1）jenkins"><strong>（1）jenkins</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@jenkins ~]# ssh-keygen -t rsa <br>//然后不输入只回车会生成一对公私钥<br></code></pre></td></tr></table></figure><h4 id="默认在-root-ssh-目录里"><strong>默认在/root/.ssh/目录里</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@jenkins ~]# cat /root/.ssh/id_rsa.pub <br>//查看公钥并复制<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMA4+je3NsxZrF2v8TPLXJp1ejwy1YokXipEFyGVNo5IbtkiBDwBLOAl5i7yromY8YGgoNNriE2g89IM/44BGC5UDCokQ69Ze9Ta9Kynv3/1PDFXIABJJG0f6LsUqt0nKFaFoGz3ZuYAnl6AzLpXEic8DBDrsFk+UGrxvMfSEqHlYO2b7jRXE1HGRnqI/IcVB190cLT1kmBKi7hSqUNBc1cY6t3a6gGiBpp9tc8PW4r/RcLblhAL1LKx8x37NOZkqox8IMh3eM/wtWwAVFlI8XU+sz9akzJOVmd1ArT5Q4w8WA/uVHCDUGVI/fli/ZRv+mNZyF3EH26runctb5LkCT root@jenkins<br></code></pre></td></tr></table></figure><h3 id="（2）gitlab">（2）gitlab</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306195836403.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306195836403.png" alt="image-20200306195836403"></a></p><h4 id="在这里放刚才拷贝的公钥保存就行了。"><strong>在这里放刚才拷贝的公钥保存就行了。</strong></h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200026493.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200026493.png" alt="image-20200306200026493"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200103458.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200103458.png" alt="image-20200306200103458"></a></p><h4 id="我们先在gitlab上创建一个代码仓库-点击-new-project"><strong>我们先在gitlab上创建一个代码仓库 点击 new project</strong></h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200156932.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200156932.png" alt="image-20200306200156932"></a></p><p><strong>输入一个仓库的名字，权限选择公共的（public）然后直接点击创建</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200431858.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200431858.png" alt="image-20200306200431858"></a></p><h4 id="点击新建一个new-file"><strong>点击新建一个new.file</strong></h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306201437862.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306201437862.png" alt="image-20200306201437862"></a></p><h4 id="写入代码，起一个名字然后保存"><strong>写入代码，起一个名字然后保存</strong></h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306201558158.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306201558158.png" alt="image-20200306201558158"></a></p><h4 id="创建好了，然后在本地测试一下是否可用"><strong>创建好了，然后在本地测试一下是否可用</strong></h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306201744679.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306201744679.png" alt="image-20200306201744679"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@git ~]# mkdir xgp<br>[root@git ~]# cd xgp/<br>[root@git xgp]# git clone git@192.168.1.10:root/xgp-demo.git<br>//克隆xgp-demo仓库到本地<br><br>[root@git xgp]# ls xgp-demo/<br>index.html<br>[root@git xgp]# cat xgp-demo/index.html <br>print: "hello word!!!"<br>//查看一下<br></code></pre></td></tr></table></figure><h3 id="（3）自动构建">（3）自动构建</h3><p><strong>安装插件</strong></p><p><strong>先进入到之前查看插件的地方</strong></p><p><strong>系统设置----插件管理----高级_—上传插件gitlab-oauth、gitlab-plugin、 windows-slaves、ruby-runt ime、gitlab-hook</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306212734302.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306212734302.png" alt="image-20200306212734302"></a></p><h3 id="（4）如果可以用，则打开jenkins-点击新建">（4）如果可以用，则打开jenkins 点击新建</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306202647670.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306202647670.png" alt="image-20200306202647670"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306202724313.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306202724313.png" alt="image-20200306202724313"></a></p><h4 id="地址粘贴进去以后没有报错则没错"><strong>地址粘贴进去以后没有报错则没错</strong></h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306203441474.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306203441474.png" alt="image-20200306203441474"></a></p><p><strong>但是很伤心它报错了，那是因为jenkins和git没有关联上</strong></p><h3 id="解决">解决</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306203407502.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306203407502.png" alt="image-20200306203407502"></a></p><h4 id="git主机生成ssh密钥">git主机生成ssh密钥</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@jenkins ~]# ssh-keygen -t rsa <br>//然后不输入只回车会生成一对公私钥<br>[root@jenkins ~]# cat /root/.ssh/id_rsa   <br>//查看密钥并复制<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306203947496.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306203947496.png" alt="image-20200306203947496"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306204232588.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306204232588.png" alt="image-20200306204232588"></a></p><p><strong>下面的这个插件很重要，就是他实现自动化更新的webhook插件，安装过了就会有这条，然后点击这条下面出来的这些东西保持默认就行。同时注意复制</strong></p><p><strong>这个里面写的是jenkins构建时候会执行的shell脚本，这个是最重要的，就是他实现了下端kubernetes自动更新容器的操作。</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306204512237.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306204512237.png" alt="image-20200306204512237"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306204948462.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306204948462.png" alt="image-20200306204948462"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>backupcode="/data/backcode/$JOB_NAME/$BUILD_NUMBER"  <br>mkdir -p $backupcode     #jenkins创建上述目录<br>chmod 644 "$JENKINS_HOME"/workspace/"$JOB_NAME"/*<br>rsync -acP   "$JENKINS_HOME"/workspace/"$JOB_NAME"/*  $backupcode #$JENKINS_HOME和$JOB_NAME同步最新消息<br><span class="hljs-meta">#</span><span class="bash">ssh root@192.168.1.21 sed -i <span class="hljs-string">'s/v1/v2/g'</span> /root/app/deploy.yaml <span class="hljs-comment"><code class="language-hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>backupcode="/data/backcode/$JOB_NAME/$BUILD_NUMBER"  <br>mkdir -p $backupcode     #jenkins创建上述目录<br>chmod 644 "$JENKINS_HOME"/workspace/"$JOB_NAME"/*<br>rsync -acP   "$JENKINS_HOME"/workspace/"$JOB_NAME"/*  $backupcode #$JENKINS_HOME和$JOB_NAME同步最新消息<br><span class="hljs-meta">#</span><span class="bash">ssh root@192.168.1.21 sed -i <span class="hljs-string">'s/v1/v2/g'</span> /root/app/deploy.yaml <span class="hljs-comment">#更改镜像版本</span></span><br>echo From  192.168.1.21:5000/web:v1 > "$JENKINS_HOME"/workspace/Dockerfile<br>echo COPY ./"$JOB_NAME"/* /usr/local/apache2/htdocs/ >> "$JENKINS_HOME"/workspace/Dockerfile<br>docker rmi 192.168.1.21:5000/web:v1<br>docker build -t 192.168.1.21:5000/web:v1 /"$JENKINS_HOME"/workspace/.<br>docker push 192.168.1.21:5000/web:v1<br>ssh root@192.168.1.21 kubectl delete deployment web<br>ssh root@192.168.1.21 kubectl apply -f /root/app/deploy.yaml<br></code></pre></td></tr></table></figure><blockquote><p><strong>$JOB_NAME：项目名称</strong></p><p><strong>$BUILD_NUMBER：第几次构建</strong></p><p><strong>$JENKINS_HOME：jenkins的家目录</strong></p></blockquote><p><strong>完事以后先别保存，首先复制一下上面的jenkins地址，然后去gitlab上绑定webhook</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306213050759.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306213050759.png" alt="image-20200306213050759"></a></p><p><strong>保存，登陆gitlab，点击下图这个设置</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306213514819.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306213514819.png" alt="image-20200306213514819"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306213829519.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306213829519.png" alt="image-20200306213829519"></a></p><p><strong>测试显示下图 的蓝条说明jenkins 已经连通了gitlab</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306214117715.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306214117715.png" alt="image-20200306214117715"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215322180.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215322180.png" alt="image-20200306215322180"></a></p><h4 id="回到Jenkins开启匿名访问权限"><strong>回到Jenkins开启匿名访问权限</strong></h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215429619.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215429619.png" alt="image-20200306215429619"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215504413.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215504413.png" alt="image-20200306215504413"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215539717.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215539717.png" alt=""></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215611348.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215611348.png" alt="image-20200306215611348"></a></p><p><strong>测试显示下图 的蓝条说明jenkins 已经连通了gitlab</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306214126410.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306214126410.png" alt="image-20200306214126410"></a></p><p><strong>好了，jenkins和gitlab 都已经互相的ssh通过了，然后我们最后需要做的一个ssh是关于jenkins</strong></p><p><strong>///注意，这里是从git和jenkins向master节点做免密登录。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@git ~]# ssh-copy-id root@192.168.1.21<br>[root@jenkins ~]# ssh-copy-id root@192.168.1.21<br></code></pre></td></tr></table></figure><p><strong>好了，环境全部部署完毕！！！。开始测试</strong></p><h1>五、测试</h1><p><strong>测试的方法很简单，就是在gitlab上新建代码，删除代码，修改代码，都会触发webhook进行自动部署。最终会作用在所有的nginx容器中，也就是我们的web服务器。</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100434912.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100434912.png" alt="image-20200309100434912"></a></p><p><strong>这里我修改了之前建立的 index.html文件 保存以后，就打开浏览器 一直访问kubernetes-node 里面的容器了</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100445830.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100445830.png" alt="image-20200309100445830"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100530210.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100530210.png" alt="image-20200309100530210"></a></p><h2 id="访问一下http-192-168-1-21-31234">访问一下http://192.168.1.21:31234/</h2><p><em><strong>如果没有变，应该注意查看是否在jenkins上构建完成，等以小会就可以了。</strong></em></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100557309.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100557309.png" alt="image-20200309100557309"></a></p><p><strong>构建成功</strong></p><h1>六、GitLab CI 总结</h1><p><strong>CS 架构</strong><br>GitLab 作为 Server 端，控制 Runner 端执行一系列的 CI 任务；代码 clone 等无需关心，GitLab 会自动处理好一切；Runner 每次都会启动新的容器执行 CI 任务</p><p><strong>容器即环境</strong><br>在 Runner 使用 Docker build 的前提下；所有依赖切换、环境切换应当由切换不同镜像实现，即 build 那就使用 build 的镜像，deploy 就用带有 deploy 功能的镜像；通过不同镜像容器实现完整的环境隔离</p><p><strong>CI即脚本</strong><br>不同的 CI 任务实际上就是在使用不同镜像的容器中执行 <a href="https://www.centos.bz/tag/shell/" target="_blank" rel="noopener">SHELL</a> 命令，自动化 CI 就是执行预先写好的一些小脚本</p><p><strong>敏感信息走环境变量</strong><br>一切重要的敏感信息，如账户密码等，不要写到 CI 配置中，直接放到 GitLab 的环境变量中；GitLab 会保证将其推送到远端 Runner 的 SHELL 变量中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;应用场景：&quot;&gt;应用场景：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;问题&lt;/code&gt;项目分为app和后台两种，为了保证再同一个环境下面测试，所以不可能链接开发本地服务进行测试，所以需要搭建一个测试环境，供app进行开发测试。这个时候就有一个问题，如果开发新增加
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="jenkins" scheme="https://wsdlxgp.top/tags/jenkins/"/>
    
      <category term="gitlab" scheme="https://wsdlxgp.top/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>43 k8s的charts的四种安装方式及helm私有仓库</title>
    <link href="https://wsdlxgp.top/posts/e7d.html"/>
    <id>https://wsdlxgp.top/posts/e7d.html</id>
    <published>2019-09-11T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:46.965Z</updated>
    
    <content type="html"><![CDATA[<h1>自定义helm模板</h1><p><a href="https://hub.helm.sh/" target="_blank" rel="noopener">https://hub.helm.sh/</a></p><h2 id="1、开发自己的chare包">1、开发自己的chare包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm create mychare<br>//创建一个名为mychare的chare包<br>[root@master ~]# tree -C mychare/<br>//以树状图查看一下chare包<br>mychare/<br>├── charts<br>├── Chart.yaml<br>├── templates<br>│   ├── deployment.yaml<br>│   ├── _helpers.tpl<br>│   ├── ingress.yaml<br>│   ├── NOTES.txt<br>│   ├── service.yaml<br>│   └── tests<br>│       └── test-connection.yaml<br>└── values.yaml<br></code></pre></td></tr></table></figure><h2 id="2、调试chart">2、调试chart</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mychare]# cd<br>[root@master ~]# helm install --dry-run --debug mychare<br>//检查这个mychare是否有问题<br></code></pre></td></tr></table></figure><h2 id="3、安装chart">3、安装chart</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node02 ~]# docker pull nginx:stable<br></code></pre></td></tr></table></figure><h3 id="（1）通过仓库安装">（1）通过仓库安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mychare]# helm search redis<br>//搜索chare包<br>[root@master mychare]# helm repo list<br>//查看是否有能访问仓库<br>[root@master mychare]# helm install stable/redis<br>//安装<br></code></pre></td></tr></table></figure><h3 id="（2）通过tar包安装">（2）通过tar包安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm fetch stable/redis<br>//直接下载chare包<br>[root@master ~]# tar -zxf redis-1.1.15.tgz<br>//解压下载的chare包<br>[root@master ~]# tree -C redis<br>redis<br>├── Chart.yaml<br>├── README.md<br>├── templates<br>│   ├── deployment.yaml<br>│   ├── _helpers.tpl<br>│   ├── networkpolicy.yaml<br>│   ├── NOTES.txt<br>│   ├── pvc.yaml<br>│   ├── secrets.yaml<br>│   └── svc.yaml<br>└── values.yaml<br></code></pre></td></tr></table></figure><h3 id="（3）通过chare本地目录安装">（3）通过chare本地目录安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm fetch stable/redis<br>//直接下载chare包<br>[root@master ~]# tar -zxf redis-1.1.15.tgz<br>//解压下载的chare包<br>[root@master ~]# helm install redis<br></code></pre></td></tr></table></figure><h3 id="（4）通过URL安装">（4）通过URL安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm install https://example.com/charts/foo-1.2.3.tgz<br></code></pre></td></tr></table></figure><h3 id="（5）使用本地目录安装：">（5）使用本地目录安装：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# cd mychare/<br>[root@master mychare]# vim values.yaml<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304094840738.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304094840738.png" alt="image-20200304094840738"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mychare]# cd templates/<br>[root@master templates]# vim service.yaml<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304095647172.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304095647172.png" alt="image-20200304095647172"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master templates]# cd ..<br>[root@master mychare]# helm install -n test ../mychare/<br>[root@master ~]# helm upgrade test mychare/ -f  mychare/values.yaml<br></code></pre></td></tr></table></figure><h2 id="4、例子">4、例子</h2><p><strong>使用mychart部署一个实例: xgp。使用镜像为私有镜像v1 版本。</strong></p><p><strong>完成之后，镜像版本。</strong></p><p><strong>全部成功之后，将实例做一个升级，将镜像改为v2版本。</strong></p><h3 id="更改镜像为私有镜像">更改镜像为私有镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim mychare/values.yaml<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304104416415.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304104416415.png" alt="image-20200304104416415"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]#  helm install -n xgp mychare/ -f mychare/values.yaml<br>[root@master ~]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304104645260.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304104645260.png" alt="image-20200304104645260"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim mychare/values.yaml<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105120894.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105120894.png" alt="image-20200304105120894"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm upgrade  xgp mychare/  -f mychare/values.yaml <br>[root@master ~]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105211506.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105211506.png" alt="image-20200304105211506"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl edit deployments. xgp-mychare<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105334541.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105334541.png" alt="image-20200304105334541"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105359184.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105359184.png" alt="image-20200304105359184"></a></p><h1>创建自己的Repo仓库</h1><h2 id="1、node01启动一个httpd的容器">1、node01启动一个httpd的容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node01 ~]# mkdir /var/xgp<br>//创建一个目录<br>[root@node01 ~]# docker pull httpd<br>//下载httpd镜像<br>[root@node02 ~]# docker run -d -p 8080:80 -v /var/xgp:/usr/local/apache2/htdocs httpd<br>//启动一个httpd的容器<br></code></pre></td></tr></table></figure><h2 id="2、master节点上，将mychart目录打包。">2、master节点上，将mychart目录打包。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm package mychare/<br>Successfully packaged chart and saved it to: /root/mychare-0.1.0.tgz<br></code></pre></td></tr></table></figure><h2 id="3、生成仓库的index文件。">3、生成仓库的index文件。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# mkdir myrepo<br>//创建一个目录存放打包的chare<br>[root@master ~]# mv mychare-0.1.0.tgz myrepo/<br>//移动打包好的文件<br>[root@master ~]# helm repo index myrepo/ --url http://192.168.1.22:8080/charts<br>//生成仓库的index文件<br>[root@master ~]# ls myrepo/<br>index.yaml  mychare-0.1.0.tgz<br></code></pre></td></tr></table></figure><h2 id="4、将生成的tar包和index-yaml上传到node01的-var-www-charts目录下">4、将生成的tar包和index.yaml上传到node01的/var/www/charts目录下.</h2><h3 id="node01创建目录">node01创建目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node01 ~]# mkdir /var/xgp/charts<br></code></pre></td></tr></table></figure><h3 id="master移动动到">master移动动到</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# scp myrepo/* node01:/var/xgp/charts/<br></code></pre></td></tr></table></figure><h3 id="node01查看一下">node01查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node01 ~]# ls /var/xgp/charts/<br>index.yaml  mychare-0.1.0.tgz<br></code></pre></td></tr></table></figure><h2 id="5、添加新的repo仓库。">5、添加新的repo仓库。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm repo add newrepo http://192.168.1.22:8080/charts<br>[root@master ~]# helm repo list<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304112410286.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304112410286.png" alt="image-20200304112410286"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm search mychare<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304112443931.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304112443931.png" alt="image-20200304112443931"></a></p><h2 id="6、我们就可以直接使用新的repo仓库部署实例了。">6、我们就可以直接使用新的repo仓库部署实例了。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm install newrepo/mychare -n wsd<br>[root@master ~]# helm list<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304112515084.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304112515084.png" alt="image-20200304112515084"></a></p><h2 id="7-如果以后仓库中新添加了chart包-需要用helm-repo-update命玲更新本地的index文件。">7.如果以后仓库中新添加了chart包,需要用helm repo update命玲更新本地的index文件。</h2><h3 id="练习：">练习：</h3><h4 id="新创建一个bdqn-的chart包。然后将chart包上传到上述repo源中。">新创建一个bdqn.的chart包。然后将chart包上传到上述repo源中。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm create bdqn<br>[root@master ~]# helm package bdqn/<br>[root@master ~]# mv bdqn-0.1.0.tgz myrepo/<br>[root@master ~]#  helm repo index myrepo/ --url http://192.168.1.22:8080/charts<br>[root@master myrepo]# scp bdqn-0.1.0.tgz index.yaml  node01:/var/xgp/charts<br>[root@master myrepo]# helm repo update<br>[root@master myrepo]# helm search bdqn<br>[root@master myrepo]# helm install http://192.168.1.22:8080/charts/bdqn-0.1.0.tgz<br></code></pre></td></tr></table></figure><h2 id="1）创建helm的私有仓库，以自己的名字命名。">1）创建helm的私有仓库，以自己的名字命名。</h2><h3 id="1、node01启动一个httpd的容器-2">1、node01启动一个httpd的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node01 ~]# mkdir /var/xgp<br>//创建一个目录<br>[root@node01 ~]# docker pull httpd<br>//下载httpd镜像<br>[root@node02 ~]# docker run -d -p 8080:80 -v /var/xgp:/usr/local/apache2/htdocs httpd<br>//启动一个httpd的容器<br></code></pre></td></tr></table></figure><h3 id="3、生成仓库的index文件。-2">3、生成仓库的index文件。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# mkdir xgprepo<br>//创建一个目录存放打包的chare<br>[root@master ~]# helm repo index xgprepo/ --url http://192.168.1.22:8080/charts<br>//生成仓库的index文件<br></code></pre></td></tr></table></figure><h3 id="4、将生成的index-yaml上传到node01的-var-www-charts目录下">4、将生成的index.yaml上传到node01的/var/www/charts目录下.</h3><h4 id="node01创建目录-2">node01创建目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node01 ~]# mkdir /var/xgp/charts<br></code></pre></td></tr></table></figure><h4 id="master移动动到-2">master移动动到</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# scp xgprepo/* node01:/var/xgp/charts/<br></code></pre></td></tr></table></figure><h4 id="node01查看一下-2">node01查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node01 ~]# ls /var/xgp/charts/<br>index.yaml<br></code></pre></td></tr></table></figure><h3 id="5、添加新的repo仓库">5、添加新的repo仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm repo add xgp http://192.168.1.22:8080/charts<br>[root@master ~]# helm repo list<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304132528938.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304132528938.png" alt="image-20200304132528938"></a></p><h2 id="2）-自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为-30000">2） 自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为:30000</h2><h4 id="自定义一个chart包">自定义一个chart包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm create wsd<br>//创建一个名为wsd的chares包<br></code></pre></td></tr></table></figure><h4 id="按照要求修改配置文件">按照要求修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# cd wsd/<br>//进入这个chart包<br>[root@master wsd]# vim values.yaml<br>//修改wsd的配置文件<br>replicaCount: 3                         #三个副本<br><br>image:<br>  repository: 192.168.1.21:5000/web      #更改镜像为私有镜像<br>  tag: v1                                #镜像标签v1<br>  pullPolicy: IfNotPresent              <br><br>imagePullSecrets: []<br>nameOverride: ""<br>fullnameOverride: ""<br><br>service:<br>  type: NodePort              #修改模式为映射端口<br>  port: 80<br>  nodePort: 30000             #添加端口<br><br>[root@master wsd]# vim templates/service.yaml <br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: &#123;&#123; include "wsd.fullname" . &#125;&#125;<br>  labels:<br>&#123;&#123; include "wsd.labels" . | indent 4 &#125;&#125;<br>spec:<br>  type: &#123;&#123; .Values.service.type &#125;&#125;<br>  ports:<br>    - port: &#123;&#123; .Values.service.port &#125;&#125;<br>      targetPort: http<br>      protocol: TCP<br>      name: http<br>      nodePort: &#123;&#123; .Values.service.nodePort &#125;&#125;    #“添加”能让服务识别到nodePort的端口<br>  selector:<br>    app.kubernetes.io/name: &#123;&#123; include "wsd.name" . &#125;&#125;<br>    app.kubernetes.io/instance: &#123;&#123; .Release.Name &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="测试一下">测试一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm install -n wsd  wsd/ -f wsd/values.yaml<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304134959273.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304134959273.png" alt="image-20200304134959273"></a></p><h4 id="查看一下镜像版本">查看一下镜像版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304135106081.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304135106081.png" alt="image-20200304135106081"></a></p><h4 id="访问一下">访问一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# curl 127.0.0.1:30000<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304150609552.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304150609552.png" alt="image-20200304150609552"></a></p><h2 id="3-将实例进行更新，要求镜像生产v2版本。">3) 将实例进行更新，要求镜像生产v2版本。</h2><p><strong>私有镜像和官方镜像升级有所不同，官方的只需通过 （helm upgrade --set imageTag=“标签” 服务名称 charts包名 ）进行更改标签即可，而私有镜像需通过更改values.yaml中的标签才行比较麻烦一点。</strong></p><h3 id="1、修改values-yaml">1、修改values.yaml</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master ~]# vim wsd/values.yaml <br><br><span class="hljs-meta">#</span><span class="bash"> Default values <span class="hljs-keyword">for</span> wsd.</span><br><span class="hljs-meta">#</span><span class="bash"> This is a YAML-formatted file.</span><br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell">[root@master ~]# vim wsd/values.yaml <br><br><span class="hljs-meta">#</span><span class="bash"> Default values <span class="hljs-keyword">for</span> wsd.</span><br><span class="hljs-meta">#</span><span class="bash"> This is a YAML-formatted file.</span><br><span class="hljs-meta">#</span><span class="bash"> Declare variables to be passed into your templates.</span><br><br>replicaCount: 3<br><br>image:<br>  repository: 192.168.1.21:5000/web<br>  tag: v2                            #修改标签为v2<br>  pullPolicy: IfNotPresent<br>[root@master ~]# helm upgrade wsd wsd/ -f wsd/values.yaml<br>//基于配置文件刷新一下wsd服务<br></code></pre></td></tr></table></figure><h4 id="查看一下">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304140054269.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304140054269.png" alt="image-20200304140054269"></a></p><h4 id="访问一下-2">访问一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# curl 127.0.0.1:30000<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304150742815.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304150742815.png" alt="image-20200304150742815"></a></p><h3 id="2、使用edit进行版本更新">2、使用edit进行版本更新</h3><p><em><strong>确定wsd这个服务开启</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl edit deployments. wsd<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304140425336.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304140425336.png" alt="img"></a></p><h4 id="查看一下-2">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304140520342.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304140520342.png" alt="image-20200304140520342"></a></p><h4 id="访问一下-3">访问一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# curl 127.0.0.1:30000<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304150839440.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304150839440.png" alt="image-20200304150839440"></a></p><h2 id="4）重新定义一个chart包，名称为-new-test-将这个包上传到上述私有仓库中。">4）重新定义一个chart包，名称为: new-test,将这个包上传到上述私有仓库中。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm repo list<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304142059023.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304142059023.png" alt="image-20200304142059023"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm create xgp-wsd<br>//创建一个名为xgp-wsd的charts包<br><br>[root@master ~]# helm package xgp-wsd/<br>//将xgp-wsd打包在当前目录<br><br>[root@master ~]# mv xgp-wsd-0.1.0.tgz xgprepo/<br>//把打包文件放到仓库目录<br><br>[root@master ~]# helm repo index xgprepo/ --url http://192.168.1.22:8080/charts<br>//把仓库目录新加入的charts包信息记录在index.yaml中，使得其他加入的主机可以识别到，仓库的charts包<br><br>[root@master ~]# scp xgprepo/* node01:/var/xgp/charts<br>//将仓库目录的文件移动到httpd服务上，使各个主机可以访问，下载仓库的charts包<br><br>[root@master ~]# helm repo update <br>//更新一下chart存储库<br></code></pre></td></tr></table></figure><h3 id="查看一下-3">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm search xgp-wsd<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304142009776.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304142009776.png" alt="image-20200304142009776"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;自定义helm模板&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hub.helm.sh/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、开发自己的chare包&quot;&gt;1、开发
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="chares" scheme="https://wsdlxgp.top/tags/chares/"/>
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="url" scheme="https://wsdlxgp.top/tags/url/"/>
    
  </entry>
  
  <entry>
    <title>42 k8s中helm安装部署，升级和回滚（chart，helm，tiller，StorageClass）</title>
    <link href="https://wsdlxgp.top/posts/5bc1.html"/>
    <id>https://wsdlxgp.top/posts/5bc1.html</id>
    <published>2019-09-10T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:40.087Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Helm介绍</h1><p><strong><code>helm</code>是基于<code>kubernetes</code> 的包管理器。它之于 <code>kubernetes</code> 就如 <code>yum</code> 之于 <code>centos</code>，<code>pip</code> 之于 <code>python，npm</code> 之于 <code>javascript</code></strong></p><p><strong>那 <code>helm</code> 的引入对于管理集群有哪些帮助呢？</strong></p><ul><li><strong>更方便地部署基础设施，如 <code>gitlab</code>，<code>postgres</code>，<code>prometheus</code>，<code>grafana</code> 等</strong></li><li><strong>更方便地部署自己的应用，为公司内部的项目配置 Chart，使用 <code>helm</code> 结合 CI，在 k8s 中部署应用一行命令般简单</strong></li></ul><h2 id="1、Helm用途">1、Helm用途</h2><p><strong>Helm把Kubernetes资源(比如deployments、services或 ingress等) 打包到一个chart中，而chart被保存到chart仓库。通过chart仓库可用来存储和分享chart。Helm使发布可配置，支持发布应用配置的版本管理，简化了Kubernetes部署应用的版本控制、打包、发布、删除、更新等操作。</strong></p><p><strong>做为Kubernetes的一个包管理工具，用来管理charts——预先配置好的安装包资源，有点类似于Ubuntu的APT和CentOS中的yum。</strong></p><h4 id="Helm具有如下功能：">Helm具有如下功能：</h4><ul><li><strong>创建新的chart</strong></li><li><strong>chart打包成tgz格式</strong></li><li><strong>上传chart到chart仓库或从仓库中下载chart</strong></li><li><strong>在Kubernetes集群中安装或卸载chart</strong></li><li><strong>管理用Helm安装的chart的发布周期</strong></li></ul><h4 id="使用Helm可以完成以下事情：">使用Helm可以完成以下事情：</h4><ul><li><strong>管理Kubernetes manifest files</strong></li><li><strong>管理Helm安装包charts</strong></li><li><strong>基于chart的Kubernetes应用分发</strong></li></ul><h2 id="2、Helm组件及相关术语">2、Helm组件及相关术语</h2><p><strong>开始接触Helm时遇到的一个常见问题就是Helm中的一些概念和术语非常让人迷惑，我开始学习Helm就遇到这个问题。</strong></p><p><strong>因此我们先了解一下Helm的这些相关概念和术语。</strong></p><h3 id="包管理工具"><strong>包管理工具:</strong></h3><ul><li><p><strong>Helm: Kubernetes的应用打包工具，也是命令行工具的名称。</strong></p></li><li><p><strong>Helm CLI：是 Helm 客户端，可以在本地执行</strong></p></li><li><p><strong>Tiller: Helm的服务端，部署在Kubernetes集群中，用于处理Helm的相关命令。</strong></p><blockquote><p><strong>helm的作用：像centos7中的yum命令一样，管理软件包，只不过helm这儿管理的是在k8s上安装的各种容器。</strong></p><p><strong>tiller的作用：像centos7的软件仓库一样，简单说类似于/etc/yum.repos.d目录下的xxx.repo。</strong></p></blockquote></li><li><p><strong>Repoistory: Helm的软件仓库，repository本质上是一个web服务器，该服务器保存了chart软件包以供下载，并有提供一个该repository的chart包的清单文件以供查询。在使用时，Helm可以对接多个不同的Repository。</strong></p></li><li><p><strong>Charts：是一个Helm的程序包，它包含了运行一个kubernetes应用程序所需要的镜像、依赖关系和资源定义等。</strong></p></li><li><p><strong>Release：应用程序运行Charts之后，得到的一个实例。</strong></p><blockquote><p><strong>需要特别注意的是， Helm中提到的Release和我们通常概念中的版本有所不同，这里的Release可以理解为Helm使用Chart包部署的一个应用实例。</strong></p><p><strong>其实Helm中的Release叫做Deployment更合适。估计因为Deployment这个概念已经被Kubernetes使用了，因此Helm才采用了Release这个术语。</strong></p></blockquote></li></ul><h3 id="命令介绍">命令介绍</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm search<br>//查看可用的Charts包<br>[root@master ~]# helm inspect  stable/redis<br>//查看stable/redis包的详细信息<br>[root@master mysql]# helm fetch stable/mysql<br>//直接下载stable/mysql的chart包<br>[root@master ~]# helm install stable/redis -n redis --dry-run <br>//基于stable/redis包运行一个名为redis的服务（把--dry-run去掉之后相当于安装了一个服务）<br>[root@master ~]# helm list<br>//查看安装的服务<br>[root@master ~]# helm delete redis<br>//删除这个服务<br>[root@master mysql]# helm upgrade --set imageTag=5.7.15 xgp-mysql stable/mysql -f values.yaml <br>//mysql服务的升级<br>[root@master mysql]#  helm history xgp-mysql<br>//查看历史版本<br>[root@master mysql]# helm rollback xgp-mysql 1  <br>//回滚到版本一<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre class=" language-hljs cmd"><span class="hljs-function">http://<span class="hljs-title">hub.kubeapps.com</span>/</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">completion</span>  # 为指定的<span class="hljs-title">shell</span>生成自动完成脚本（<span class="hljs-title">bash</span>或<span class="hljs-title">zsh</span>）</span><br><span class="hljs-function"><span class="hljs-title">create</span>      # 创建一个具有给定名称的新 <span class="hljs-title">chart</span></span><br><span class="hljs-function"><span class="hljs-title">delete</span>      # 从 <span class="hljs-title">Kubernetes</span> 删除指定名称的 <span class="hljs-title">release</span></span><br><span class="hljs-function"><span class="hljs-title">dependency</span>  # 管理 <span class="hljs-title">chart</span> 的依赖关系</span><br><span class="hljs-function"><span class="hljs-title">fetch</span>       # 从存储库下载 <span class="hljs-title">chart</span> 并（可选）将其解压缩到本地目录中</span><br><span class="hljs-function"><span class="hljs-title">get</span>         # 下载一个命名 <span class="hljs-title">release</span></span><br><span class="hljs-function"><span class="hljs-title">help</span>        # 列出所有帮助信息</span><br><span class="hljs-function"><span class="hljs-title">history</span>     # 获取 <span class="hljs-title">release</span> 历史</span><br><span class="hljs-function"><span class="hljs-title">home</span>        # 显示 <span class="hljs-title">HELM_HOME</span> 的位置</span><br><span class="hljs-function"><span class="hljs-title">init</span>        # 在客户端和服务器上初始化<span class="hljs-title">Helm</span></span><br><span class="hljs-function"><span class="hljs-title">inspect</span>     # 检查 <span class="hljs-title">chart</span> 详细信息</span><br><span class="hljs-function"><span class="hljs-title">install</span>     # 安装 <span class="hljs-title">chart</span> 存档</span><br><span class="hljs-function"><span class="hljs-title">lint</span>        # 对 <span class="hljs-title">chart</span> 进行语法检查</span><br><span class="hljs-function"><span class="hljs-title">list</span>        # <span class="hljs-title">releases</span> 列表</span><br><span class="hljs-function"><span class="hljs-title">package</span>     # 将 <span class="hljs-title">chart</span> 目录打包成 <span class="hljs-title">chart</span> 档案</span><br><span class="hljs-function"><span class="hljs-title">plugin</span>      # 添加列表或删除 <span class="hljs-title">helm</span> 插件</span><br><span class="hljs-function"><span class="hljs-title">repo</span>        # 添加列表删除更新和索引 <span class="hljs-title">chart</span> 存储库</span><br><span class="hljs-function"><span class="hljs-title">reset</span>       # 从集群中卸载 <span class="hljs-title">Tiller</span></span><br><span class="hljs-function"><span class="hljs-title">rollback</span>    # 将版本回滚到以前的版本</span><br><span class="hljs-function"><span class="hljs-title">search</span>      # 在 <span class="hljs-title">chart</span> 存储库中搜索关键字</span><br><span class="hljs-function"><span class="hljs-title">serve</span>       # 启动本地<span class="hljs-title">http</span>网络服务器</span><br><span class="hljs-function"><span class="hljs-title">status</span>      # 显示指定 <span class="hljs-title">release</span> 的状态</span><br><span class="hljs-function"><span class="hljs-title">template</span>    # 本地渲染模板</span><br><span class="hljs-function"><span class="hljs-title">test</span>        # 测试一个 <span class="hljs-title">release</span></span><br><span class="hljs-function"><span class="hljs-title">upgrade</span>     # 升级一个 <span class="hljs-title">release</span></span><br><span class="hljs-function"><span class="hljs-title">verify</span>      # 验证给定路径上的 <span class="hljs-title">chart</span> 是否已签名且有效</span><br><span class="hljs-function"><span class="hljs-title">version</span>     # 打印客户端/服务器版本信息</span><br><span class="hljs-function"><span class="hljs-title">dep</span>         # 分析 <span class="hljs-title"><code class="language-hljs cmd"><span class="hljs-function">http://<span class="hljs-title">hub.kubeapps.com</span>/</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">completion</span>  # 为指定的<span class="hljs-title">shell</span>生成自动完成脚本（<span class="hljs-title">bash</span>或<span class="hljs-title">zsh</span>）</span><br><span class="hljs-function"><span class="hljs-title">create</span>      # 创建一个具有给定名称的新 <span class="hljs-title">chart</span></span><br><span class="hljs-function"><span class="hljs-title">delete</span>      # 从 <span class="hljs-title">Kubernetes</span> 删除指定名称的 <span class="hljs-title">release</span></span><br><span class="hljs-function"><span class="hljs-title">dependency</span>  # 管理 <span class="hljs-title">chart</span> 的依赖关系</span><br><span class="hljs-function"><span class="hljs-title">fetch</span>       # 从存储库下载 <span class="hljs-title">chart</span> 并（可选）将其解压缩到本地目录中</span><br><span class="hljs-function"><span class="hljs-title">get</span>         # 下载一个命名 <span class="hljs-title">release</span></span><br><span class="hljs-function"><span class="hljs-title">help</span>        # 列出所有帮助信息</span><br><span class="hljs-function"><span class="hljs-title">history</span>     # 获取 <span class="hljs-title">release</span> 历史</span><br><span class="hljs-function"><span class="hljs-title">home</span>        # 显示 <span class="hljs-title">HELM_HOME</span> 的位置</span><br><span class="hljs-function"><span class="hljs-title">init</span>        # 在客户端和服务器上初始化<span class="hljs-title">Helm</span></span><br><span class="hljs-function"><span class="hljs-title">inspect</span>     # 检查 <span class="hljs-title">chart</span> 详细信息</span><br><span class="hljs-function"><span class="hljs-title">install</span>     # 安装 <span class="hljs-title">chart</span> 存档</span><br><span class="hljs-function"><span class="hljs-title">lint</span>        # 对 <span class="hljs-title">chart</span> 进行语法检查</span><br><span class="hljs-function"><span class="hljs-title">list</span>        # <span class="hljs-title">releases</span> 列表</span><br><span class="hljs-function"><span class="hljs-title">package</span>     # 将 <span class="hljs-title">chart</span> 目录打包成 <span class="hljs-title">chart</span> 档案</span><br><span class="hljs-function"><span class="hljs-title">plugin</span>      # 添加列表或删除 <span class="hljs-title">helm</span> 插件</span><br><span class="hljs-function"><span class="hljs-title">repo</span>        # 添加列表删除更新和索引 <span class="hljs-title">chart</span> 存储库</span><br><span class="hljs-function"><span class="hljs-title">reset</span>       # 从集群中卸载 <span class="hljs-title">Tiller</span></span><br><span class="hljs-function"><span class="hljs-title">rollback</span>    # 将版本回滚到以前的版本</span><br><span class="hljs-function"><span class="hljs-title">search</span>      # 在 <span class="hljs-title">chart</span> 存储库中搜索关键字</span><br><span class="hljs-function"><span class="hljs-title">serve</span>       # 启动本地<span class="hljs-title">http</span>网络服务器</span><br><span class="hljs-function"><span class="hljs-title">status</span>      # 显示指定 <span class="hljs-title">release</span> 的状态</span><br><span class="hljs-function"><span class="hljs-title">template</span>    # 本地渲染模板</span><br><span class="hljs-function"><span class="hljs-title">test</span>        # 测试一个 <span class="hljs-title">release</span></span><br><span class="hljs-function"><span class="hljs-title">upgrade</span>     # 升级一个 <span class="hljs-title">release</span></span><br><span class="hljs-function"><span class="hljs-title">verify</span>      # 验证给定路径上的 <span class="hljs-title">chart</span> 是否已签名且有效</span><br><span class="hljs-function"><span class="hljs-title">version</span>     # 打印客户端/服务器版本信息</span><br><span class="hljs-function"><span class="hljs-title">dep</span>         # 分析 <span class="hljs-title">Chart</span> 并下载依赖</span><br></code></pre></td></tr></table></figure><h2 id="3、组件架构">3、组件架构</h2><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200302214010170.png" alt></p><p><strong><code>Helm Client</code> 是用户命令行工具，其主要负责如下：</strong></p><ul><li><strong>本地 chart 开发</strong></li><li><strong>仓库管理</strong></li><li><strong>与 Tiller sever 交互</strong></li><li><strong>发送预安装的 chart</strong></li><li><strong>查询 release 信息</strong></li><li><strong>要求升级或卸载已存在的 release</strong></li></ul><p><strong><code>Tiller Server</code>是一个部署在<code>Kubernetes</code>集群内部的 server，其与 Helm client、Kubernetes API server 进行交互。Tiller server 主要负责如下：</strong></p><ul><li><strong>监听来自 Helm client 的请求</strong></li><li><strong>通过 chart 及其配置构建一次发布</strong></li><li><strong>安装 chart 到<code>Kubernetes</code>集群，并跟踪随后的发布</strong></li><li><strong>通过与<code>Kubernetes</code>交互升级或卸载 chart</strong></li><li><strong>简单的说，client 管理 charts，而 server 管理发布 release</strong></li></ul><h3 id="helm客户端">helm客户端</h3><p><strong>helm客户端是一个命令行工具，负责管理charts、reprepository和release。它通过gPRC API（使用kubectl port-forward将tiller的端口映射到本地，然后再通过映射后的端口跟tiller通信）向tiller发送请求，并由tiller来管理对应的Kubernetes资源。</strong></p><h3 id="tiller服务端">tiller服务端</h3><p><strong>tiller接收来自helm客户端的请求，并把相关资源的操作发送到Kubernetes，负责管理（安装、查询、升级或删除等）和跟踪Kubernetes资源。为了方便管理，tiller把release的相关信息保存在kubernetes的ConfigMap中。</strong><br><strong>tiller对外暴露gRPC API，供helm客户端调用。</strong></p><h2 id="4、工作原理">4、工作原理</h2><h4 id="Chart-Install-过程："><strong>Chart Install 过程：</strong></h4><ul><li><strong>Helm从指定的目录或者tgz文件中解析出Chart结构信息</strong></li><li><strong>Helm将指定的Chart结构和Values信息通过gRPC传递给Tiller</strong></li><li><strong>Tiller根据Chart和Values生成一个Release</strong></li><li><strong>Tiller将Release发送给Kubernetes运行。</strong></li></ul><h4 id="Chart-Update过程："><strong>Chart Update过程：</strong></h4><ul><li><strong>Helm从指定的目录或者tgz文件中解析出Chart结构信息</strong></li><li><strong>Helm将要更新的Release的名称和Chart结构，Values信息传递给Tiller</strong></li><li><strong>Tiller生成Release并更新指定名称的Release的History</strong></li><li><strong>Tiller将Release发送给Kubernetes运行</strong></li></ul><h4 id="Chart-Rollback">Chart Rollback</h4><ul><li><strong>helm将会滚的release名称传递给tiller</strong></li><li><strong>tiller根据release名称查找history</strong></li><li><strong>tiller从history中获取到上一个release</strong></li><li><strong>tiller将上一个release发送给kubernetes用于替换当前release</strong></li></ul><h4 id="Chart处理依赖">Chart处理依赖</h4><p><strong>Tiller 在处理 Chart 时，直接将 Chart 以及其依赖的所有 Charts 合并为一个 Release，同时传递给 Kubernetes。因此 Tiller 并不负责管理依赖之间的启动顺序。Chart 中的应用需要能够自行处理依赖关系。</strong></p><h1>二、安装部署helm工具（客户端）</h1><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302084446678.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302084446678.png" alt="image-20200302084446678"></a></p><h4 id="前提要求"><strong>前提要求</strong></h4><ul><li><strong>Kubernetes1.5以上版本</strong></li><li><strong>集群可访问到的镜像仓库</strong></li><li><strong>执行helm命令的主机可以访问到kubernetes集群</strong></li></ul><h3 id="（1）下载helm的包">（1）下载helm的包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]#docker pull gcr.io/kubernetes-helm/tiller:v2.14.3<br>[root@master ~]# wget https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="（2）把helm包的命令，复制到本地">（2）把helm包的命令，复制到本地</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# mv linux-amd64/helm /usr/local/bin/<br>//移动命令目录到/usr/local/bin/<br>[root@master helm]# chmod +x /usr/local/bin/helm <br>//给予执行权限<br>[root@master helm]# helm help<br>//验证是否安装成功<br></code></pre></td></tr></table></figure><h3 id="（3）设置命令自动补全">（3）设置命令自动补全</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]#  echo 'source <(helm completion bash)' >> /etc/profile<br>[root@master helm]# . /etc/profile<br>//刷新一下<br></code></pre></td></tr></table></figure><h2 id="2、安装Tiller-server（服务端，需要创建授权用户）">2、安装Tiller server（服务端，需要创建授权用户）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim tiller-rbac.yaml   #创建授权用户<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: tiller<br>  namespace: kube-system<br>---<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: tiller<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: cluster-admin<br>subjects:<br>  - kind: ServiceAccount<br>    name: tiller<br>    namespace: kube-system<br></code></pre></td></tr></table></figure><h4 id="执行一下">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl apply -f tiller-rbac.yaml<br></code></pre></td></tr></table></figure><h3 id="（1）Tiller-server的环境初始化">（1）Tiller server的环境初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# helm init  --service-account=tiller<br>//helm的服务端就是Tiller（因为是访问外国的网站，可能需要多次执行）<br></code></pre></td></tr></table></figure><h4 id="查看一下">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# kubectl get deployment. -n kube-system<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228120107088.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228120107088.png" alt="image-20200228120107088"></a></p><p><strong>现在发现没有开启，那是因为默认下载的Google的镜像，下载不下来</strong></p><h3 id="（2）设置镜像源改为阿里云的">（2）设置镜像源改为阿里云的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts<br></code></pre></td></tr></table></figure><h4 id="查看一下-2">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master helm]# helm version<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228120548734.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228120548734.png" alt="image-20200228120548734"></a></p><h2 id="3、部署一个实例helm-install-charts-n-Release名称。">3、部署一个实例helm install + charts -n Release名称。</h2><blockquote><p><strong>1、关于这个Release的描述。</strong></p><p><strong>2、关于这个Release资源的描述。</strong></p><p><strong>3、怎么使用这个Release。</strong></p></blockquote><h3 id="（1）Helm部署安装一个Mysql服务。">（1）Helm部署安装一个Mysql服务。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm search mysql<br>//查看关于mysqk的Charts包<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302091903599.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302091903599.png" alt="image-20200302091903599"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm install stable/mysql -n mysql <br>//基于stable/mysql包安装一个名为MySQL的服务<br></code></pre></td></tr></table></figure><h3 id="查看一下-3">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# helm list<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302092055970.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302092055970.png" alt="image-20200302092055970"></a></p><h3 id="（2）Charts包解压过后的目录">（2）Charts包解压过后的目录:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# cd .helm/cache/archive<br>//查看helm缓存<br>[root@master archive]# ls<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302093625736.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302093625736.png" alt="image-20200302093625736"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# helm fetch stable/mysql<br>//直接下载stable/mysql的chart包<br>[root@master archive]# tar -zxf mysql-0.3.5.tgz <br>//解压一下MySQL包<br>[root@master archive]# tree -C mysql <br>//树状图查看解压出来的mysql目录，-C:显示颜色<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302093816396.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302093816396.png" alt="image-20200302093816396"></a></p><blockquote><p><strong>Chart.yaml：这个chart包的概要信息。（name和version 这两是必填项，其他可选。）</strong></p><p><strong>README md：是这个chart包的一个使用帮助文档。</strong></p><p><strong>templates：chart包内各种资源对象的模板。</strong></p><blockquote><p><strong>deployment.yaml：deployment 控制器的 Go 模板文件</strong></p><p><strong>_helpers.tpl：以 _ 开头的文件不会部署到 k8s 上，可用于定制通用信息</strong></p><p><strong>NOTES.txt：Chart 部署到集群后的一些信息</strong></p><p><strong>service.yaml：service 的 Go 模板文件</strong></p></blockquote><p><strong>values.yaml：是这个chart包的默认的值，可以被templet内的yaml文件使用。</strong></p></blockquote><h3 id="（3）Helm部署安装-个Mysql服务。">（3）Helm部署安装-个Mysql服务。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# docker pull mysql:5.7.14<br>[root@master ~]# docker pull mysql:5.7.15<br>[root@master ~]# docker pull busybox:1.25.0<br>下载所需的mysql镜像<br>[root@master ~]# helm delete mysql --purge <br>//删除之前的MySQL服务并清除缓存<br></code></pre></td></tr></table></figure><h3 id="（4）设置共享目录">（4）设置共享目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# yum -y install rpcbind nfs-utils<br>//安装nfs<br>[root@master ~]# mkdir /data<br>//创建共享目录<br>[root@master ~]# vim /etc/exports<br>/data *(rw,sync,no_root_squash)<br>//设置共享目录权限<br>[root@master ~]# systemctl restart rpcbind<br>[root@master ~]# systemctl restart nfs-server<br>//重启nfs服务<br><br>测试一下<br>[root@master ~]# showmount -e<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302105307662.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302105307662.png" alt="image-20200302105307662"></a></p><h3 id="（5）创建pv">（5）创建pv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# vim nfs-pv1.yml <br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: mysqlpv<br>spec:<br>  capacity:<br>    storage: 8Gi<br>  accessModes:<br>    - ReadWriteOnce<br>  persistentVolumeReclaimPolicy: Recycle<br>  nfs:<br>    path: /data/mysqlpv<br>    server: 192.168.1.21<br>[root@master xgp]# mkdir /data/mysqlpv<br>//创建所需目录<br></code></pre></td></tr></table></figure><h4 id="执行一下-2">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# kubectl apply -f nfs-pv1.yml<br></code></pre></td></tr></table></figure><h4 id="查看一下-4">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# kubectl get pv<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302110137247.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302110137247.png" alt="image-20200302110137247"></a></p><h3 id="（6）创建一个mysql服务">（6）创建一个mysql服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# helm install stable/mysql -n bdqn-mysql --set mysqlRootPassword=123.com<br></code></pre></td></tr></table></figure><h4 id="查看一下-5">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master xgp]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302111518710.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302111518710.png" alt="image-20200302111518710"></a></p><h3 id="（7）进入pod并查看一下">（7）进入pod并查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master xgp]# kubectl exec -it bdqn-mysql-mysql-7b89c7b99-8ff2r -- mysql -u root -p123.com<br><span class="hljs-meta">mysql&gt;</span><span class="bash"><code class="language-hljs shell">[root@master xgp]# kubectl exec -it bdqn-mysql-mysql-7b89c7b99-8ff2r -- mysql -u root -p123.com<br><span class="hljs-meta">mysql&gt;</span><span class="bash"> show databases;</span><br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="4、mysql服务的升级与回滚">4、mysql服务的升级与回滚</h2><h3 id="（1）mysql服务的升级">（1）mysql服务的升级</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# helm upgrade --set imageTag=5.7.15 bdqn-mysql stable/mysql -f values.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-6">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115511986.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115511986.png" alt="image-20200302115511986"></a></p><h3 id="（2）mysql服务的回滚">（2）mysql服务的回滚</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]#  helm history bdqn-mysql<br>//查看历史版本<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115645118.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115645118.png" alt="image-20200302115645118"></a></p><h4 id="回滚到版本一">回滚到版本一</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# helm rollback bdqn-mysql 1<br></code></pre></td></tr></table></figure><h4 id="查看一下-7">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115823991.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115823991.png" alt="image-20200302115823991"></a></p><h1>三、小实验</h1><p><strong>在部署mysql的时候，如何开启storageclass，以及如何将service资源对象的类型更改为NodePort, 如何使用?</strong></p><p><strong>将上述部署的实例进行升级回滚操作。升级的时候镜像改为： mysql:5.7.15版本。回滚到最初的版本。</strong></p><h2 id="1、基于NFS服务，创建NFS服务。">1、基于NFS服务，创建NFS服务。</h2><p><strong>下载nfs所需安装包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node02 ~]# yum -y install nfs-utils  rpcbind<br></code></pre></td></tr></table></figure><p><strong>创建共享目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# mkdir -p /xgp/wsd<br></code></pre></td></tr></table></figure><p><strong>创建共享目录的权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim /etc/exports<br>/xgp *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><p><strong>开启nfs和rpcbind（三台都要）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# systemctl start nfs-server.service <br>[root@master ~]# systemctl start rpcbind<br></code></pre></td></tr></table></figure><p><strong>测试一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# showmount -e<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302143413268.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302143413268.png" alt="image-20200302143413268"></a></p><h2 id="2、创建StorageClass资源对象。">2、创建StorageClass资源对象。</h2><h3 id="（1）创建rbac权限。">（1）创建rbac权限。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim rbac.yaml <br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: nfs-provisioner<br>  namespace: default<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  name: nfs-provisioner-runner<br>  namespace: default<br>rules:<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumes"]<br>      verbs: ["get", "list", "watch", "create", "delete"]<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumeclaims"]<br>      verbs: ["get", "list", "watch", "update"]<br>   -  apiGroups: ["storage.k8s.io"]<br>      resources: ["storageclasses"]<br>      verbs: ["get", "list", "watch"]<br>   -  apiGroups: [""]<br>      resources: ["events"]<br>      verbs: ["watch", "create", "update", "patch"]<br>   -  apiGroups: [""]<br>      resources: ["services", "endpoints"]<br>      verbs: ["get","create","list", "watch","update"]<br>   -  apiGroups: ["extensions"]<br>      resources: ["podsecuritypolicies"]<br>      resourceNames: ["nfs-provisioner"]<br>      verbs: ["use"]<br>---<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: run-nfs-provisioner<br>subjects:<br>  - kind: ServiceAccount<br>    name: nfs-provisioner<br>    namespace: default        #必写字段<br>roleRef:<br>  kind: ClusterRole<br>  name: nfs-provisioner-runner<br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h4 id="执行一下-3">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f rbac.yaml<br></code></pre></td></tr></table></figure><h3 id="（2）创建Deployment资源对象，用Pod代替-真正的NFS服务。">（2）创建Deployment资源对象，用Pod代替 真正的NFS服务。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim nfs-deployment.yaml <br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nfs-client-provisioner<br>spec:<br>  replicas: 1<br>  strategy:<br>    type: Recreate<br>  template:<br>    metadata:<br>      labels:<br>        app: nfs-client-provisioner<br>    spec:<br>      serviceAccount: nfs-provisioner<br>      containers:<br>        - name: nfs-client-provisioner<br>          image: registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner<br>          volumeMounts:<br>            - name: nfs-client-root<br>              mountPath:  /persistentvolumes<br>          env:<br>            - name: PROVISIONER_NAME<br>              value: xgp<br>            - name: NFS_SERVER<br>              value: 192.168.1.21<br>            - name: NFS_PATH<br>              value: /xgp/wsd<br>      volumes:<br>        - name: nfs-client-root<br>          nfs:<br>            server: 192.168.1.21<br>            path: /xgp/wsd<br></code></pre></td></tr></table></figure><h4 id="执行一下-4">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-deployment.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-8">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212104037272.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212104037272.png" alt="image-20200212104037272"></a></p><h3 id="（3）创建storageclass的yaml文件">（3）创建storageclass的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim xgp-storageclass.yaml <br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  name: xgp-nfs<br>provisioner: xgp  #通过provisioner字段关联到上述Deploy<br>reclaimPolicy: Retain<br></code></pre></td></tr></table></figure><h4 id="执行一下-5">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f test-storageclass.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-9">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get sc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302163422262.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302163422262.png" alt="image-20200302163422262"></a></p><h2 id="3、创建一个mysql服务">3、创建一个mysql服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# docker pull mysql:5.7.14<br>[root@master ~]# docker pull mysql:5.7.15<br>[root@master ~]# docker pull busybox:1.25.0<br>//下载所需镜像<br>[root@master yaml]# helm fetch stable/mysql<br>//直接下载stable/mysql的chart包<br>[root@master yaml]# tar -zxf mysql-0.3.5.tgz <br>//解压mysql包<br>[root@master yaml]# cd mysql/<br>[root@master mysql]# vim values.yaml <br>//修改values.yaml文件，添加storageClass存储卷和更改svc的模式为NodePort<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302164514380.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302164514380.png" alt="image-20200302164514380"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302164620871.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302164620871.png" alt="image-20200302164620871"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# helm install stable/mysql -n xgp-mysql --set mysqlRootPassword=123.com -f values.yaml <br>//基于values.yaml和stable/mysql开启一个密码为123.com的mysqlpod<br></code></pre></td></tr></table></figure><h3 id="查看一下-10">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# kubectl get svc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302174753877.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302174753877.png" alt="image-20200302174753877"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# kubectl get pod -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302170330864.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302170330864.png" alt="image-20200302170330864"></a></p><h2 id="4、进入pod并查看一下">4、进入pod并查看一下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master mysql]#  kubectl exec -it xgp-mysql-mysql-67c6fb5f9-dn7s2 -- mysql -u root -p123.com<br><span class="hljs-meta">mysql&gt;</span><span class="bash"><code class="language-hljs shell">[root@master mysql]#  kubectl exec -it xgp-mysql-mysql-67c6fb5f9-dn7s2 -- mysql -u root -p123.com<br><span class="hljs-meta">mysql&gt;</span><span class="bash"> show databases;</span><br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="5、mysql服务的升级与回滚">5、mysql服务的升级与回滚</h2><h3 id="（1）mysql服务的升级-2">（1）mysql服务的升级</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# helm upgrade --set imageTag=5.7.15 xgp-mysql stable/mysql -f values.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-11">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115511986.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115511986.png" alt="image-20200302115511986"></a></p><h3 id="（2）服务的回滚">（2）服务的回滚</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]#  helm history xgp-mysql<br>//查看历史版本<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302175135110.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302175135110.png" alt="image-20200302175135110"></a></p><h4 id="回滚到版本一-2">回滚到版本一</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# helm rollback xgp-mysql 1<br></code></pre></td></tr></table></figure><h4 id="查看一下-12">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master mysql]# kubectl get deployments. -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115823991.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115823991.png" alt="image-20200302115823991"></a></p><h2 id="6、进入pod并查看一下">6、进入pod并查看一下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master mysql]#  kubectl exec -it xgp-mysql-mysql-67c6fb5f9-dn7s2 -- mysql -u root -p123.com<br><span class="hljs-meta">mysql&gt;</span><span class="bash"><code class="language-hljs shell">[root@master mysql]#  kubectl exec -it xgp-mysql-mysql-67c6fb5f9-dn7s2 -- mysql -u root -p123.com<br><span class="hljs-meta">mysql&gt;</span><span class="bash"> show databases;</span><br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h1>四、总结</h1><p><strong>Helm作为kubernetes应用的包管理以及部署工具，提供了应用打包，发布，版本管理以及部署，升级，回退等功能。Helm以Chart软件包的形式简化Kubernetes的应用管理，提高了对用户的友好性。</strong></p><h2 id="使用心得">使用心得</h2><p><strong>helm 客户端的功能非常简单，直接参考官网文档即可。</strong></p><p><strong>列一下相关使用心得：</strong></p><ul><li><strong>Helm 的所有功能都是围绕着 chart、release 和 repository 的；</strong></li><li><strong>仅初始化客户端相关配置且仅建立本地仓库，可执行 <code>helm init --client-only --skip-refresh</code>；</strong></li><li><strong>查找 chart 的方式是通过 HELM_HOME（默认是 ~/.helm 目录）下的 repositories 目录进行的，几个重要文件或目录为 cache、repositories/cache；</strong></li><li><strong>修改 chart index.yaml 的 url，可执行 <code>helm serve --url http://demo.com</code> 来重新 reindex；</strong></li><li><strong>依赖关系管理，requirements定义，子 chart 值定义；</strong></li><li><strong>install 、 update 的方式管理不方便，这样需要维护 chart 的版本关系，集成 install 和 update ，组成类似 k8s 中的 apply 命令；</strong></li><li><strong>package 命令 -u 可以更新依赖，建议推到 repositiories 前先 package ，否则后期可能出现依赖检测不全的错误；</strong></li><li><strong>release 相关的信息存储在 k8s 的 configmap 中，命名形式为 release_name.v1 的格式。 rollback 相关功能就是通过存储在 configmap 中的信息进行回滚的；</strong></li><li><strong>Helm 客户端与 k8s 中的 TillerServer 是通过 k8s 提供的 port-forward 来实现的，而 port-forward 需要在指定节点上部署 socat；</strong></li><li><strong>TillerServer 可以不部署在 k8s 中， 此时 Helm 客户端需要通过 HELM_HOST 环境变量来指定 TillerServer 的地址和端口；</strong></li><li><strong>建议 TillerServer 部署在 k8s 中，既然 Helm 为 CNCF 的一员，那么就尽量把云原生做到极致吧；</strong></li><li><strong>写 chart 时多参考官方最佳实践，<a href="https://docs.helm.sh/chart_best_practices/" target="_blank" rel="noopener">The Chart Best Practices Guide</a>；</strong></li></ul><h2 id="不足">不足</h2><p><strong>Helm 虽然提供了 install、update 命令来安装或更新对应的 release，但这给使用者带来了需要维护 release 状态的压力。举个例子，在还没安装 release 之前，release 是不存在的，update 操作是会失败的。反之已经存在的 release，install 操作也会失败。其实大部分情况下我是不需要知道 release 的状态的，不管它存在还是不存在，我执行的命令就是我希望的意图，我希望 release 能成为我执行命令后的状态。这一点上 k8s 的 apply 命令就非常好，不需要用户来维护资源的状态。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、Helm介绍&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;helm&lt;/code&gt;是基于&lt;code&gt;kubernetes&lt;/code&gt; 的包管理器。它之于 &lt;code&gt;kubernetes&lt;/code&gt; 就如 &lt;code&gt;yum&lt;/code&gt; 之于 &lt;code&gt;cent
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="helm" scheme="https://wsdlxgp.top/tags/helm/"/>
    
      <category term="chart" scheme="https://wsdlxgp.top/tags/chart/"/>
    
      <category term="tiller" scheme="https://wsdlxgp.top/tags/tiller/"/>
    
  </entry>
  
  <entry>
    <title>41 k8s的HPA自动扩容与缩容</title>
    <link href="https://wsdlxgp.top/posts/5f70.html"/>
    <id>https://wsdlxgp.top/posts/5f70.html</id>
    <published>2019-09-09T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:35.665Z</updated>
    
    <content type="html"><![CDATA[<h1>HPA介绍</h1><p><strong>Kubernetes HPA（水平Pod自动缩放）Pod水平自动伸缩，通过此功能，只需简单的配置，即可便可以利用监控指标（cpu使用率、磁盘、内存等）自动的扩容或缩容服务中Pod数量，当业务需求增加时，系统将为您无缝地自动增加适量容器，提高系统稳定性。此处将详细讲解HPA的核心设计原理和基于Hepaster的使用方法</strong>。</p><h3 id="前提条件">前提条件</h3><p><strong>系统应该能否获取到当前Pod的资源使用情况 (意思是可以执行kubectl top pod命令,并且能够得到反馈信息)。</strong></p><p><strong>若要实现自动扩缩容的功能，还需要部署heapster服务，用来收集及统计资源的利用率，支持kubectl top命令，heapster服务集成在prometheus（普罗米修斯） MertricServer服务中，所以说，为了方便，我这里基于prometheus服务的环境上进行部署HPA（动态扩缩容）的服务。</strong></p><h3 id="实验环境">实验环境</h3><table><thead><tr><th>主机</th><th>IP地址</th><th>服务</th></tr></thead><tbody><tr><td>master</td><td>192.168.1.21</td><td>k8s</td></tr><tr><td>node01</td><td>192.168.1.22</td><td>k8s</td></tr><tr><td>node02</td><td>192.168.1.23</td><td>k8s</td></tr></tbody></table><p><strong>基于<a href>https://blog.51cto.com/14320361/2473879</a> 的实验继续进行</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607215857.png" alt="k8s的HPA自动扩容与缩容"></p><ul><li><strong>heapster：这个组件之前是集成在k8s集群的,不过在1.12版本之后被移除了。如果还想使用此功能，应该部署metricServer, 这个k8s集群资源使用情况的聚合器。</strong></li><li><strong>Cousom：同样处于beta阶段(autoscaling/v2beta1)，但是涉及到自定义的REST API的开发，复杂度会大一些，并且当需要从自定义的监控中获取数据时，只能设置绝对值，无法设置使用率。</strong></li></ul><h4 id="自动扩展主要分为两种：">自动扩展主要分为两种：</h4><ul><li><strong>水平扩展(scale out)，针对于实例数目的增减。</strong></li><li><strong>垂直扩展(scal up)，即单个实例可以使用的资源的增减, 比如增加cpu和增大内存。</strong><br><strong>HPA属于前者。它可以根据CPU使用率或应用自定义metrics自动扩展Pod数量(支持 replication controller、deployment 和 replica set)。</strong></li></ul><h3 id="工作流程">工作流程</h3><ul><li><strong>创建HPA资源，设定目标CPU使用率限额，以及最大/最小实例数，一定要设置Pod的资源限制参数: request，否则HPA不会工作。</strong></li><li><strong>控制管理器每隔30s(在kube-controller-manager.service中可以通过–-horizontal-pod-autoscaler-sync-period修改)查询metrics的资源使用情况。</strong></li><li><strong>然后与创建时设定的值和指标做对比(平均值之和/限额)，求出目标调整的实例个数。</strong></li><li><strong>目标调整的实例数不能超过第一条中设定的最大/最小实例数。如果没有超过，则扩容；超过，则扩容至最大的实例个数。</strong></li><li><strong>重复第2-4步。</strong></li></ul><p><strong>这里，我们使用一个测试镜像， 这个镜像基于php-apache制作的docker镜像，包含了一些可以运行cpu密集计算任务的代码。</strong></p><h2 id="1、创建一个deployment控制器">1、创建一个deployment控制器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]#docker pull mirrorgooglecontainers/hpa-example:latest<br>//下载hpa-example镜像<br><br>[root@master ~]# kubectl run php-apache --image=mirrorgooglecontainers/hpa-example --requests=cpu=200m --expose  --port=80<br>//基于hpa-example镜像，运行一个deployment控制器，请求CPU的资源为200m，暴露一个80端口<br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl get deployments.<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228102643352.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228102643352.png" alt="image-20200228102643352"></a></p><h2 id="2、创建HPA控制器">2、创建HPA控制器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10<br>//当deployment资源对象的CPU使用率达到50%时，就进行扩容，最多可以扩容到10个<br></code></pre></td></tr></table></figure><h3 id="查看一下-2">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl get hpa<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228101908398.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228101908398.png" alt="image-20200228101908398"></a></p><h2 id="3、测试（master开启三个端口）">3、测试（master开启三个端口）</h2><p><strong>新开启多个终端，对pod进行死循环请求php-apache的pod</strong></p><h3 id="端口一">端口一</h3><h4 id="（1）创建一个应用，用来不停的访问我们刚刚创建的php-apache的svc资源。">（1）创建一个应用，用来不停的访问我们刚刚创建的php-apache的svc资源。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl run -i --tty load-generator --image=busybox /bin/sh<br></code></pre></td></tr></table></figure><h4 id="（2）进入Pod内，执行以下这条命令-用来模拟访问php-apache的svc资源。">（2）进入Pod内，执行以下这条命令.用来模拟访问php-apache的svc资源。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# while true; do wget -q -O- http://php-apache.default.svc.cluster.local ; done<br>//不停地向php-apache的svc资源，发送ok<br></code></pre></td></tr></table></figure><h3 id="端口二">端口二</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl get hpa -w<br>//实时查看pod的cpu状态<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200228133816724.png" alt="image-20200228133816724"></p><p><strong>可以看到php-apache的cpu使用情况已经超过了50%</strong></p><h3 id="端口三">端口三</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master images]# kubectl get pod -w<br>//实时查看pod的状态<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200228134105507.png" alt="image-20200228134105507"></p><p><strong>可以看到当php-apache的cpu使用情况超过50%后，就会不断生成新的php-apache来进行负载均衡（目前设置的上线时10个），当然，如果cpu使用情况下降到50%，master就会陆续地删除php-apache，这样的使用可以减少不必要的资源浪费、资源分配不均等情况。</strong></p><h1>二、资源限制</h1><h2 id="1、基于Pod">1、基于Pod</h2><p><strong>Kubernetes对资源的限制实际上是通过cgroup来控制的，cgroup 是容器的一组用来控制内核如何运行进程的相关属性集合。针对内存、CPU 和各种设备都有对应的cgroup</strong></p><p><strong>默认情况下，Pod运行没有CPU和内存的限额。这意味着系统中的任何 Pod将能够像执行该Pod所在的节点一样，消耗足够多的CPU和内存。一般会针对某些应用的pod资源进行资源限制，这个资源限制是通过</strong></p><p><strong>resources的requests和limits来实现</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim cgroup-pod.yaml<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200228153809932.png" alt="image-20200228153809932"></p><p><strong>requests: 要分配的资源，limits为最高请求的资源值。可以简单的理解为初始值和最大值。</strong></p><h2 id="2、基于名称空间"><strong>2、基于名称空间</strong></h2><h3 id="1）-计算资源配额">1） 计算资源配额</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim compute-resources.yaml<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200228153818288.png" alt="image-20200228153818288"></p><h3 id="2）配置对象数量配额限制">2）配置对象数量配额限制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim object-counts.yaml<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200228153828002.png" alt="image-20200228153828002"></p><h3 id="3）-配置CPU和内存的LimitRange">3） 配置CPU和内存的LimitRange</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim limitRange.yaml<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200228153834705.png" alt="image-20200228153834705"></p><p><strong>default 即 limit的值。</strong></p><p><strong>defaultRequest 即 request的值。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;HPA介绍&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes HPA（水平Pod自动缩放）Pod水平自动伸缩，通过此功能，只需简单的配置，即可便可以利用监控指标（cpu使用率、磁盘、内存等）自动的扩容或缩容服务中Pod数量，当业务需求增加时，系统将为您无缝地自动增加适
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="HPA" scheme="https://wsdlxgp.top/tags/HPA/"/>
    
      <category term="heapster" scheme="https://wsdlxgp.top/tags/heapster/"/>
    
      <category term="top" scheme="https://wsdlxgp.top/tags/top/"/>
    
  </entry>
  
  <entry>
    <title>40 k8s群集的三种的Web-UI界面部署（dashboard、weave-scope、Prometheus）</title>
    <link href="https://wsdlxgp.top/posts/4f99.html"/>
    <id>https://wsdlxgp.top/posts/4f99.html</id>
    <published>2019-09-08T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:30.187Z</updated>
    
    <content type="html"><![CDATA[<h1>一、k8s的UI访问界面-dashboard</h1><p><strong>在dashboard中，虽然可以做到创建、删除、修改资源等操作，但通常情况下，我们会把它当做健康k8s集群的软件。</strong></p><p><strong>作为Kubernetes的Web用户界面，用户可以通过Dashboard在Kubernetes集群中部署容器化的应用，对应用进行问题处理和管理，并对集群本身进行管理。通过Dashboard，用户可以查看集群中应用的运行情况，同时也能够基于Dashboard创建或修改部署、任务、服务等Kubernetes的资源。通过部署向导，用户能够对部署进行扩缩容，进行滚动更新、重启Pod和部署新应用。当然，通过Dashboard也能够查看Kubernetes资源的状态。</strong></p><h2 id="1、Dashboard提供的功能">1、Dashboard提供的功能</h2><p><strong>在默认情况下，Dashboard显示默认(default)命名空间下的对象，也可以通过命名空间选择器选择其他的命名空间。在Dashboard用户界面中能够显示集群大部分的对象类型。</strong></p><h3 id="1）集群管理"><strong>1）集群管理</strong></h3><p><strong>集群管理视图用于对节点、命名空间、持久化存储卷、角色和存储类进行管理。 节点视图显示CPU和内存的使用情况，以及此节点的创建时间和运行状态。 命名空间视图会显示集群中存在哪些命名空间，以及这些命名空间的运行状态。角色视图以列表形式展示集群中存在哪些角色，这些角色的类型和所在的命名空间。 持久化存储卷以列表的方式进行展示，可以看到每一个持久化存储卷的存储总量、访问模式、使用状态等信息；管理员也能够删除和编辑持久化存储卷的YAML文件。</strong></p><h3 id="2）-工作负载"><strong>2）</strong> <strong>工作负载</strong></h3><p><strong>工作负载视图显示部署、副本集、有状态副本集等所有的工作负载类型。在此视图中，各种工作负载会按照各自的类型进行组织。 工作负载的详细信息视图能够显示应用的详细信息和状态信息，以及对象之间的关系。</strong></p><h3 id="3）-服务发现和负载均衡"><strong>3）</strong> <strong>服务发现和负载均衡</strong></h3><p><strong>服务发现视图能够将集群内容的服务暴露给集群外的应用，集群内外的应用可以通过暴露的服务调用应用，外部的应用使用外部的端点，内部的应用使用内部端点</strong>。</p><h3 id="4）-存储"><strong>4）</strong> <strong>存储</strong></h3><p><strong>存储视图显示被应用用来存储数据的持久化存储卷申明资源。</strong></p><h3 id="5）-配置"><strong>5）</strong> <strong>配置</strong></h3><p><strong>配置视图显示集群中应用运行时所使用配置信息，Kubernetes提供了配置字典（ConfigMaps）和秘密字典（Secrets），通过配置视图，能够编辑和管理配置对象，以及查看隐藏的敏感信息。</strong></p><h3 id="6）-日志视图"><strong>6）</strong> <strong>日志视图</strong></h3><p><strong>Pod列表和详细信息页面提供了查看日志视图的链接，通过日志视图不但能够查看Pod的日志信息，也能够查看Pod容器的日志信息。通过Dashboard能够根据向导创建和部署一个容器化的应用，当然也可以通过手工的方式输入指定应用信息，或者通过上传YAML和JSON文件来创建和不受应用。</strong></p><h2 id="2、下载所需yaml文件和镜像">2、下载所需yaml文件和镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml<br>[root@master https]# docker pull kubernetesui/dashboard:v2.0.0-rc5<br></code></pre></td></tr></table></figure><h2 id="3、修改-recommended-yaml">3、修改 recommended.yaml</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]#vim recommended.yaml <br>---<br>kind: Service<br>apiVersion: v1<br>metadata:<br>  labels:<br>    k8s-app: kubernetes-dashboard<br>  name: kubernetes-dashboard<br>  namespace: kubernetes-dashboard<br>spec:<br>  type: NodePort            #添加40<br>  ports:<br>    - port: 443<br>      targetPort: 8443<br>  selector:<br>    k8s-app: kubernetes-dashboard<br></code></pre></td></tr></table></figure><h3 id="执行一下">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl apply -f recommended.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get svc -n kubernetes-dashboard<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226085710776.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226085710776.png" alt="image-20200226085710776"></a></p><h2 id="3、浏览器访问https-192-168-1-21-32306">3、浏览器访问https://192.168.1.21:32306</h2><p><strong>PS:如果是使用的旧版本的dashboard, 使用谷歌浏览器登录，可能是不成功的，需要换成其他的浏览器，比如:火狐。</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226110629545.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226110629545.png" alt="image-20200226110629545"></a></p><h2 id="4、基于token的方法登录dashboard">4、基于token的方法登录dashboard</h2><h3 id="1-创建一个dashboard的管理用户">&lt;1&gt;创建一个dashboard的管理用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl create serviceaccount dashboard-admin -n kube-system<br></code></pre></td></tr></table></figure><h3 id="2-绑定用户为集群管理用户">&lt;2&gt;绑定用户为集群管理用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin<br></code></pre></td></tr></table></figure><h3 id="3-获取Token">&lt;3&gt;获取Token</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get secrets -n kube-system | grep dashboard-admin<br>//先得到Token的名称<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090141138.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090141138.png" alt="image-20200226090141138"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl describe secrets -n kube-system  dashboard-admin-token-62bh9<br>//查看上述得到的secret资源的详细信息，会得到token<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090425136.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090425136.png" alt="image-20200226090425136"></a></p><h3 id="4-在浏览器上使用token登录。">&lt;4&gt;在浏览器上使用token登录。</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090838680.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090838680.png" alt="image-20200226090838680"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226091007042.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226091007042.png" alt="image-20200226091007042"></a></p><p><strong>创建一个资源</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094008072.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094008072.png" alt="image-20200226094008072"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094127460.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094127460.png" alt="image-20200226094127460"></a></p><p><strong>查看是否创建成功</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094149479.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094149479.png" alt="image-20200226094149479"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094209114.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094209114.png" alt="image-20200226094209114"></a></p><h2 id="5、基于kubeconfig配置文件的方法登录dashboard">5、基于kubeconfig配置文件的方法登录dashboard</h2><h3 id="1-获取Token">&lt;1&gt;获取Token</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get secrets -n kube-system | grep dashboard-admin<br>//先得到Token的名称<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090141138.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090141138.png" alt="image-20200226090141138"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl describe secrets -n kube-system  dashboard-admin-token-62bh9<br>//查看上述得到的secret资源的详细信息，会得到token<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090425136.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090425136.png" alt="image-20200226090425136"></a></p><h3 id="2-生成kubeconfig配置文件。">&lt;2&gt;生成kubeconfig配置文件。</h3><p><strong>设置一个环境变量代表获取的token</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# DASH_TOKEN=$(kubectl get secrets -n kube-system dashboard-admin-token-62bh9  -o jsonpath=&#123;.data.token&#125; | base64 -d)<br></code></pre></td></tr></table></figure><p><strong>将k8s集群的配置信息写入kubeconfig配置文件中。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl config set-cluster kubernetes --server=192.168.1.21:6443 --kubeconfig=/root/.dashboard-admin.conf<br>[root@master https]# kubectl config set-credentials dashboard-admin --token=$DASH_TOKEN --kubeconfig=/root/.dashboard-admin.conf<br>[root@master https]# kubectl config set-context dashboard-admin@kubernetes --cluster=kubernetes --user=dashboard-admin --kubeconfig=/root/.dashboard-admin.conf<br>[root@master https]# kubectl config use-context dashboard-admin@kubernetes --kubeconfig=/root/.dashboard-admin.conf<br></code></pre></td></tr></table></figure><h3 id="3-将生成的-root-dashboard-admin-conf的配置文件，导出并做保存。">&lt;3&gt;将生成的/root/.dashboard-admin.conf的配置文件，导出并做保存。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# sz /root/.dashboard-admin.conf <br>//导出到自己习惯的位置即可<br></code></pre></td></tr></table></figure><h3 id="4-从浏览器选择kubeconfig的登录方式，然后导入配置文件即可。">&lt;4&gt;从浏览器选择kubeconfig的登录方式，然后导入配置文件即可。</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226100349876.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226100349876.png" alt="image-20200226100349876"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226100424656.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226100424656.png" alt="image-20200226100424656"></a></p><h1>二、部署weave-scope监控k8s集群</h1><p><strong>Weave Scope 是 Docker 和 Kubernetes 可视化监控工具。Scope 提供了至上而下的集群基础设施和应用的完整视图，用户可以轻松对分布式的容器化应用进行实时监控和问题诊断。</strong></p><h3 id="使用scope">使用scope</h3><ul><li><p><strong>Scope 会自动构建应用和集群的逻辑拓扑。比如点击顶部 PODS，会显示所有 Pod 以及 Pod 之间的依赖关系。</strong></p></li><li><p>点击 HOSTS，会显示各个节点之间的关系。</p><h3 id="实时资源监控">实时资源监控</h3></li><li><p><strong>可以在 Scope 中查看资源的 CPU 和内存使用情况。</strong></p></li><li><p>支持的资源有 Host、Pod 和 Container。**</p><h3 id="在线操作">在线操作</h3></li><li><p><strong>Scope 还提供了便捷的在线操作功能，比如选中某个 Host，点击 &gt;_ 按钮可以直接在浏览器中打开节点的命令行终端</strong></p></li><li><p><strong>点击 Deployment 的 + 可以执行 Scale Up 操作</strong></p></li><li><p><strong>可以查看 Pod 的日志</strong></p></li><li><p><strong>可以 attach、restart、stop 容器，以及直接在 Scope 中排查问题</strong></p><h3 id="强大的搜索功能">强大的搜索功能</h3></li><li><p><strong>Scope 支持关键字搜索和定位资源。</strong></p></li><li><p><strong>还可以进行条件搜索，比如查找和定位 MEMORY &gt; 100M 的 Pod。</strong></p></li></ul><h2 id="1、在github上查找scope的yaml文件">1、在github上查找scope的yaml文件</h2><h3 id="（1）github上搜索scope"><strong>（1）github上搜索scope</strong></h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104345720.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104345720.png" alt="image-20200226104345720"></a></p><h3 id="（2）进入k8s的部署scope的说明"><strong>（2）进入k8s的部署scope的说明</strong></h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104445086.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104445086.png" alt="image-20200226104445086"></a></p><h3 id="（3）选择k8s的部署"><strong>（3）选择k8s的部署</strong></h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104603800.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104603800.png" alt="image-20200226104603800"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104711134.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104711134.png" alt="image-20200226104711134"></a></p><h3 id="（4）复制上面的链接，并下载yaml文件">（4）复制上面的链接，并下载yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# wget https://cloud.weave.works/k8s/scope.yaml<br></code></pre></td></tr></table></figure><h2 id="2、修改下载的yaml文件并运行">2、修改下载的yaml文件并运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master ~]# vim scope.yaml  #编辑yaml文件<br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell">[root@master ~]# vim scope.yaml  #编辑yaml文件<br><span class="hljs-meta">#</span><span class="bash">跳转至213行，修改其service的端口类型</span><br>    spec:<br>      type: NodePort         #修改类型为NodePort<br>      ports:<br>        - name: app<br>          port: 80<br>          protocol: TCP<br>          targetPort: 4040<br></code></pre></td></tr></table></figure><h3 id="（1）执行一下">（1）执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl apply -f scope.yaml<br></code></pre></td></tr></table></figure><h3 id="（2）查看容器的运行情况，确定处于正常运行">（2）查看容器的运行情况，确定处于正常运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get  pod -o wide -n weave<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226105456676.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226105456676.png" alt="image-20200226105456676"></a></p><ul><li><strong>DaemonSet weave-scope-agent，集群每个节点上都会运行的 scope agent 程序，负责收集数据。</strong></li><li><strong>Deployment weave-scope-app，scope 应用，从 agent 获取数据，通过 Web UI 展示并与用户交互。</strong></li><li><strong>Service weave-scope-app，默认是 ClusterIP 类型，我们已经在上面的命令中添加了参数k8s-service-type=NodePort修改为 NodePort。</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get svc -n weave<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226105545660.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226105545660.png" alt="image-20200226105545660"></a></p><blockquote><p><strong>#DaemonSet资源对象：weave-scope-agent（代理）：负责收集节点的信息；</strong><br><strong>#deployment资源对象:weave-scope-app(应用)：从agent获取数据，通过web UI展示并与用户交互；</strong><br><strong>#DaemonSet资源对象的特性和deployment相比，就是DaemonSet资源对象会在每个节点上都运行且只能运行一个pod。</strong><br><strong>#由于每个节点都需要监控，所以用到了DaemonSet这种资源对象</strong></p></blockquote><h2 id="3、浏览器访问一下http-192-168-1-21-31841">3、浏览器访问一下http://192.168.1.21:31841/</h2><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226105729990.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226105729990.png" alt="image-20200226105729990"></a></p><p><strong>在scope的web界面中，可以查看很多的东西，pod、node节点等详细信息，包括打开容器的终端，查看其日志信息等等</strong></p><h2 id="总结">总结</h2><p>• <strong>weave scope可以以其简洁的可视化为我们更生动形象的展现出service/controller/pod等资源对象的管理及简单的web ui操作，方便故障排除及时定位</strong><br>• <strong>weave scope作为web ui目前缺少登录验证，可以利用其他方式里面web服务器的验证做安全管控。</strong></p><h1>三、部署Prometheus服务</h1><p><em><strong>PS:在这里部署的prometheus,并不是Prometheus官网提供的，而是使用的coreos提供的prometheus项目。</strong></em></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607215313.png" alt="k8s群集的三种的Web-UI界面部署（dashboard、scope、Prometheus）"></p><h3 id="在部署之前，先来了解一下Prometheus各个组件的作用吧！"><strong>在部署之前，先来了解一下Prometheus各个组件的作用吧！</strong></h3><ul><li><strong>MetricsServer:</strong> 是k8s集群资源使用情况的聚合器，收集数据给k8s集群内使用，如kubectl,hpa,scheduler等。</li><li><strong>Prometheus Operator</strong> : 是一个系统检测和警报工具箱，用来存储监控数据。</li><li><strong>Prometheus node-exporter</strong> ：收集k8s集群资源的数据，指定告警规则。</li><li><strong>Prometheus</strong> ：收集apiserver，scheduler，controller-manager，kubelet组件的数据，通过http协议传输。</li><li><strong>Grafana:</strong> 可视化数据统计和监控平台。</li></ul><h3 id="特征">特征</h3><p><strong>Prometheus 相比于其他传统监控工具主要有以下几个特点：</strong></p><ul><li><strong>具有由 metric 名称和键/值对标识的时间序列数据的多维数据模型</strong></li><li><strong>有一个灵活的查询语言</strong></li><li><strong>不依赖分布式存储，只和本地磁盘有关</strong></li><li><strong>通过 HTTP 的服务拉取时间序列数据</strong></li><li><strong>也支持推送的方式来添加时间序列数据</strong></li><li><strong>还支持通过服务发现或静态配置发现目标</strong></li><li><strong>多种图形和仪表板支持</strong></li></ul><h2 id="1、在github上搜索coreos-prometheus">1、在github上搜索coreos/prometheus</h2><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226111843047.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226111843047.png" alt="image-20200226111843047"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226112039813.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226112039813.png" alt="img"></a></p><p><strong>复制链接</strong></p><h2 id="2、克隆github上的promethes项目">2、克隆github上的promethes项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master promethes]# yum -y install git<br>//下载git命令<br>[root@master promethes]# git clone  https://github.com/coreos/kube-prometheus.git<br>//克隆github上的项目<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226114748815.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226114748815.png" alt="image-20200226114748815"></a></p><h2 id="3、修改grafapa-service-yaml文件-更改为nodePort的暴露方式，暴露端口为31001-。">3、修改grafapa-service.yaml文件, 更改为nodePort的暴露方式，暴露端口为31001.。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master promethes]# cd kube-prometheus/manifests/<br>//进入kube-prometheus的manifests目录<br>[root@master manifests]# vim grafana-service.yaml    #修改grafana的yaml文件<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  labels:<br>    app: grafana<br>  name: grafana<br>  namespace: monitoring<br>spec:<br>  type: NodePort       #改为NodePort类型<br>  ports:<br>  - name: http<br>    port: 3000<br>    targetPort: http<br>    nodePort: 31001    #映射到宿主机31001端口<br>  selector:<br>    app: grafana<br></code></pre></td></tr></table></figure><h2 id="3-修改prometheus-service-yaml文件，-更改为nodePort的暴露方式，暴露端口为31002">3.修改prometheus-service.yaml文件， 更改为nodePort的暴露方式，暴露端口为31002.</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master manifests]# vim prometheus-service.yaml    #修改prometheus的yaml文件<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  labels:<br>    prometheus: k8s<br>  name: prometheus-k8s<br>  namespace: monitoring<br>spec:<br>  type: NodePort      #改为NodePort类型<br>  ports:<br>  - name: web<br>    port: 9090<br>    targetPort: web<br>    nodePort: 31002    #映射到宿主机31002端口<br>  selector:<br>    app: prometheus<br>    prometheus: k8s<br>  sessionAffinity: ClientIP<br></code></pre></td></tr></table></figure><h2 id="4、修改alertmanager-service-yaml文件，-更改为nodePort的暴露方式，暴露端口为31003">4、修改alertmanager-service.yaml文件， 更改为nodePort的暴露方式，暴露端口为31003</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master manifests]# vim alertmanager-service.yaml    #修改alertmanager的yaml文件<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  labels:<br>    alertmanager: main<br>  name: alertmanager-main<br>  namespace: monitoring<br>spec:<br>  type: NodePort             #改为NodePort类型<br>  ports:<br>  - name: web<br>    port: 9093<br>    targetPort: web<br>    nodePort: 31003         #映射到宿主机31003端口<br>  selector:<br>    alertmanager: main<br>    app: alertmanager<br>  sessionAffinity: ClientIP<br></code></pre></td></tr></table></figure><h2 id="5、将setup目录中所有的yaml文件-全部运行。是运行以上yaml文件的基础环境配置。">5、将setup目录中所有的yaml文件,全部运行。是运行以上yaml文件的基础环境配置。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master manifests]# cd setup/<br>//进入setup/目录<br>[root@master manifests]# kubectl apply -f setup/<br>//运行setup目录中所有的yaml文件<br></code></pre></td></tr></table></figure><h2 id="6、将主目录-kube-prometheus-中所有的yaml文件-全部运行。">6、将主目录(kube-prometheus)中所有的yaml文件,全部运行。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master manifests]# cd ..<br>//返回上一级目录（kube-prometheus）<br>[root@master kube-prometheus]# kubectl apply -f manifests/<br>//运行kube-prometheus目录中所有的yaml文件<br></code></pre></td></tr></table></figure><h3 id="查看一下-2">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# kubectl get pod -n monitoring<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203237647.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203237647.png" alt="image-20200226203237647"></a></p><p><strong>部署成功之后，可以运行一条命令， 查看资源使用情况(MetricsServer必须部署成功)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master images]# kubectl top node<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228085819377.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228085819377.png" alt="image-20200228085819377"></a></p><h2 id="7、浏览器访问一下http-192-168-1-21-31001">7、浏览器访问一下http://192.168.1.21:31001</h2><p><strong>客户端访问群集中任意节点的IP+30100端口，即可看到以下界面（默认用户名和密码都是admin）</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203416325.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203416325.png" alt="image-20200226203416325"></a></p><p><strong>根据提示更改密码：</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203613578.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203613578.png" alt="image-20200226203613578"></a></p><h3 id="（1）添加模板">（1）添加模板</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203911457.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203911457.png" alt="image-20200226203911457"></a></p><p><strong>依次点击“import”进行导入下面三个模板：</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204011409.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204011409.png" alt="image-20200226204011409"></a></p><h3 id="（2）进行以下点击，即可查看群集内的监控状态">（2）进行以下点击，即可查看群集内的监控状态</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204247627.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204247627.png" alt="image-20200226204247627"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204306014.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204306014.png" alt="image-20200226204306014"></a></p><p><strong>以下可看到监控状态</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204632455.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204632455.png" alt="image-20200226204632455"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204638784.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204638784.png" alt="image-20200226204638784"></a></p><h2 id="8、导入监控模板">8、导入监控模板</h2><p><strong>从grafana的官网搜索</strong><a href="https://grafana.com/" target="_blank" rel="noopener">https://grafana.com/</a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228093639900.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228093639900.png" alt="image-20200228093639900"></a></p><p><strong>复制以下这个模板的id</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228093854640.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228093854640.png" alt="img"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094048611.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094048611.png" alt="image-20200228094048611"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094320274.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094320274.png" alt="image-20200228094320274"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094224276.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094224276.png" alt="image-20200228094224276"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094348407.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094348407.png" alt="image-20200228094348407"></a></p><p><strong>现在可以看到监控画面了</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、k8s的UI访问界面-dashboard&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;在dashboard中，虽然可以做到创建、删除、修改资源等操作，但通常情况下，我们会把它当做健康k8s集群的软件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作为Kubernetes的We
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="dashboard" scheme="https://wsdlxgp.top/tags/dashboard/"/>
    
      <category term="weave-scope" scheme="https://wsdlxgp.top/tags/weave-scope/"/>
    
      <category term="Prometheus" scheme="https://wsdlxgp.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>39 k8s中ingress资源的应用</title>
    <link href="https://wsdlxgp.top/posts/7f86.html"/>
    <id>https://wsdlxgp.top/posts/7f86.html</id>
    <published>2019-09-07T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:23.548Z</updated>
    
    <content type="html"><![CDATA[<h1>Ingress实现虚拟主机的方案</h1><h2 id="环境介绍">环境介绍</h2><table><thead><tr><th>主机</th><th>IP地址</th><th>服务</th></tr></thead><tbody><tr><td><strong>master</strong></td><td><strong>192.168.1.21</strong></td><td><strong>k8s</strong></td></tr><tr><td><strong>node01</strong></td><td><strong>192.168.1.22</strong></td><td><strong>k8s</strong></td></tr><tr><td><strong>node02</strong></td><td><strong>192.168.1.23</strong></td><td><strong>k8s</strong></td></tr></tbody></table><p><strong>基于<a href> https://blog.51cto.com/14320361/2464655</a> 的实验继续进行</strong></p><h2 id="1、首先确定要运行ingress-nginx-controller服务。"><strong>1、首先确定要运行ingress-nginx-controller服务。</strong></h2><h3 id="在gitbub上找到所需的ingress的yaml文件">在gitbub上找到所需的ingress的yaml文件</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103818065.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103818065.png" alt="image-20200219103818065"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103248246.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103248246.png" alt="image-20200219103248246"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103252620.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103252620.png" alt="image-20200219103252620"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103537536.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103537536.png" alt="image-20200219103537536"></a></p><h3 id="4-master下载">4. master下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml<br></code></pre></td></tr></table></figure><h3 id="5-修改-mandatory-yaml-文件">5. 修改 mandatory.yaml 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# vim mandatory.yaml<br>      hostNetwork: true   #213<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219104346146.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219104346146.png" alt="image-20200219104346146"></a></p><h4 id="（1）执行一下">（1）执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl apply -f mandatory.yaml<br></code></pre></td></tr></table></figure><h4 id="（2）查看一下">（2）查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl get pod -n ingress-nginx<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224123916253.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224123916253.png" alt="image-20200224123916253"></a></p><h2 id="2、将ingress-nginx-controller暴露为一个Service资源对象。"><strong>2、将ingress-nginx-controller暴露为一个Service资源对象。</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim service-nodeport.yaml <br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: ingress-nginx<br>  namespace: ingress-nginx<br>  labels:<br>    app.kubernetes.io/name: ingress-nginx<br>    app.kubernetes.io/part-of: ingress-nginx<br>spec:<br>  type: NodePort<br>  ports:<br>    - name: http<br>      port: 80<br>      targetPort: 80<br>      protocol: TCP<br>    - name: https<br>      port: 443<br>      targetPort: 443<br>      protocol: TCP<br>  selector:<br>    app.kubernetes.io/name: ingress-nginx<br>    app.kubernetes.io/part-of: ingress-nginx<br><br>---<br></code></pre></td></tr></table></figure><h4 id="（1）执行一下-2"><strong>（1）执行一下</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl apply -f service-nodeport.yaml<br></code></pre></td></tr></table></figure><h4 id="（2）查看一下-2"><strong>（2）查看一下</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl get svc -n ingress-nginx<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219111029408.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219111029408.png" alt="image-20200219111029408"></a></p><h2 id="3、创建一个deployment资源，和一个service资源，-并相互关联。">3、创建一个deployment资源，和一个service资源， 并相互关联。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim deploy1.yaml<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: deploy1<br>spec:<br>  replicas: 2<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx1<br>    spec:<br>      containers:<br>      - name: nginx1<br>        image: nginx<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: svc-1<br>spec:<br>  selector:<br>    app: nginx1<br>  ports:<br>    - port: 80<br>      targetPort: 80<br></code></pre></td></tr></table></figure><h4 id="执行一下">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f deploy1.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224091013907.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224091013907.png" alt="image-20200224091013907"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get svc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224091036678.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224091036678.png" alt="image-20200224091036678"></a></p><h3 id="然后复制deploy1-yaml资源工创建另外”一对“服务。">然后复制deploy1.yaml资源工创建另外”一对“服务。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim deploy2.yaml<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: deploy2<br>spec:<br>  replicas: 2<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx2<br>    spec:<br>      containers:<br>      - name: nginx2<br>        image: nginx<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: svc-2<br>spec:<br>  selector:<br>    app: nginx2<br>  ports:<br>    - port: 80<br>      targetPort: 80<br></code></pre></td></tr></table></figure><h4 id="执行一下-2">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f deploy2.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-2">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get deployments.<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224091747509.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224091747509.png" alt="image-20200224091747509"></a></p><h2 id="4-创建ingress的yaml文件，关联是svc1和svc2">4. 创建ingress的yaml文件，关联是svc1和svc2</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim ingress.yaml<br>apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>  name: ingress-1<br>spec:<br>  rules:<br>    - host: www1.bdqn.com<br>      http:<br>        paths:<br>        - path: /<br>          backend:<br>            serviceName: svc-1<br>            servicePort: 80<br>---<br>apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>  name: ingress-2<br>spec:<br>  rules:<br>    - host: www2.bdqn.com<br>      http:<br>        paths:<br>        - path: /<br>          backend:<br>            serviceName: svc-2<br>            servicePort: 80<br></code></pre></td></tr></table></figure><h4 id="执行一下-3">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f ingress.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-3">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get ingresses.<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092438021.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092438021.png" alt="image-20200224092438021"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl describe ingresses. ingress-1<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092823654.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092823654.png" alt="image-20200224092823654"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl describe ingresses. ingress-2<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092846086.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092846086.png" alt="image-20200224092846086"></a></p><h2 id="5、由于实验环境限制，所以自己用来模拟-一个域名。">5、由于实验环境限制，所以自己用来模拟-一个域名。</h2><h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。">进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092744445.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092744445.png" alt="image-20200224092744445"></a></p><h4 id="访问一下">访问一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get svc -n ingress-nginx <br>//查看映射的端口<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224093328158.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224093328158.png" alt="image-20200224093328158"></a></p><p><a href="http://www1.bdqn.com:30817/" target="_blank" rel="noopener">http://www1.bdqn.com:30817/</a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224094944536.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224094944536.png" alt="image-20200224094944536"></a></p><p><a href="http://www2.bdqn.com:30817/" target="_blank" rel="noopener">http://www2.bdqn.com:30817/</a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224095008674.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224095008674.png" alt="image-20200224095008674"></a></p><h4 id="总结上述示例的pod是如何一步一步可以使client访问到的，总结如下：">总结上述示例的pod是如何一步一步可以使client访问到的，总结如下：</h4><p><strong>后端pod===》service====》ingress规则====》写入Ingress-nginx-controller配置文件并自动重载使更改生效===》对本机进行域名解析====》实现client通过域名的IP+端口都可以访问到后端pod</strong></p><h1>Ingress资源实现https代理安全访问。</h1><p><strong>在上面的操作中，实现了使用ingress-nginx为后端所有pod提供一个统一的入口，那么，有一个非常严肃的问题需要考虑，就是如何为我们的pod配置CA证书来实现HTTPS访问？在pod中直接配置CA么？那需要进行多少重复性的操作？而且，pod是随时可能被kubelet杀死再创建的。当然这些问题有很多解决方法，比如直接将CA配置到镜像中，但是这样又需要很多个CA证书。</strong></p><p><strong>这里有更简便的一种方法，就拿上面的情况来说，后端有多个pod，pod与service进行关联，service又被ingress规则发现并动态写入到ingress-nginx-controller容器中，然后又为ingress-nginx-controller创建了一个Service映射到群集节点上的端口，来供client来访问。</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224143045045.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224143045045.png" alt="image-20200224143045045"></a></p><p><strong>在上面的一系列流程中，关键的点就在于ingress规则，我们只需要在ingress的yaml文件中，为域名配置CA证书即可，只要可以通过HTTPS访问到域名，至于这个域名是怎么关联到后端提供服务的pod，这就是属于k8s群集内部的通信了，即便是使用http来通信，也无伤大雅。</strong></p><h2 id="1-生成证书">1. 生成证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# mkdir https<br>//创建一个放置证书的目录<br>[root@master yaml]# cd https/<br>[root@master https]# openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=testsvc /O=testsvc"<br>//生成证书<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224100716121.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224100716121.png" alt="image-20200224100716121"></a></p><h2 id="2-创建secret资源，-保存证书。">2. 创建secret资源， 保存证书。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl create secret tls tls-secret --key=tls.key --cert tls.crt<br></code></pre></td></tr></table></figure><h2 id="3、创建一个deploy3-yaml文件，模拟一个web服务。">3、创建一个deploy3.yaml文件，模拟一个web服务。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim deploy3.yaml<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: deploy3<br>spec:<br>  replicas: 2<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx3<br>    spec:<br>      containers:<br>      - name: nginx3<br>        image: nginx<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: svc-3<br>spec:<br>  selector:<br>    app: nginx3<br>  ports:<br>    - port: 80<br>      targetPort: 80<br></code></pre></td></tr></table></figure><h4 id="执行一下-4">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl apply -f deploy3.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-4">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224104212886.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224104212886.png" alt="image-20200224104212886"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get svc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224104240133.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224104240133.png" alt="image-20200224104240133"></a></p><h2 id="4、创建对应的ingress规则。">4、创建对应的ingress规则。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# vim ingress.yaml<br><br>apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>  name: ingress-3<br>spec:<br>  tls:<br>    - hosts:<br>      - www3.bdqn.com           #域名<br>      secretName: tls-secret    #保存的证书<br>  rules:<br>    - host: www3.bdqn.com<br>      http:<br>        paths:<br>        - path: /<br>          backend:<br>            serviceName: svc-3<br>            servicePort: 80<br></code></pre></td></tr></table></figure><h3 id="执行一下-5">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl apply -f ingress.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-5">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get ingresses.<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105525215.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105525215.png" alt="image-20200224105525215"></a></p><h2 id="5-查找对应service-nodePort的443端口映射的端口，直接用浏览器访问即可。">5.查找对应service nodePort的443端口映射的端口，直接用浏览器访问即可。</h2><h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。-2">进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105118183.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105118183.png" alt="image-20200224105118183"></a></p><h4 id="查看映射端口">查看映射端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master https]# kubectl get svc -n ingress-nginx<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105347424.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105347424.png" alt="image-20200224105347424"></a></p><p><a href="https://www3.bdqn.com:31372/" target="_blank" rel="noopener">https://www3.bdqn.com:31372/</a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105409448.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105409448.png" alt="image-20200224105409448"></a></p><p><strong>k8s集群利用了“一切皆为资源”的原理，把生成的ca证书当成一个公共的资源来使用，使用时只需绑定保存的ca证书即可，不像之前一样，需要一个一个的创建ca证书，然后在关联起来，方便好用又快捷。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Ingress实现虚拟主机的方案&lt;/h1&gt;
&lt;h2 id=&quot;环境介绍&quot;&gt;环境介绍&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="ingress-nginx" scheme="https://wsdlxgp.top/tags/ingress-nginx/"/>
    
      <category term="https" scheme="https://wsdlxgp.top/tags/https/"/>
    
      <category term="ca" scheme="https://wsdlxgp.top/tags/ca/"/>
    
  </entry>
  
  <entry>
    <title>38 K8S的inress-nginx</title>
    <link href="https://wsdlxgp.top/posts/c92f.html"/>
    <id>https://wsdlxgp.top/posts/c92f.html</id>
    <published>2019-09-06T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:18.862Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Ingress 及 Ingress Controller 简介</h1><p><em><strong>Ingress简单的理解: 原先暴露的service,现在给定个统一的访问入口。</strong></em></p><p><strong>Ingress 是 k8s 资源对象，用于对外暴露服务，该资源对象定义了不同主机名（域名）及 URL 和对应后端 Service（k8s Service）的绑定，根据不同的路径路由 http 和 https 流量。而 Ingress Contoller 是一个 pod 服务，封装了一个 web 前端负载均衡器，同时在其基础上实现了动态感知 Ingress 并根据 Ingress 的定义动态生成 前端 web 负载均衡器的配置文件，比如 Nginx Ingress Controller 本质上就是一个 Nginx，只不过它能根据 Ingress 资源的定义动态生成 Nginx 的配置文件，然后动态 Reload。个人觉得 Ingress Controller 的重大作用是将前端负载均衡器和 Kubernetes 完美地结合了起来，一方面在云、容器平台下方便配置的管理，另一方面实现了集群统一的流量入口，而不是像 nodePort 那样给集群打多个孔。</strong>。</p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607214201.png" alt="K8S的inress-nginx"></p><p><strong>所以，总的来说要使用 Ingress，得先部署 Ingress Controller 实体（相当于前端 Nginx），然后再创建 Ingress （相当于 Nginx 配置的 k8s 资源体现），Ingress Controller 部署好后会动态检测 Ingress 的创建情况生成相应配置。Ingress Controller 的实现有很多种：有基于 Nginx 的，也有基于 HAProxy的，还有基于 OpenResty 的 Kong Ingress Controller 等，更多 Controller 见：<a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/%EF%BC%8C%E6%9C%AC%E6%96%87%E4%BD%BF%E7%94%A8%E5%9F%BA%E4%BA%8E" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/，本文使用基于</a> Nginx 的 Ingress Controller：ingress-nginx。</strong></p><h1>二、Ingress 组成</h1><ul><li><strong>将Nginx的配置抽象成一个Ingress对象，每添加一个新的服务只需写一个新的Ingress的yaml文件即可</strong></li><li><strong>将新加入的Ingress转化成Nginx的配置文件并使之生效</strong></li><li><strong>ingress controller</strong></li><li><strong>ingress服务</strong></li></ul><h1>三、ingress的工作原理</h1><h2 id="ingress具体的工作原理如下"><strong>ingress具体的工作原理如下:</strong></h2><p><strong>ingress contronler通过与k8s的api进行交互，动态的去感知k8s集群中ingress服务规则的变化，然后读取它，并按照定义的ingress规则，转发到k8s集群中对应的service。</strong></p><p><strong>而这个ingress规则写明了哪个域名对应k8s集群中的哪个service，然后再根据ingress-controller中的nginx配置模板，生成一段对应的nginx配置。</strong></p><p><strong>然后再把该配置动态的写到ingress-controller的pod里，该ingress-controller的pod里面运行着一个nginx服务，控制器会把生成的nginx配置写入到nginx的配置文件中，然后reload一下，使其配置生效。以此来达到域名分配置及动态更新的效果。</strong></p><h1>四、Ingress 可以解决什么问题？</h1><h2 id="动态配置服务">动态配置服务</h2><p><strong>如果按照传统方式, 当新增加一个服务时, 我们可能需要在流量入口加一个反向代理指向我们新的k8s服务. 而如果用了Ingress, 只需要配置好这个服务, 当服务启动时, 会自动注册到Ingress的中, 不需要而外的操作.</strong></p><h2 id="减少不必要的暴露端口">减少不必要的暴露端口</h2><p><strong>配置过k8s的都清楚, 第一步是要关闭防火墙的, 主要原因是k8s的很多服务会以NodePort方式映射出去, 这样就相当于给宿主机打了很多孔, 既不安全也不优雅. 而Ingress可以避免这个问题, 除了Ingress自身服务可能需要映射出去, 其他服务都不要用NodePort方式</strong></p><h1>五、Ingress-nginx配置示例</h1><h2 id="1-创建一个web服务，用deployment资源，-用httpd镜像，然后创建一个service资源与之关联。">1) 创建一个web服务，用deployment资源， 用httpd镜像，然后创建一个service资源与之关联。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# vim deploy_1.yaml<br>apiVersion: v1<br>kind: Namespace<br>metadata:<br>  name: bdqn-ns<br>  labels:<br>    name: bdqn-ns<br>---<br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: httpd-deploy<br>  namespace: bdqn-ns<br>spec:<br>  replicas: 2<br>  template:<br>    metadata:<br>      labels:<br>        app: bdqn-ns<br>    spec:<br>      containers:<br>      - name: httpd<br>        image: httpd<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: httpd-svc<br>  namespace: bdqn-ns<br>spec:<br>  type: NodePort<br>  selector:<br>    app: bdqn-ns<br>  ports:<br>  - name: http-port<br>    port: 80<br>    targetPort: 80<br>    nodePort: 31033<br></code></pre></td></tr></table></figure><h3 id="执行一下">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl apply -f deploy_1.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl get svc -n bdqn-ns<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219093450798.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219093450798.png" alt="image-20200219093450798"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl get pod -n bdqn-ns<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219093511785.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219093511785.png" alt="image-20200219093511785"></a></p><h3 id="访问一下">访问一下</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219093653692.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219093653692.png" alt="image-20200219093653692"></a></p><h2 id="2-创建一个web服务，用deployment-资源，用tomcat-8-5-45镜像。">2) 创建一个web服务，用deployment 资源，用tomcat:8.5.45镜像。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# vim deploy_2.yaml <br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: tomcat-deploy<br>  namespace: bdqn-ns<br>spec:<br>  replicas: 2<br>  template:<br>    metadata:<br>      labels:<br>        app: bdqn-tomcat<br>    spec:<br>      containers:<br>      - name: tomcat<br>        image: tomcat:8.5.45<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: tomcat-svc<br>  namespace: bdqn-ns<br>spec:<br>  type: NodePort<br>  selector:<br>    app: bdqn-tomcat<br>  ports:<br>  - name: tomcat-port<br>    port: 8080<br>    targetPort: 8080<br>    nodePort: 32033<br></code></pre></td></tr></table></figure><h3 id="执行一下-2">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl apply -f deploy_2.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-2">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl get pod -n bdqn-ns<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219094056123.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219094056123.png" alt="image-20200219094056123"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl get svc -n bdqn-ns<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219094146341.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219094146341.png" alt="image-20200219094146341"></a></p><h3 id="访问一下-2">访问一下</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219100037136.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219100037136.png" alt="image-20200219100037136"></a></p><h2 id="3-在k8s集群前边部署一个反向代理服务器，这个服务器代理这k8s集群内部的service资源。">3) 在k8s集群前边部署一个反向代理服务器，这个服务器代理这k8s集群内部的service资源。</h2><h3 id="1-Ingress"><strong>1. Ingress:</strong></h3><p><strong>（1）Ingress controller:</strong></p><p><strong>将新加入的Ingress转化为反向代理服务器的配置文件，并使之生效。(动态的感知k8s集群内Ingress资源的变化。）</strong></p><p><strong>（2）Ingress :</strong></p><p><strong>Ingress:将反向代理服务器的配置抽象成一个Ingress对象，每添加一个新的服务，只需要写一个新的Ingress的yaml文件即可。</strong></p><h3 id="2-Nginx-反向代理服务器。">2. Nginx :反向代理服务器。</h3><p><strong>需要解决了两个问题:</strong></p><p><strong>1、动态的配置服务。</strong></p><p><strong>2、减少不必要的端口暴露。</strong></p><p><strong>基于nginx的ingress controller根据不同的开发公司，又分为两种:<br>​ 1、k8s社区版的: Ingerss - nginx.<br>​ 2、nginx公司自己开发的: nginx- ingress .</strong></p><h3 id="3-在gitbub上找到所需的ingress的yaml文件">3. 在gitbub上找到所需的ingress的yaml文件</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103818065.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103818065.png" alt="image-20200219103818065"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103248246.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103248246.png" alt="image-20200219103248246"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103252620.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103252620.png" alt="image-20200219103252620"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103537536.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103537536.png" alt="image-20200219103537536"></a></p><h3 id="4-master下载">4. master下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml<br></code></pre></td></tr></table></figure><h3 id="5-修改-mandatory-yaml-文件">5. 修改 mandatory.yaml 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# vim mandatory.yaml<br>      hostNetwork: true   #213<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219104346146.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219104346146.png" alt="image-20200219104346146"></a></p><p><strong>---------如果ingress-controller镜像下载不成功，可以直接使用下边的镜像。</strong><br><strong>docker pull <a href="http://registry.cn-hangzhou.aliyuncs.com/ilanni/nginx-ingress-controller:0.22.0" target="_blank" rel="noopener">registry.cn-hangzhou.aliyuncs.com/ilanni/nginx-ingress-controller:0.22.0</a></strong></p><p><strong>需要注意的是，如果使用上述镜像，需要将deployment资源指定的镜像名称进行修改。</strong></p><p><strong>修改的是madatory.yaml文件里的deployment资源。</strong></p><p><strong>在deployment资源中，如果添加了此字段，意味着Pod中运行的应用可以直接使用node节点的端口，这样node节 点主机所在网络的其他主机，就可以通过访问该端口访问此应用。(类似于docker映射到宿主机 上的端口。)</strong></p><h4 id="（1）执行一下">（1）执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl apply -f mandatory.yaml<br></code></pre></td></tr></table></figure><h4 id="（2）查看一下">（2）查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl get pod -n ingress-nginx<br></code></pre></td></tr></table></figure><h3 id="6-创建一个service的yaml文件">6. 创建一个service的yaml文件</h3><h4 id="（1）执行一下-2">（1）执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl apply -f mandatory.yaml<br></code></pre></td></tr></table></figure><h4 id="（2）查看一下-2">（2）查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# vim mandatory-svc.yaml <br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: ingress-nginx<br>  namespace: ingress-nginx<br>spec:<br>  type: NodePort<br>  ports:<br>  - name: httpd<br>    port: 80<br>    targetPort: 80<br>  - name: https<br>    port: 443<br>  selector:<br>    app: ingress-nginx<br></code></pre></td></tr></table></figure><p><strong>（1）执行一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl apply -f mandatory-svc.yaml<br></code></pre></td></tr></table></figure><p><strong>（2）查看一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ingress]# kubectl get svc -n ingress-nginx<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219111029408.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219111029408.png" alt="image-20200219111029408"></a></p><h2 id="4）创建Ingress资源。">4）创建Ingress资源。</h2><p><strong>ingress ：</strong><br><strong>ingress-nginx-controller: 动态感知ingress 资源的变化</strong><br><strong>ingress: 创建svc与ingress-nginx-controller 关联的规则</strong></p><h3 id="（1）编写ingress的yaml文件">（1）编写ingress的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim ingress.yaml <br>apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>  name: bdqn-ingress<br>  namespace: bdqn-ns<br>  annotations:<br>    nginx.ingress.kubernetes.io/rewrite-target: /<br>spec:<br>  rules:             #规则 <br>  - host: ingress.bdqn.com   #域名<br>    http:<br>      paths:<br>      - path: /<br>        backend:<br>          serviceName: httpd-svc       #关联service<br>          servicePort: 80              #关联service的映射端口<br>      - path: /tomcat<br>        backend:<br>          serviceName: tomcat-svc      #关联service<br>          servicePort: 8080           #关联service的映射端口<br></code></pre></td></tr></table></figure><h4 id="执行一下-3">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f ingress.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-3">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod -n ingress-nginx -o wide<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221094602218.png" alt="image-20200221094602218"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get ingresses. -n bdqn-ns<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221092912191.png" alt="image-20200221092912191"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl describe ingresses. -n bdqn-ns<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221093013134.png" alt="image-20200221093013134"></p><h4 id="进入pod查看一下">进入pod查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl exec -it -n ingress-nginx nginx-ingress-controller-5954d475b6-24k92 /bin/sh<br>/etc/nginx $ cat nginx.conf<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221094404491.png" alt="image-20200221094404491"></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221094408211.png" alt="image-20200221094408211"></p><h3 id="（2）访问一下">（2）访问一下</h3><h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。"><strong>进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</strong></h4><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221103807318.png" alt="image-20200221103807318"></p><h4 id="访问http-ingress-bdqn-com">访问http://ingress.bdqn.com/</h4><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221095323635.png" alt="image-20200221095323635"></p><h4 id="访问http-ingress-bdqn-com-tomcat">访问http://ingress.bdqn.com/tomcat</h4><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221102354657.png" alt="image-20200221102354657"></p><h2 id="5）为ingress-nginx创建一个service（使用官网的service文件就可以）">5）为ingress-nginx创建一个service（使用官网的service文件就可以）</h2><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103818065.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103818065.png" alt="image-20200219103818065"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103248246.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103248246.png" alt="image-20200219103248246"></a></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103252620.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103252620.png" alt="image-20200219103252620"></a></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221103351973.png" alt="image-20200221103351973"></p><p><em><strong>复制上面的网址</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# wget  https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/provider/baremetal/service-nodeport.yaml<br>//下载文件到master节点<br></code></pre></td></tr></table></figure><h3 id="执行一下，下载的service文件">执行一下，下载的service文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f service-nodeport.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-4">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get service -n ingress-nginx<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221103644779.png" alt="image-20200221103644779"></p><h3 id="访问一下-3">访问一下</h3><h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。-2">进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</h4><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221103835847.png" alt="image-20200221103835847"></p><h3 id="访问http-ingress-bdqn-com-30817">访问http://ingress.bdqn.com:30817/</h3><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221103927247.png" alt="image-20200221103927247"></p><h3 id="访问http-ingress-bdqn-com-30817-tomcat">访问http://ingress.bdqn.com:30817/tomcat</h3><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221103950477.png" alt="image-20200221103950477"></p><p><strong>Service -Nodeport:因为ingress - nginx - controller运行在了集群内的其中一个节点，为了保证即使这个节点宕机，我们对应的域名仍然能够正常访问服务，所以我们将ingress -nginx- controller也暴露为一个service资源。</strong></p><h2 id="六、练习">六、练习:</h2><p><strong>创建一个deploymen资源，基于nginx镜像，repolicas：2个.然后创建一个service资源关联这个deployment资源。最后创建一个ingress资源，<a href="http://xn--svcingress-ui2pp14ahmcbv2dk27ivg4b.bdqn.com/nginx" target="_blank" rel="noopener">将上述svc关联到ingress.bdqn.com/nginx</a> 目录下。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim lianxi.yaml<br>apiVersion: v1<br>kind: Namespace<br>metadata:<br>  name: xgp-666<br>  labels:<br>    name: xgp-666<br>---<br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: xgp<br>  namespace: xgp-666<br>spec:<br>  replicas: 2<br>  template:<br>    metadata:<br>      labels:<br>        app: xgp-nginx<br>    spec:<br>      containers:<br>        - name: xgp-nginx<br>          image: nginx<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: xgp-svc<br>  namespace: xgp-666<br>spec:<br>  type: NodePort<br>  selector:<br>    app: xgp-nginx<br>  ports:<br>  - name: xgp-port<br>    port: 80<br>    targetPort: 80<br>    nodePort: 30000<br>---<br>apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>  name: xgp-ingress<br>  namespace: xgp-666<br>  annotations:<br>    nginx.ingress.kubernetes.io/rewrite-target: /<br>spec:<br>  rules:<br>  - host: ingress.xgp.com<br>    http:<br>      paths:<br>      - path: /<br>        backend:<br>          serviceName: xgp-svc<br>          servicePort: 80<br></code></pre></td></tr></table></figure><h3 id="执行一下-4">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f lianxi.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-5">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl describe ingresses. -n xgp-666<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221112302483.png" alt="image-20200221112302483"></p><h3 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。-3"><strong>进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</strong></h3><h3 id="添加完之后访问一下http-ingress-xgp-com">添加完之后访问一下http://ingress.xgp.com/</h3><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200221112416946.png" alt="image-20200221112416946"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、Ingress 及 Ingress Controller 简介&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Ingress简单的理解: 原先暴露的service,现在给定个统一的访问入口。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ingress 是 k8
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="nginx" scheme="https://wsdlxgp.top/tags/nginx/"/>
    
      <category term="ingress" scheme="https://wsdlxgp.top/tags/ingress/"/>
    
      <category term="ingress controller" scheme="https://wsdlxgp.top/tags/ingress-controller/"/>
    
  </entry>
  
  <entry>
    <title>37 k8s的Secret（密文）和configmap（明文）的使用教程</title>
    <link href="https://wsdlxgp.top/posts/a387.html"/>
    <id>https://wsdlxgp.top/posts/a387.html</id>
    <published>2019-09-05T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:12.863Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Secret</h1><p><em><strong>Secret :用来保存一些敏感信息，比如数据库的用户名密码或者秘钥。</strong></em></p><h2 id="概览">概览</h2><p><strong>Secret是用来保存小片敏感数据的k8s资源，例如密码，token，或者秘钥。这类数据当然也可以存放在Pod或者镜像中，但是放在Secret中是为了更方便的控制如何使用数据，并减少暴露的风险。<br>用户可以创建自己的secret，系统也会有自己的secret。<br>Pod需要先引用才能使用某个secret，Pod有2种方式来使用secret：作为volume的一个域被一个或多个容器挂载；在拉取镜像的时候被kubelet引用。</strong></p><h3 id="內建的Secrets">內建的Secrets</h3><p><strong>由ServiceAccount创建的API证书附加的秘钥<br>k8s自动生成的用来访问apiserver的Secret，所有Pod会默认使用这个Secret与apiserver通信</strong></p><h2 id="1-Secret类型">1. Secret类型</h2><p><strong>Secret有三种类型：</strong></p><ul><li><strong>Opaque：使用base64编码存储信息，可以通过base64 --decode解码获得原始数据，因此安全性弱。</strong></li><li><strong><a href="http://kubernetes.io/dockerconfigjson%EF%BC%9A%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8docker" target="_blank" rel="noopener">kubernetes.io/dockerconfigjson：用于存储docker</a> registry的认证信息。</strong></li><li><strong><a href="http://kubernetes.io/service-account-token%EF%BC%9A%E7%94%A8%E4%BA%8E%E8%A2%AB" target="_blank" rel="noopener">kubernetes.io/service-account-token：用于被</a> serviceaccount 引用。serviceaccout 创建时 Kubernetes 会默认创建对应的 secret。Pod 如果使用了 serviceaccount，对应的 secret 会自动挂载到 Pod 的 /run/secrets/kubernetes.io/serviceaccount 目录中</strong>。</li></ul><h2 id="举例-保存数据库的用户名和密码">举例:保存数据库的用户名和密码</h2><blockquote><p><strong>用户名：</strong> <strong>root</strong><br><strong>密码：</strong> <strong><a href="http://123.com/" target="_blank" rel="noopener">123.com</a></strong></p></blockquote><h3 id="1、通过–from-literal（文字的）">1、通过–from-literal（文字的）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl create secret generic mysecret1 --from-literal=username=root --from-literal=password=123.com<br></code></pre></td></tr></table></figure><blockquote><p><strong>generic：通用的，一般的加密方式</strong></p></blockquote><h4 id="查看一下">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl get secrets<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214100419966.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214100419966.png" alt="img"></a></p><p><strong>类型是Opaque（不透明的）</strong></p><h3 id="2、通过from-file（文件）">2、通过from-file（文件）</h3><h4 id="新建两个文件并分别写入用户名和密码">新建两个文件并分别写入用户名和密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# echo root > username<br>[root@master secret]# echo 123.com  > password<br></code></pre></td></tr></table></figure><h4 id="创建一个secret">创建一个secret</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]#  kubectl create secret generic mysecret2 --from-file=username --from-file=password<br></code></pre></td></tr></table></figure><h4 id="查看一下-2">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl get secrets<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214103506842.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214103506842.png" alt="image-20200214103506842"></a></p><h3 id="3、通过-from-env-file">3、通过-- from- env-file:</h3><h4 id="创建一个文件写入用户名和密码">创建一个文件写入用户名和密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]#vim env.txt <br>username=root<br>password=123.com<br></code></pre></td></tr></table></figure><h4 id="创建一个secret-2">创建一个secret</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl create secret generic mysecret3 --from-env-file=env.txt<br></code></pre></td></tr></table></figure><h4 id="查看一下-3">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl get secrets<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214103905956.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214103905956.png" alt="image-20200214103905956"></a></p><h3 id="4、通过yaml配置文件">4、通过yaml配置文件</h3><h4 id="（1）把需要保存的数据加密（”base64“的方式）">（1）把需要保存的数据加密（”base64“的方式）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# echo root | base64<br>cm9vdAo=<br>[root@master secret]# echo 123.com | base64<br>MTIzLmNvbQo=<br></code></pre></td></tr></table></figure><blockquote><p><strong>解码：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# echo -n cm9vdAo | base64 --decode <br>root<br>[root@master secret]# echo -n MTIzLmNvbQo | base64 --decode <br>123.com<br></code></pre></td></tr></table></figure></blockquote><h4 id="（2）编写secre4的yaml文件">（2）编写secre4的yaml文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# vim secret4.yaml<br>apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: mysecret4<br>data:<br>  username: cm9vdAo=<br>  password: MTIzLmNvbQo=<br></code></pre></td></tr></table></figure><h5 id="执行一下">执行一下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl apply -f secret4.yaml<br></code></pre></td></tr></table></figure><h4 id="（3）查看一下">（3）查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl get secrets<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214104544899.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214104544899.png" alt="image-20200214104544899"></a></p><h2 id="如果来使用Secret资源">如果来使用Secret资源</h2><h3 id="1-以Volume挂载的方式">1. 以Volume挂载的方式</h3><h3 id="使用Secret">使用Secret</h3><p><strong>secret可以作为数据卷挂载或者作为环境变量暴露给Pod中的容器使用，也可以被系统中的其他资源使用。比如可以用secret导入与外部系统交互需要的证书文件等。</strong></p><p><strong>在Pod中以文件的形式使用secret</strong></p><blockquote><ol><li><strong>创建一个Secret，多个Pod可以引用同一个Secret</strong></li><li><strong>修改Pod的定义，在spec.volumes[]加一个volume，给这个volume起个名字，spec.volumes[].secret.secretName记录的是要引用的Secret名字</strong></li><li><strong>在每个需要使用Secret的容器中添加一项spec.containers[].volumeMounts[]，指定spec.containers[].volumeMounts[].readOnly = true，spec.containers[].volumeMounts[].mountPath要指向一个未被使用的系统路径。</strong></li><li><strong>修改镜像或者命令行使系统可以找到上一步指定的路径。此时Secret中data字段的每一个key都是指定路径下面的一个文件名</strong></li></ol></blockquote><h4 id="编写pod的yaml文件"><strong>编写pod的yaml文件</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# vim pod.yaml <br><br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: mypod<br>spec:<br>  containers:<br>  - name: mypod<br>    image: busybox<br>    args:<br>      - /bin/sh<br>      - -c<br>      - sleep 300000<br>    volumeMounts:<br>    - name: secret-test<br>      mountPath: "/etc/secret-test"  #pod中的路径<br>      readOnly: true                 #是否只读<br>  volumes:<br>  - name: secret-test<br>    secret:<br>      secretName: mysecret1<br></code></pre></td></tr></table></figure><p><strong>还可以自定义存放数据的文件名</strong></p><h4 id="执行一下-2">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl apply -f pod.yaml<br></code></pre></td></tr></table></figure><h3 id="Secret文件权限">Secret文件权限</h3><p><strong>可以指定secret文件的权限，类似linux系统文件权限，如果不指定默认权限是0644，等同于linux文件的-rw-r–r--权限</strong></p><h4 id="进入容器查看保存的数据">进入容器查看保存的数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl exec -it mypod /bin/sh<br>/ # cd /etc/secret-test/<br>/etc/secret-test # ls<br>pasword   username<br>/etc/secret-test # cat username <br>root<br>/etc/secret-test # cat pasword <br>123.com<br></code></pre></td></tr></table></figure><h4 id="测试是否有只读权限">测试是否有只读权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">123.com/etc/secret-test # echo admin > username<br>/bin/sh: can't create username: Read-only file system<br></code></pre></td></tr></table></figure><h3 id="1-1-自定义存放数据的文件名的yaml文件">1.1 自定义存放数据的文件名的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]#  vim pod.yaml <br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: mypod<br>spec:<br>  containers:<br>  - name: mypod<br>    image: busybox<br>    args:<br>      - /bin/sh<br>      - -c<br>      - sleep 300000<br>    volumeMounts:<br>    - name: secret-test<br>      mountPath: "/etc/secret-test"  #pod中的路径<br>      readOnly: true                 #是否只读<br>  volumes:<br>  - name: secret-test<br>    secret:<br>      secretName: mysecret1<br>      items:<br>      - key: username<br>        path: my-group/my-username   #自定义的容器中的目录<br>      - key: password<br>        path: my-group/my-password   #自定义的容器中的目录<br></code></pre></td></tr></table></figure><h4 id="执行一下-3">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f pod.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-4">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master secret]# kubectl exec -it mypod /bin/sh<br>//进入容器查看<br><span class="hljs-meta"> #</span><span class="bash"> cat /etc/secret-test/my-group/my-password </span><br>123.com <br><span class="hljs-meta"> #</span><span class="bash"><code class="language-hljs shell">[root@master secret]# kubectl exec -it mypod /bin/sh<br>//进入容器查看<br><span class="hljs-meta"> #</span><span class="bash"> cat /etc/secret-test/my-group/my-password </span><br>123.com <br><span class="hljs-meta"> #</span><span class="bash"> cat /etc/secret-test/my-group/my-username </span><br>root<br></code></pre></td></tr></table></figure><h3 id="1-2-如果，现在将secret资源内保存的数据进行更新，请问，使用此数据的应用内，数据是是否也会更新">1.2 如果，现在将secret资源内保存的数据进行更新，请问，使用此数据的应用内，数据是是否也会更新?</h3><p><strong>会实时更新(这里引用数据，是以volumes挂 载使用数据的方式)。</strong></p><p><strong>更新mysecret1的数据: password —&gt; admin YWRtaW4K (base64)</strong></p><p><strong>可以通过edit 命令，直接修改。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl edit secrets mysecret1<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217162834490.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217162834490.png" alt="image-20200217162834490"></a></p><h4 id="查看一下-5">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master secret]# kubectl exec -it mypod /bin/sh<br>//进入容器查看<br><span class="hljs-meta"> #</span><span class="bash"> cat /etc/secret-test/my-group/my-password </span><br>admin<br><span class="hljs-meta"> #</span><span class="bash"><code class="language-hljs shell">[root@master secret]# kubectl exec -it mypod /bin/sh<br>//进入容器查看<br><span class="hljs-meta"> #</span><span class="bash"> cat /etc/secret-test/my-group/my-password </span><br>admin<br><span class="hljs-meta"> #</span><span class="bash"> cat /etc/secret-test/my-group/my-username </span><br>root<br></code></pre></td></tr></table></figure><p><em><strong>数据已经成功更新了</strong></em></p><h3 id="2、以环境变量的方式">2、以环境变量的方式</h3><blockquote><p><strong>创建一个Secret，多个Pod可以引用同一个Secret</strong><br><strong>修改pod的定义，定义环境变量并使用env[].valueFrom.secretKeyRef指定secret和相应的key</strong><br><strong>修改镜像或命令行，让它们可以读到环境变量</strong></p></blockquote><p><strong>编写pod的yaml文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# vim pod-env.yaml <br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: mypod2<br>spec:<br>  containers:<br>  - name: mypod<br>    image: busybox<br>    args:<br>      - /bin/sh<br>      - -c<br>      - sleep 300000<br>    env:<br>      - name: SECRET_USERNAME<br>        valueFrom:<br>          secretKeyRef:<br>            name: mysecret2<br>            key: username<br>      - name: SECRET_PASSWORD<br>        valueFrom:<br>          secretKeyRef:<br>            name: mysecret2<br>            key: password<br></code></pre></td></tr></table></figure><h4 id="执行一下-4">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl apply -f pod-env.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-6">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214111931566.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214111931566.png" alt="image-20200214111931566"></a></p><h4 id="进入容器查看保存的数据-2">进入容器查看保存的数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl exec -it mypod2 /bin/sh<br>/ # echo $SECRET_USERNAME<br>root<br>/ # echo $SECRET_PASSWORD<br>123.com<br></code></pre></td></tr></table></figure><h3 id="2-1-更新sevret文件的内容">2.1 更新sevret文件的内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl edit secrets mysecret2<br>//修改保存文件的内容<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217162834490.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217162834490.png" alt="image-20200217162834490"></a></p><h4 id="查看一下-7">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master secret]# kubectl exec -it mypod2 /bin/sh<br>/ # echo $SECRET_USERNAME<br>root<br>/ # echo $SECRET_PASSWORD<br>123.com<br></code></pre></td></tr></table></figure><p><em><strong>等待了一定时间后，可以看到这个数据并没有没有改变</strong></em></p><h2 id="总结">总结</h2><p><strong>如果引用secret数据的应用， 要求会随着secret资源对象内保存的数据的更新，而实时更新，那么应该使用volumes挂载的方式引用资源因为用环境变量的方式引用不会实时更新数据。</strong></p><h1>二、ConfigMap</h1><p><strong>和Secret资源类似，不同之处在于，secret 资源保存的是敏感信息，而Configmap保存的是以明文方式存放的数据。</strong></p><p><strong>Configmap的创建与使用方式与Secret非常类似，不同点只在于数据以明文形式存放（不过，我觉得Secret的密文形式也并不密文，只能算得上是简单编码）。</strong></p><p><strong>和Secret资源类似，不同之处在于，secret 资源保存的是敏感信息，而Configmap保存的是以明文方式存放的数据。</strong><br><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607213735.png" alt="k8s的Secret（密文）和configmap（明文）的使用教程"></p><blockquote><p><strong>username：adam</strong></p><p><strong>age：18</strong></p></blockquote><h2 id="创建的四种方式">创建的四种方式</h2><h3 id="1、通过-from-literal-文字的">1、通过-- from- literal(文字的):</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl create configmap myconfigmap1 --from-literal=username=adam --from-literal=age=18<br></code></pre></td></tr></table></figure><h4 id="查看一下-8">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get cm<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217103048235.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217103048235.png" alt="image-20200217103048235"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl describe cm<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217103123130.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217103123130.png" alt="image-20200217103123130"></a></p><h3 id="2、通过–from-file-文件">2、通过–from-file (文件) :</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# echo adam > username<br>[root@master yaml]# echo 18 > age<br></code></pre></td></tr></table></figure><h4 id="创建">创建</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl create configmap myconfigmap2 --from-file=username --from-file=age<br></code></pre></td></tr></table></figure><h4 id="查看一下-9">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl describe cm<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217103509006.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217103509006.png" alt="image-20200217103509006"></a></p><h3 id="3、通过–from-env-file">3、通过–from- env-file:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim env.txt <br>username=adam<br>age=18<br></code></pre></td></tr></table></figure><h4 id="创建-2">创建</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl create configmap  myconfigmap3 --from-env-file=env.txt<br></code></pre></td></tr></table></figure><h4 id="查看一下-10">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master configmap]# kubectl describe cm<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217165039190.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217165039190.png" alt="image-20200217165039190"></a></p><h3 id="4、通过yaml配置文件-2">4、通过yaml配置文件:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim configmap.yaml<br>apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: myconfigmap4<br>data:<br>  username: 'adam'<br>  age: '18'<br></code></pre></td></tr></table></figure><h4 id="创建-3">创建</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f configmap.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-11">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl describe cm<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217104428521.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217104428521.png" alt="image-20200217104428521"></a></p><h2 id="如何来使用configmap资源">如何来使用configmap资源</h2><h3 id="1-以Volume挂载的方式-2">1. 以Volume挂载的方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim v-pod.yaml <br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: pod1<br>spec:<br>  containers:<br>  - name: mypod<br>    image: busybox<br>    args:<br>      - /bin/sh<br>      - -c<br>      - sleep 300000<br>    volumeMounts:<br>    - name: cmp-test<br>      mountPath: "/etc/cmp-test"<br>      readOnly: true<br>    volumes:<br>  - name: cmp-test<br>    configMap:<br>      name: myconfigmap1<br></code></pre></td></tr></table></figure><h4 id="执行一下-5">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master configmap]# kubectl apply -f v-pod.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-12">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master configmap]# kubectl exec -it pod1 /bin/sh<br>//进入容器查看一下<br><span class="hljs-meta"> #</span><span class="bash"> cat /etc/cmp-test/age </span><br>18/ <br><span class="hljs-meta"> #</span><span class="bash"><code class="language-hljs shell">[root@master configmap]# kubectl exec -it pod1 /bin/sh<br>//进入容器查看一下<br><span class="hljs-meta"> #</span><span class="bash"> cat /etc/cmp-test/age </span><br>18/ <br><span class="hljs-meta"> #</span><span class="bash"> cat /etc/cmp-test/username </span><br>adam/<br></code></pre></td></tr></table></figure><h3 id="1-1-自定义存放数据的文件名的yaml文件-2">1.1 自定义存放数据的文件名的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master configmap]# vim v-pod2.yaml <br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: pod3<br>spec:<br>  containers:<br>  - name: mypod<br>    image: busybox<br>    args:<br>      - /bin/sh<br>      - -c<br>      - sleep 300000<br>    volumeMounts:<br>    - name: cmp-test<br>      mountPath: "/etc/cmp-test"<br>      readOnly: true<br>    volumes:<br>  - name: cmp-test<br>    configMap:<br>      name: myconfigmap1<br>      items:<br>      - key: username<br>        path: my-group/my-username   #自定义的容器中的目录<br>      - key: age<br>        path: my-group/my-age   #自定义的容器中的目录<br></code></pre></td></tr></table></figure><h4 id="执行一下-6">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master configmap]# kubectl apply -f v-pod2.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-13">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master configmap]# kubectl exec -it pod3 /bin/sh<br>//进入容器查看<br><span class="hljs-meta">#</span><span class="bash"> cat /etc/cmp-test/my-group/my-username </span><br>adam/ <br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell">[root@master configmap]# kubectl exec -it pod3 /bin/sh<br>//进入容器查看<br><span class="hljs-meta">#</span><span class="bash"> cat /etc/cmp-test/my-group/my-username </span><br>adam/ <br><span class="hljs-meta">#</span><span class="bash"> cat /etc/cmp-test/my-group/my-age </span><br>18/<br></code></pre></td></tr></table></figure><h3 id="1-2-如果，现在将secret资源内保存的数据进行更新，请问，使用此数据的应用内，数据是是否也会更新-2">1.2 如果，现在将secret资源内保存的数据进行更新，请问，使用此数据的应用内，数据是是否也会更新?</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master configmap]# kubectl edit cm myconfigmap1<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217172107999.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217172107999.png" alt="image-20200217172107999"></a></p><h4 id="查看一下-14">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master configmap]# kubectl exec -it pod3 /bin/sh<br>//进入容器查看<br><span class="hljs-meta">#</span><span class="bash"> cat /etc/cmp-test/my-group/my-username </span><br>adam/ <br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell">[root@master configmap]# kubectl exec -it pod3 /bin/sh<br>//进入容器查看<br><span class="hljs-meta">#</span><span class="bash"> cat /etc/cmp-test/my-group/my-username </span><br>adam/ <br><span class="hljs-meta">#</span><span class="bash"> cat /etc/cmp-test/my-group/my-age </span><br>10<br></code></pre></td></tr></table></figure><p><em><strong>可以看到更新成功</strong></em></p><h3 id="2-以环境变量的方式">2.以环境变量的方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master configmap]# vim e-pod.yaml <br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: pod2<br>spec:<br>  containers:<br>  - name: mypod<br>    image: busybox<br>    args:<br>      - /bin/sh<br>      - -c<br>      - sleep 300000<br>    env:<br>      - name: CONFIGMAP_NAME<br>        valueFrom:<br>          configMapKeyRef:<br>            name: myconfigmap2<br>            key: username<br>      - name: CONFIGMAP_AGE<br>        valueFrom:<br>          configMapKeyRef:<br>            name: myconfigmap2<br>            key: age<br></code></pre></td></tr></table></figure><h4 id="执行一下-7">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master configmap]# kubectl apply -f e-pod.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-15">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master configmap]# kubectl exec -it pod2 /bin/sh<br>//进入容器查看一下<br><span class="hljs-meta"> #</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$CONFIGMAP_NAME</span></span><br>adam<br><span class="hljs-meta"> #</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable"><code class="language-hljs shell">[root@master configmap]# kubectl exec -it pod2 /bin/sh<br>//进入容器查看一下<br><span class="hljs-meta"> #</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$CONFIGMAP_NAME</span></span><br>adam<br><span class="hljs-meta"> #</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$CONFIGMAP_AGE</span></span><br>18<br></code></pre></td></tr></table></figure><h3 id="2-1-更新sevret文件的内容-2">2.1 更新sevret文件的内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master configmap]# kubectl edit cm myconfigmap2<br> //修改保存文件的内容<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217172701793.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200217172701793.png" alt="image-20200217172701793"></a></p><h4 id="查看一下-16">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master configmap]# kubectl exec -it pod2 /bin/sh<br>//进入容器查看一下<br><span class="hljs-meta"> #</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$CONFIGMAP_NAME</span></span><br>adam<br><span class="hljs-meta"> #</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable"><code class="language-hljs shell">[root@master configmap]# kubectl exec -it pod2 /bin/sh<br>//进入容器查看一下<br><span class="hljs-meta"> #</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$CONFIGMAP_NAME</span></span><br>adam<br><span class="hljs-meta"> #</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$CONFIGMAP_AGE</span></span><br>18<br></code></pre></td></tr></table></figure><p><em><strong>等待了一定时间后，可以看到这个数据并没有没有改变</strong></em></p><p><strong>可以看出这个configmap和secret的更新效果基本没有区别。</strong></p><h2 id="总结configmap、与secret资源有什么相同和不同之处。"><strong>总结configmap、与secret资源有什么相同和不同之处。</strong></h2><h3 id="Secret-与-ConfigMap-对比">Secret 与 ConfigMap 对比</h3><p><strong>相同点：</strong></p><blockquote><p><strong>key/value的形式</strong></p><p><strong>属于某个特定的namespace</strong></p><p><strong>可以导出到环境变量</strong></p><p><strong>可以通过目录/文件形式挂载</strong></p><p><strong>通过 volume 挂载的配置信息均可热更新</strong></p></blockquote><p><strong>不同点：</strong></p><blockquote><p><strong>Secret 可以被 ServerAccount 关联</strong></p><p><strong>Secret 可以存储 docker register 的鉴权信息，用在 ImagePullSecret 参数中，用于拉取私有仓库的镜像</strong></p><p><strong>Secret 支持 Base64 加密</strong></p><p><strong>Secret 分为 <a href="https://kubernetes.io/service-account-token%E3%80%81kubernetes.io/dockerconfigjson%E3%80%81Opaque" target="_blank" rel="noopener">kubernetes.io/service-account-token、kubernetes.io/dockerconfigjson、Opaque</a> 三种类型，而 Configmap 不区分类型</strong></p></blockquote><h2 id="总结以volumes挂载、和环境变量方式引用资源的相同和不同之处。">总结以volumes挂载、和环境变量方式引用资源的相同和不同之处。</h2><p><strong>volumes挂载(可根据更改数据更新)：引用自己创建的secret（密文）或configmap（明文），挂载到容器中指定的目录下。查看保存的文件时，根据自己所填路径和secret或configmap创建的文件，进行查看。</strong></p><p><strong>环境变量(不因更改数据更新)：引用自己创建的secret（密文）或configmap（明文），挂载到容器中指定的目录下。查看保存的文件时，根据自己环境变量，进行查看。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、Secret&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Secret :用来保存一些敏感信息，比如数据库的用户名密码或者秘钥。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;概览&quot;&gt;概览&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Secret是用来保存小片敏感数据的k8s资
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="secret" scheme="https://wsdlxgp.top/tags/secret/"/>
    
      <category term="pod" scheme="https://wsdlxgp.top/tags/pod/"/>
    
      <category term="configmap" scheme="https://wsdlxgp.top/tags/configmap/"/>
    
  </entry>
  
  <entry>
    <title>36 k8s的StatefulSet（有状态服务）实现</title>
    <link href="https://wsdlxgp.top/posts/af4b.html"/>
    <id>https://wsdlxgp.top/posts/af4b.html</id>
    <published>2019-09-04T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:08.275Z</updated>
    
    <content type="html"><![CDATA[<h1>StatefulSet介绍</h1><h3 id="遇到的问题：">遇到的问题：</h3><p><strong>使用Deployment创建的Pod是无状态的，当挂在Volume之后，如果该Pod挂了，Replication Controller会再run一个来保证可用性，但是由于是无状态的，Pod挂了的时候与之前的Volume的关系就已经断开了，新起来的Pod无法找到之前的Pod。但是对于用户而言，他们对底层的Pod挂了没有感知，但是当Pod挂了之后就无法再使用之前挂载的磁盘了。</strong></p><h4 id="StatefulSet-是一种给Pod提供唯一标志的控制器，它可以保证部署和扩展的顺序。"><strong>StatefulSet: 是一种给Pod提供唯一标志的控制器，它可以保证部署和扩展的顺序。</strong></h4><blockquote><p><strong>Pod一致性：包含次序（启动、停止次序）、网络一致性。此一致性与Pod相关，与被调度到哪个node节点无关。</strong></p><p><strong>稳定的次序：对于N个副本的StatefulSet，每个Pod都在[0，N)的范围内分配一个数字序号，且是唯一的。</strong></p><p><strong>稳定的网络：Pod的hostname模式为(statefulset名称)- (序号)。</strong></p><p><strong>稳定的存储：通过VolumeClaimTemplate为每个Pod创建一个PV。删除、减少副本，不会删除相关的卷。</strong></p></blockquote><h4 id="1-RC、-RS、Deployment、DS。-无状态服务"><strong>(1) RC、 RS、Deployment、DS。-----&gt; 无状态服务</strong></h4><blockquote><p><strong>template(模板):根据模板 创建出来的Pod,它们J的状态都是一模一样的(除了名称，IP, 域名之外)</strong></p><p><strong>可以理解为:任何一个Pod, 都可以被删除，然后用新生成的Pod进行替换。</strong></p></blockquote><h4 id="2-有状态的服务-需要记录前一-次或者多次通信中的相关事件，以作为一下通信的分类标准。比如-mysql等数据库服务。-Pod的名称，不能随意变化。数据持久化的目录也是不一样，每一个Pod都有自己独有的数据持久化存储目录。"><strong>(2) 有状态的服务: 需要记录前一 次或者多次通信中的相关事件，以作为一下通信的分类标准。比如: mysql等数据库服务。(Pod的名称，不能随意变化。数据持久化的目录也是不一样，每一个Pod都有自己独有的数据持久化存储目录。)</strong></h4><blockquote><p><strong>mysql:主从关系。</strong></p></blockquote><p><strong>如果把之前无状态的服务比喻为牛、羊等牲畜，因为，这些到一定时候就可以出售。那么，有状态就比喻为:宠物，而宠物不像牲畜一样到达一定时候出售，人们往往会照顾宠物的一生。</strong></p><h4 id="3-每一个Pod-对应一个PVC-每一个PVC对应一个PV。"><strong>(3) 每一个Pod----&gt;对应一个PVC----&gt;每一个PVC对应一个PV。</strong></h4><blockquote><p><strong>storageclass:自动创建PV</strong></p><p><strong>需要解决:自动创建PVC。</strong></p></blockquote><h1>实现原理</h1><p><strong>与 ReplicaSet 和 Deployment 资源一样，StatefulSet 也使用控制器的方式实现，它主要由 StatefulSetController、StatefulSetControl 和 StatefulPodControl 三个组件协作来完成 StatefulSet 的管理，StatefulSetController 会同时从 PodInformer 和 ReplicaSetInformer 中接受增删改事件并将事件推送到队列中：</strong><br><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607212629.png" alt="k8s的StatefulSet（有状态服务）实现"><br><strong>控制器 StatefulSetController 会在 Run 方法中启动多个 Goroutine 协程，这些协程会从队列中获取待处理的 StatefulSet 资源进行同步，接下来我们会先介绍 Kubernetes 同步 StatefulSet 的过程。</strong></p><h2 id="1，例子">1，例子</h2><h3 id="（1）创建一个statefulset的yaml文件">（1）创建一个statefulset的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim statefulset.yaml<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: headless-svc<br>  labels:<br>    app: headless-svc<br>spec:<br>  ports:<br>  - port: 80<br>  selector:<br>    app: headless-pod<br>  clusterIP: None     #没有同一的ip<br>---<br>apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: statefulset-test<br>spec:<br>  serviceName: headless-svc<br>  replicas: 3<br>  selector:<br>    matchLabels:<br>      app: headless-pod<br>  template:<br>    metadata:<br>      labels:<br>        app: headless-pod<br>    spec:<br>      containers:<br>      - name: myhttpd<br>        image: httpd<br>        ports:<br>        - containerPort: 80<br></code></pre></td></tr></table></figure><p><strong>Deployment : Deploy+RS+随机字符串(Pod的名称。)没有顺序的，可</strong><br><strong>以没随意替代的。</strong></p><blockquote><p><strong>1、headless-svc :无头服务。因为没有IP地址，所以它不具备负载均衡的功能了。因为statefulset要求Pod的名称是有顺序的，每一个Pod都不能被随意取代，也就是即使Pod重建之后，名称依然不变。为后端的每一个Pod去命名。</strong></p><p><strong>2、statefulSet:定义具体的应用</strong></p><p><strong>3、volumeClaimT emplates:自动创建PVC，为后端的Pod提供专有的存储。</strong></p></blockquote><h3 id="执行一下">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f statefulset.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get svc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212100101082.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212100101082.png" alt="image-20200212100101082"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br>//可看到这些pod是有顺序的<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212102001181.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212102001181.png" alt="image-20200212102001181"></a></p><h1>一、创建StorageClass资源对象。</h1><h2 id="1、基于NFS服务，创建NFS服务。">1、基于NFS服务，创建NFS服务。</h2><p><strong>下载nfs所需安装包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node02 ~]# yum -y install nfs-utils  rpcbind<br></code></pre></td></tr></table></figure><p><strong>创建共享目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# mkdir /nfsdata<br></code></pre></td></tr></table></figure><p><strong>创建共享目录的权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim /etc/exports<br>/nfsdata *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><p><strong>开启nfs和rpcbind</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# systemctl start nfs-server.service <br>[root@master ~]# systemctl start rpcbind<br></code></pre></td></tr></table></figure><p><strong>测试一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# showmount -e<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205105654925.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205105654925.png" alt="image-20200205105654925"></a></p><h2 id="2、创建rbac权限。">2、创建rbac权限。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim rbac-rolebind.yaml <br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: nfs-provisioner<br>  namespace: default<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  name: nfs-provisioner-runner<br>  namespace: default<br>rules:<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumes"]<br>      verbs: ["get", "list", "watch", "create", "delete"]<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumeclaims"]<br>      verbs: ["get", "list", "watch", "update"]<br>   -  apiGroups: ["storage.k8s.io"]<br>      resources: ["storageclasses"]<br>      verbs: ["get", "list", "watch"]<br>   -  apiGroups: [""]<br>      resources: ["events"]<br>      verbs: ["watch", "create", "update", "patch"]<br>   -  apiGroups: [""]<br>      resources: ["services", "endpoints"]<br>      verbs: ["get","create","list", "watch","update"]<br>   -  apiGroups: ["extensions"]<br>      resources: ["podsecuritypolicies"]<br>      resourceNames: ["nfs-provisioner"]<br>      verbs: ["use"]<br>---<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: run-nfs-provisioner<br>subjects:<br>  - kind: ServiceAccount<br>    name: nfs-provisioner<br>    namespace: default        #必写字段<br>roleRef:<br>  kind: ClusterRole<br>  name: nfs-provisioner-runner<br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h3 id="执行一下-2">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f rbac-rolebind.yaml<br></code></pre></td></tr></table></figure><h2 id="3、创建Deployment资源对象，用Pod代替-真正的NFS服务。">3、创建Deployment资源对象，用Pod代替 真正的NFS服务。</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim nfs-deployment.yaml <br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nfs-client-provisioner<br>spec:<br>  replicas: 1<br>  strategy:<br>    type: Recreate<br>  template:<br>    metadata:<br>      labels:<br>        app: nfs-client-provisioner<br>    spec:<br>      serviceAccount: nfs-provisioner<br>      containers:<br>        - name: nfs-client-provisioner<br>          image: registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner<br>          volumeMounts:<br>            - name: nfs-client-root<br>              mountPath:  /persistentvolumes<br>          env:<br>            - name: PROVISIONER_NAME<br>              value: bdqn<br>            - name: NFS_SERVER<br>              value: 192.168.1.21<br>            - name: NFS_PATH<br>              value: /nfsdata<br>      volumes:<br>        - name: nfs-client-root<br>          nfs:<br>            server: 192.168.1.21<br>            path: /nfsdata<br></code></pre></td></tr></table></figure><h3 id="执行一下-3">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-deployment.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-2">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212104037272.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212104037272.png" alt="image-20200212104037272"></a></p><h2 id="4、创建storageclass的yaml文件">4、创建storageclass的yaml文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim test-storageclass.yaml <br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  name: stateful-nfs<br>provisioner: bdqn  #通过provisioner字段关联到上述Deploy<br>reclaimPolicy: Retain<br></code></pre></td></tr></table></figure><h3 id="执行一下-4">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f test-storageclass.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-3">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get sc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212104551911.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212104551911.png" alt="image-20200212104551911"></a></p><h1>二，解决自动创建pvc</h1><h2 id="1、创建statefulset的yaml文件">1、创建statefulset的yaml文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim statefulset.yaml <br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: headless-svc<br>  labels:<br>    app: headless-svc<br>spec:<br>  ports:<br>  - port: 80<br>    name: myweb<br>  selector:<br>    app: headless-pod<br>  clusterIP: None<br>---<br>apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: statefulset-test<br>spec:<br>  serviceName: headless-svc<br>  replicas: 3<br>  selector:<br>    matchLabels:<br>      app: headless-pod<br>  template:<br>    metadata:<br>      labels:<br>        app: headless-pod<br>    spec:<br>      containers:<br>      - image: httpd<br>        name: myhttpd<br>        ports:<br>        - containerPort: 80<br>          name: httpd<br>        volumeMounts:<br>        - mountPath: /mnt<br>          name: test<br>  volumeClaimTemplates:  #> 自动创建PVC，为后端的Pod提供专有的存储。**<br>  - metadata:<br>      name: test<br>      annotations:   #这是指定storageclass<br>        volume.beta.kubernetes.io/storage-class: stateful-nfs<br>    spec:<br>      accessModes:<br>        - ReadWriteOnce<br>      resources:<br>        requests:<br>          storage: 100Mi<br></code></pre></td></tr></table></figure><p><strong>在此示例中：</strong></p><ul><li><strong>创建了一个名为 <code>headless-svc</code> 的 <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/service?hl=zh-cn" target="_blank" rel="noopener">Service</a> 对象，由 <code>metadata: name</code> 字段指示。该 Service 会定位一个名为 <code>headless-svc</code> 的应用，由 <code>labels: app: headless-svc</code> 和 <code>selector: app: headless-pod</code> 指示。该 Service 会公开端口 80 并将其命名为 <code>web</code>。而且该 Service 会控制网域并将互联网流量路由到 StatefulSet 部署的容器化应用。</strong></li><li><strong>使用三个副本 Pod (<code>replicas: 3</code>) 创建了一个名为 <code>web</code> 的 StatefulSet。</strong></li><li><strong>Pod 模板 (<code>spec: template</code>) 指示其 Pod 标记为 <code>app: headless-pod</code>。</strong></li><li><strong>Pod 规范 (<code>template: spec</code>) 指示 StatefulSet 的 Pod 运行一个容器 <code>myhttpd</code>，该容器运行版本为 <code>httpd</code> 映像。容器映像由 <a href="https://cloud.google.com/container-registry/docs/concepts/overview?hl=zh-cn" target="_blank" rel="noopener">Container Registry</a> 托管。</strong></li><li><strong>Pod 规范使用由 Service 打开的 <code>web</code> 端口。</strong></li><li><strong><code>template: spec: volumeMounts</code> 指定一个名为 <code>test</code> 的 <code>mountPath</code>。<code>mountPath</code> 是容器中应装载存储卷的路径。</strong></li><li><strong>StatefulSet 预配了一个具有 100mb 预配存储空间的 <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes?hl=zh-cn" target="_blank" rel="noopener">PersistentVolumeClaim</a>：<code>test</code>。</strong></li></ul><h3 id="执行一下-5">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f statefulset.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-4">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212105434510.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212105434510.png" alt="image-20200212105434510"></a></p><p><em><strong>如果第一个pod出现了问题，后面的pod就不会生成。</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get statefulsets<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212105502430.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212105502430.png" alt="image-20200212105502430"></a></p><h2 id="2、-验证一下数据存储">2、 验证一下数据存储</h2><h4 id="容器中创建文件">容器中创建文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell">[root@master yaml]# kubectl exec -it statefulset-test-0 /bin/sh<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">cd</span> /mnt</span><br><span class="hljs-meta">#</span><span class="bash"> touch testfile</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in"><code class="language-hljs shell">[root@master yaml]# kubectl exec -it statefulset-test-0 /bin/sh<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">cd</span> /mnt</span><br><span class="hljs-meta">#</span><span class="bash"> touch testfile</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">exit</span></span><br></code></pre></td></tr></table></figure><h4 id="宿主机查看一下">宿主机查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# ls /nfsdata/default-test-statefulset-test-0-pvc-bf1ae1d0-f496-4d69-b33b-39e8aa0a6e8d/<br>testfile<br></code></pre></td></tr></table></figure><h1>三、小实验</h1><p><strong>以自己的名称创建一个名称空间，以下所有资源都运行在此空间中。用statefuset资源运行一个httpd web服务，要求3个Pod，但是每个Pod的主界面内容不一样，并且都要做专有的数据持久化，尝试删除其中一个Pod，查看新生成的Pod，总结对比与之前Deployment资源控制器控制的Pod有什么不同之处？</strong></p><h2 id="（一）创建StorageClass资源对象。">（一）创建StorageClass资源对象。</h2><p><em><strong>注意：nfs服务要开启</strong></em></p><h3 id="1、创建namespace的yaml文件">1、创建namespace的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim namespace.yaml <br>kind: Namespace<br>apiVersion: v1<br>metadata:<br>  name: xgp-lll    #namespave的名称<br></code></pre></td></tr></table></figure><h4 id="执行一下-6">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f namespace.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-5">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get namespaces<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212113542729.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212113542729.png" alt="image-20200212113542729"></a></p><h3 id="2-创建rbac权限。">2. 创建rbac权限。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim rbac-rolebind.yaml<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: nfs-provisioner<br>  namespace: xgp-lll<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  name: nfs-provisioner-runner<br>  namespace: xgp-lll<br>rules:<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumes"]<br>      verbs: ["get", "list", "watch", "create", "delete"]<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumeclaims"]<br>      verbs: ["get", "list", "watch", "update"]<br>   -  apiGroups: ["storage.k8s.io"]<br>      resources: ["storageclasses"]<br>      verbs: ["get", "list", "watch"]<br>   -  apiGroups: [""]<br>      resources: ["events"]<br>      verbs: ["watch", "create", "update", "patch"]<br>   -  apiGroups: [""]<br>      resources: ["services", "endpoints"]<br>      verbs: ["get","create","list", "watch","update"]<br>   -  apiGroups: ["extensions"]<br>      resources: ["podsecuritypolicies"]<br>      resourceNames: ["nfs-provisioner"]<br>      verbs: ["use"]<br>---<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: run-nfs-provisioner<br>subjects:<br>  - kind: ServiceAccount<br>    name: nfs-provisioner<br>    namespace: xgp-lll<br>roleRef:<br>  kind: ClusterRole<br>  name: nfs-provisioner-runner<br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h4 id="执行一下-7">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f rbac-rolebind.yaml<br></code></pre></td></tr></table></figure><h3 id="3、创建Deployment资源对象，用Pod代替-真正的NFS服务。-2">3、创建Deployment资源对象，用Pod代替 真正的NFS服务。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim nfs-deployment.yaml <br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nfs-client-provisioner<br>  namespace: xgp-lll<br>spec:<br>  replicas: 1<br>  strategy:<br>    type: Recreate<br>  template:<br>    metadata:<br>      labels:<br>        app: nfs-client-provisioner<br>    spec:<br>      serviceAccount: nfs-provisioner<br>      containers:<br>        - name: nfs-client-provisioner<br>          image: registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner<br>          volumeMounts:<br>            - name: nfs-client-root<br>              mountPath:  /persistentvolumes<br>          env:<br>            - name: PROVISIONER_NAME<br>              value: xgp<br>            - name: NFS_SERVER<br>              value: 192.168.1.21<br>            - name: NFS_PATH<br>              value: /nfsdata<br>      volumes:<br>        - name: nfs-client-root<br>          nfs:<br>            server: 192.168.1.21<br>            path: /nfsdata<br></code></pre></td></tr></table></figure><h4 id="执行一下-8">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-deployment.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-6">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod  -n xgp-lll<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212115808607.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212115808607.png" alt="image-20200212115808607"></a></p><h3 id="4、创建storageclass的yaml文件-2">4、创建storageclass的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim test-storageclass.yaml <br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  name: stateful-nfs<br>  namespace: xgp-lll<br>provisioner: xgp  #通过provisioner字段关联到上述Deploy<br>reclaimPolicy: Retain<br></code></pre></td></tr></table></figure><h4 id="执行一下-9">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f test-storageclass.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-7">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get sc -n  xgp-lll<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212120207679.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212120207679.png" alt="image-20200212120207679"></a></p><h2 id="（二）解决自动创建pvc">（二）解决自动创建pvc</h2><h3 id="1、创建statefulset的yaml文件-2">1、创建statefulset的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">apiVersion: v1<br>kind: Service<br>metadata:<br>  name: headless-svc<br>  namespace: xgp-lll<br>  labels:<br>    app: headless-svc<br>spec:<br>  ports:<br>  - port: 80<br>    name: myweb<br>  selector:<br>    app: headless-pod<br>  clusterIP: None<br>---<br>apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: statefulset-test<br>  namespace: xgp-lll<br>spec:<br>  serviceName: headless-svc<br>  replicas: 3<br>  selector:<br>    matchLabels:<br>      app: headless-pod<br>  template:<br>    metadata:<br>      labels:<br>        app: headless-pod<br>    spec:<br>      containers:<br>      - image: httpd<br>        name: myhttpd<br>        ports:<br>        - containerPort: 80<br>          name: httpd<br>        volumeMounts:<br>        - mountPath: /usr/local/apache2/htdocs<br>          name: test<br>  volumeClaimTemplates:  #> 自动创建PVC，为后端的Pod提供专有的存储。**<br>  - metadata:<br>      name: test<br>      annotations:   #这是指定storageclass<br>        volume.beta.kubernetes.io/storage-class: stateful-nfs<br>    spec:<br>      accessModes:<br>        - ReadWriteOnce<br>      resources:<br>        requests:<br>          storage: 100Mi<br></code></pre></td></tr></table></figure><h3 id="执行一下-10">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f statefulset.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-8">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod -n xgp-lll<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212121256221.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212121256221.png" alt="image-20200212121256221"></a></p><h3 id="2、-验证一下数据存储-2">2、 验证一下数据存储</h3><h4 id="容器中创建文件-2">容器中创建文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">第一个<br>[root@master yaml]# kubectl exec -it -n xgp-lll statefulset-test-0 /bin/bash <br>root@statefulset-test-0:/usr/local/apache2# echo 123 > /usr/local/apache2/htdocs/index.html<br><br>第二个<br>[root@master yaml]# kubectl exec -it -n xgp-lll statefulset-test-1 /bin/bash <br>root@statefulset-test-2:/usr/local/apache2# echo 456 > /usr/local/apache2/htdocs/index.html<br><br>第三个<br>[root@master yaml]# kubectl exec -it -n xgp-lll statefulset-test-2 /bin/bash <br>root@statefulset-test-1:/usr/local/apache2# echo 789 > /usr/local/apache2/htdocs/index.html<br></code></pre></td></tr></table></figure><h4 id="宿主机查看一下-2">宿主机查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">第一个<br>[root@master yaml]# cat /nfsdata/xgp-lll-test-statefulset-test-0-pvc-ccaa02df-4721-4453-a6ec-4f2c928221d7/index.html <br>123<br><br>第二个<br>[root@master yaml]# cat /nfsdata/xgp-lll-test-statefulset-test-1-pvc-88e60a58-97ea-4986-91d5-a3a6e907deac/index.html <br>456<br><br><br>第三个<br>[root@master yaml]# cat /nfsdata/xgp-lll-test-statefulset-test-2-pvc-4eb2bbe2-63d2-431a-ba3e-b7b8d7e068d3/index.html <br>789<br></code></pre></td></tr></table></figure><h4 id="访问一下">访问一下</h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212131705416.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212131705416.png" alt="image-20200212131705416"></a></p><p><strong>扩容、缩容:在此过程中，Pod的生成或删除操作也是有顺序性的。</strong></p><p><strong>升级操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">kubectl explain sts.spec.updateStrategy.rollingUpdate.partition<br></code></pre></td></tr></table></figure><p><strong>partition：如果partition后面的值等于N, N+的都会更新。默认值为0（所有都会更新）。</strong></p><h1>总结：</h1><ol><li><strong>StatefulSet 的控制器直接管理的是 Pod。通过在 Pod 的名字里加上事先约定好的编号，保证应用拓扑状态的服务稳定。</strong></li><li><strong>Kubernetes 通过 Headless Service，为这些有编号的 Pod，在 DNS 服务器中生成带有同样编号的 DNS 记录，生成唯一的网络标识。</strong></li><li><strong>StatefulSet 为每一个 Pod 分配并创建一个同样编号的 PVC。保证了每一个 Pod 都拥有一个独立的 Volume，保证数据不会丢失。</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;StatefulSet介绍&lt;/h1&gt;
&lt;h3 id=&quot;遇到的问题：&quot;&gt;遇到的问题：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用Deployment创建的Pod是无状态的，当挂在Volume之后，如果该Pod挂了，Replication Controller会再run一个来保证可
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="Storage Class" scheme="https://wsdlxgp.top/tags/Storage-Class/"/>
    
      <category term="StatefulSet" scheme="https://wsdlxgp.top/tags/StatefulSet/"/>
    
      <category term="nfs-deployment" scheme="https://wsdlxgp.top/tags/nfs-deployment/"/>
    
  </entry>
  
  <entry>
    <title>35 k8s的存储类</title>
    <link href="https://wsdlxgp.top/posts/15ab.html"/>
    <id>https://wsdlxgp.top/posts/15ab.html</id>
    <published>2019-09-03T16:00:00.000Z</published>
    <updated>2020-06-18T12:34:02.398Z</updated>
    
    <content type="html"><![CDATA[<h4 id="k8s有很多的服务，很多的资源对象。">k8s有很多的服务，很多的资源对象。</h4><p><strong>如果要去创建服务，做数据持久化，需要预先知道可用<code>PV</code>有哪些?</strong></p><p><strong>如果为了这个服务去提前创建<code>PV</code>，那么我们还需要知道，这个服务，大概需要多大的空间?</strong></p><h3 id="环境介绍">环境介绍</h3><table><thead><tr><th>主机</th><th>IP地址</th><th>服务</th></tr></thead><tbody><tr><td>master</td><td>192.168.1.21</td><td>k8s</td></tr><tr><td>node01</td><td>192.168.1.22</td><td>k8s</td></tr><tr><td>node02</td><td>192.168.1.23</td><td>k8s</td></tr></tbody></table><p>基于<a href> https://blog.51cto.com/14320361/2464655</a> 的实验继续进行</p><h1>存储类介绍</h1><p><strong>Kubernetes集群管理员通过提供不同的存储类，可以满足用户不同的服务质量级别、备份策略和任意策略要求的存储需求。动态存储卷供应使用StorageClass进行实现，其允许存储卷按需被创建。如果没有动态存储供应，Kubernetes集群的管理员将不得不通过手工的方式类创建新的存储卷。通过动态存储卷，Kubernetes将能够按照用户的需要，自动创建其需要的存储。</strong></p><p><strong>基于StorageClass的动态存储供应整体过程如下图所示：</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607211947.png" alt></p><blockquote><p><strong>1）集群管理员预先创建存储类（StorageClass）；</strong><br><strong>2）用户创建使用存储类的持久化存储声明(PVC：PersistentVolumeClaim)；</strong><br><strong>3）存储持久化声明通知系统，它需要一个持久化存储(PV: PersistentVolume)；</strong><br><strong>4）系统读取存储类的信息；</strong><br><strong>5）系统基于存储类的信息，在后台自动创建PVC需要的PV；</strong><br><strong>6）用户创建一个使用PVC的Pod；</strong><br><strong>7）Pod中的应用通过PVC进行数据的持久化；</strong><br><strong>8）而PVC使用PV进行数据的最终持久化处理。</strong></p></blockquote><h2 id="先来简单看一下这张图实现的过程，然后我们再来研究一下">先来简单看一下这张图实现的过程，然后我们再来研究一下</h2><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607212122.png" alt="k8s的存储类"></p><blockquote><p><strong>说在前面的话，静态供给的话，会需要我们手动去创建pv，如果没有足够的资源，找不到合适的pv，那么pod就会处于pending等待的状态，就是说找不到合适的伴侣了，所以解决这两种问题，就给出了这种动态供给，主要是能够自动帮你创建pv<br>，就是你需要多大的容量，就自动给你创建多大的容量，也就是pv，k8s帮你创建了，创建pvc的时候就需要找pv了，这个时候就交给这个存储类了，而存储类呢，去帮你创建这些pv,存储类呢，就是实现了对指定存储的一个支持，直接帮你去调用api去创建存储类，所以就不需要人工的去帮你创建pv了。<br>而你去想想，当节点比较多，业务比较多的时候，再去人工手动创建pv，量还是很大的，而且也不是很好去维护。<br>而动态供给主要的一个实现就是StorageClass存储对象，其实它就是声明你使用哪个存储，然后呢帮你去连接，再帮你去自动创建pv。</strong></p></blockquote><p>举个例子更好去理解<br>话不多说下图<br><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607212132.png" alt="k8s的存储类"></p><blockquote><p><strong>其实它是一个基于NFS实现的一个pv供给，它大概流程是这样的，我们可能会创建一个statefulset有状态的应用存储，然后有一个管理的nfs-storageClass，因为nfs目前是不支持这个自动的创建pv的，我们可以利用社区实现的插件来完成这个pv的自动创建，也就是StorageClass这一块，创建完之后，然后pod再去引用。</strong></p></blockquote><h1>一，Storage Class（存储类）</h1><p><em><strong>作用：它可以动态的自动的创建所需要的PV</strong></em></p><p><strong>Provisioner（供给方，提供者）：及提供了存储资源的存储系统。k8s内建有多重供给方，这些供给方的名字都以“<a href="https://kubernetes.io/" target="_blank" rel="noopener">kubernetes.io</a>”为前缀。并且还可以自定义。</strong></p><p><strong>Parameters（参数）：存储类使用参数描述要关联到的存储卷，注意不同的供给方参数也不同。</strong></p><p><strong>ReclaimPlicy: PV的回收策略，可用值有Delete(默认)和Retain</strong></p><h3 id="（1）确定基于NFS服务来做的SC。NFS开启">（1）确定基于NFS服务来做的SC。NFS开启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# showmount -e<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210102349600.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210102349600.png" alt="image-20200210102349600"></a></p><h3 id="（2）需要RBAC权限。">（2）需要RBAC权限。</h3><p><em><strong>RBAC：rbac是k8s的API的安全策略，是基于用户的访问权限的控制。规定了谁，可以有什么样的权限。</strong></em></p><p><strong>为了给SC资源操作k8s集群的权限。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim rbac-rolebind.yaml<br>kind: Namespace<br>apiVersion: v1<br>metadata:<br>  name: bdqn-test<br>---<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: nfs-provisioner<br>  namespace: bdqn-test<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  name: nfs-provisioner-runner<br>  namespace: bdqn-test<br>rules:<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumes"]<br>      verbs: ["get", "list", "watch", "create", "delete"]<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumeclaims"]<br>      verbs: ["get", "list", "watch", "update"]<br>   -  apiGroups: ["storage.k8s.io"]<br>      resources: ["storageclasses"]<br>      verbs: ["get", "list", "watch"]<br>   -  apiGroups: [""]<br>      resources: ["events"]<br>      verbs: ["watch", "create", "update", "patch"]<br>   -  apiGroups: [""]<br>      resources: ["services", "endpoints"]<br>      verbs: ["get","create","list", "watch","update"]<br>   -  apiGroups: ["extensions"]<br>      resources: ["podsecuritypolicies"]<br>      resourceNames: ["nfs-provisioner"]<br>      verbs: ["use"]<br>---<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: run-nfs-provisioner<br>subjects:<br>  - kind: ServiceAccount<br>    name: nfs-provisioner<br>    namespace: bdqn-test<br>roleRef:<br>    kind: ClusterRole<br>    name: nfs-provisioner-runner<br>    apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><p><strong>运行一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f rbac-rolebind.yaml<br></code></pre></td></tr></table></figure><h3 id="（3）nfs-deployment">（3）nfs-deployment</h3><p><em><strong>作用：其实它是一个NFS客户端。但它通过K8S的内置的NFS驱动挂载远端的NFS服务器到本地目录；然后将自身作为storage provider，关联storage class。</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim nfs-deployment.yaml<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nfs-client-provisioner<br>  namespace: bdqn-test<br>spec:<br>  replicas: 1<br>  strategy:<br>    type: Recreate<br>  template:<br>    metadata:<br>      labels:<br>        app: nfs-client-provisioner<br>    spec:<br>      serviceAccount: nfs-provisioner    #指定账户<br>      containers:<br>        - name: nfs-client-provisioner<br>          image: registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner<br>          volumeMounts:<br>            - name: nfs-client-root<br>              mountPath:  /persistentvolumes   #指定容器内的挂载目录<br>          env:<br>            - name: PROVISIONER_NAME            #这是这个容器内置的变量<br>              value: bdqn-test                  #这是上面变量的值（名字）<br>            - name: NFS_SERVER                  #内置变量，用于指定nfs服务的IP<br>              value: 192.168.1.21<br>            - name: NFS_PATH                    #内置变量，指定的是nfs共享的目录<br>              value: /nfsdata<br>      volumes:                                  #这下面是指定上面挂载到容器内的nfs的路径及IP<br>        - name: nfs-client-root<br>          nfs:<br>            server: 192.168.1.21<br>            path: /nfsdata<br></code></pre></td></tr></table></figure><p><strong>执行一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-deployment.yaml<br></code></pre></td></tr></table></figure><h3 id="（4）创建storageclass">（4）创建storageclass</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim test-storageclass.yaml<br><br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  name: stateful-nfs<br>  namespace: bdqn-test<br>provisioner: bdqn-test  #这里要和第三个nfs-client-provisioner的env环境变量中的value值对应。<br>reclaimPolicy: Retain   #回收策略为：retain，还有一个默认的值为“default”<br></code></pre></td></tr></table></figure><p><strong>执行一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f test-storageclass.yaml<br></code></pre></td></tr></table></figure><h3 id="（5）创建PVC">（5）创建PVC</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim test-pvc.yaml<br><br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: test-claim<br>  namespace: bdqn-test<br>spec:<br>  storageClassName: stateful-nfs   #定义存储类的名字，要和SC的名字对应<br>  accessModes:<br>    - ReadWriteMany         #访问模式为RWM<br>  resources:<br>    requests:<br>      storage: 500Mi<br></code></pre></td></tr></table></figure><p><strong>执行一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f test-pvc.yaml<br></code></pre></td></tr></table></figure><p><strong>查看一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pvc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210221418144.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210221418144.png" alt="image-20200210221418144"></a></p><h3 id="（6）创建一个Pod">（6）创建一个Pod</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim test-pod.yaml<br>kind: Pod<br>apiVersion: v1<br>metadata:<br>  name: test-pod<br>  namespace: bdqn-test<br>spec:<br>  containers:<br>  - name: test-pod<br>    image: busybox<br>    args:<br>      - /bin/sh<br>      - -c<br>      - sleep 30000<br>    volumeMounts:<br>      - name: nfs-pvc<br>        mountPath: /test<br>  restartPolicy: OnFailure<br>  volumes:<br>    - name: nfs-pvc<br>      persistentVolumeClaim:<br>        claimName: test-claim  #这的名字要和PVC的名字一致<br></code></pre></td></tr></table></figure><p><strong>执行一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f  test-pod.yaml<br></code></pre></td></tr></table></figure><p><strong>查看一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod -n bdqn-test<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210111008028.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210111008028.png" alt="image-20200210111008028"></a></p><h3 id="（7）容器中添加内容，并查看挂载目录">（7）容器中添加内容，并查看挂载目录</h3><p><strong>进入容器修改页面内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl exec -it test-pod -n bdqn-test /bin/sh<br>/ # cd test/<br>/test # touch test-file<br>/test # echo 123456 > test-file <br>/test # cat test-file <br>123456<br></code></pre></td></tr></table></figure><p><strong>查看挂载目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# ls /nfsdata/<br>bdqn-test-test-claim-pvc-79ddfcf1-65ae-455f-9e03-5bcfe6c6ce15<br>web1<br>web2<br>[root@master yaml]# cat /nfsdata/bdqn-test-test-claim-pvc-79ddfcf1-65ae-455f-9e03-5bcfe6c6ce15/test-file <br>123456<br></code></pre></td></tr></table></figure><h1>二，如果，K8S集群中， 有很多类似的PV, PVC在去向PV申请空间的时候，不仅会考虑名称以及访问控制模式，还会考虑你申请空间的大小，会分配给你最合适大小的PV。</h1><h3 id="运行一个web服务，采用Deployment资源，基于nginx镜像，replicas为3个。数据持久化目录为nginx服务的主访问目录：-usr-share-nginx-html"><em>运行一个web服务，采用Deployment资源，基于nginx镜像，replicas为3个。数据持久化目录为nginx服务的主访问目录：/usr/share/nginx/html</em></h3><p><strong>创建一个PVC,与上述资源进行关联。</strong></p><h4 id="1-基于nfs服务来做的PV和pvc">1. 基于nfs服务来做的PV和pvc</h4><p><strong>下载nfs所需安装包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node02 ~]# yum -y install nfs-utils  rpcbind<br></code></pre></td></tr></table></figure><p><strong>创建共享目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# mkdir /nfsdata<br></code></pre></td></tr></table></figure><p><strong>创建共享目录的权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim /etc/exports<br>/nfsdata *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><p><strong>开启nfs和rpcbind</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# systemctl start nfs-server.service <br>[root@master ~]# systemctl start rpcbind<br></code></pre></td></tr></table></figure><p><strong>测试一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# showmount -e<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205105654925.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205105654925.png" alt="image-20200205105654925"></a></p><h4 id="2-先创建两个PV-web-pV1-1G-web-pv2-2G">2.先创建两个PV, web- pV1(1G) ,web-pv2 (2G)</h4><p><strong>web1</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim web.yaml <br><br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: web-pv<br>spec :<br>  capacity:<br>    storage: 1Gi<br>  accessModes:<br>    - ReadWriteOnce<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs<br>  nfs:<br>    path: /nfsdata/web1<br>    server: 192.168.1.21<br></code></pre></td></tr></table></figure><p><strong>web2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim web2.yaml <br><br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: web-pv2<br>spec :<br>  capacity :<br>    storage: 2Gi<br>  accessModes:<br>    - ReadWriteOnce<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs<br>  nfs:<br>    path: /nfsdata/web2<br>    server: 192.168.1.21<br></code></pre></td></tr></table></figure><h4 id="3-创建所需文件夹">3.创建所需文件夹</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# mkdir /nfsdata/web1<br>[root@master yaml]# mkdir /nfsdata/web2<br></code></pre></td></tr></table></figure><h4 id="4-执行一下web和web2">4.执行一下web和web2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f web.yaml <br>[root@master yaml]# kubectl apply -f web2.yaml<br></code></pre></td></tr></table></figure><h4 id="5-查看一下">5.查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pv<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210094332726.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210094332726.png" alt="image-20200210094332726"></a></p><h4 id="6-创建web的pvc的yaml文件">6.创建web的pvc的yaml文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim web-pvc.yaml <br><br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: web-pvc<br>spec:<br>  accessModes:<br>  - ReadWriteOnce<br>  resources:<br>    requests:<br>      storage: 1Gi<br>  storageClassName: nfs<br></code></pre></td></tr></table></figure><p>执行一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f web-pvc.yaml<br></code></pre></td></tr></table></figure><p>查看一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pvc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210094701343.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210094701343.png" alt="image-20200210094701343"></a></p><p><strong>系统会自动给pvc一个相近内存的pv，所以选择了1G的那个</strong></p><h4 id="7-创建pod的yaml文件">7.创建pod的yaml文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim web-pod.yaml<br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: web-pod<br>spec:<br>  selector:<br>    matchLabels:<br>      app: nginx<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx<br>    spec:<br>      containers:<br>      - image: nginx<br>        name: nginx<br>        volumeMounts:<br>        - name: web-test<br>          mountPath: /usr/share/nginx/html<br>      volumes:<br>      - name: web-test<br>        persistentVolumeClaim:<br>          claimName: web-pvc<br></code></pre></td></tr></table></figure><h5 id="执行一下">执行一下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f web-pod.yaml<br></code></pre></td></tr></table></figure><h5 id="查看一下">查看一下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210125236332.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210125236332.png" alt="image-20200210125236332"></a></p><h4 id="8-访问一下nginx的网页">8. 访问一下nginx的网页</h4><h5 id="查看一下nginx的ip">查看一下nginx的ip</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210134937483.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210134937483.png" alt="image-20200210134937483"></a></p><h5 id="进入容器设置网页内容">进入容器设置网页内容</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">root@master yaml]# kubectl exec -it web-pod-8686d9c594-qxhr9 /bin/bash<br>root@web-pod-8686d9c594-qxhr9:/# cd /usr/share/nginx/html/<br>root@web-pod-8686d9c594-qxhr9:/usr/share/nginx/html# ls<br>root@web-pod-8686d9c594-qxhr9:/usr/share/nginx/html# echo 123456 > index.html<br>root@web-pod-8686d9c594-qxhr9:/usr/share/nginx/html# exit<br></code></pre></td></tr></table></figure><h5 id="访问一下">访问一下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# curl 10.244.2.17<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210135153791.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210135153791.png" alt="image-20200210135153791"></a></p><h1>三，如果两个PV，大小一样，名称一样，访问控制模式不一样，PVC会关联哪一个? (验证PV和PVC 关联的时候，访问模式必须一样)</h1><h3 id="两个PV，大小一样，名称一样，访问控制模式不一样">两个PV，大小一样，名称一样，访问控制模式不一样</h3><h4 id="1-创建两个pv">&lt;1&gt;创建两个pv</h4><h5 id="web1">web1</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim web1.yaml <br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: web-pv<br>spec :<br>  capacity:<br>    storage: 1Gi<br>  accessModes:<br>    - ReadWriteOnce  #能以读-写mount到单个的节点<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs<br>  nfs:<br>    path: /nfsdata/web1<br>    server: 192.168.1.21<br></code></pre></td></tr></table></figure><h5 id="web2">web2</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim web2.yaml <br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: web-pv<br>spec :<br>  capacity:<br>    storage: 1Gi<br>  accessModes:<br>    - ReadWriteMany        #能以读-写mount到多个的节点<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs<br>  nfs:<br>    path: /nfsdata/web1<br>    server: 192.168.1.21<br></code></pre></td></tr></table></figure><h5 id="创建所需文件">创建所需文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# mkdir /nfsdata/web1<br></code></pre></td></tr></table></figure><h5 id="执行一下-2">执行一下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f web1.yaml <br>[root@master yaml]# kubectl apply -f web2.yaml<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210140007119.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210140007119.png" alt="image-20200210140007119"></a></p><h4 id="2-创建pvc">&lt;2&gt;创建pvc</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim web-pvc.yaml <br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: web-pvc<br>spec:<br>  accessModes:<br>  - ReadWriteMany    #能以读-写mount到多个的节点<br>  resources:<br>    requests:<br>      storage: 1Gi<br>  storageClassName: nfs<br></code></pre></td></tr></table></figure><h5 id="执行一下-3">执行一下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f web-pvc.yaml<br></code></pre></td></tr></table></figure><h4 id="3-查看一下">&lt;3&gt;查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pv<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210140227667.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210140227667.png" alt="image-20200210140227667"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pvc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210140258049.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210140258049.png" alt="image-20200210140258049"></a></p><p><strong>现在可以看到pv和pvc关联成功，但是为什么只有一个pv呢？（pv挂载的目录要相同）</strong></p><p><strong>那是因为当创建了两个相同名字的pv时它并不会认为这是两个不同的pv，而会把他们当成是同一个pv，后创建的pv会刷新前面创建的pv。然后，当创建了pvc，并且pvc的访问模式和后面创建pv的访问模式一样，他们就会关联成功，反之不成功。（当然这些条件下还需要考虑，pv的内存）</strong></p><h1>三，小实验</h1><h2 id="（1）以自己的名称创建一个名称空间。以下所有资源都在此名称空间之下。">（1）以自己的名称创建一个名称空间。以下所有资源都在此名称空间之下。</h2><h3 id="1-编写namespace的yam文件">&lt;1&gt;编写namespace的yam文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim namespace.yaml <br>kind: Namespace<br>apiVersion: v1<br>metadata:<br>  name: xgp-znb<br></code></pre></td></tr></table></figure><h3 id="2-执行一下">&lt;2&gt;执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f namespace.yaml<br></code></pre></td></tr></table></figure><h3 id="3-查看一下-2">&lt;3&gt;查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get ns<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210141843553.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210141843553.png" alt="image-20200210141843553"></a></p><h2 id="（2）设置rbac权限。">（2）设置rbac权限。</h2><p><strong>下载所需镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">docker pull registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner<br></code></pre></td></tr></table></figure><h3 id="1-编写rbac的yam文件">&lt;1&gt;编写rbac的yam文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim rbac-rolebind.yaml<br>kind: Namespace<br>apiVersion: v1<br>metadata:<br>  name: xgp-znb<br>---<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: nfs-provisioner<br>  namespace: xgp-znb<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  name: nfs-provisioner-runner<br>  namespace: xgp-znb<br>rules:<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumes"]<br>      verbs: ["get", "list", "watch", "create", "delete"]<br>   -  apiGroups: [""]<br>      resources: ["persistentvolumeclaims"]<br>      verbs: ["get", "list", "watch", "update"]<br>   -  apiGroups: ["storage.k8s.io"]<br>      resources: ["storageclasses"]<br>      verbs: ["get", "list", "watch"]<br>   -  apiGroups: [""]<br>      resources: ["events"]<br>      verbs: ["watch", "create", "update", "patch"]<br>   -  apiGroups: [""]<br>      resources: ["services", "endpoints"]<br>      verbs: ["get","create","list", "watch","update"]<br>   -  apiGroups: ["extensions"]<br>      resources: ["podsecuritypolicies"]<br>      resourceNames: ["nfs-provisioner"]<br>      verbs: ["use"]<br>---<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: run-nfs-provisioner<br>subjects:<br>  - kind: ServiceAccount<br>    name: nfs-provisioner<br>    namespace: xgp-znb<br>roleRef:<br>  kind: ClusterRole<br>  name: nfs-provisioner-runner<br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h3 id="2-执行一下-2">&lt;2&gt;执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f  rbac-rolebind.yaml<br></code></pre></td></tr></table></figure><h2 id="（3）创建nfs-deployment-yaml">（3）创建nfs-deployment.yaml</h2><h3 id="1-编写deployment的yam文件">&lt;1&gt;编写deployment的yam文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim nfs-deployment.yaml<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: nfs-client-provisioner<br>  namespace: xgp-znb<br>spec:<br>  replicas: 1<br>  strategy:<br>    type: Recreate<br>  template:<br>    metadata:<br>      labels:<br>        app: nfs-client-provisioner<br>    spec:<br>      serviceAccount: nfs-provisioner<br>      containers:<br>        - name: nfs-client-provisioner<br>          image: registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner<br>          volumeMounts:<br>            - name: nfs-client-root<br>              mountPath:  /persistentvolumes<br>          env:<br>            - name: PROVISIONER_NAME<br>              value: xgp-znb<br>            - name: NFS_SERVER<br>              value: 192.168.1.21<br>            - name: NFS_PATH<br>              value: /nfsdata<br>      volumes:<br>        - name: nfs-client-root<br>          nfs:<br>            server: 192.168.1.21<br>            path: /nfsdata<br></code></pre></td></tr></table></figure><h3 id="2-执行一下-3">&lt;2&gt;执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-deployment.yaml<br></code></pre></td></tr></table></figure><h2 id="（4）创建storageclass自动创建PV。">（4）创建storageclass自动创建PV。</h2><h3 id="1-编写storageclass的yam文件">&lt;1&gt;编写storageclass的yam文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim storageclass.yaml<br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  name: test-sc<br>provisioner: xgp-znb   #通过provisioner字段关联到上述Deploy<br>reclaimPolicy: Retain<br></code></pre></td></tr></table></figure><h3 id="2-执行一下-4">&lt;2&gt;执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f storageclass.yaml<br></code></pre></td></tr></table></figure><h2 id="（5）创建PVC-2">（5）创建PVC</h2><h3 id="1-编写PVC的yaml文件">&lt;1&gt;编写PVC的yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim pvc.yaml<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: test-claim<br>  namespace: xgp-znb<br>spec:<br>  storageClassName: test-sc<br>  accessModes:<br>    - ReadWriteMany<br>  resources:<br>    requests:<br>      storage: 500Mi<br></code></pre></td></tr></table></figure><h3 id="2-执行一下-5">&lt;2&gt;执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f pvc.yaml<br></code></pre></td></tr></table></figure><h3 id="3-查看一下-3">&lt;3&gt;查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pvc -n xgp-znb<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210144220121.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210144220121.png" alt="image-20200210144220121"></a></p><h2 id="（6）创建一个Pod-基于nginx运行一个web服务，使用Deployment资源对象，replicas-3-持久化存储目录为默认主目录">（6）创建一个Pod, 基于nginx运行一个web服务，使用Deployment资源对象，replicas=3.持久化存储目录为默认主目录</h2><h3 id="1-编写deployment的yam文件-2">&lt;1&gt;编写deployment的yam文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim pod.yaml <br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: web-pod<br>  namespace: xgp-znb<br>spec:<br>  replicas: 3<br>  selector:<br>    matchLabels:<br>      app: nginx<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx<br>    spec:<br>      containers:<br>      - image: nginx<br>        name: nginx<br>        volumeMounts:<br>        - name: web-test<br>          mountPath: /usr/share/nginx/html<br>      volumes:<br>      - name: web-test<br>        persistentVolumeClaim:<br>          claimName: test-claim<br></code></pre></td></tr></table></figure><h3 id="2-执行一下-6">&lt;2&gt;执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f pvc.yaml<br></code></pre></td></tr></table></figure><h3 id="3-查看一下-4">&lt;3&gt;查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod -n xgp-znb<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210211126708.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210211126708.png" alt="image-20200210211126708"></a></p><h2 id="（7）访问nginx页面">（7）访问nginx页面</h2><h3 id="修改nginx主页">修改nginx主页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl exec -it web-pod-8cd956cc7-6szjb -n xgp-znb /bin/bash<br>//进入容器之中<br>root@web-pod-8cd956cc7-6szjb:/# echo  xgp-znb > /usr/share/nginx/html/index.html<br>//添加自定义内容主机<br></code></pre></td></tr></table></figure><h3 id="访问一下-2">访问一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# curl 10.244.2.18<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210211901467.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200210211901467.png" alt="image-20200210211901467"></a></p><h1>四，五个可移植性建议</h1><ol><li><strong>把你的 pvc，和 其它一系列配置放一起， 比如说deployment，configmap</strong></li><li><strong>不要把你的pv放在其它配置里， 因为用户可能没有权限创建pv</strong></li><li><strong>初始化pvc 模版的时候， 提供一个storageclass</strong></li><li><strong>在你的工具软件中，watch那些没有bound的pvc，并呈现给用户</strong></li><li><strong>集群启动的时候启用DefaultStorageClass， 但是不要指定某一类特定的class， 因为不同provisioner的class，参数很难一致</strong></li></ol><h1>五，四个阶段(volumn phase)</h1><h4 id="1-在PVC中绑定一个PV，可以根据下面几种条件组合选择"><strong>1. 在PVC中绑定一个PV，可以根据下面几种条件组合选择</strong></h4><ul><li><strong>Access Modes， 按照访问模式选择pv</strong></li><li><strong>Resources， 按照资源属性选择， 比如说请求存储大小为8个G的pv</strong></li><li><strong>Selector， 按照pv的label选择</strong></li><li><strong>Class， 根据StorageClass的class名称选择, 通过annotation指定了Storage Class的名字, 来绑定特定类型的后端存储</strong></li></ul><h4 id="2-关于根据class过滤出pv的说明：">2. 关于根据class过滤出pv的说明：</h4><blockquote><p><strong>所有的 PVC 都可以在不使用 StorageClass 注解的情况下，直接使用某个动态存储。把一个StorageClass 对象标记为 “default” 就可以了。StorageClass 用注解<a href="https://link.zhihu.com/?target=http%3A//storageclass.beta.kubernetes.io/is-default-class">http://storageclass.beta.kubernetes.io/is-default-class</a> 就可以成为缺省存储。有了缺省的 StorageClass，用户创建 PVC 就不用 storage-class 的注解了，1.4 中新加入的DefaultStorageClass 准入控制器会自动把这个标注指向缺省存储类。PVC 指定特定storageClassName，如fast时， 绑定名称为fast的storageClassPVC中指定storageClassName为“”时， 绑定no class的pv（pv中无class annotation， 或者其值为“”）PVC不指定storageClassName时， DefaultStorageClass admission plugin 开启与否（在apiserver启动时可以指定）， 对default class的解析行为是不同的。当DefaultStorageClass admission plugin启用时， 针对没有storageClass annotation的pvc，DefaultStorageClass会分配一个默认的class， 这个默认的class需要用户指定，比如在创建storageclass对象时加入annotation,如 <a href="https://link.zhihu.com/?target=http%3A//storageclass.beta.kubernetes.io/is-default-class%3A">http://storageclass.beta.kubernetes.io/is-default-class:</a> “true” 。如果有多个默认的class， 则pvc会被拒绝创建， 如果用户没有指定默认的class， 则这个DefaultStorageClass admission plugin不会起任何作用。 pvc会找那些no class的pv做绑定。当DefaultStorageClass admission plugin没有启用时， 针对没有storageClass annotation的pvc， 会绑定no class的pv（pv中无class annotation， 或者其值为“”）</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;k8s有很多的服务，很多的资源对象。&quot;&gt;k8s有很多的服务，很多的资源对象。&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;如果要去创建服务，做数据持久化，需要预先知道可用&lt;code&gt;PV&lt;/code&gt;有哪些?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果为了这个服务去
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="Storage Class" scheme="https://wsdlxgp.top/tags/Storage-Class/"/>
    
  </entry>
  
  <entry>
    <title>34 k8s存储方式的介绍及应用 （持久化，mysql对数据持久化的应用）</title>
    <link href="https://wsdlxgp.top/posts/ba49.html"/>
    <id>https://wsdlxgp.top/posts/ba49.html</id>
    <published>2019-09-02T16:00:00.000Z</published>
    <updated>2020-06-18T12:33:56.880Z</updated>
    
    <content type="html"><![CDATA[<h1>k8s存储: (持久化)</h1><p><strong>docker容器是有生命周期的。</strong></p><p><strong>volume</strong></p><p><strong>1，存储类（Storage class）是k8s资源类型的一种，它是有管理员为管理PV更加方便创建的一个逻辑组，可以按照存储系统的性能高低，或者综合服务质量，备份策略等分类。不过k8s本身不知道类别到底是什么，它这是作为一个描述。</strong></p><p><strong>2，存储类的好处之一就是支持PV的动态创建，当用户用到持久性存储时，不必再去提前创建PV，而是直接创建PVC就可以了，非常的方便。</strong></p><p><strong>3，存储类对象的名称很重要，并且出了名称之外，还有3个关键字段<br>Provisioner（供给方）:<br>及提供了存储资源的存储系统。k8s内建有多重供给方，这些供给方的名字都以“<a href="http://kubernetes.io" target="_blank" rel="noopener">kubernetes.io</a>”为前缀。并且还可以自定义。<br>Parameters(参数)：存储类使用参数描述要关联到的存储卷，注意不同的供给方参数也不同。<br>reclaimPolicy:PV的回收策略，可用值有Delete(默认)和Retain</strong></p><h1>简介</h1><p><strong>1, 由于容器本身是非持久化的，因此需要解决在容器中运行应用程序遇到的一些问题。首先，当容器崩溃时，kubelet将重新启动容器，但是写入容器的文件将会丢失，容器将会以镜像的初始状态重新开始；第二，在通过一个Pod中一起运行的容器，通常需要共享容器之间一些文件。Kubernetes通过存储卷解决上述的两个问题。</strong></p><p><strong>2, 在Docker有存储卷的概念卷，但Docker中存储卷只是磁盘的或另一个容器中的目录，并没有对其生命周期进行管理。Kubernetes的存储卷有自己的生命周期，它的生命周期与使用的它Pod生命周期一致。因此，相比于在Pod中运行的容器来说，存储卷的存在时间会比的其中的任何容器都长，并且在容器重新启动时会保留数据。当然，当Pod停止存在时，存储卷也将不再存在。在Kubernetes支持多种类型的卷，而Pod可以同时使用各种类型和任意数量的存储卷。在Pod中通过指定下面的字段来使用存储卷：</strong><br><strong>spec.volumes：通过此字段提供指定的存储卷<br>spec.containers.volumeMounts：通过此字段将存储卷挂接到容器中</strong></p><h2 id="环境介绍">环境介绍</h2><table><thead><tr><th>主机</th><th>IP地址</th><th>服务</th></tr></thead><tbody><tr><td>master</td><td>192.168.1.21</td><td>k8s</td></tr><tr><td>node01</td><td>192.168.1.22</td><td>k8s</td></tr><tr><td>node02</td><td>192.168.1.23</td><td>k8s</td></tr></tbody></table><h2 id="1-emptyDir（空目录）-类似docker-数据持久化的-docer-manager-volume">1.emptyDir（空目录）:类似docker 数据持久化的:docer manager volume</h2><p><strong>使用场景:在同一 个Pod里，不同的容器，共享数据卷。</strong></p><p><strong>如果容器被删除，数据仍然存在，如果Pod被 删除，数据也会被删除。</strong></p><h3 id="1-介绍">&lt;1&gt; 介绍</h3><p><strong>一个emptyDir 第一次创建是在一个pod被指定到具体node的时候，并且会一直存在在pod的生命周期当中，正如它的名字一样，它初始化是一个空的目录，pod中的容器都可以读写这个目录，这个目录可以被挂在到各个容器相同或者不相同的的路径下。当一个pod因为任何原因被移除的时候，这些数据会被永久删除。注意：一个容器崩溃了不会导致数据的丢失，因为容器的崩溃并不移除pod.</strong></p><h3 id="emptyDir的使用场景如下：">emptyDir的使用场景如下：</h3><blockquote><ul><li>空白的初始空间，例如合并/排序算法中，临时将数据保存在磁盘上。</li><li>长时间计算中存储检查点（中间结果），以便容器崩溃时，可以从上一次存储的检查点（中间结果）继续进行，而不是从头开始。</li><li>作为两个容器的共享存储，使得第一个内容管理的容器可以将生成的数据存入其中，同时由一个webserver容器对外提供这些页面。</li><li>默认情况下，emptyDir数据卷存储在node节点的存储介质（机械硬盘、SSD或网络存储）上。</li></ul></blockquote><h3 id="2-emptyDir-磁盘的作用：">&lt;2&gt;emptyDir 磁盘的作用：</h3><p><strong>（1）普通空间，基于磁盘的数据存储<br>（2）作为从崩溃中恢复的备份点<br>（3）存储那些那些需要长久保存的数据，例web服务中的数据<br>默认的，emptyDir 磁盘会存储在主机所使用的媒介上，可能是SSD，或者网络硬盘，这主要取决于你的环境。当然，我们也可以将emptyDir.medium的值设置为Memory来告诉Kubernetes 来挂在一个基于内存的目录tmpfs，因为<br>tmpfs速度会比硬盘块度了，但是，当主机重启的时候所有的数据都会丢失。</strong></p><blockquote><p><strong>测试编写一个yaml文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim emptyDir.yaml<br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: producer-consumer<br>spec:<br>  containers:<br>  - image: busybox<br>    name: producer<br>    volumeMounts:<br>    - mountPath: /producer_dir<br>      name: shared-volume<br>    args:<br>    - /bin/sh<br>    - -c<br>    - echo "hello k8s" > /producer_dir/hello; sleep 30000<br>  - image: busybox<br>    name: consumer<br>    volumeMounts:<br>    - mountPath: /consumer_dir<br>      name: shared-volume<br>    args:<br>    - /bin/sh<br>    - -c<br>    - cat /consumer_dir/hello; sleep 30000<br>  volumes:<br>  - name: shared-volume<br>    emptyDir: &#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>执行一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f emptyDir.yaml <br></code></pre></td></tr></table></figure><p><strong>查看一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod  <br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205095431565.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205095431565.png" alt="image-20200205095431565"></a></p><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl logs  producer-consumer producer<br>[root@master yaml]# kubectl logs  producer-consumer consumer<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205095543780.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205095543780.png" alt="image-20200205095543780"></a></p><p><strong>查看挂载的目录</strong></p><p><strong>node节点查看容器名，并通过容器名查看挂载的目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node01 shared-volume]# docker ps <br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205102007328.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205102007328.png" alt="image-20200205102007328"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node01 shared-volume]# docker inspect k8s_consumer_producer-consumer_default_9ec83f9e-e58b-4bf8-8e16-85b0f83febf9_0<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205102048470.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205102048470.png" alt="image-20200205102048470"></a></p><p><strong>进入挂载目录查看一下</strong></p><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205102128953.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205102128953.png" alt="image-20200205102128953"></a></p></blockquote><h2 id="2-hostPath-Volume-类似docker-数据持久化的-bind-mount">2.hostPath Volume:类似docker 数据持久化的:bind mount</h2><p><strong>如果Pod被删除，数据会保留，相比较emptyDir要好一点。不过一旦host崩溃，hostPath也无法访问 了。</strong></p><p><strong>docker或者k8s集群本身的存储会采用hostPath这种方式。</strong></p><h3 id="1-介绍-2">&lt;1&gt; 介绍</h3><p><strong>hostPath宿主机路径，就是把pod所在的宿主机之上的脱离pod中的容器名称空间的之外的宿主机的文件系统的某一目录和pod建立关联关系，在pod删除时，存储数据不会丢失。</strong></p><h3 id="2-作用">&lt;2&gt; 作用</h3><p><strong>如果Pod被删除，数据会保留，相比较emptyDir要好一点。不过一旦host崩溃，hostPath也无法访问 了。</strong></p><p><strong>docker或者k8s集群本身的存储会采用hostPath这种方式。</strong></p><h4 id="适用场景如下：">适用场景如下：</h4><blockquote><p>某容器需要访问 Docker，可使用 hostPath 挂载宿主节点的 /var/lib/docker<br>在容器中运行 cAdvisor，使用 hostPath 挂载宿主节点的 /sys</p></blockquote><h2 id="3-Persistent-Volume-PV-持久卷-提前做好的，数据持久化的数据存放目录。">3.Persistent Volume| PV(持久卷) 提前做好的，数据持久化的数据存放目录。</h2><h3 id="Psesistent-Volume-Claim-PVC-持久卷使用声明-申请"><strong>Psesistent Volume Claim| PVC( 持久卷使用声明|申请)</strong></h3><h2 id="Psesistent-Volume-Claim-PVC-持久卷使用声明-申请-2"><strong>Psesistent Volume Claim| PVC( 持久卷使用声明|申请)</strong></h2><p><strong>PersistentVolume（PV）是集群中已由管理员配置的一段网络存储。 集群中的资源就像一个节点是一个集群资源。 PV是诸如卷之类的卷插件，但是具有独立于使用PV的任何单个pod的生命周期。 该API对象捕获存储的实现细节，即NFS，iSCSI或云提供商特定的存储系统。</strong></p><h2 id="PVC和PV的概念">PVC和PV的概念</h2><p><strong>我们前面提到kubernetes提供那么多存储接口，但是首先kubernetes的各个Node节点能管理这些存储，但是各种存储参数也需要专业的存储工程师才能了解，由此我们的kubernetes管理变的更加复杂的。由此kubernetes提出了PV和PVC的概念，这样开发人员和使用者就不需要关注后端存储是什么，使用什么参数等问题。如下图：</strong><br><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607210917.png" alt="k8s存储方式的介绍及应用 （持久化，mysql对数据持久化的应用）"></p><blockquote><p><strong>PersistentVolume（PV）是集群中已由管理员配置的一段网络存储。 集群中的资源就像一个节点是一个集群资源。 PV是诸如卷之类的卷插件，但是具有独立于使用PV的任何单个pod的生命周期。 该API对象捕获存储的实现细节，即NFS，iSCSI或云提供商特定的存储系统。</strong><br><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/20200607210935.png" alt="k8s存储方式的介绍及应用 （持久化，mysql对数据持久化的应用）"></p><blockquote><p><strong>PersistentVolumeClaim（PVC）是用户存储的请求。PVC的使用逻辑：在pod中定义一个存储卷（该存储卷类型为PVC），定义的时候直接指定大小，pvc必须与对应的pv建立关系，pvc会根据定义去pv申请，而pv是由存储空间创建出来的。pv和pvc是kubernetes抽象出来的一种存储资源。</strong></p><p><strong>虽然PersistentVolumeClaims允许用户使用抽象存储资源，但是常见的需求是，用户需要根据不同的需求去创建PV，用于不同的场景。而此时需要集群管理员提供不同需求的PV，而不仅仅是PV的大小和访问模式，但又不需要用户了解这些卷的实现细节。 对于这样的需求，此时可以采用StorageClass资源。这个在前面就已经提到过此方案。</strong></p><p><strong>PV是集群中的资源。 PVC是对这些资源的请求，也是对资源的索赔检查。 PV和PVC之间的相互作用遵循这个生命周期：</strong></p></blockquote></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">Provisioning（配置）---> Binding（绑定）--->Using（使用）---> Releasing（释放） ---> Recycling（回收）<br></code></pre></td></tr></table></figure><h3 id="（1）基于nfs服务来做的PV和pvc"><strong>（1）基于nfs服务来做的PV和pvc</strong></h3><p><strong>nfs使的我们可以挂在已经存在的共享到的我们的Pod中，和emptyDir不同的是，emptyDir会被删除当我们的Pod被删除的时候，但是nfs不会被删除，仅仅是解除挂在状态而已，这就意味着NFS能够允许我们提前对数据进行处理，而且这些数据可以在Pod之间相互传递.并且，nfs可以同时被多个pod挂在并进行读写</strong><br><em>注意：必须先保证NFS服务器正常运行在我们进行挂在nfs的时候</em></p><p><strong>下载nfs所需安装包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@node02 ~]# yum -y install nfs-utils  rpcbind<br></code></pre></td></tr></table></figure><p><strong>创建共享目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# mkdir /nfsdata<br></code></pre></td></tr></table></figure><p><strong>创建共享目录的权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim /etc/exports<br>/nfsdata *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><p><strong>开启nfs和rpcbind</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# systemctl start nfs-server.service <br>[root@master ~]# systemctl start rpcbind<br></code></pre></td></tr></table></figure><p><strong>测试一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# showmount -e<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205105654925.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205105654925.png" alt="image-20200205105654925"></a></p><h4 id="1-创建nfs-pv的yaml文件"><strong>&lt;1&gt;创建nfs-pv的yaml文件</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# cd yaml/<br>[root@master yaml]# vim nfs-pv.yaml<br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: test-pv<br>spec:<br>  capacity:   #pv容量的大小<br>    storage: 1Gi<br>  accessModes:  #访问pv的模式<br>    - ReadWriteOnce #能以读-写mount到单个的节点<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs<br>  nfs:<br>    path: /nfsdata/pv1<br>    server: 192.168.1.21<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell"> accessModes:(PV支持的访问模式)<br>   - ReadWriteOnce: 能以读-写mount到单个的节点<br>   - ReadWriteMany: 能以读-写mount到多个的节点。<br>- ReadOnlyMnce:  能以只读的方式mount到多个节点。<br></code></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">persistentVolumeReclaimPolicy : (PV存储空间的回收策略是什么)<br>trueRecycle: 自动清除数据。<br>trueRetain: 需要管理员手动回收。<br>trueDelete: 云存储专用。<br></code></pre></td></tr></table></figure></blockquote><h4 id="2-执行一下"><strong>&lt;2&gt;执行一下</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-pv.yaml<br></code></pre></td></tr></table></figure><h4 id="3-查看一下">&lt;3&gt;查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pv<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205111307317.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205111307317.png" alt="image-20200205111307317"></a></p><h4 id="1-创建nfs-pvc的yaml文件"><strong>&lt;1&gt;创建nfs-pvc的yaml文件</strong></h4><p><strong>PersistentVolumeClaim（PVC）是用户存储的请求。PVC的使用逻辑：在pod中定义一个存储卷（该存储卷类型为PVC），定义的时候直接指定大小，pvc必须与对应的pv建立关系，pvc会根据定义去pv申请，而pv是由存储空间创建出来的。pv和pvc是kubernetes抽象出来的一种存储资源。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim nfs-pvc.yaml<br><br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: test-pvc<br>spec:<br>  accessModes:<br>    - ReadWriteOnce<br>  resources:<br>    requests:<br>      storage: 1Gi<br>  storageClassName: nfs<br></code></pre></td></tr></table></figure><h4 id="2-执行一下-2"><strong>&lt;2&gt;执行一下</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-pvc.yaml<br></code></pre></td></tr></table></figure><h4 id="3-查看一下-2">&lt;3&gt;查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pvc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205113407860.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205113407860.png" alt="image-20200205113407860"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pv<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205113512580.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200205113512580.png" alt="image-20200205113512580"></a></p><h3 id="（2）创建一个pod资源">（2）创建一个pod资源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim pod.yaml<br>kind: Pod<br>apiVersion: v1<br>metadata:<br>  name: test-pod<br>spec:<br>  containers:<br>    - name: pod1<br>      image: busybox<br>      args:<br>      - /bin/sh<br>      - -c<br>      - sleep 30000<br>      volumeMounts:<br>      - mountPath: "/mydata"<br>        name: mydata<br>  volumes:<br>    - name: mydata<br>      persistentVolumeClaim:<br>        claimName: test-pvc<br></code></pre></td></tr></table></figure><h4 id="1-执行一下">&lt;1&gt; 执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f pod.yaml<br></code></pre></td></tr></table></figure><h4 id="2-查看一下">&lt;2&gt;查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207100212328.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207100212328.png" alt="image-20200207100212328"></a></p><p><strong>可以看到现在没有开启成功</strong></p><h5 id="查看一下test-pod的信息看看是哪里的问题">查看一下test-pod的信息看看是哪里的问题</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl describe pod test-pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207123950227.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207123950227.png" alt="image-20200207123950227"></a></p><h5 id="那是因为pv的本地挂载目录没有创建好">那是因为pv的本地挂载目录没有创建好</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# mkdir /nfsdata/pv1/<br>//要和nfs-pv.yaml的名字一样<br></code></pre></td></tr></table></figure><h5 id="重新创建一下pod">重新创建一下pod</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl delete -f pod.yaml <br>[root@master yaml]# kubectl apply -f pod.yaml <br>[root@master yaml]# kubectl get pod -o wide<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207102822785.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207102822785.png" alt="image-20200207102822785"></a></p><h3 id="（3）test-pod创建hello创建文件并添加内容">（3）test-pod创建hello创建文件并添加内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl exec test-pod touch /mydata/hello<br></code></pre></td></tr></table></figure><p><strong>进入容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl exec -it test-pod  /bin/sh<br>/ # echo 123 > /mydata/hello<br>/ # exit<br></code></pre></td></tr></table></figure><p><strong>挂载目录查看一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# cat  /nfsdata/pv1/hello<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207104239153.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207104239153.png" alt="image-20200207104239153"></a></p><p><strong>和刚刚的一样</strong></p><h3 id="（4）测试回收策略">（4）测试回收策略</h3><h4 id="删除pod和pvc，pv">删除pod和pvc，pv</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl delete pod test-pod <br>[root@master yaml]# kubectl delete pvc test-pvc <br>[root@master yaml]# kubectl delete pv test-pv<br></code></pre></td></tr></table></figure><h4 id="查看一下">查看一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pv<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207104454636.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207104454636.png" alt="image-20200207104454636"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# cat  /nfsdata/pv1/hello<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207104520048.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207104520048.png" alt="image-20200207104520048"></a></p><p><em><strong>文件已被回收</strong></em></p><h3 id="（5）修改pv的回收策略为手动">（5）修改pv的回收策略为手动</h3><h4 id="修改">修改</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim nfs-pv.yaml <br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: test-pv<br>spec :<br>  capacity :<br>    storage: 1Gi<br>  accessModes:<br>    - ReadWriteOnce<br>  persistentVolumeReclaimPolicy: Retain   #修改<br>  storageClassName: nfs<br>  nfs:<br>    path: /nfsdata/pv1<br>    server: 192.168.1.21<br></code></pre></td></tr></table></figure><h4 id="执行一下">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-pv.yaml<br></code></pre></td></tr></table></figure><h4 id="创建pod">创建pod</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f pod.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-2">查看一下</h4><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105203009.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105203009.png" alt="image-20200207105203009"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl describe pod test-pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105248025.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105248025.png" alt="image-20200207105248025"></a></p><h4 id="创建pvc">创建pvc</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f nfs-pvc.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下pod">查看一下pod</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105402354.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105402354.png" alt="image-20200207105402354"></a></p><h3 id="（6）test-pod创建hello创建文件并添加内容">（6）test-pod创建hello创建文件并添加内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl exec test-pod touch /mydata/k8s<br></code></pre></td></tr></table></figure><h4 id="查看一下挂载目录">查看一下挂载目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# ls /nfsdata/pv1/<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105618318.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105618318.png" alt="image-20200207105618318"></a></p><h4 id="删除pod和pvc，pv，再次查看挂载目录">删除pod和pvc，pv，再次查看挂载目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl delete pod test-pod <br>[root@master yaml]# kubectl delete pvc test-pvc<br>[root@master yaml]# kubectl delete pv test-pv<br></code></pre></td></tr></table></figure><h4 id="查看挂载目录">查看挂载目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# ls /nfsdata/pv1/<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105757641.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207105757641.png" alt="image-20200207105757641"></a></p><p><em><strong>内容还在</strong></em></p><h2 id="4-mysql对数据持久化的应用">4.mysql对数据持久化的应用</h2><p><strong>下面演示如何为 MySQL 数据库提供持久化存储，步骤为：</strong></p><ul><li><strong>创建 PV 和 PVC。</strong></li><li><strong>部署 MySQL。</strong></li><li><strong>向 MySQL 添加数据。</strong></li><li><strong>模拟节点宕机故障，Kubernetes 将 MySQL 自动迁移到其他节点。</strong></li><li><strong>验证数据一致性。</strong></li></ul><p><strong>最小化安装系统需要</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">yum -y install mariadb<br></code></pre></td></tr></table></figure><h2 id="（1）通过之前的yaml文件，创建pv和pvc">（1）通过之前的yaml文件，创建pv和pvc</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f  nfs-pv.yaml <br>[root@master yaml]# kubectl apply -f  nfs-pvc.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-3">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pv<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207110132199.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207110132199.png" alt="image-20200207110132199"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pvc<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207110140002.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207110140002.png" alt="image-20200207110140002"></a></p><h2 id="（2）编写一个mysql的yaml文件">（2）编写一个mysql的yaml文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# vim mysql.yaml<br><br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: test-mysql<br>spec:<br>  selector:<br>    matchLabels:    #支持等值的标签<br>      app: mysql<br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: test-mysql<br>spec:<br>  selector:<br>    matchLabels:<br>      app: mysql<br>  template:<br>    metadata:<br>      labels:<br>        app: mysql<br>    spec:<br>      containers:<br>      - image: mysql:5.6<br>        name: mysql<br>        env:<br>        - name: MYSQL_ROOT_PASSWORD<br>          value: 123.com<br>        volumeMounts:<br>        - name: mysql-storage<br>          mountPath: /var/lib/mysql<br>      volumes:<br>      - name: mysql-storage<br>        persistentVolumeClaim:<br>          claimName: test-pvc<br></code></pre></td></tr></table></figure><h3 id="执行一下-2">执行一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl apply -f mysql.yaml<br></code></pre></td></tr></table></figure><h3 id="查看一下-4">查看一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207110741833.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207110741833.png" alt="image-20200207110741833"></a></p><h2 id="（3）进入mysql容器">（3）进入mysql容器</h2><p><strong>① 切换到数据库 mysql。<br>② 创建数据库表 my_id。<br>③ 插入一条数据。<br>④ 确认数据已经写入。<br>关闭 k8s-node2，模拟节点宕机故障。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl exec -it test-mysql-569f8df4db-rkpwm  -- mysql -u root -p123.com<br></code></pre></td></tr></table></figure><h3 id="创建数据库">创建数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> create database yun33;</span><br></code></pre></td></tr></table></figure><h3 id="切换数据库">切换数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> use yun33;</span><br></code></pre></td></tr></table></figure><h3 id="创建表">创建表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> create table my_id( id int(4))；</span><br></code></pre></td></tr></table></figure><h3 id="在表中插入数据">在表中插入数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> insert my_id values(9527);</span><br></code></pre></td></tr></table></figure><h3 id="查看表">查看表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> select * from my_id;</span><br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207113808540.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207113808540.png" alt="image-20200207113808540"></a></p><h2 id="（4）查看本地的挂载目录">（4）查看本地的挂载目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# ls /nfsdata/pv1/<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207113909796.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207113909796.png" alt="image-20200207113909796"></a></p><h3 id="查看一下pod-2">查看一下pod</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]# kubectl get pod -o wide -w<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207114050117.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207114050117.png" alt="image-20200207114050117"></a></p><h3 id="挂起node01">挂起node01</h3><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207114607518.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207114607518.png" alt="image-20200207114607518"></a></p><h2 id="（5）查看node02上面数据是否和刚才一样（验证数据的一致性）">（5）查看node02上面数据是否和刚才一样（验证数据的一致性）</h2><h3 id="进入数据库">进入数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master yaml]#  kubectl exec -it test-mysql-569f8df4db-nsdnz  -- mysql -u root -p123.com<br></code></pre></td></tr></table></figure><h3 id="查看数据库">查看数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> show databases;</span><br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207115253123.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207115253123.png" alt="image-20200207115253123"></a></p><h3 id="查看表-2">查看表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">mysql> show tables;<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207115352727.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207115352727.png" alt="image-20200207115352727"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">mysql> select * from my_id;<br></code></pre></td></tr></table></figure><p><a href="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207113808540.png" target="_blank" rel="noopener"><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200207113808540.png" alt="image-20200207113808540"></a></p><p><em><strong>可以看到数据还在</strong></em></p><h2 id="5-排错方法">5. 排错方法</h2><blockquote><p><strong>kubectl describe</strong><br><strong>//查看详细信息，找出问题</strong><br><strong>kubectl logs</strong><br><strong>//查看日志，找出问题</strong><br><strong>/var/ log/messages</strong><br><strong>//查看该节点的kubelet的日志。</strong></p></blockquote><h2 id="5-总结">5. 总结</h2><p><strong>本章我们讨论了 Kubernetes 如何管理存储资源。<br>emptyDir 和 hostPath 类型的 Volume 很方便，但可持久性不强，Kubernetes 支持多种外部存储系统的 Volume。<br>PV 和 PVC 分离了管理员和普通用户的职责，更适合生产环境。我们还学习了如何通过 StorageClass 实现更高效的动态供给。<br>最后，我们演示了如何在 MySQL 中使用 PersistentVolume 实现数据持久性。</strong></p><h4 id="PV的访问控制类型"><strong>PV的访问控制类型</strong></h4><p><strong>accessModes:(PV支持的访问模式)</strong></p><ul><li><strong>ReadWriteOnce: 能以读-写mount到单个的节点</strong></li><li><strong>ReadWriteMany: 能以读-写mount到多个的节点。</strong></li><li><strong>ReadOnlyOnce: 能以只读的方式mount到单个节点。</strong></li></ul><h4 id="PV的空间回收策略"><strong>PV的空间回收策略</strong></h4><p><strong>persistentVolumeReclaimPolicy : (PV存储空间的回收策略是什么)</strong></p><p><strong>Recycle: 自动清除数据。</strong></p><p><strong>Retain: 需要管理员手动回收。</strong></p><p><strong>Delete: 云存储专用。</strong></p><h4 id="PV和PVC相互关联"><strong>PV和PVC相互关联</strong></h4><p><strong>是通过accessModes和storageClassName模块关联的</strong></p><h4 id="Pod不断的重启">Pod不断的重启:</h4><p><strong>1、swap,没有关闭，导致集群运行不正常。</strong><br><strong>2、内存不足，运行服务也会重后。</strong></p><p><strong>kubectl describe</strong><br><strong>kubectl logs</strong><br><strong>/var/ log/messages</strong><br><strong>查看该节点的kubelet的日志。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;k8s存储: (持久化)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;docker容器是有生命周期的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;volume&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，存储类（Storage class）是k8s资源类型的一种，它是有
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="pv" scheme="https://wsdlxgp.top/tags/pv/"/>
    
      <category term="pvc" scheme="https://wsdlxgp.top/tags/pvc/"/>
    
      <category term="emptyDir" scheme="https://wsdlxgp.top/tags/emptyDir/"/>
    
  </entry>
  
  <entry>
    <title>33 k8s复习</title>
    <link href="https://wsdlxgp.top/posts/fehv.html"/>
    <id>https://wsdlxgp.top/posts/fehv.html</id>
    <published>2019-09-01T16:00:00.000Z</published>
    <updated>2020-06-18T12:33:49.241Z</updated>
    
    <content type="html"><![CDATA[<h1>虚拟化</h1><p><strong>云计算的分类</strong>:</p><blockquote><p><strong>基础及服务: laas</strong><br><strong>平台及服务: paas</strong><br><strong>软件及服务: saas</strong></p></blockquote><p>**docker虚拟化的底层原理: ** Namespace + Cgroup</p><p>**Namespace六项隔离: **</p><blockquote><p><strong>IPC:  共享内存,消息列队</strong><br><strong>MNT:  挂载点 文件系统</strong><br><strong>NET:  网络栈</strong><br><strong>PID:  进程编号</strong><br><strong>USER:  用户 组</strong><br><strong>UTS:  主机名 域名</strong><br><strong>namespace 六项隔离 实现了容器与宿主机 容器与容器之间的隔离</strong></p></blockquote><p>**Cgroup 四项作用: **</p><blockquote><p>**1） 资源的限制: **cgroup可以对进程组使用的资源总额进行限制<br>**2） 优先级分配: **通过分配的cpu时间片数量以及硬盘IO带宽的大小，实际上相当于控制了进程运行的优先级别<br>**3） 资源统计: ** group可以统计系统资源使用量，比如gpu使用时间，内存使用量等，用于按量计费。同时还支持挂起动能，也就是说通过cgroup把所有 资源限制起来,对资源都不能使用，注意着并不是说我们的程序不能使用了,知识不能使用资源，处于等待状态。<br>**4） 进程控制: **可以对进程组执行挂起、恢复等操作。</p></blockquote><p><strong>镜像是容器运行的核心，容器是镜像运行的后的实例。</strong></p><p><strong>DockerHub| registry ----&gt; pull</strong><br><strong>image :  save &gt; | load &lt;</strong><br><strong>run ----&gt; Container ----&gt; commit</strong>*<br><strong>Dockerfile</strong></p><p><strong>Docker 三剑客。</strong></p><blockquote><p><strong>docker machine: 自动化部署多台dockerHost 。</strong></p><p><strong>Docker-compose:  它可以同时控制多个容器。</strong></p><p><strong>yaml。</strong></p><p>**Docker Swarm: **</p><p><strong>从单个的服务向集群的形势发展。</strong></p><p><strong>高可用、高性能、高并发 : 为了防止单点故障。</strong></p><p><strong>Service: 服务 ----&gt; 包括运行什么服务，需要多个 rep1icas（副本）, 外网如何访问。</strong></p></blockquote><h3 id="k8s"><strong>k8s</strong></h3><p>关闭防火墙、禁用selinux、修改主机名并加入域名解析、关闭swap 、时间同步、免密登录、打开iptables桥接</p><blockquote><p><strong>对硬件的基本要求:  CPU: 2核 MEM: 2G</strong></p><p><strong>主机名: master node01 node02</strong></p><p><strong>时间必须同步</strong></p></blockquote><p><strong>kubctl: k8s客户端 kubeadm: 工具 kubelet: 客户端代理</strong></p><p>**组件: **</p><p><strong>三层网络:  DockerHost &gt; Pod &gt; Service</strong></p><p>**Deployment:  Service: **</p><h3 id="master组件">**master组件:  **</h3><p><strong>kube- api( application interface) k8s的前端接口</strong></p><p>**Scheduler[集群分发调度器]**负责决定将Pod放在哪个Node上运行。在调度时，会充分考虑集群的拓扑结构，当前各个节点的负载情况，以及应对高可用、性能、数据亲和性和需求。</p><p><strong>Controller Manager[内部管理控制中心]</strong>: 负责管理集群的各种资源，保证资源处于预期的状态。它由多种Controller组成，包括Replication Controller、Endpoints Controller、Namespace Controller、Serviceaccounts Controller等。</p><p>**Etcd: **负责保存k8s集群的配置信息和各种资源的状态信息。当数据发生变化时，etcd会快速的通知k8s相关组件。[（第三方组件）它有可替换方案。Consul、zookeeper](https: <a href="//wsdlxgp.top/posts/1b18.html">//wsdlxgp.top/posts/1b18.html</a>)</p><p>**Flanner: **是k8s集群网络，可以保证Pod的跨主机通信。也有替换方案。</p><h3 id="Node组件">Node组件:</h3><p><strong>Kubelet[节点上的Pod管家]</strong>: 它是Node的agent(代理)，当Scheduler确定某 个Node上运行Pod之后，会将Pod的具体配置信息发送给该节点的kubelet,kubelet会根据这些信息创建和运行容器，并向Master报告运行状态。</p><p>**kube-proxy[负载均衡、路由转发]: **负责将访问service的TCP/UDP数据流转发到后端的容器。如果有多个副本，kube-proxy会实现负载均衡。</p><h3 id="yaml文件的一级字段">yaml文件的一级字段:</h3><p>**VERSION: **<br>​ **KIND: **<br>​ **METADATA: **<br>​ **SPEC : **</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@master ~]# vim web.yaml<br>kind:  Deployment  #资源对象是控制器<br>apiVersion:  extensions/v1beta1   #api的版本<br>metadata:       #描述kind（资源类型）<br>  name:  web   #定义控制器名称<br>  namespace:   #名称空间<br>spec: <br>  replicas:  2   #副本数量<br>  template:      #模板<br>    metadata:     <br>      labels:    #标签<br>        app:  web_server<br>    spec: <br>      containers:    #指定容器<br>      - name:  nginx  #容器名称<br>        image:  nginx   #使用的镜像<br></code></pre></td></tr></table></figure><p>**Deployment（控制器): **</p><p>**ReplicationController: **用来确保由其管控的Pod对象副本数量，能够满足用户期望，多则删除，少则通过模本创建</p><p>**RS（RpelicaSet）: **RS也是用于保证与label selector匹配的pod数量维持在期望状态</p><p>**Service: **</p><p><strong>type: 默认Cluster IP</strong></p><p><strong>NodePort:  30000-32767</strong></p><p><strong>Deployment和Service关联: 标签和标签选择器</strong></p><p>**Namespace: **</p><p><strong>Pod: 最小单位</strong></p><p>**镜像的下载策略: **</p><blockquote><p>**Always: **镜像标签为“laster”或镜像不存在时，总是从指定的仓库中获取镜像。</p><p>**IfNotPresent: **仅当本地镜像不存在时才从目标仓库下载。</p><p>**Never: **禁止从仓库中下载镜像，即只使用本地镜像。</p></blockquote><p><strong>默认的标签 为latest: always</strong></p><p>**Pod的重启策略: **</p><blockquote><p>**Always: **（默认情况下使用）但凡Pod对象终止就将其重启；<br>​ **OnFailure: **仅在Pod对象出现错误时才将其重启；<br>​ **Never: **从不重启；</p></blockquote><p>**Pod的健康检查: **<br>​ Liveness:  探测失败重启pod<br>​ Readiness:  探测失败将pod设置为不可用<br>kubelet: 控制pod</p><p>DaemonSet : 会在每一个节点都会运行，并且只运行一个Pod</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;虚拟化&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;云计算的分类&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基础及服务: laas&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;平台及服务: paas&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;软件及服务
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://wsdlxgp.top/categories/Kubernetes/"/>
    
    
      <category term="swarm" scheme="https://wsdlxgp.top/tags/swarm/"/>
    
  </entry>
  
</feed>
