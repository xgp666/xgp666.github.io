<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xgp &amp; Blog</title>
  
  <subtitle>Today is still beautiful</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsdlxgp.top/"/>
  <updated>2020-06-19T09:52:33.716Z</updated>
  <id>https://wsdlxgp.top/</id>
  
  <author>
    <name>Wu Shao Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL优化</title>
    <link href="https://wsdlxgp.top/posts/49c4.html"/>
    <id>https://wsdlxgp.top/posts/49c4.html</id>
    <published>2020-06-18T16:01:00.000Z</published>
    <updated>2020-06-19T09:52:33.716Z</updated>
    
    <content type="html"><![CDATA[<h1>一、配置参数优化</h1><p><strong>MySQL参数优化对于不同的网站，与其在线量、访问量、帖子数量、网络情况,以及机器硬件配置都有关系,优化不可能一-次性完成， 需要不断的观察以及调试，才有可能得到最佳效果。下面列出了 对性能优化影响较大的主要变量，主要分为连接请求的变星和缓冲区变星。</strong></p><h2 id="1、连接请求的变量">1、连接请求的变量</h2><h3 id="（1）max-connections">（1）max_connections</h3><p><strong>MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当<br>然这建立在机器能支撑的情况下，因为如果连接数越多，MySQL会 为每个连接提供连接缓冲区，就会开</strong><br><strong>销越多的内存，所以要适当调整该值，不能盲目提高设值。数值过 小会经常出现ERROR 1040: Too many connections错误，可以通过<code>mysql&gt; show status like 'connections';</code>通配符查看当前状态的连接数量(试图连接到MySQL(不管是否连接成功)的连接数)，以定夺该值的大小。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt;show variables like &#39;max_connections&#39;; #最大连接数<br>+-----------------+-------+<br>| Variable_name   | Value |<br>+-----------------+-------+<br>| max_connections | 151   |<br>+-----------------+-------+<br>1 row in set (0.00 sec)<br><br>mysql&gt;show status like &#39;max_used_connections&#39;; #响应的连接数<br>+----------------------+-------+<br>| Variable_name        | Value |<br>+----------------------+-------+<br>| Max_used_connections | 1     |<br>+----------------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>rnax_used_connections / max_connections * 100% (理想值≈85%)如果max_used_connections跟max_connections相同那么就是max_connections设 置过低或者超过服务器负载上限了，低于10%则设置过大。如何设置max_connections? 修改/etc/my.cnf文件，在[mysqld]下面添加如下内容， 如设置最大连接数为1024</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">max_connections &#x3D; 1024<br></code></pre></td></tr></table></figure><p><strong>重启mysq|服务</strong></p><p><strong>2、back _log MySQL能暂存的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，它就会起作用。如果MySQL的连接数据达到max. connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back Jlog, 如果等待连接的数量超过back _log,将不被授予连接资源。back_log值指出在MySQL暂时停止回答新请求之前的短时间内有多少个请求可以被存在堆栈中。只有如果期望在一个短时间内有很多连接，你需要增加它。当观察你主机进程列表(<code>mysql&gt; show full processlist</code>)，发现大量<code>xxxxx | unauthenticated user | x | xxx.xxx.xxx.xxx I NULL I Connect | NULL I login | NULL</code>的待连接进程时，就要加大back. log的值了或加大max_connections的值。通过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show full processlist;<br>+----+------+-----------+------+---------+------+----------+----<br>| Id | User | Host      | db   | Command | Time | State    | Inf<br>+----+------+-----------+------+---------+------+----------+----<br>|  2 | root | localhost | NULL | Query   |    0 | starting | sho<br>+----+------+-----------+------+---------+------+----------+----<br>1 row in set (0.00 sec)<br><br>mysql&gt; show variables like &#39;back_log&#39;; #查看back_log的设置<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| back_log      | 80    |<br>+---------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>如何设置back_log? 修改/etc/my.cnf文件，在[mysqld]下面添加如下内容，如设置最大连接数为1024</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">back_log &#x3D; 数值<br></code></pre></td></tr></table></figure><p><strong>重启mysql服务，查看一下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;back_log&#39;;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| back_log      | 1024  |<br>+---------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>3、wait_timeout和interactive_timeout wait_ftimeout –  指的是MySQL在关闭一个非交互的连接之前所要等待的秒数interactive. time -指的是mysq|在关闭一个交互的连接之前所要等待的秒数，比如我们在终端上进入mysq|管理，使用的即使交互的连接，这时候，如果没有操作的时间超过了interactive_timne设置的时间就会自动断开。默认数值是28800，可调优为7200。对性能的影响: wait_timeout:</strong></p><p><strong>(1) 如果设置大小，那么连接关闭的很快，从而使一些持久的连接不起作用</strong></p><p><strong>(2) 如果设置太大，容易造成连接打开时间过长，在show processlist时，能看到太多的sleep状态的连接，从而造成too many connections错误</strong></p><p><strong>(3)一般希望wait_timeout尽可能地低interactive_timeout的设置将要对你的web application没有多大</strong><br><strong>的影响查看wait_timeout和interactive_timeout</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;%wait_timeout%&#39;;<br>+--------------------------+----------+<br>| Variable_name            | Value    |<br>+--------------------------+----------+<br>| innodb_lock_wait_timeout | 50       |<br>| lock_wait_timeout        | 31536000 |<br>| wait_timeout             | 28800    |<br>+--------------------------+----------+<br>3 rows in set (0.01 sec)<br><br>mysql&gt; show variables like &#39;%interactive_timeout%&#39;;<br>+---------------------+-------+<br>| Variable_name       | Value |<br>+---------------------+-------+<br>| interactive_timeout | 28800 |<br>+---------------------+-------+<br>1 row in set (0.01 sec)<br><br>set global interactive_timeout&#x3D;7200;<br></code></pre></td></tr></table></figure><p><strong>如何设置wait_timeout和linteractive_timeout?修改/etc/my.cnf文件，在[mysqld]下 面添加如下内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">wait_timeout&#x3D;100<br>interactive_timeout&#x3D;100<br></code></pre></td></tr></table></figure><p><strong>重启一下mysql，查看一下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;%wait_timeout%&#39;;<br>+--------------------------+----------+<br>| Variable_name            | Value    |<br>+--------------------------+----------+<br>| innodb_lock_wait_timeout | 50       |<br>| lock_wait_timeout        | 31536000 |<br>| wait_timeout             | 100      |<br>+--------------------------+----------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; show variables like &#39;%interactive_timeout%&#39;;<br>+---------------------+-------+<br>| Variable_name       | Value |<br>+---------------------+-------+<br>| interactive_timeout | 100   |<br>+---------------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（2）缓冲区变量">（2）缓冲区变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show status like &#39;%Qcache%&#39;;<br>+-------------------------+---------+<br>| Variable_name           | Value   |<br>+-------------------------+---------+<br>| Qcache_free_blocks      | 1       |<br>| Qcache_free_memory      | 1031832 |<br>| Qcache_hits             | 0       |<br>| Qcache_inserts          | 0       |<br>| Qcache_lowmem_prunes    | 0       |<br>| Qcache_not_cached       | 0       |<br>| Qcache_queries_in_cache | 0       |<br>| Qcache_total_blocks     | 1       |<br>+-------------------------+---------+<br>8 rows in set (0.00 sec)<br><br>mysql&gt; show variables like &#39;%query_cache%&#39;;<br>+------------------------------+---------+<br>| Variable_name                | Value   |<br>+------------------------------+---------+<br>| have_query_cache             | YES     |<br>| query_cache_limit            | 1048576 |<br>| query_cache_min_res_unit     | 4096    |<br>| query_cache_size             | 1048576 |<br>| query_cache_type             | OFF     |<br>| query_cache_wlock_invalidate | OFF     |<br>+------------------------------+---------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="query-cache-type三个参数的含义">query_cache_type三个参数的含义:</h4><ul><li><strong>query_cache_type=0（OFF）关闭</strong></li><li><strong>query_cache_type=1（ON）缓存所有结果，除非select语句使用SQL_NO_CACHE禁用查询缓存</strong></li><li><strong>query_cache_type=2(DEMAND)，只缓存select语句中通过SQL_CACHE指定需要缓存的查询</strong></li></ul><h1>二、软件优化</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、配置参数优化&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MySQL参数优化对于不同的网站，与其在线量、访问量、帖子数量、网络情况,以及机器硬件配置都有关系,优化不可能一-次性完成， 需要不断的观察以及调试，才有可能得到最佳效果。下面列出了 对性能优化影响较大的主要变量，主要分为
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="mysqladmin" scheme="https://wsdlxgp.top/tags/mysqladmin/"/>
    
      <category term="--tee" scheme="https://wsdlxgp.top/tags/tee/"/>
    
      <category term="--prompt" scheme="https://wsdlxgp.top/tags/prompt/"/>
    
      <category term="mysqldump" scheme="https://wsdlxgp.top/tags/mysqldump/"/>
    
      <category term="mysqlslap" scheme="https://wsdlxgp.top/tags/mysqlslap/"/>
    
  </entry>
  
  <entry>
    <title>MySQL自带工具使用介绍</title>
    <link href="https://wsdlxgp.top/posts/f96f.html"/>
    <id>https://wsdlxgp.top/posts/f96f.html</id>
    <published>2020-06-17T16:01:00.000Z</published>
    <updated>2020-06-19T05:19:48.231Z</updated>
    
    <content type="html"><![CDATA[<h1>一、MySQL自带工具使用介绍</h1><p><strong>MySQL数据库不仅提供了数据库的服务器端应用程序，同时还提供了大量的客户端工具程序，如mysql，mysqladmin，mysqldump等等 。</strong></p><p>语法格式：</p><blockquote><p><strong>Usage: mysql [OPTIONS] [database] 例如：</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># mysql -e &quot;select user,host from user&quot; mysql<br></code></pre></td></tr></table></figure><p><strong>大家只要运行一下“mysql --help”就会得到如下相应的基本使用帮助信息：</strong></p><p><strong>这里主要介绍一些在运维过程中会用到的相关选项： 首先看看“-e, --execute=name”参数，这个参数是告诉</strong><br><strong>mysql，我要执行“-e”后面的某个命令，而不是要通过mysql连接登录到MySQL Server 上面。此参数在我们写一些基本的MySQL 检查和监控的脚本中非常有用，运维mysql时经常在脚本中使用到它。</strong></p><blockquote><p><strong>#mysql -hhostname -Pport -uusername -ppassword -e 相关mysql的sql语句</strong></p></blockquote><h2 id="1、mysql命令">1、mysql命令</h2><p><strong>Mysql命令是用的最多的一个命令工具了，为用户提供一个命令行接口来操作管理MySQL 服务器。可以通过mysql --help来查看其详细使用方法。</strong></p><table><thead><tr><th>mysql命令选项</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>-u</td><td>指定连接数据库时使用的用户</td><td></td></tr><tr><td>-p</td><td>指定用户的密码</td><td>可以-p后面直接写密码，也可以不写，进行交互式输入密码，推荐后者</td></tr><tr><td>-h</td><td>指定要登录的主机</td><td>可选，如果为空，则登录本机</td></tr><tr><td>-P</td><td>指定要连接的端口</td><td>可选，默认是3306</td></tr><tr><td>-e</td><td>可以通过-e命令直接执行SQL语句，而不用进入数据库</td><td>免交互登录数据库执行SQL语句，通常在脚本中使用</td></tr><tr><td>-D</td><td>指定要登录到哪个库</td><td>默认不会登录到库，可以省略此选项，直接写库名</td></tr><tr><td>-E</td><td>查询到的结果以行来显示</td><td>类似于每条SQL语句后面加“\G”</td></tr><tr><td>-f</td><td>即使出现SQL错误，也强制继续</td><td>比如在不登陆数据库执行删除库的操作会有一个交互式的确认操作，可以使用此选项来避免交互式</td></tr><tr><td>-X</td><td>将查询到的数据导出位xml文件</td><td>导出的文件在windows系统中可以使用excel表格打开</td></tr><tr><td>-H</td><td>将查询到的数据导出位html文件</td><td>导出的文件在windows系统中可以使用浏览器打开</td></tr><tr><td>–prompt</td><td>定制自己的MySQL提示符显示的内容</td><td>默认登登录到MySQL后的提示符是“mysql &gt;”，可以使用该选项定制提示符</td></tr><tr><td>–tee</td><td>将操作数据库所有输入和输出的内容都记录进文件中</td><td>在一些较大维护变更的时候，为了方便被查，可以将整个操作过程中的输出信息保存到某个文件中</td></tr></tbody></table><p><strong>这里主要介绍一些在运维过程中会用到的相关选项。</strong></p><h3 id="1）-e、-u、-p、-h、-P、-等选项的使用语法">1）-e、-u、-p、-h、-P、 等选项的使用语法</h3><p><strong>首先看看“-e, --execute=name”参数，这个参数是告诉mysql，我要执行“-e”后面的某个命令，而不是要通过mysql连接登录到MySQL Server 上面。此参数在我们写一些基本的MySQL 检查和监控的脚本中非常有用，运维mysql时经常在脚本中使用到它。</strong></p><h5 id="语法格式：">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@mysql ~]# mysql  -hhostname -Pport -uusername -ppassword  -e  相关mysql的sql语句<br></code></pre></td></tr></table></figure><h4 id="示例1：免登录执行sql语句">示例1：免登录执行sql语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@mysql ~]# mysql -hlocalhost -P3306 -uroot -p mysql -e &quot;select user,host from user;&quot;<br>Enter password: <br>+---------------+-----------+<br>| user          | host      |<br>+---------------+-----------+<br>| bankMaster    | %         |<br>| bankMaster    | 127.0.0.1 |<br>| epetadmin     | localhost |<br>| mysql.session | localhost |<br>| mysql.sys     | localhost |<br>| root          | localhost |<br>+---------------+-----------+<br></code></pre></td></tr></table></figure><h4 id="示例2：">示例2：</h4><p><strong>通过binlog_cache_use 以及 binlog_cache_disk_use来分析设置的binlog_cache_size是否足够</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">[root@mysql ~]#  mysql -uroot -p -e &quot;show status like &#39;binlog_cache%&#39;&quot;<br>Enter password: <br>+-----------------------+-------+<br>| Variable_name         | Value |<br>+-----------------------+-------+<br>| Binlog_cache_disk_use | 0     |<br>| Binlog_cache_use      | 0     |<br>+-----------------------+-------+<br></code></pre></td></tr></table></figure><h4 id="示例3：">示例3：</h4><p><strong>通过脚本创建数据库、表及对表进行增、改、删、查操作.脚本内容如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># cat mysql1.sh<br><br>#!&#x2F;bin&#x2F;bash<br>HOSTNAME&#x3D;&quot;localhost&quot;<br>PORT&#x3D;&quot;3306&quot;<br>USERNAME&#x3D;&quot;root&quot;<br>PASSWORD&#x3D;&quot;123&quot;<br>DBNAME&#x3D;&quot;test_db&quot;<br>TABLENAME&#x3D;&quot;tb1&quot;<br><br>#create database<br>create_db_sql&#x3D;&quot;create database if not exists $&#123;DBNAME&#125;&quot;<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; -e &quot;$&#123;create_db_sql&#125;&quot;<br><br>#create table<br>create_table_sql&#x3D;&quot;create table if not exists $&#123;TABLENAME&#125; (name varchar(20),id int default 0)&quot;<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;create_table_sql&#125;&quot;<br><br>#insert data to table<br>insert_sql&#x3D;&quot;insert into $&#123;TABLENAME&#125; values (&#39;tom&#39;,1)&quot;<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;insert_sql&#125;&quot;<br><br>#select data<br>select_sql&#x3D;&quot;select * from $&#123;TABLENAME&#125;&quot;<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;select_sql&#125;&quot;<br><br>#update data<br>update_sql&#x3D;&quot;update $&#123;TABLENAME&#125; set id&#x3D;3&quot;<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;update_sql&#125;&quot;<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;select_sql&#125;&quot;<br><br>#delete data<br>delete_sql&#x3D;&quot;delete from $&#123;TABLENAME&#125;&quot;<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;delete_sql&#125;&quot;<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;select_sql&#125;&quot;<br></code></pre></td></tr></table></figure><h4 id="执行一下">执行一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# sh mysql1.sh <br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>+------+------+<br>| name | id   |<br>+------+------+<br>| tom  |    1 |<br>+------+------+<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>+------+------+<br>| name | id   |<br>+------+------+<br>| tom  |    3 |<br>+------+------+<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br></code></pre></td></tr></table></figure><h2 id="2、-E">2、-E</h2><p><strong>如果在连接时候使用了“-E, --vertical”参数，登入之后的所有查询结果都将以纵列显示，效果和我们在一条query 之后以“\G”结尾一样。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># mysql -uroot -p123 -E<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>Welcome to the MySQL monitor. Commands end with ; or \g.<br>Your MySQL connection id is 27<br>Server version: 5.7.22 Source distribution<br>Copyright (c) 2000, 2018, Oracle and&#x2F;or its affiliates. All rights reserved.<br>Oracle is a registered trademark of Oracle Corporation and&#x2F;or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br>Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.<br>mysql&gt; show databases;<br>*************************** 1. row ***************************<br>Database: information_schema<br>*************************** 2. row ***************************<br>Database: mysql<br>*************************** 3. row ***************************<br>Database: test_db<br>10 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>“-H, --html”与“-X, --xml”，在启用这两个参数之后，select出来的所有结果都会按照“Html”与“Xml”格式来输出，在有些场合之下，比如希望Xml或者Html 文件格式导出某些报表文件的时候，是非常方便的。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@192 ~]# mysql -utest -p -X<br>Enter password: <br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 40<br>Server version: 5.7.30 MySQL Community Server (GPL)<br><br>Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and&#x2F;or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.<br><br>mysql&gt; use test_db;<br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>mysql&gt; select * from tb1;<br>&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;<br><br>&lt;resultset statement&#x3D;&quot;select * from tb1;&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;&gt;<br>  &lt;row&gt;<br>        &lt;field name&#x3D;&quot;name&quot;&gt;tom&lt;&#x2F;field&gt;<br>        &lt;field name&#x3D;&quot;id&quot;&gt;1&lt;&#x2F;field&gt;<br>  &lt;&#x2F;row&gt;<br><br>  &lt;row&gt;<br>        &lt;field name&#x3D;&quot;name&quot;&gt;tom&lt;&#x2F;field&gt;<br>        &lt;field name&#x3D;&quot;id&quot;&gt;2&lt;&#x2F;field&gt;<br>  &lt;&#x2F;row&gt;<br><br>  &lt;row&gt;<br>        &lt;field name&#x3D;&quot;name&quot;&gt;tom&lt;&#x2F;field&gt;<br>        &lt;field name&#x3D;&quot;id&quot;&gt;3&lt;&#x2F;field&gt;<br>  &lt;&#x2F;row&gt;<br>&lt;&#x2F;resultset&gt;<br>3 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="3、-H选项的使用方式">3、-H选项的使用方式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# mysql -H -uroot -p123.com -e "select * from mysql.user" &gt; a.html<br><span class="hljs-meta">#</span><span class="bash">将查询的结果重定向输出到a.html文件中</span><br>[root@mysql ~]# sz a.html    #下载这个文件到本地windows系统<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200618184838389.png" alt="image-20200618184838389"></p><h2 id="4、创建授予test用户可以在指定的源登录">4、创建授予test用户可以在指定的源登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># mysql -uroot -p -e &quot;grant all on test_db.* to root@&#39;192.168.1.10&#39; identified by<br>&#39;123&#39;&quot;<br>Enter password:<br></code></pre></td></tr></table></figure><h4 id="测试test用户连接mysql服务器">测试test用户连接mysql服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@mysql ~]# mysql -u root -p -e &quot;grant all on test_db.* to test@&#39;192.168.1.%&#39; identified by &#39;123&#39;&quot;<br>Enter password: <br>[root@mysql ~]#  mysql -utest -p123 -h 192.168.1.10<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 18<br>Server version: 5.7.22 MySQL Community Server (GPL)<br><br>Copyright (c) 2000, 2018, Oracle and&#x2F;or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and&#x2F;or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h1>二、–prompt使用方法</h1><p><strong>“–prompt=name”参数对于做运维的人来说是一个非常重要的参数选项，其主要功能是<code>定制自己的mysql提示符的显示内容。</code></strong></p><p><strong>在默认情况下，我们通过mysql登入到数据库之后，mysql的提示符只是一个很简单的内容”mysql&gt;“，没有其他任何附加信息。非常幸运的是mysql通过“<code>--prompt=name</code>”参数给我们提供了自定义提示信息的办法，可以通过配置显示登入的主机地址，登录用户名，当前时间，当前数据库schema，MySQL Server 的一些信息等等。</strong></p><p><strong>个人强烈建议将登录主机名，登录用户名和所在的schema 这三项加入提示内容，因为当大家手边管理的MySQL 越来越多，操作越来越频繁的时候，非常容易因为操作的时候没有太在意自己当前所处的环境而造成在错误的环境执行了错误的命令并造成严重后果的情况。如果我们在提示内容中加入了这几项之后，至少可以更方便的提醒自己当前所处环境，以尽量减少犯错误的概率.</strong></p><p><strong>个人强烈建议提示符定义：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&quot;\\u@\\h : \\d \\r:\\m:\\s&gt; &quot;<br></code></pre></td></tr></table></figure><h4 id="提示符解释：">提示符解释：</h4><ul><li><strong>\u ：表示用户名,</strong></li><li><strong>\h ：表示主机名，</strong></li><li><strong>\d ：表示当前数据库，</strong></li><li><strong>\r小时：（12小时制），</strong></li><li><strong>\R小时（24小时制），</strong></li><li><strong>\m：分种，</strong></li><li><strong>\s秒，</strong></li></ul><h4 id="显示效果">显示效果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@mysql ~]# mysql -uroot -p --prompt&#x3D;&quot;\\u@\\h: \\d \\r:\\m:\\s&quot;<br>Enter password: <br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 26<br>Server version: 5.7.22 MySQL Community Server (GPL)<br><br>Copyright (c) 2000, 2018, Oracle and&#x2F;or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and&#x2F;or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.<br><br>root@localhost: (none) 04:54:56&gt; use test_db<br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>root@localhost: (none) 04:54:56&gt;<br></code></pre></td></tr></table></figure><h1>三、–tee的使用方法</h1><p><strong>“–tee=name”参数也是对运维人员非常有用的参数选项，用来告诉mysql，将所有输入和输出内容都记录进文件。在我们一些较大维护变更的时候，为了方便被查，最好是将整个操作过程的所有输入和输出内容都保存下来.假如mysql命令行状态下，要进行大量的交互操作，其实可以把这些操作记录在log中进行审计，很简单 <code>mysql -u root -p --tee=/path/xxxx.log</code></strong></p><p><strong>也可以在服务器上的/etc/my.cnf中的[client]加入 tee =/tmp/client_mysql.log即可. 注：若没有[client]就添加即可 或者在mysql&gt;提示符下执行下面的命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; tee &#x2F;opt&#x2F;xgp.log<br>Logging to file &#39;&#x2F;opt&#x2F;xgp.log&#39;<br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>| test_db            |<br>+--------------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="查看一下">查看一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@mysql ~]# cat &#x2F;opt&#x2F;xgp.log <br>mysql&gt; tee &#x2F;opt&#x2F;xgp.log<br>Logging to file &#39;&#x2F;opt&#x2F;xgp.log&#39;<br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>| test_db            |<br>+--------------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>同样，“–tee”这个配置项也可以写入my.cnf这个主配置文件中的client字段下，如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# vim /etc/my.cnf <br><br>[client]<br>socket=/usr/local/mysql/mysql.sock<br>[mysqld]<br>basedir=/usr/local/mysql<br>datadir=/usr/local/mysql/data<br>pid-file=/usr/local/mysql/data/mysql.pid<br>socket=/usr/local/mysql/mysql.sock<br>log-error=/usr/local/mysql/data/mysql.err<br>tee=/opt/xgp.log<br></code></pre></td></tr></table></figure><h1>四、mysqladmin命令</h1><p><strong>mysqladmin,顾名思义,提供的功能都是与MySQL管理相关的各种功能。如MySQL Server状态检查,各种统计信息的flush,创建/删除数据库，关闭MySQL Server等等。mysqladmin所能做的事情，虽然大部分都可以通过mysql连接登录上MySQL Server之后来完成，但是大部分通过mysqladmin来完成操作会更简单更方便。</strong><br><strong>mysqladmin后面可以接选项，也可以接命令,这里就不说选项了，主要说一下命令</strong></p><table><thead><tr><th>命令字</th><th>作用</th></tr></thead><tbody><tr><td>create databasename</td><td>创建一个库</td></tr><tr><td>drop databasename</td><td>删除一个库</td></tr><tr><td>status</td><td>查询MySQL的基本状态（显示的信息有限 ）</td></tr><tr><td>extended-status</td><td>查询服务器的详细状态信息（类似于在数据库中执行show status;）</td></tr><tr><td>flush-hosts</td><td>刷新服务器缓存</td></tr><tr><td>flush-logs</td><td>刷新二进制日志文件（如果二进制日志功能开启，那么执行这个操作会生成新的二进制日志文件）</td></tr><tr><td>flush-status</td><td>刷新状态变量</td></tr><tr><td>flush-tables</td><td>刷新所有表</td></tr><tr><td>flush-threads</td><td>刷新所有线程缓存</td></tr><tr><td>flush-privileges</td><td>重新加载授权表</td></tr><tr><td>processlist</td><td>查看当前连接数据库的所有ID详细信息</td></tr><tr><td>kill id</td><td>杀掉某个或多个连接ID（一般需要先使用processlist查看出ID列表，然后根据ID将其kill掉 ）</td></tr><tr><td>ping</td><td>检测某个MySQL服务是否处于启动状态</td></tr><tr><td>password</td><td>修改用户密码</td></tr><tr><td>shutdown</td><td>关闭MySQL服务</td></tr><tr><td>start-slave</td><td>开启主从复制</td></tr><tr><td>stop-slave</td><td>关闭主从复制</td></tr><tr><td>variables</td><td>查询MySQL服务中的所有变量</td></tr><tr><td>version</td><td>查询MySQL的版本详细信息</td></tr></tbody></table><h3 id="（1）ping">（1）ping</h3><p><strong>监测服务是否正常</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# mysqladmin -uroot -p  ping<br>Enter password: <br>mysqld is alive<br></code></pre></td></tr></table></figure><h3 id="（2）status">（2）status</h3><p><strong>获取mysql当前状态值</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# mysqladmin -uroot -p  status<br>Enter password: <br>Uptime: 3413  Threads: 2  Questions: 102  Slow queries: 0  Opens: 118  Flush tables: 1  Open tables: 111  Queries per second avg: 0.029<br></code></pre></td></tr></table></figure><h4 id="状态值：">状态值：</h4><ul><li>**mysqladmin status命令结果有下述列 **</li><li><strong>Uptime:是mysql服务器运行的秒数.</strong></li><li><strong>Threads:活跃线程的数量即开启的会话数.</strong></li><li><strong>Questions： 服务器启动以来客户的问题(查询)数目 （只要跟mysql作交互，不管查询表，还是查询服务器状态都记一次）.</strong></li><li><strong>Slow queries：是慢查询的数量.</strong></li><li>**Opens：mysql已经打开的数据库表的数量 **</li><li>**Flush tables: mysql已经执行的flush tables，refresh和reload命令的数量.注：flush tables //刷新表（清除缓存）reload 重载授权表 refresh 洗掉所有表并关闭和打开日志文件 **</li><li><strong>open：打开数据库的表的数量，以服务器启动开始.</strong></li><li><strong>Queries per second avg：select语句平均查询时间 Memory in use分配的内存(只有在MySQL用–withdebug编译时可用) Max memory used分配的最大内存(只有在MySQL用–with-debug编译时可用)</strong></li></ul><h3 id="（3）processlist">（3）processlist</h3><p><strong>获取数据库当前连接信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# mysqladmin -uroot -p  processlist<br>Enter password: <br>+----+------+-----------+---------+---------+------+----------+------------------+<br>| Id | User | Host      | db      | Command | Time | State    | Info             |<br>+----+------+-----------+---------+---------+------+----------+------------------+<br>| 32 | root | localhost | test_db | Sleep   | 877  |          |                  |<br>| 40 | root | localhost |         | Query   | 0    | starting | show processlist |<br>+----+------+-----------+---------+---------+------+----------+------------------+<br></code></pre></td></tr></table></figure><h3 id="（4）获取数据库当前的连接数">（4）获取数据库当前的连接数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# mysql -uroot -p -BNe "select host,count(host) from processlist group by host" information_schema<br>Enter password: <br>localhost2<br></code></pre></td></tr></table></figure><h3 id="（5）显示mysql的启动时长">（5）显示mysql的启动时长</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# mysql -uroot -p123 -e "SHOW STATUS LIKE '%uptime%'" | awk '/ptime/&#123; calc = $NF/3600;print $(NF-1), calc"Hour"&#125;'<br><br>Uptime 1.005Hour<br>Uptime_since_flush_status 1.005Hour<br></code></pre></td></tr></table></figure><h3 id="（6）查看数据库所有库大小">（6）查看数据库所有库大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# mysql -uroot -p123 -e 'select table_schema,round(sum(data_length+index_length)/1024/1024,4) from information_schema.tables group by table_schema'<br><br>+--------------------+--------------------------------------------------+<br>| table_schema       | round(sum(data_length+index_length)/1024/1024,4) |<br>+--------------------+--------------------------------------------------+<br>| information_schema |                                           0.1563 |<br>| mysql              |                                           2.4425 |<br>| performance_schema |                                           0.0000 |<br>| sys                |                                           0.0156 |<br>| test_db            |                                           0.0156 |<br>+--------------------+--------------------------------------------------+<br></code></pre></td></tr></table></figure><h3 id="（7）processlist获取当前数据库的连接线程信息：-监控mysql进程运行状态："><strong>（7）processlist获取当前数据库的连接线程信息： 监控mysql进程运行状态：</strong></h3><p><strong>上面的这三个功能在一些简单监控脚本中经常使用到的.mysqladmin其他参数选项可以通过执行“mysqladmin–help”或man mysqladmin得到帮助信息.编写一个简单的mysql监控脚本，内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash">监测服务是否正常</span><br>mysqladmin -uroot -p123 -h localhost ping<br><span class="hljs-meta">#</span><span class="bash">获取mysql当前状态值</span><br>mysqladmin -uroot -p123 -h localhost status<br><span class="hljs-meta">#</span><span class="bash">获取数据库当前连接信息</span><br>mysqladmin -uroot -p123 -h localhost processlist<br><span class="hljs-meta">#</span><span class="bash">获取数据库当前的连接数</span><br>mysql -uroot -p123 -BNe "select host,count(host) from processlist group by host" information_schema<br><span class="hljs-meta">#</span><span class="bash">显示mysql的启动时长</span><br>mysql -uroot -p123 -e "SHOW STATUS LIKE '%uptime%'" | awk '/ptime/&#123; calc = $NF/3600;print $(NF-1), calc"Hour"&#125;'<br><span class="hljs-meta">#</span><span class="bash">查看数据库所有库大小</span><br>mysql -uroot -p123 -e 'select table_schema,round(sum(data_length+index_length)/1024/1024,4) from information_schema.tables group by table_schema'<br></code></pre></td></tr></table></figure><h1>五、mysqldump</h1><p><strong>这个工具其功能就是将MySQL Server中的数据以SQL 语句的形式从数据库中dump 成文本文件。mysqldump是做为MySQL 的一种逻辑备份工具，在我之前的博文中有这个工具的使用方法：<a href="https://blog.51cto.com/14154700/2395340" target="_blank" rel="noopener">MySQL的备份与恢复详解</a></strong></p><h1>六、mysqlbinlog</h1><p><strong>mysqlbinlog程序的主要功能就是分析MySQL Server 所产生的二进制日志（也就是binlog）。</strong><br><strong>通过mysqlbinlog，我们可以解析出binlog中指定时间段或者指定日志起始和结束位置的内容解析成SQL 语句。</strong></p><h1>七、Mysqlslap性能测试</h1><p><strong>MySQL二种存储引擎 mysqlslap是mysql自带的基准测试工具,优点:查询数据,语法简单,灵活容易使用.该工具可以模拟多个客户端同时并发的向服务器发出查询更新,给出了性能测试数据而且提供了多种引擎的性能比较.mysqlslap为mysql性能优化前后提供了直观的验证依据,建议系统运维和DBA人员应该掌握一些常见的压力测试工具,才能准确的掌握线上数据库支撑的用户流量上限及其抗压性等问题.现在看一下这个压力测试工具mysqlslap，关于他的选项手册上以及–help介绍的很详细。</strong></p><h4 id="这里解释一下一些常用的选项">这里解释一下一些常用的选项</h4><ul><li><strong>–concurrency代表并发数量，多个可以用逗号隔开。例如：concurrency=50,100,200 --engines代表要测试的引</strong><br><strong>擎，可以有多个，用分隔符隔开。</strong></li><li><strong>–iterations代表要运行这些测试多少次，即运行多少次后，得到结果。</strong></li><li><strong>–auto-generate-sql 代表用系统自己生成的SQL脚本来测试。</strong></li><li><strong>–auto-generate-sql-load-type 代表要测试的是读 还是写还是两者混合的（read,write,update,mixed）</strong></li><li><strong>–number-of-queries 代表总共要运行多少次查询。每个客户运行的查询数量可以用查询总数/并发数来计算。比如倒数第二个结果2=200/100。</strong></li><li><strong>–debug-info 代表要额外输出CPU以及内存的相关信息（注：只有在MySQL用–with-debug编译时可）。</strong></li><li><strong>–number-int-cols 代表测试表中的INTEGER类型的属性有几个。</strong></li><li><strong>–number-char-cols代表测试表的char类型字段的数量。</strong></li><li><strong>–create-schema 代表自己定义的模式（在MySQL中也就是库即创建测试的数据库）。</strong></li><li><strong>–query 代表自己的SQL脚本。</strong></li><li><strong>–only-print如果只想打印看看SQL语句是什么，可以用这个选项。</strong></li><li><strong>–csv=name 生产CSV格式数据文件 查看Mysql数据库默认最大连接数</strong></li></ul><h2 id="（1）查看Mysql数据库默认最大连接数">（1）查看Mysql数据库默认最大连接数</h2><p><strong>可以看到mysql5.7.13默认是151。注：不同版本默认最大连接数不差别。一般生产环境是不够的。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;%max_connections%&#39;;<br>+-----------------+-------+<br>| Variable_name   | Value |<br>+-----------------+-------+<br>| max_connections | 151   |<br>+-----------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>注：不同版本默认最大连接数不差别。一般生产环境是不够的</strong></p><h2 id="2、修改MySQL数据库默认最大连接数">2、修改MySQL数据库默认最大连接数</h2><h4 id="方法一">方法一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; set GLOBAL max_connections &#x3D; 1024;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; show variables like &#39;%max_connections%&#39;;<br>+-----------------+-------+<br>| Variable_name   | Value |<br>+-----------------+-------+<br>| max_connections | 1024  |<br>+-----------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="方法二">方法二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">在my.cnf[mysqld]下添加 <br>max_connections&#x3D;1024 #增加到1024<br>重启Mysql.<br><br>总结：修改my.cnf文件并重启mysqld服务<br></code></pre></td></tr></table></figure><h2 id="3、查看Mysql默认使用存储引擎，">3、查看Mysql默认使用存储引擎，</h2><p><strong>如下查看： <code>mysql&gt; show engines;</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show engines;<br>+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+<br>| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |<br>+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+<br>| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |<br>| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |<br>| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |<br>| BLACKHOLE          | YES     | &#x2F;dev&#x2F;null storage engine (anything you write to it disappears) | NO           | NO   | NO         |<br>| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |<br>| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |<br>| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |<br>| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |<br>| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |<br>+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+<br>9 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="4、测试">4、测试</h2><p><strong>现在我们来看一下具体测试的例子。</strong></p><h3 id="1）用自带的SQL脚本来测试">1）用自带的SQL脚本来测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@mysql ~]# mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --concurrency&#x3D;100,200 --iterations&#x3D;1 --number-int-cols&#x3D;20 --number-char-cols&#x3D;30 --auto-generate-sql --auto-generate-sql-add-autoincrement --auto-generate-sql-load-type&#x3D;mixed --engine&#x3D;myisam,innodb --number-of-queries&#x3D;2000 -uroot -p123 --verbose<br><br>Benchmark<br>trueRunning for engine myisam<br>trueAverage number of seconds to run all queries: 0.330 seconds<br>trueMinimum number of seconds to run all queries: 0.330 seconds<br>trueMaximum number of seconds to run all queries: 0.330 seconds<br>trueNumber of clients running queries: 100<br>trueAverage number of queries per client: 20<br><br>Benchmark<br>trueRunning for engine myisam<br>trueAverage number of seconds to run all queries: 0.341 seconds<br>trueMinimum number of seconds to run all queries: 0.341 seconds<br>trueMaximum number of seconds to run all queries: 0.341 seconds<br>trueNumber of clients running queries: 200<br>trueAverage number of queries per client: 10<br><br>Benchmark<br>trueRunning for engine innodb<br>trueAverage number of seconds to run all queries: 0.610 seconds<br>trueMinimum number of seconds to run all queries: 0.610 seconds<br>trueMaximum number of seconds to run all queries: 0.610 seconds<br>trueNumber of clients running queries: 100<br>trueAverage number of queries per client: 20<br><br>Benchmark<br>trueRunning for engine innodb<br>trueAverage number of seconds to run all queries: 0.457 seconds<br>trueMinimum number of seconds to run all queries: 0.457 seconds<br>trueMaximum number of seconds to run all queries: 0.457 seconds<br>trueNumber of clients running queries: 200<br>trueAverage number of queries per client: 10<br></code></pre></td></tr></table></figure><h6 id="测试说明">测试说明</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">模拟测试两次读写并发，第一次100，第二次200，自动生成SQL脚本，测试表包含20个init字段，30个char字段，每次执行2000查询请求。测试引擎分别是myisam，innodb。<br></code></pre></td></tr></table></figure><h6 id="测试结果说明">测试结果说明</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex">Myisam第一次100客户端同时发起增查用1.459/s,第二次200客户端同时发起增查用1.420/s<br>Innodb第一次100客户端同时发起增查用1.352/s,第二次200客户端同时发起增查用2.330/s<br></code></pre></td></tr></table></figure><h6 id="测试结论">测试结论</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex">由此可见MyISAM存储引擎处理性能是最好的，也是最常用的，但不支持事务。<br>InonDB存储引擎提供了事务型数据引擎（ACID），在事务型引擎里使用最多的。具有事务回滚，系统修复等特点。<br></code></pre></td></tr></table></figure><h3 id="2）测试结果保存为csv文件">2）测试结果保存为csv文件</h3><p><strong>Mysqlslap测试工具生产CSV格式数据文件并转换成图表形式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# mysqlslap --defaults-file=/etc/my.cnf --concurrency=100,200 --iterations=1 --number-int-cols=20 --number-char-cols=30 --auto-generate-sql --auto-generate-sql-add-autoincrement --auto-generate-sql-load-type=mixed --engine=myisam,innodb --number-of-queries=2000 -uroot -p123 --csv=/root/a.csv<br></code></pre></td></tr></table></figure><p><strong>将/root/a.csv拷贝到windows主机上，打开并生成图表</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200618175243042.png" alt="image-20200618175243042"></p><h3 id="3）使用自定义sql脚本测试">3）使用自定义sql脚本测试</h3><p><strong>用我们自己定义的SQL 脚本或语句来测试 首先准备好要测试的数据库表，这里我们编写一个生成表的脚本去完成 脚本内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# cat /root/mysql3.sh<br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>HOSTNAME="localhost"<br>PORT="3306"<br>USERNAME="root"<br>PASSWORD="123"<br>DBNAME="test1"<br>TABLENAME="tb1"<br><span class="hljs-meta">#</span><span class="bash">create database</span><br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; -e "drop database if exists $&#123;DBNAME&#125;" create_db_sql="create database if not exists $&#123;DBNAME&#125;"<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; -e "$&#123;create_db_sql&#125;"<br><span class="hljs-meta">#</span><span class="bash">create table</span><br>create_table_sql="create table if not exists $&#123;TABLENAME&#125;(stuid int not null primary key,stuname varchar(20) not null,stusex char(1) not null,cardid varchar(20) not null,birthday datetime,entertime datetime,address varchar(100) default null)"<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e "$&#123;create_table_sql&#125;"<br><span class="hljs-meta">#</span><span class="bash">insert data to table</span><br>i=1<br>while [ $i -le 20000 ]<br>do<br>insert_sql="insert into $&#123;TABLENAME&#125; values($i,'zhangsan','1','1234567890123456','1999-10-10','2016-9-3','zhongguo beijingshi changpinqu')"<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e "$&#123;insert_sql&#125;"<br>let i++<br>done<br><span class="hljs-meta">#</span><span class="bash">select data</span><br>select_sql="select count(*) from $&#123;TABLENAME&#125;"<br>mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e "$&#123;select_sql&#125;"<br></code></pre></td></tr></table></figure><p><strong>授权脚本x执行权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 opt]# chmod +x mysql_test.sh<br></code></pre></td></tr></table></figure><h4 id="执行脚本mysql3-sh生成mysqlslap工具需要的测试表">执行脚本mysql3.sh生成mysqlslap工具需要的测试表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mysql ~]# /root/mysql3.sh<br><br>执行mysqlslap工具进行测试<br>[root@mysql ~]# mysqlslap --defaults-file=/etc/my.cnf --concurrency=10,20 --iterations=1 --create-schema='test1' --query='select * from test1.tb1' --engine=myisam,innodb --number-of-queries=2000 -uroot -p123 –verbose<br></code></pre></td></tr></table></figure><h5 id="显示结果：">显示结果：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@192 opt]# mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --concurrency&#x3D;10,20 --iterations&#x3D;1 --create-schema&#x3D;&#39;test1&#39; --query&#x3D;&#39;select * from test1.tb1&#39; --engine&#x3D;myisam,innodb --number-of-queries&#x3D;2000 -uroot -p1234 –verbose<br>mysqlslap: [Warning] Using a password on the command line interface can be insecure.<br>Benchmark<br>        Running for engine myisam<br>        Average number of seconds to run all queries: 3.261 seconds<br>        Minimum number of seconds to run all queries: 3.261 seconds<br>        Maximum number of seconds to run all queries: 3.261 seconds<br>        Number of clients running queries: 10<br>        Average number of queries per client: 200<br><br>Benchmark<br>        Running for engine myisam<br>        Average number of seconds to run all queries: 3.010 seconds<br>        Minimum number of seconds to run all queries: 3.010 seconds<br>        Maximum number of seconds to run all queries: 3.010 seconds<br>        Number of clients running queries: 20<br>        Average number of queries per client: 100<br><br>Benchmark<br>        Running for engine innodb<br>        Average number of seconds to run all queries: 3.421 seconds<br>        Minimum number of seconds to run all queries: 3.421 seconds<br>        Maximum number of seconds to run all queries: 3.421 seconds<br>        Number of clients running queries: 10<br>        Average number of queries per client: 200<br><br>Benchmark<br>        Running for engine innodb<br>        Average number of seconds to run all queries: 3.252 seconds<br>        Minimum number of seconds to run all queries: 3.252 seconds<br>        Maximum number of seconds to run all queries: 3.252 seconds<br>        Number of clients running queries: 20<br>        Average number of queries per client: 100<br></code></pre></td></tr></table></figure><p><strong>注：通过mysqlslap工具对mysql server进行压力测试，可以通过–concurrency、–number-of-queries等选项的值查看每次测试的结果，通过反复测试、优化得出mysql server的最大并发数.如果mysqlslap工具输出结果为Segmentation fault (core dumped)基本表示走超出mysql server的负载。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、MySQL自带工具使用介绍&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MySQL数据库不仅提供了数据库的服务器端应用程序，同时还提供了大量的客户端工具程序，如mysql，mysqladmin，mysqldump等等 。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法格式：&lt;/p&gt;
&lt;bl
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="mysqladmin" scheme="https://wsdlxgp.top/tags/mysqladmin/"/>
    
      <category term="--tee" scheme="https://wsdlxgp.top/tags/tee/"/>
    
      <category term="--prompt" scheme="https://wsdlxgp.top/tags/prompt/"/>
    
      <category term="mysqldump" scheme="https://wsdlxgp.top/tags/mysqldump/"/>
    
      <category term="mysqlslap" scheme="https://wsdlxgp.top/tags/mysqlslap/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据文件介绍及存放位置</title>
    <link href="https://wsdlxgp.top/posts/80a7.html"/>
    <id>https://wsdlxgp.top/posts/80a7.html</id>
    <published>2020-06-17T16:00:00.000Z</published>
    <updated>2020-06-19T05:16:36.710Z</updated>
    
    <content type="html"><![CDATA[<h1>一、MySQL数据库文件介绍</h1><p><strong>MySQL的每个数据库都对应存放在一个与数据库同名的文件夹中，MySQL数据库文件包括MySQL所建数据库文件和MySQL所用存储引擎创建的数据库文件。</strong></p><h2 id="1、MySQL创建并管理的数据库文件：">1、MySQL创建并管理的数据库文件：</h2><p><strong>.frm文件：存储数据表的框架结构，文件名与表名相同，每个表对应一个同名frm文件，与操作系统和存储引擎无关，即不管MySQL运行在何种操作系统上，使用何种存储引擎，都有这个文件。</strong></p><p><strong>除了必有的.frm文件，根据MySQL所使用的存储引擎的不同（MySQL常用的两个存储引擎是MyISAM和InnoDB），存储引擎会创建各自不同的数据库文件。</strong></p><h2 id="2、MyISAM数据库表文件：">2、MyISAM数据库表文件：</h2><ul><li><strong>.MYD文件：即MY Data，表数据文件</strong></li><li><strong>.MYI文件：即MY Index，索引文件</strong></li><li><strong>.log文件：日志文件</strong></li></ul><h2 id="3、InnoDB采用表空间（tablespace）来管理数据，存储表数据和索引，">3、InnoDB采用表空间（tablespace）来管理数据，存储表数据和索引，</h2><p><strong>InnoDB数据库文件（即InnoDB文件集，ib-file set）：</strong></p><p><strong>ibdata1、ibdata2等：系统表空间文件，存储InnoDB系统信息和用户数据库表数据和索引，所有表共用</strong></p><p><strong>.ibd文件：单表表空间文件，每个表使用一个表空间文件（file per table），存放用户数据库表数据和索引</strong></p><p><strong>日志文件： ib_logfile1、ib_logfile2</strong></p><h1>二、MySQL数据库存放位置：</h1><p><strong>1、MySQL如果使用MyISAM存储引擎，数据库文件类型就包括.frm、.MYD、.MYI，默认存放位置是C:\Documentsand Settings\All Users\Application Data\MySQL\MySQL Server 5.1\data</strong></p><p><strong>2、MySQL如果使用InnoDB存储引擎，数据库文件类型就包括.frm、ibdata1、.ibd，存放位置有两个，</strong></p><p><strong>.frm文件默认存放位置是C:\Documents and Settings\All Users\ApplicationData\MySQL\MySQL Server 5.1\data，ibdata1、.ibd文件默认存放位置是MySQL安装目录下的data文件夹</strong></p><h1>三、操作</h1><p><strong>看看我的数据库文件的存放位置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@pacteralinux ~]<span class="hljs-comment"># cd /mnt/resource/mysqldate/</span><br>[root@pacteralinux mysqldate]<span class="hljs-comment"># ll -h</span><br>total 173M<br>-rw-rw----. 1 mysql mysql   56 Nov 25 17:17 auto.cnf<br>-rw-rw----. 1 mysql mysql  76M Dec 24 17:02 ibdata1<br>-rw-rw----. 1 mysql mysql  48M Dec 24 17:02 ib_logfile0<br>-rw-rw----. 1 mysql mysql  48M Nov 26 13:39 ib_logfile1<br>drwx------. 2 mysql mysql 4.0K Nov 26 13:41 mysql<br>drwx------. 2 mysql mysql  20K Nov 26 17:00 mysqldb<br>srwxrwxrwx. 1 mysql mysql    0 Dec 24 17:02 mysql.sock<br>-rw-rw----. 1 mysql root  499K Dec 25 14:42 pacteralinux.err<br>-rw-rw----. 1 mysql mysql    6 Dec 24 17:02 pacteralinux.pid<br>drwx------. 2 mysql mysql 4.0K Nov 26 13:41 performance_schema<br>drwx------. 2 mysql mysql 4.0K Nov 26 13:41 <span class="hljs-built_in">test</span><br>drwx------. 2 mysql mysql 4.0K Dec  9 16:49 weixindemo<br>[root@pacteralinux mysqldate]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><strong>其中这三个文件我一直很迷惑</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">-rw-rw----. 1 mysql mysql  76M Dec 24 17:02 ibdata1<br>-rw-rw----. 1 mysql mysql  48M Dec 24 17:02 ib_logfile0<br>-rw-rw----. 1 mysql mysql  48M Nov 26 13:39 ib_logfile1<br></code></pre></td></tr></table></figure><p><strong>再看这些文件（部分）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@pacteralinux mysqldb]<span class="hljs-comment"># ll -h</span><br>total 3.6G<br>-rw-rw----. 1 mysql mysql  11K Nov 26 16:47 chen_fundnetvalue_bak.frm<br>-rw-rw----. 1 mysql mysql  62K Nov 26 16:47 chen_fundnetvalue_bak.MYD<br>-rw-rw----. 1 mysql mysql 4.0K Nov 26 16:47 chen_fundnetvalue_bak.MYI<br>-rw-rw----. 1 mysql mysql  11K Nov 26 16:47 chen_fundnetvalue.frm<br>-rw-rw----. 1 mysql mysql 834K Nov 26 16:47 chen_fundnetvalue.MYD<br>-rw-rw----. 1 mysql mysql  18K Nov 26 16:47 chen_fundnetvalue.MYI<br>-rw-rw----. 1 mysql mysql 8.4K Nov 26 16:47 codelist_bak.frm<br>-rw-rw----. 1 mysql mysql  162 Nov 26 16:47 codelist_bak.MYD<br>-rw-rw----. 1 mysql mysql 1.0K Nov 26 16:47 codelist_bak.MYI<br>-rw-rw----. 1 mysql mysql 8.4K Nov 26 16:47 codelist.frm<br>-rw-rw----. 1 mysql mysql  162 Nov 26 16:47 codelist.MYD<br>-rw-rw----. 1 mysql mysql 1.0K Nov 26 16:47 codelist.MYI<br></code></pre></td></tr></table></figure><p><strong>. 前面是表名，每个表由frm  MYD MYI三个后缀名组成，所有表都是！</strong></p><p><strong>在MySQL 中每一个数据库都会在定义好（或者默认）的数据目录下存在一个以数据库名字命名的文件夹，用来存放该数据库中各种表数据文件。不同的MySQL 存储引擎有各自不同的数据文件，存放位置也有区别。</strong></p><p><strong>多数存储引擎的数据文件都存放在和MyISAM 数据文件位置相同的目录下，但是每个数据文件的扩展名却各不一样。如MyISAM 用“.MYD”作为扩展名，Innodb 用“.ibd”，Archive 用“.arc”，CSV 用“.csv”，等等。</strong></p><h2 id="1、下面就来详细分析一下这些是什么文件！！！！！">1、下面就来详细分析一下这些是什么文件！！！！！</h2><h2 id="（1）“-frm”文件">（1）“.frm”文件</h2><p><strong>与表相关的元数据（meta）信息都存放在“.frm”文件中，包括表结构的定义信息等。不论是什么存储引擎，每一个表都会有一个以表名命名的“.frm”文件。所有的“.frm”文件都存放在所属数据库的文件夹下面。（innodb，myisam）</strong></p><h2 id="（2）“-MYD”文件">（2）“.MYD”文件</h2><p><strong>“.MYD”文件是MyISAM 存储引擎专用，存放MyISAM 表的数据。每一个MyISAM 表都会有一个“.MYD”文件与之对应，同样存放于所属数据库的文件夹下，和“.frm”文件在一起。</strong></p><h2 id="（3）“-MYI”文件">（3）“.MYI”文件</h2><p><strong>“.MYI”文件也是专属于MyISAM存储引擎的，主要存放MyISAM表的索引相关信息。对于MyISAM存储来说，可以被cache 的内容主要就是来源于“.MYI”文件中。每一个MyISAM表对应一个“.MYI”文件，存放于位置和“.frm”以及“.MYD”一样。</strong></p><h2 id="（4）小结一下：">（4）小结一下：</h2><p><strong>MyISAM 存储引擎的表在数据库中，每一个表都被存放为三个以表名命名的物理文件（frm,myd,myi）。 每个表都有且仅有这样三个文件做为MyISAM 存储类型的表的存储，也就是说不管这个表有多少个索引，都是存放在同一个.MYI 文件中。</strong></p><p><strong>这个在开始里看的比较清楚。</strong></p><h2 id="2、“-ibd”文件和ibdata-文件">2、“.ibd”文件和ibdata 文件</h2><p><strong>这两种文件都是存放Innodb 数据的文件，之所以有两种文件来存放Innodb 的数据（包括索引），是因为Innodb 的数据存储方式能够通过配置来决定是使用<code>共享表空间存放存储数据，还是独享表空间存放存储数据</code>。独享表空间存储方式使用“.ibd”文件来存放数据，且每个表一个“.ibd”文件，文件存放在和MyISAM数据相同的位置。</strong></p><p><strong>如果选用共享存储表空间来存放数据，则会使用ibdata 文件来存放，所有表<code>共同使用一个（或者多个，可自行配置）ibdata 文件</code>。ibdata 文件可以通过innodb_data_home_dir 和innodb_data_file_path两个参数共同配置组成， innodb_data_home_dir 配置数据存放的总目录， 而innodb_data_file_path 配置每一个文件的名称。当然，也可以不配innodb_data_home_dir而直接在innodb_data_file_path参数配置的时候使用绝对路径来完成配置。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> showvariables like <span class="hljs-string">'innodb_data%'</span>;</span><br><br>+-----------------------+------------------------+<br>|Variable_name     | Value          |<br>+-----------------------+------------------------+<br>|innodb_data_file_path | ibdata1:10M:autoextend |<br>| innodb_data_home_dir  |             |<br>+-----------------------+------------------------+<br>2 rows in set(0.01 sec)<br></code></pre></td></tr></table></figure><p><strong>innodb_data_file_path中可以一次配置多个ibdata文件。文件可以是指定大小，也可以是自动扩展的，但是Innodb 限制了仅仅只有最后一个ibdata 文件能够配置成自动扩展类型。当我们需要添加新的ibdata 文件的时候，只能添加在innodb_data_file_path配置的最后，而且必须重启MySQL 才能完成ibdata 的添加工作。</strong></p><h2 id="3、ibdata文件瘦身法">3、ibdata文件瘦身法</h2><p><strong>MySql innodb如果是共享表空间，ibdata1文件越来越大，达到了30多个G，对一些没用的表进行清空：</strong><br><strong>truncate table xxx;</strong><br><strong>然后optimize table xxx; 没有效果</strong><br><strong>因为对共享表空间不起作用。</strong><br><strong>mysql ibdata1存放数据，索引等，是MYSQL的最主要的数据。</strong></p><p><strong>如果不把数据分开存放的话，这个文件的大小很容易就上了G，甚至几十G。对于某些应用来说，并不是太合适。因此要把此文件缩小。</strong><br><strong>无法自动收缩，必须数据导出，删除ibdata1，然后数据导入，比较麻烦，因此需要改为每个表单独的文件。</strong></p><p><strong>解决方法：数据文件单独存放(共享表空间如何改为每个表独立的表空间文件)。</strong></p><h3 id="步骤如下："><strong>步骤如下：</strong></h3><h4 id="1）备份数据库"><strong>1）备份数据库</strong></h4><p><strong>从命令行进入MySQL Server 5.0\bin</strong><br><strong>备份全部数据库，执行命令</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">D:\&gt;<span class="hljs-title">mysqldump</span> -<span class="hljs-title">q</span> -<span class="hljs-title">umysql</span> -<span class="hljs-title">ppassword</span> --<span class="hljs-title">add</span>-<span class="hljs-title">drop</span>-<span class="hljs-title">table</span> --<span class="hljs-title">all</span>-<span class="hljs-title">databases</span> &gt; <span class="hljs-title">c</span>:/<span class="hljs-title">all.sql</span></span><br></code></pre></td></tr></table></figure><p><strong>做完此步后，停止数据库服务。</strong></p><h4 id="2）找到my-ini或my-cnf文件"><strong>2）找到my.ini或my.cnf文件</strong></h4><p><strong>linux下执行 <code>./mysqld --verbose --help | grep -A 1 'Default options'</code></strong><br><strong>会有类似显示：</strong><br><strong>Default options are read from the following files in the given order:</strong><br><strong>/etc/my.cnf ~/.my.cnf /usr/local/service/mysql3306/etc/my.cnf</strong></p><p><strong>windows环境下可以：</strong><br><strong><code>mysqld --verbose --help &gt; mysqlhelp.txt</code></strong><br><strong><code>notepad mysqlhelp.txt</code></strong><br><strong>在里面查找Default options，可以看到查找my.ini的顺序，以找到真实目录</strong></p><h4 id="3）修改mysql配置文件"><strong>3）修改mysql配置文件</strong></h4><p><strong>打开my.ini或my.cnf文件</strong><br><strong><code>[mysqld]</code>下增加下面配置</strong><br><strong><code>innodb_file_per_table=1</code></strong></p><p><strong>验证配置是否生效，可以重启mysql后,执行</strong><br><strong><code>show variables like '%per_table%'</code></strong><br><strong>看看<code>innodb_file_per_table</code>变量是否为ON</strong></p><h4 id="4）删除原数据文件"><strong>4）删除原数据文件</strong></h4><p><strong>删除原来的ibdata1文件及日志文件<code>ib_logfile*</code>，删除data目录下的应用数据库文件夹(mysql文件夹不要删)</strong></p><h4 id="5）还原数据库"><strong>5）还原数据库</strong></h4><p><strong>启动数据库服务</strong></p><p><strong>从命令行进入MySQL Server 5.0\bin</strong><br><strong>还原全部数据库，执行命令<code>mysql -uusername -pyourpassword &lt; c:/all.sql</code></strong></p><p><strong>经过以上几步后，可以看到新的ibdata1文件就只有几十M了，数据及索引都变成了针对单个表的小ibd文件了，它们在相应数据库的文件夹下面。</strong></p><h1>四、mysql data文件夹下的ibdata1 文件作用</h1><p><strong>这个文件超级大， 查了一下， 大概的作用如下</strong><br><strong>是储存的格式</strong><br><strong>INNODB类型数据状态下，</strong><br><strong>ibdata用来储存文件的数据</strong><br><strong>而库名的文件夹里面的那些表文件只是结构而已</strong><br><strong>由于mysql4.1默认试innodb，所以这个文件默认就存在了https://wsdlxgp.top/ 这个链接试innodb的中文参考， innodb的东西可以在my.ini中设置</strong></p><p><strong>使用过MySQL的同学，刚开始接触最多的莫过于MyISAM表引擎了，这种引擎的数据库会分别创建三个文件：表结构、表索引、表数据空间。我们可以将某个数据库目录直接迁移到其他数据库也可以正常工作。</strong><br><strong>然而当你使用InnoDB的时候，一切都变了。InnoDB 默认会将所有的数据库InnoDB引擎的表数据存储在一个共享空间中：ibdata1，这样就感觉不爽，增删数据库的时候，ibdata1文件不会自动收缩，单个数据库的备份也将成为问题。通常只能将数据使用mysqldump 导出，然后再导入解决这个问题。</strong><br><strong>在MySQL的配置文件[mysqld]部分，增加innodb_file_per_table参数，可以修改InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间。</strong></p><h3 id="独立表空间"><strong>独立表空间</strong></h3><h4 id="优点：">优点：</h4><p><strong>1.每个表都有自已独立的表空间。</strong><br><strong>2.每个表的数据和索引都会存在自已的表空间中。</strong><br><strong>3.可以实现单表在不同的数据库中移动。</strong><br><strong>4.空间可以回收（drop/truncate table方式操作表空间不能自动回收）</strong><br><strong>5.对于使用独立表空间的表，不管怎么删除，表空间的碎片不会太严重的影响性能，而且还有机会处理。</strong></p><h4 id="缺点："><strong>缺点：</strong></h4><p><strong>单表增加比共享空间方式更大。</strong></p><h4 id="结论："><strong>结论：</strong></h4><p><strong>共享表空间在Insert操作上有一些优势，但在其它都没独立表空间表现好。</strong><br><strong>当启用独立表空间时，请合理调整一下 innodb_open_files 参数。</strong></p><h4 id="两个重要参数：">两个重要参数：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">innodb_data_file_path<br>innodb_data_home_dir<br></code></pre></td></tr></table></figure><p><strong>这两个参数看参考文献的时候一直没有理解，先说明如下</strong></p><p><strong>我的my.cnf</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#innodb_data_home_dir = /var/lib/mysql/</span><br><span class="hljs-comment">#innodb_data_file_path = ibdata1:10M:autoextend</span><br></code></pre></td></tr></table></figure><p><strong>为了在 MySQL-Max-3.23 中使用 InnoDB 表，你必须在配置文件<code>‘my.cnf’</code>中的 <code>[mysqld]</code> 区中详细指定配置参数。</strong></p><p><strong>作为最小设置，在 3.23 中你必须在 <code>innodb_data_file_path</code> 上指定数据文件名能及大小。</strong></p><p><strong>如果在<code>‘my.cnf’</code>中没有指定<code>innodb_data_home_dir</code>，系统将在 MySQL 的 <code>datadir</code> 目录下创建数据文件。</strong></p><p><strong>如果将<code> innodb_data_home_dir</code> 设为一个空串，那可以在 <code>innodb_data_file_path</code> 中给定一个绝对路径。</strong></p><p><strong>在 MySQL-4.0 中可以不设定 <code>innodb_data_file_path</code> ：MySQL-4.0 将默认地在 <code>datadir</code> 目录下建立一个 10 MB 大小自扩充(auto-extending)的文件<code>‘ibdata1’</code>(在MySQL-4.0.0 与 4.0.1 中数据文件的大小为 64 MB 并且是非自扩充的(not auto-extending))。</strong></p><p><strong>为了得到更好的性能你必须所示的例子明确地设定 InnoDB 启动参数。</strong></p><p><strong>从 3.23.50 版和 4.0.2 版开始，InnoDB 允许在 <code>innodb_data_file_path</code> 中设置的最一个数据文件描述为 auto-extending。 <code>innodb_data_file_path</code> 语法如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs as3">pathtodatafile:sizespecification;pathtodatafile:sizespec;...<br>    ...;pathtodatafile:sizespec[:autoextend[:max:sizespecification]]<br></code></pre></td></tr></table></figure><p><strong>如果用 autoextend 选项描述最后一个数据文件，当 InnoDB 用尽所有表自由空间后将会自动扩充最后一个数据文件，每次增量为 8 MB。示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs as3">innodb_data_home_dir &#x3D;<br>innodb_data_file_path &#x3D; &#x2F;ibdata&#x2F;ibdata1:100M:autoextend<br></code></pre></td></tr></table></figure><p><strong>指定 InnoDB 只建立一个最初大小为 100 MB 并且当表空间被用尽时以 8MB 每块增加的数据文件。如果硬盘空间不足，可以再添加一个数据文件并将其放在其它的硬盘中。 举例来说：先检查硬盘空间的大小，设定<code>ibdata1</code>文件使它接近于硬盘空余空间大小并为 1024 * 1024 bytes (= 1 MB)的倍数， 将<code> ibdata1</code> 明确地指定在<code> innodb_data_file_path</code> 中。在此之后可以添加另一个数据文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">innodb_data_home_dir =<br>innodb_data_file_path = /ibdata/ibdata1:988M;/disk2/ibdata2:50M:autoextend<br></code></pre></td></tr></table></figure><p><strong>注意：设定文件大小时一定要注意你的OS是否有最大文件尺寸为2GB的限制！InnoDB是不会注意你的OS文件尺寸限制的， 在一些文件系统中你可能要设定最大容量限制：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs as3">innodb_data_home_dir &#x3D;<br>innodb_data_file_path &#x3D; &#x2F;ibdata&#x2F;ibdata1:100M:autoextend:max:2000M<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、MySQL数据库文件介绍&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MySQL的每个数据库都对应存放在一个与数据库同名的文件夹中，MySQL数据库文件包括MySQL所建数据库文件和MySQL所用存储引擎创建的数据库文件。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、MySQL
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务日志</title>
    <link href="https://wsdlxgp.top/posts/4c37.html"/>
    <id>https://wsdlxgp.top/posts/4c37.html</id>
    <published>2020-06-16T16:01:10.000Z</published>
    <updated>2020-06-19T05:16:26.737Z</updated>
    
    <content type="html"><![CDATA[<h1>事务日志(或称redo日志)</h1><p><strong>事务日志（InnoDB特有的日志）可以帮助提高事务的效率。使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。事务日志采用追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。事务日志持久以后，内存中被修改的数据在后台可以慢慢的刷回到磁盘。目前大多数的存储引擎都是这样实现的。 如果数据的修改已经记录到事务日志并持久化，但数据本身还没有写回磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这部分修改的数据。具有的恢复方式则视存储引擎而定。</strong></p><h4 id="查看事务日志的定义："><strong>查看事务日志的定义：</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show global variables like &#39;%log%&#39;;<br></code></pre></td></tr></table></figure><h5 id="显示结果">显示结果</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| innodb_flush_log_at_timeout | 1 |<br>| innodb_flush_log_at_trx_commit | 1 #在事务提交时innodb是否同步日志从缓冲区到文件中，当这个值为1（默认值）之时，在每个事务提交时，日志缓冲被写到日志文件，对日志文件做到磁盘操作的刷新，性能会很差造成大量的磁盘I&#x2F;O但这种方式最安全；如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘。设置为0，日志缓冲每秒一次地被写到日志文件，并且对日志文件做到磁盘操作的刷新，但是在一个事务提交不做任何操作。<br>注：刷写的概念<br>刷写其实是两个操作，刷（flush）和写（write），区分这两个概念是很重要的。在大多数的操作系统中，把Innodb的log buffer（内存）写入日志（调用系统调用write），只是简单的把数据移到操作系统缓存中，操作系统缓存同样指的是内存。并没有实际的持久化数据。<br>所以，通常设为0和2的时候，在崩溃或断电的时候会丢失最后一秒的数据，因为这个时候数据只是存在于操作系统缓存。之所以说“通常”，可能会有丢失不只1秒的数据的情况，比如说执行flush操作的时候阻塞了。<br>总结<br>设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2,如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能<br>|<br>| innodb_locks_unsafe_for_binlog | OFF |<br>| innodb_log_buffer_size | 16777216 |<br>| innodb_log_checksums | ON<br>|<br>| innodb_log_compressed_pages | ON |<br>| innodb_log_file_size | 50331648 #日志文件大小 |<br>| innodb_log_files_in_group | 2 # DB中设置几组事务日志，默认是2<br>|<br>| innodb_log_group_home_dir | .&#x2F; #定义innodb事务日志组的位置,此位置设置默认为<br>MySQL的datadir |<br></code></pre></td></tr></table></figure><p><strong>每个事务日志都是大小为50兆的文件（不同版本的<code>mysql</code>有差异）： 在<code>mysql</code>中默认以<code>ib_logfile0</code>,<code>ib_logfile1</code>名称存在</strong></p><h1>慢查询日志：slow query log</h1><p><strong>顾名思义，慢查询日志中记录的是执行时间较长的query，也就是我们常说的slow query。 慢查询日志采用的是简单的文本格式，可以通过各种文本编辑器查看其中的内容。其中 记录了语句执行的时刻，执行所消耗的时间，执行用户，连接主机等相关信息。 慢查询日志的作用： 慢查询日志是用来记录执行时间超过指定时间的查询语句。通过慢查询日志，可以查找出哪些查询语句的执行效率很低，以便进行优化。一般建议开启，它对服务器性能的影响微乎其微，但是可以记录mysql服务器上执行了很长时间的查询语句。可以帮助我们定位性能问题的。MySQL 还提供了专门用来分析满查询日志的工具程序mysqldumpslow，用来帮助数据库管理人员解决可能存在的性能问题。 查看慢查询日志的定义：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show global variables like &#39;%slow_query_log%&#39;;<br>+---------------------+------------------------------------+<br>| Variable_name       | Value                              |<br>+---------------------+------------------------------------+<br>| slow_query_log      | OFF                                |<br>| slow_query_log_file | &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;192-slow.log |<br>+---------------------+------------------------------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; show global variables like &#39;%long%&#39;;<br>+----------------------------------------------------------+-----------+<br>| Variable_name                                            | Value     |<br>+----------------------------------------------------------+-----------+<br>| long_query_time                                          | 10.000000 |<br>| performance_schema_events_stages_history_long_size       | 10000     |<br>| performance_schema_events_statements_history_long_size   | 10000     |<br>| performance_schema_events_transactions_history_long_size | 10000     |<br>| performance_schema_events_waits_history_long_size        | 10000     |<br>+----------------------------------------------------------+-----------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>**启动和设置慢查询日志： **</p><h3 id="方法1：通过配置文件my-cnf开启慢查询日志：">方法1：通过配置文件my.cnf开启慢查询日志：</h3><blockquote><p><strong>注：在不同的mysql版本中，开启慢查询日志参数不太一样，不过都可以通过 show variables like “%slow%” 和show variables like &quot;%long%&quot;查看出来。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show global variables like &#39;%slow%&#39;;<br>+---------------------------+------------------------------------------+<br>| Variable_name | Value |<br>+---------------------------+------------------------------------------+<br>| log_slow_admin_statements | OFF |<br>| log_slow_slave_statements | OFF |<br>| slow_launch_time | 2 |<br>| slow_query_log | OFF |<br>| slow_query_log_file | &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;localhost-slow.log |<br>+---------------------------+------------------------------------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>其中： slow_query_log： off关闭状态 on开启状态 slow_query_log_file 慢查询日志存放地点 long_query_time选项来设置一个时间值，时间以秒为单位，可以精确到微秒。如果查询时间超过了这个时间值（默认为10秒），这个查询语句将被记录到慢查询日志中, 设置为0的话表示记录所有的查询。 slow_launch_time 表示如果建立线程花费了比这个值更长的时间,slow_launch_threads 计数器将增加 注：如果不指定存储路径，慢查询日志默认存储到mysql数据库的数据文件下，如果不指定文件名，默认文件名为hostname-slow.log 修改my.cnf文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>slow_query_log=1<br>slow_query_log_file=/usr/local/mysql/data/mysql-slow.log<br>long_query_time=1<br>slow_launch_time=1<br></code></pre></td></tr></table></figure><p><strong>重启mysqld服务 再次查询慢查询日志定义</strong></p><h3 id="方法2：通过登录mysql服务器直接定义，方式如下："><strong>方法2：通过登录mysql服务器直接定义，方式如下：</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt;set global slow_query_log&#x3D;1; #开启慢查询日志<br>Query OK, 0 rowsaffected (0.35 sec)<br>mysql&gt;set session long_query_time&#x3D;0.0001; #更改时间（当前session中，退出则重置）<br>Query OK, 0 rowsaffected (0.00 sec)<br>mysql&gt;set global long_query_time&#x3D;0.0001; #更改时间（全局中，重启服务则重置）<br>mysql&gt; SHOW VARIABLES LIKE &#39;long%&#39;; #查询定义时间<br></code></pre></td></tr></table></figure><h4 id="查看慢查询日志">查看慢查询日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; use mysql<br>mysql&gt; select user,host from user where user&#x3D;&quot;root&quot;;  <br>+------+-----------+<br>| user | host      |<br>+------+-----------+<br>| root | localhost |<br>+------+-----------+<br>1 row in set (0.02 sec)<br></code></pre></td></tr></table></figure><p><strong>或用系统查看文件内容命令如cat直接查看慢日志文件</strong></p><p><strong>第一行表示记录日志时的时间。其格式是 YYYY-MM-DD HH:MM:SS。我们可以看出上面的查询记录于 2016 年 8 月 29 日下午 15:47：24 - 注意：这个是服务器时间. MySql 用户、服务器以及主机名第三行表示总的查询时间、锁定时间、&quot;发送&quot;或者返回的行数 Query_time: 0.000304 表示用了0.000304秒 Lock_time: 0.000128 表示锁了0.000128秒 Rows_sent: 4 表示返回4行 Rows_examined: 4 表示一共查了4行 SETtimestamp=UNIXTIME; 这是查询实际发生的时间 何将其变成一个有用的时间，将 Unix 时间转成一个可读的时间，可以使用 date –d@日志中的时间戳可以看到查询进行的同时记录了该日志 ，但是对于一台超负载的服务器常常并非如此。因此记住：SETtimestamp= value 才是实际的查询的执行时间。</strong></p><p><strong>慢查询分析mysqldumpslow 们可以通过打开log文件查看得知哪些SQL执行效率低下。从日志中，可以发现查询时间超过long_query_time时间的query为慢查询，而小于long_query_time时间的没有出现在此日志中。 如果慢查询日志中记录内容很多，可以使用mysqldumpslow工具（MySQL客户端安装自带）来对慢查询日志进行分类汇总。mysqldumpslow对日志文件进行了分类汇总，显示汇总后摘要结果 进入log的存放目录，运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@localhost data]# mysqldumpslow mysqld-slow.log<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">注： mysqldumpslow -s c -t 10 &#x2F;database&#x2F;mysql&#x2F;slow-query.log 这会输出记录次数最多<br>的10条SQL语句，其中： -s, 是表示按照何种方式排序，c、t、l、r分别是按照记录次数、时间、查询时<br>间、返回的记录数来排序，ac、at、al、ar，表示相应的倒序； -t, 是top n的意思，即为返回前面多少条<br>的数据； -g, 后边可以写一个正则匹配模式，大小写不敏感的； 例如： &#x2F;path&#x2F;mysqldumpslow -s r -t 10<br>&#x2F;database&#x2F;mysql&#x2F;slow-log 得到返回记录集最多的10个查询。<br>&#x2F;path&#x2F;mysqldumpslow -s t -t 10 -g “left join” &#x2F;database&#x2F;mysql&#x2F;slow-log 得到按照时间排序的前10条里面含有左连接的查询语句。<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;事务日志(或称redo日志)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;事务日志（InnoDB特有的日志）可以帮助提高事务的效率。使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。事务日志
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>mysql二进制日志</title>
    <link href="https://wsdlxgp.top/posts/af18.html"/>
    <id>https://wsdlxgp.top/posts/af18.html</id>
    <published>2020-06-16T16:00:01.000Z</published>
    <updated>2020-06-19T05:16:18.614Z</updated>
    
    <content type="html"><![CDATA[<h1>一、什么是二进制日志</h1><p><strong>MySQL的二进制日志（binary log）是一个二进制文件，主要用于记录修改数据或有可能引起数据变更的MySQL语句。二进制日志（binary log）中记录了对MySQL数据库执行更改的所有操作，并且记录了语句发生时间、执行时长、操作数据等其它额外信息，但是它不记录SELECT、SHOW等那些不修改数据的SQL语句。二进制日志（binary log）主要用于数据库恢复和主从复制，以及审计（audit）操作。</strong></p><p><strong>开启二进制日志对性能的开销很小，带来的好处远大于坏处。</strong></p><h1>二、开启和设置二进制日志</h1><h2 id="1、查看二进制日志状态">1、查看二进制日志状态</h2><p><strong>默认情况下二进制日志是关闭的。</strong></p><p><strong>系统变量log_bin的值为<code>OFF</code>表示没有开启二进制日志，<code>ON</code>表示开启了二进制日志，如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;log_bin&#39;;<br>+---------------------------------+------------------------------------+<br>| Variable_name                   | Value                              |<br>+---------------------------------+------------------------------------+<br>| log_bin                         | OFF                                |<br>+---------------------------------+------------------------------------+<br>1 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="2、开启二进制日志">2、开启二进制日志</h2><h3 id="（1）修改配置文件并重启mysql服务">（1）修改配置文件并重启mysql服务</h3><p><strong>如果需要开启二进制日志，则必须在配置文件中[mysqld]下面添加log-bin [=DIR[filename]] 。</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">DIR参数指定二进制文件的存储路径；<br>filename参数指定二级制文件的文件名。 <br>其中filename可以任意指定，但最好有一定规范。<br>系统变量log_bin是静态参数，不能动态修改的（因为它不是Dynamic Variable）。<br></code></pre></td></tr></table></figure><p><strong>内容如下所示：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server-id</span> = <span class="hljs-number">1</span>              <span class="hljs-comment"># mysql5.7必须加，否则mysql服务启动报错</span><br><span class="hljs-attr">log-bin</span> = mysql_bin_log    <span class="hljs-comment"># 路径及命名，默认在data下</span><br><span class="hljs-attr">expire_logs_days</span> = <span class="hljs-number">10</span>      <span class="hljs-comment"># 过期时间,二进制文件自动删除的天数,0代表不删除</span><br><span class="hljs-attr">max_binlog_size</span> = <span class="hljs-number">100</span>M     <span class="hljs-comment"># 单个日志文件的大小限制，超出会新建一个</span><br></code></pre></td></tr></table></figure><h4 id="操作步骤：">操作步骤：</h4><blockquote><p><strong>Linux下的配置文件为/etc/my.cnf，Windows下的配置文件为my.ini。</strong></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[<span class="hljs-type">mysqld</span>]<br><br><span class="hljs-comment"># 省略部分内容</span><br>server<span class="hljs-literal">-id</span> = <span class="hljs-number">1</span>                     <span class="hljs-comment"># mysql5.7必须加，否则mysql服务启动报错</span><br>log<span class="hljs-literal">-bin</span> = mysql_bin_log           <span class="hljs-comment"># 路径及命名，默认在data下</span><br>expire_logs_days = <span class="hljs-number">10</span>             <span class="hljs-comment"># 过期时间,二进制文件自动删除的天数,0代表不删除</span><br>max_binlog_size = <span class="hljs-number">100</span>M            <span class="hljs-comment"># 单个日志文件大小</span><br><br>[<span class="hljs-type">root</span>@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># systemctl restart mysqld.service</span><br>[<span class="hljs-type">root</span>@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># systemctl status mysqld.service</span><br>● mysqld.service - MySQL Server<br>   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)<br>   Active: active (running) since 二 <span class="hljs-number">2020</span><span class="hljs-literal">-06</span><span class="hljs-literal">-16</span> <span class="hljs-number">17</span>:<span class="hljs-number">47</span>:<span class="hljs-number">34</span> CST; <span class="hljs-number">35</span>s ago<br>     Docs: man:mysqld(<span class="hljs-number">8</span>)<br>           http://dev.mysql.com/doc/refman/en/using<span class="hljs-literal">-systemd</span>.html<br>  <span class="hljs-keyword">Process</span>: <span class="hljs-number">78724</span> ExecStart=/usr/sbin/mysqld -<span class="hljs-literal">-daemonize</span> -<span class="hljs-literal">-pid</span><span class="hljs-operator">-file</span>=/var/run/mysqld/mysqld.pid <span class="hljs-variable">$MYSQLD_OPTS</span> (code=exited, status=<span class="hljs-number">0</span>/SUCCESS)<br>  <span class="hljs-keyword">Process</span>: <span class="hljs-number">78701</span> ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=<span class="hljs-number">0</span>/SUCCESS)<br> Main PID: <span class="hljs-number">78726</span> (mysqld)<br>    Tasks: <span class="hljs-number">27</span><br>   CGroup: /system.slice/mysqld.service<br>           └─<span class="hljs-number">78726</span> /usr/sbin/mysqld -<span class="hljs-literal">-daemonize</span> -<span class="hljs-literal">-pid</span><span class="hljs-operator">-file</span>=/var/run/mysqld/mysqld.pid<br><br><span class="hljs-number">6</span>月 <span class="hljs-number">16</span> <span class="hljs-number">17</span>:<span class="hljs-number">47</span>:<span class="hljs-number">25</span> my_oracle systemd[<span class="hljs-number">1</span>]: Starting MySQL Server...<br><span class="hljs-number">6</span>月 <span class="hljs-number">16</span> <span class="hljs-number">17</span>:<span class="hljs-number">47</span>:<span class="hljs-number">34</span> my_oracle systemd[<span class="hljs-number">1</span>]: Started MySQL Server.<br></code></pre></td></tr></table></figure><h3 id="（2）查看二进制日志状态">（2）查看二进制日志状态</h3><p><strong>重启MySQL后，你就会发现log_bin变为了ON，二进制日志（binary log）默认放在数据目录下（系统变量datadir下）。</strong></p><blockquote><p><strong>show variables like ‘log_bin%’;</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;log_bin%&#39;;<br>+---------------------------------+------------------------------------+<br>| Variable_name                   | Value                              |<br>+---------------------------------+------------------------------------+<br>| log_bin                         | ON                                 |<br>| log_bin_basename                | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql_bin_log       |<br>| log_bin_index                   | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql_bin_log.index |<br>| log_bin_trust_function_creators | OFF                                |<br>| log_bin_use_v1_row_events       | OFF                                |<br>+---------------------------------+------------------------------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（3）查看当前服务器所有的二进制日志文件">（3）查看当前服务器所有的二进制日志文件</h3><blockquote><p><strong>show binary logs;</strong></p></blockquote><p><strong>MySQL二进制日志存储了所有的变更信息，MySQL二进制日志经常使用。当MySQL创建二进制日志文件时，首先创建一个以’filename’为名称，以’.index’为后缀的文件；在创建一个以’filename’为名称，以’.000001’为后缀的文件。当MySQL服务重启一次，以’.000001’为后缀的文件会增加一个，并且后缀名加1递增。如果日志长度超过max_binlog_size的上限，也会创建一个新的日志。 Show binary logs;可以查看当前的*二进制日志文件个数及其文件名。二进制日志并不能直接查看，如果想要查看日志内容，可以通过mysqlbinlog命令查看。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show binary logs;<br>+----------------------+-----------+<br>| Log_name             | File_size |<br>+----------------------+-----------+<br>| mysql_bin_log.000001 |       120 |<br>+----------------------+-----------+<br>1 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>或者：</strong></p><blockquote><p><strong>show master logs;</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show master logs;<br>+----------------------+-----------+<br>| Log_name             | File_size |<br>+----------------------+-----------+<br>| mysql_bin_log.000001 |       120 |<br>+----------------------+-----------+<br>1 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（4）查看当前二进制日志文件状态">（4）查看当前二进制日志文件状态</h3><blockquote><p><strong>show master status;</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show master status;<br>+----------------------+----------+--------------+------------------+-------------------+<br>| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+----------------------+----------+--------------+------------------+-------------------+<br>| mysql_bin_log.000001 |      120 |              |                  |                   |<br>+----------------------+----------+--------------+------------------+-------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h1>三、切换二进制日志</h1><p><strong>执行 flush logs 可以刷新切换二进制文件。</strong></p><p><strong>每次重启MySQL服务也会生成一个新的二进制日志文件，相当于二进制日志切换。</strong></p><h2 id="1、重启MySQL服务切换日志">1、重启MySQL服务切换日志</h2><h3 id="（1）重启MySQL服务器前">（1）重启MySQL服务器前</h3><p><strong>查看二进制日志状态，如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show master status;<br>+----------------------+----------+--------------+------------------+-------------------+<br>| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+----------------------+----------+--------------+------------------+-------------------+<br>| mysql_bin_log.000001 |      120 |              |                  |                   |<br>+----------------------+----------+--------------+------------------+-------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（2）重启MySQL服务">（2）重启MySQL服务</h3><blockquote><p><strong>service mysql restart</strong></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-number">192</span> ~]<span class="hljs-comment"># service mysql restart</span><br>Shutting down MySQL.... SUCCESS! <br>Starting MySQL.. SUCCESS! <br>[<span class="hljs-type">root</span>@<span class="hljs-number">192</span> ~]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="（3）查看日志">（3）查看日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show master status;<br>+----------------------+----------+--------------+------------------+-------------------+<br>| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+----------------------+----------+--------------+------------------+-------------------+<br>| mysql_bin_log.000002 |      120 |              |                  |                   |<br>+----------------------+----------+--------------+------------------+-------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="2、切换二进制日志并查看">2、切换二进制日志并查看</h2><p><strong>执行flush logs刷新，切换二进制文件，并查看二进制日志状态。如下所示：</strong></p><blockquote><p><strong>flush logs;</strong></p><p><strong>show master status;</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; flush logs;<br>Query OK, 0 rows affected (0.06 sec)<br><br>mysql&gt; show master status;<br>+----------------------+----------+--------------+------------------+-------------------+<br>| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+----------------------+----------+--------------+------------------+-------------------+<br>| mysql_bin_log.000003 |      120 |              |                  |                   |<br>+----------------------+----------+--------------+------------------+-------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>切换二进制日志时，你会看到这些number会不断递增。另外，除了这些二进制日志文件外，你会看到还生成了一个mysql-bin.index的文件，这个文件中存储所有二进制日志文件的清单又称为二进制文件的索引。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 ~]# ll /var/lib/mysql/<br><span class="hljs-meta">#</span><span class="bash">源码安装路径是：/usr/<span class="hljs-built_in">local</span>/mysql/data/</span><br>-rw-rw----. 1 mysql mysql      171 4月  10 11:25 mysql_bin_log.000001<br>-rw-rw----. 1 mysql mysql      143 4月  10 11:25 mysql_bin_log.000002<br>-rw-rw----. 1 mysql mysql      143 4月  10 11:25 mysql_bin_log.000003<br>-rw-rw----. 1 mysql mysql       92 4月  10 11:25 mysql_bin_log.index<br><br>[root@192 ~]# cat /var/lib/mysql/mysql_bin_log.index <br>./mysql_bin_log.000001<br>./mysql_bin_log.000002<br>./mysql_bin_log.000003<br></code></pre></td></tr></table></figure><h1>四、查看二进制日志</h1><h2 id="1、查看当前日志">1、查看当前日志</h2><blockquote><p><strong>show binlog events;</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show binlog events;<br>+----------------------+-----+-------------+-----------+-------------+---------------------------------------+<br>| Log_name             | Pos | Event_type  | Server_id | End_log_pos | Info                                  |<br>+----------------------+-----+-------------+-----------+-------------+---------------------------------------+<br>| mysql_bin_log.000001 |   4 | Format_desc |         1 |         120 | Server ver: 5.6.42-log, Binlog ver: 4 |<br>| mysql_bin_log.000001 | 120 | Rotate      |         1 |         171 | mysql_bin_log.000002;pos&#x3D;4            |<br>+----------------------+-----+-------------+-----------+-------------+---------------------------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="2、查看指定日志">2、查看指定日志</h2><h3 id="（1）模拟产生二进制日志">（1）模拟产生二进制日志</h3><blockquote><p><strong>建库、建表、插入数据</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create database demo;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; use demo;<br>Database changed<br><br>mysql&gt; create table student(stuNo int, stuName varchar(25));<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; insert into student values(1001,&#39;John&#39;);<br>Query OK, 1 row affected (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（2）查看日志">（2）查看日志</h3><blockquote><p><strong>show binlog events in ‘mysql_bin_log.000002’;</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show binlog events in &#39;mysql_bin_log.000002&#39;;<br>+----------------------+-----+-------------+-----------+-------------+------------------------------------------------------------------+<br>| Log_name             | Pos | Event_type  | Server_id | End_log_pos | Info                                                             |<br>+----------------------+-----+-------------+-----------+-------------+------------------------------------------------------------------+<br>| mysql_bin_log.000002 |   4 | Format_desc |         1 |         120 | Server ver: 5.6.42-log, Binlog ver: 4                            |<br>| mysql_bin_log.000002 | 120 | Query       |         1 |         214 | create database demo                                             |<br>| mysql_bin_log.000002 | 214 | Query       |         1 |         340 | use &#96;demo&#96;; create table student(stuNo int, stuName varchar(25)) |<br>| mysql_bin_log.000002 | 340 | Query       |         1 |         419 | BEGIN                                                            |<br>| mysql_bin_log.000002 | 419 | Query       |         1 |         532 | use &#96;demo&#96;; insert into student values(1001,&#39;John&#39;)              |<br>| mysql_bin_log.000002 | 532 | Xid         |         1 |         563 | COMMIT &#x2F;* xid&#x3D;15 *&#x2F;                                              |<br>+----------------------+-----+-------------+-----------+-------------+------------------------------------------------------------------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><blockquote><p><strong>show binlog events in ‘mysql_bin_log.000002’ from 419;</strong></p><p><strong>查看某个节点</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show binlog events in &#39;mysql_bin_log.000002&#39; from 419;<br>+----------------------+-----+------------+-----------+-------------+-----------------------------------------------------+<br>| Log_name             | Pos | Event_type | Server_id | End_log_pos | Info                                                |<br>+----------------------+-----+------------+-----------+-------------+-----------------------------------------------------+<br>| mysql_bin_log.000002 | 419 | Query      |         1 |         532 | use &#96;demo&#96;; insert into student values(1001,&#39;John&#39;) |<br>| mysql_bin_log.000002 | 532 | Xid        |         1 |         563 | COMMIT &#x2F;* xid&#x3D;15 *&#x2F;                                 |<br>+----------------------+-----+------------+-----------+-------------+-----------------------------------------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><blockquote><p><strong>show binlog events in ‘mysql_bin_log.000002’ from 419 limit 1;</strong></p><p><strong>查看从419开始的一条数据</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show binlog events in &#39;mysql_bin_log.000002&#39; from 419 limit 1;<br>+----------------------+-----+------------+-----------+-------------+-----------------------------------------------------+<br>| Log_name             | Pos | Event_type | Server_id | End_log_pos | Info                                                |<br>+----------------------+-----+------------+-----------+-------------+-----------------------------------------------------+<br>| mysql_bin_log.000002 | 419 | Query      |         1 |         532 | use &#96;demo&#96;; insert into student values(1001,&#39;John&#39;) |<br>+----------------------+-----+------------+-----------+-------------+-----------------------------------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; show binlog events in &#39;mysql_bin_log.000002&#39; from 419 limit 2;<br>+----------------------+-----+------------+-----------+-------------+-----------------------------------------------------+<br>| Log_name             | Pos | Event_type | Server_id | End_log_pos | Info                                                |<br>+----------------------+-----+------------+-----------+-------------+-----------------------------------------------------+<br>| mysql_bin_log.000002 | 419 | Query      |         1 |         532 | use &#96;demo&#96;; insert into student values(1001,&#39;John&#39;) |<br>| mysql_bin_log.000002 | 532 | Xid        |         1 |         563 | COMMIT &#x2F;* xid&#x3D;15 *&#x2F;                                 |<br>+----------------------+-----+------------+-----------+-------------+-----------------------------------------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h1>五、使用二进制日志恢复数据库</h1><p><strong>如果开启了二进制日志，出现了数据丢失，可以通过二进制日志恢复数据库，语法如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysqlbinlog [option] filename | mysql -u user -p passwd<br></code></pre></td></tr></table></figure><p><strong>option的参数主要有两个 <code>--start-datetime</code> <code>--stop-datetime</code> 和 <code>start-position</code> <code>--stop-position</code> ,前者指定恢复的时间点，后者指定恢复的位置（位置指的是二进制文件中 # at 580 580就是位置），原理就是把记录的语句重新执行了一次。如果恢复了两次。会产生重复数据。</strong></p><h2 id="1、按时间点恢复数据">1、按时间点恢复数据</h2><h3 id="（1）从日志开头截止到某个时间点的恢复">（1）从日志开头截止到某个时间点的恢复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysqlbinlog [--no-defaults] --stop-datetime&#x3D;’年-月-日 小时:分钟:秒’ 二进制日志 | mysql -u 用户名 -p<br></code></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqlbinlog [--no-defaults] --stop-datetime=’2020-03-18 10:30:26’ /var/lib/mysql/mysql_bin_log.000005 | mysql -uroot -p<br></code></pre></td></tr></table></figure><h3 id="（2）从某个时间点到日志结尾的恢复">（2）从某个时间点到日志结尾的恢复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysqlbinlog [--no-defaults] --start-datetime&#x3D;’年-月-日 小时:分钟:秒’ 二进制日志 | mysql -u 用户名 -p<br></code></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqlbinlog [--no-defaults] --start-datetime=’2020-01-10 8:20:20’ /var/lib/mysql/mysql_bin_log.000005 | mysql -uroot -p<br></code></pre></td></tr></table></figure><h3 id="（3）从某个时间点到某个时间点的恢复">（3）从某个时间点到某个时间点的恢复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysqlbinlog [--no-defaults] --start-datetime&#x3D;’年-月-日 小时:分钟:秒’ --stop-datetime&#x3D;’年-月-日小时:分钟:秒’ 二进制日志 | mysql -u 用户名 -p<br></code></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqlbinlog [--no-defaults] --start-datetime=’2010-11-10 8:20:20’ --stop-datetime=’2020-03-18 10:30:26’ /var/lib/mysql/mysql_bin_log.000005 | mysql -uroot -p<br></code></pre></td></tr></table></figure><h2 id="2、按位置恢复数据">2、按位置恢复数据</h2><h3 id="（1）从某个位置到日志结尾的恢复">（1）从某个位置到日志结尾的恢复</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/mysql/bin/mysqlbinlog --start-position='275' /var/lib/mysql/mysql_bin_log.000005 | mysql -uroot -p<br>Enter password: <br>[root@bogon ~]#<br></code></pre></td></tr></table></figure><h3 id="（2）从日志开头位置到日志结尾的恢复">（2）从日志开头位置到日志结尾的恢复</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/mysql/bin/mysqlbinlog --stop-position='465' /var/lib/mysql/mysql_bin_log.000005 | mysql -uroot -p<br>Enter password: <br>[root@bogon ~]#<br></code></pre></td></tr></table></figure><h3 id="（3）从某个位置到某个位置的恢复">（3）从某个位置到某个位置的恢复</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/mysql/bin/mysqlbinlog --start-position='4' --stop-position='120' /var/lib/mysql/mysql_bin_log.000005 | mysql -uroot -p<br>Enter password: <br>[root@bogon ~]#<br></code></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; drop database demo;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows in set (0.00 sec)<br><br>[root@192 ~]# &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqlbinlog --start-position&#x3D;&#39;4&#39; --stop-position&#x3D;&#39;313&#39; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;mysql_bin_log.000002 | mysql -uroot -p<br><br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| demo               |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h1>六、删除二进制日志</h1><h2 id="1、删除某个日志之前的所有二进制日志文件">1、删除某个日志之前的所有二进制日志文件</h2><p><strong><code>purge binary logs to xxx;</code> 表示删除某个日志之前的所有二进制日志文件，这个命令会修改index中相关数据。</strong></p><p><strong>如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show master logs;<br>+----------------------+-----------+<br>| Log_name             | File_size |<br>+----------------------+-----------+<br>| mysql_bin_log.000001 |       143 |<br>| mysql_bin_log.000002 |       586 |<br>| mysql_bin_log.000003 |       171 |<br>| mysql_bin_log.000004 |       171 |<br>| mysql_bin_log.000005 |       120 |<br>+----------------------+-----------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt; purge binary logs to &#39;mysql_bin_log.000002&#39;;<br>Query OK, 0 rows affected (0.03 sec)<br><br>mysql&gt; show master logs;<br>+----------------------+-----------+<br>| Log_name             | File_size |<br>+----------------------+-----------+<br>| mysql_bin_log.000002 |       586 |<br>| mysql_bin_log.000003 |       171 |<br>| mysql_bin_log.000004 |       171 |<br>| mysql_bin_log.000005 |       120 |<br>+----------------------+-----------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>查看日志清单：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 ~]# cat /var/lib/mysql/mysql_bin_log.index <br>./mysql_bin_log.000002<br>./mysql_bin_log.000003<br>./mysql_bin_log.000004<br>./mysql_bin_log.000005<br></code></pre></td></tr></table></figure><h2 id="2、清除某个时间点以前的二进制日志文件">2、清除某个时间点以前的二进制日志文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; purge binary logs before &#39;2020-03-10 10:10:00&#39;;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3、清除7天前的二进制日志文件">3、清除7天前的二进制日志文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; purge master logs before date_sub( now( ), interval 7 day);<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="4、清除所有的二进制日志文件（当前不存在主从复制关系）">4、清除所有的二进制日志文件（当前不存在主从复制关系）</h2><p><strong>reset之后，从000001开始生成全新空日志。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show master logs;<br>+----------------------+-----------+<br>| Log_name             | File_size |<br>+----------------------+-----------+<br>| mysql_bin_log.000002 |       586 |<br>| mysql_bin_log.000003 |       171 |<br>| mysql_bin_log.000004 |       171 |<br>| mysql_bin_log.000005 |       120 |<br>+----------------------+-----------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; reset master;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; show master logs;<br>+----------------------+-----------+<br>| Log_name             | File_size |<br>+----------------------+-----------+<br>| mysql_bin_log.000001 |       120 |<br>+----------------------+-----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="5、自动清理二进制日志文件">5、自动清理二进制日志文件</h2><p><strong>另外，我们也可以设置expire_logs_days参数，设置自动清理，其默认值为0,表示不启用过期自动删除功能，如果启用了自动清理功能，表示超出此天数的二进制日志文件将被自动删除，自动删除工作通常发生在MySQL启动时或flush日志时。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;expire_logs_days&#39;;<br>+------------------+-------+<br>| Variable_name    | Value |<br>+------------------+-------+<br>| expire_logs_days | 10    |<br>+------------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h1>七、停止二进制日志</h1><p><strong>可以通过修改配置文件停止二进制日志功能，但是需要重启数据库，mysql提供了语句可以在线停止二进制功能。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set sql_log_bin &#x3D; 0       # 停止二进制日志功能<br>set sql_log_bin &#x3D; 1       # 开启二进制日志功能<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、什么是二进制日志&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MySQL的二进制日志（binary log）是一个二进制文件，主要用于记录修改数据或有可能引起数据变更的MySQL语句。二进制日志（binary log）中记录了对MySQL数据库执行更改的所有操作，并且记录了语句发
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>mysql日志</title>
    <link href="https://wsdlxgp.top/posts/b6d.html"/>
    <id>https://wsdlxgp.top/posts/b6d.html</id>
    <published>2020-06-16T16:00:00.000Z</published>
    <updated>2020-06-19T05:16:11.919Z</updated>
    
    <content type="html"><![CDATA[<h1>mysql日志</h1><p><strong>MySQL日志记录了MySQL数据库日常操作和错误信息。MySQL有不同类型的日志文件（各自存储了不同类型的日志），从日志当中可以查询到MySQL数据库的运行情况、用户的操作、错误的信息等。</strong></p><h2 id="A：MySQL日志分为4大类">A：MySQL日志分为4大类</h2><ul><li><strong>错误日志：记录mysql服务的启动，运行或停止mysql服务时出现的问题</strong></li><li><strong>查询日志：记录建立的客户端的连接和执行的语句</strong></li><li><strong>二进制日志：记录所有更改数据的语句，可以用于数据的复制</strong></li><li><strong>慢查询日志：记录所有执行的时间超过long_query_time的所有查询或不使用索引的查询</strong></li></ul><p><strong>默认情况下，所有日志创建与MySQL数据目录中，通过刷新日志，可以强制MySQL关闭和重新打开日志文件，Flush logs刷新日志或者执行mysqladmin flush-logs 如果正使用MySQL复制功能，在复制服务器上可以维护更多日志文件，这种日志我们称为接替日志。启动日志功能会降低MySQL数据库的性能。</strong></p><h2 id="B：错误日志：Error-Log">B：错误日志：Error Log</h2><p><strong>在mysql数据库中，错误日志功能是默认开启的。默认情况下，错误日志存储在mysql数据库的数据目录中。错误日志文件通常的名称为hostname.err。其中，hostname表示服务器主机名。 错误日志信息可以自己进行配置的，错误日志所记录的信息是可以通过log-error和log-warnings来定义的，其中log-error是定义是否启用错误日志的功能和错误日志的存储位置，log-warnings是定义是否将警告信息也定义至错误日志中。默认情况下错误日志大概记录以下几个方面的信息：服务器启动和关闭过程中的信息（未必是错误信息，如mysql如何启动InnoDB的表空间文件的、如何初始化自己的存储引擎的等等）、服务器运行过程中的错误信息、事件调度器运行一个事件时产生的信息、在从服务器上启动服务器进程时产生的信息 注1：MySQL有很多系统变量可以设置，系统变量设置不同，会导致系统运行状态的不同。因此mysql提供两组命令，分别查看系统设置和运行状态。</strong></p><h2 id="C：MySQL日志缓存">C：MySQL日志缓存</h2><p><strong>一个高速、稳定、可靠的系统，缓存在其中必定起着至关重要的作用。MySQL日志处理也使用了缓存机制。MySQL日志最初存放在MySQL服务器的内存中，若超过指定的存储容量，内存中的日志则写（或者刷新flush）到外存中，以数据库表或者以文件的方式永远的保存在硬盘中。</strong></p><h3 id="1、查看系统设置：">1、查看系统设置：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW [GLOBAL | SESSION] VARIABLES [like_or_where] SHOW VARIABLES： shows the values of MySQL system variables.<br></code></pre></td></tr></table></figure><h3 id="2、运行状态：">2、运行状态：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW [GLOBAL | SESSION] STATUS [like_or_where] SHOW STATUS： provides server status information.<br></code></pre></td></tr></table></figure><h2 id="D：如何修改系统配置">D：如何修改系统配置</h2><h3 id="方法1：配置文件设置my-cnf-如：binlog-cache-size-1M">方法1：配置文件设置my.cnf 如：binlog_cache_size = 1M</h3><h3 id="方法2：set-global-binlog-cache-size-1048576-注">方法2：set global binlog_cache_size = 1048576; 注</h3><h3 id="2：查看mysql的版本">2：查看mysql的版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@localhost ~]# mysql -V<br>mysql Ver 14.14 Distrib 5.7.28, for Linux (x86_64) using EditLine wrapper<br></code></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; status;<br>--------------<br>mysql Ver 14.14 Distrib 5.7.28, for Linux (x86_64) using EditLine wrapper<br>Connection id: 5<br>Current database:<br>Current user: root@localhost<br>SSL: Not in use<br>Current pager: stdout<br>Using outfile: &#39;&#39;<br>Using delimiter: ;<br>Server version: 5.7.28 Source distribution<br>Protocol version: 10<br>Connection: Localhost via UNIX socket<br>Server characterset: utf8<br>Db characterset: utf8<br>Client characterset: utf8<br>Conn. characterset: utf8<br>UNIX socket: &#x2F;tmp&#x2F;mysql.sock<br>Uptime: 1 hour 12 min 8 sec<br>Threads: 1 Questions: 10 Slow queries: 0 Opens: 106 Flush tables: 1 Open<br>tables: 99 Queries per second avg: 0.002<br>--------------<br></code></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select version();<br>+-----------+<br>| version() |<br>+-----------+<br>| 5.7.28 |<br>+-----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="E-一般而言，日志级别的定义没有会话变量都只是在全局级别下进行定义-错误日志的状态：">E: 一般而言，日志级别的定义没有会话变量都只是在全局级别下进行定义 错误日志的状态：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show global variables like &#39;%log_error%&#39;;<br>+---------------------+---------------------------------+<br>| Variable_name | Value |<br>+---------------------+---------------------------------+<br>| binlog_error_action | ABORT_SERVER |<br>| log_error | &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;mysql.err |<br>| log_error_verbosity | 3 |<br>+---------------------+---------------------------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>其中 log_error定义为错误日志文件路径 log_error_verbosity:</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200616171633354.png" alt="image-20200616171633354"></p><p><strong>更改错误日志位置可以使用log-error来设置形式如下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">\#vi /etc/my.cnf<br>log-error = /usr/local/mysql/data/mysqld.err<br></code></pre></td></tr></table></figure><p><strong>查看mysql错误日志：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">tail /usr/<span class="hljs-built_in">local</span>/mysql/data/mysqld.err</span><br></code></pre></td></tr></table></figure><p><strong>为了方便维护需要，有时候会希望将错误日志中的内容做备份并重新开始记录，这时候就可以利用MySQL 的FLUSH LOGS 命令来告诉MySQL 备份旧日志文件并生成新的日志文件。备份文件名以“.old”结尾。 删除错误日志： 在mysql5.5.7之前：数据库管理员可以删除很长时间之前的错误日志，以保证mysql服务器上的硬盘空间。mysql数据库中，可以使用mysqladmin命令开启新的错误日志。mysqladmin命令的语法如下：mysqladmin –u root –p flush-logs也可以登录mysql数据库中使用FLUSH LOGS语句来开启新的错误日志。 在mysql5.5.7之后：服务器将关闭此项功能。只能使用重命名原来的错误日志文件，手动冲洗日志创建一个新的：方式如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">\# mv mysql.err mysql.old<br>\# mysqladmin -uroot -p flush-logs<br>Enter password:<br></code></pre></td></tr></table></figure><h2 id="F：-二进制日志">F： 二进制日志</h2><p><strong>主要记录MySQL数据库的变化，二进制日志以一种有效的格式，并且是事务安全的方式包含更新日志中可用的信息。二进制日志包含了所有更新了数据或者已经潜在更新了数据。二进制日志还包含关于每个更新数据库的语句的执行时间，它不包含没有修改任何数据的语句。使用二进制日志的主要目的是最大可能地恢复数据库。</strong></p><p><strong>启动二进制日志，默认情况下二进制日志是关闭的 编辑配置文件My.ini 或my.cnf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@localhost ~]# vim &#x2F;etc&#x2F;my.cnf<br>【格式】：<br>[mysqld]<br>log-bin<br>expire_logs_days &#x3D; 10<br>max_binlog_size &#x3D; 100M<br>log-bin [&#x3D;path&#x2F;[filename]] &#x2F;&#x2F;二进制日志[路径[指定日志文件的名字<br>Expire_logs_days &#x3D; 10 &#x2F;&#x2F;清除日志的天数<br>Max_binlog_size &#x3D; 100M &#x2F;&#x2F;单个日志文件的大小限制，超出会新建一个<br>默认为1GB<br>【重启mysql】<br></code></pre></td></tr></table></figure><p><strong><code>Show variables</code> 或<code>show variables like 'log_%';</code> 语句来查询日志设置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>mysql&gt; show variables like &#39;log_%&#39;;<br>+---------------------------------+-----------------------------------------------<br>--+<br>| Variable_name | Value<br>|<br>+---------------------------------+-----------------------------------------------<br>--+<br>| log_bin | ON<br>|<br>| log_bin_trust_function_creators | OFF<br>|<br>| log_error |<br>&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;localhost.localdomain.err |<br>| log_output | FILE<br>|<br>| log_queries_not_using_indexes | OFF<br>|<br>| log_slave_updates | OFF<br>|<br>| log_slow_queries | OFF<br>|<br>| log_warnings | 1<br>|<br>+---------------------------------+-----------------------------------------------<br>--+<br>8 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="【查看二进制日志】">【查看二进制日志】</h3><p><strong>MySQL二进制日志存储了所有的变更信息，MySQL二进制日志经常使用。当MySQL创建二进制日志文件时，首先创建一个以’filename’为名称，以’.index’为后缀的文件；在创建一个以’filename’为名称，以’.000001’为后缀的文件。当MySQL服务重启一次，以’.000001’为后缀的文件会增加一个，并且后缀名加1递增。如果日志长度超过max_binlog_size的上限，也会创建一个新的日志。 Show binary logs;可以查看当前的二进制日志文件个数及其文件名。二进制日志并不能直接查看，如果想要查看日志内容，可以通过mysqlbinlog命令查看</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW BINARY LOGS;<br>+------------------+-----------+<br>| Log_name | File_size |<br>+------------------+-----------+<br>| mysql-bin.000001 | 2189 |<br>| mysql-bin.000002 | 107 |<br>+------------------+-----------+<br>2 rows in set (0.06 sec)<br></code></pre></td></tr></table></figure><h3 id="【查看二进制日志的内容】-退出mysql在命令行">【查看二进制日志的内容】 退出mysql在命令行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@localhost data]# mysqlbinlog mysql-bin.000001<br>&#x2F;*!40019 SET @@session.max_insert_delayed_threads&#x3D;0*&#x2F;;<br>&#x2F;*!50003 SET @OLD_COMPLETION_TYPE&#x3D;@@COMPLETION_TYPE,COMPLETION_TYPE&#x3D;0*&#x2F;;<br>DELIMITER &#x2F;*!*&#x2F;;<br># at 4<br>#170826 11:40:02 server id 1 end_log_pos 107 Start: binlog v 4, server v<br>5.5.22-log created 170826 11:40:02 at startup<br>ROLLBACK&#x2F;*!*&#x2F;;<br>BINLOG &#39;<br>... ... 省略<br></code></pre></td></tr></table></figure><h3 id="【删除二进制日志】">【删除二进制日志】</h3><p><strong>MySQL的二进制文件可以配置自动删除，同时MySQL提供了手动删除二进制文件的方法RESET MASTER 删除所有的二进制日志文件；PURGE MASTER LOGS只删除部分二进制日志文件。 Reset master; 删除所有二进制日志 Purge master logs to ‘二进制名’ 删除单个二进制日志之前的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; PURGE MASTER LOGS TO &quot;mysql-bin.000012&quot;;<br>Query OK, 0 rows affected (0.02 sec)<br>Purge binary logs before ‘date’ 删除指定日期之前的日志<br>mysql&gt; PURGE MASTER LOGS BEFORE &#39;20170101&#39;;<br>Query OK, 0 rows affected (0.07 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;mysql日志&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MySQL日志记录了MySQL数据库日常操作和错误信息。MySQL有不同类型的日志文件（各自存储了不同类型的日志），从日志当中可以查询到MySQL数据库的运行情况、用户的操作、错误的信息等。&lt;/strong&gt;&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL创建触发器</title>
    <link href="https://wsdlxgp.top/posts/184.html"/>
    <id>https://wsdlxgp.top/posts/184.html</id>
    <published>2020-06-15T16:00:00.000Z</published>
    <updated>2020-06-19T05:16:02.473Z</updated>
    
    <content type="html"><![CDATA[<h1>一、MySQL创建触发器（CREATE TRIGGER）</h1><h2 id="基本语法">基本语法</h2><p><strong>在 MySQL 5.7 中，可以使用 CREATE TRIGGER 语句创建触发器。</strong></p><h4 id="语法格式如下：">语法格式如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE &lt;触发器名&gt; &lt; BEFORE | AFTER &gt;<br>&lt;INSERT | UPDATE | DELETE &gt;<br>ON &lt;表名&gt; FOR EACH Row&lt;触发器主体&gt;<br></code></pre></td></tr></table></figure><h2 id="语法说明如下。">语法说明如下。</h2><h3 id="1-触发器名">1) 触发器名</h3><p><strong>触发器的名称，触发器在当前数据库中必须具有唯一的名称。如果要在某个特定数据库中创建，名称前面应该加上数据库的名称。</strong></p><h3 id="2-INSERT-UPDATE-DELETE">2) INSERT | UPDATE | DELETE</h3><p><strong>触发事件，用于指定激活触发器的语句的种类。</strong></p><p><strong>注意：三种触发器的执行时间如下。</strong></p><ul><li><strong>INSERT：将新行插入表时激活触发器。例如，INSERT 的 BEFORE 触发器不仅能被 MySQL 的 INSERT 语句激活，也能被 LOAD DATA 语句激活。</strong></li><li><strong>DELETE： 从表中删除某一行数据时激活触发器，例如 DELETE 和 REPLACE 语句。</strong></li><li><strong>UPDATE：更改表中某一行数据时激活触发器，例如 UPDATE 语句。</strong></li></ul><h3 id="3-BEFORE-AFTER">3) BEFORE | AFTER</h3><p><strong>BEFORE 和 AFTER，触发器被触发的时刻，表示触发器是在激活它的语句之前或之后触发。若希望验证新数据是否满足条件，则使用 BEFORE 选项；若希望在激活触发器的语句执行之后完成几个或更多的改变，则通常使用 AFTER 选项。</strong></p><h3 id="4-表名">4) 表名</h3><p><strong>与触发器相关联的表名，此表必须是永久性表，不能将触发器与临时表或视图关联起来。在该表上触发事件发生时才会激活触发器。同一个表不能拥有两个具有相同触发时刻和事件的触发器。例如，对于一张数据表，不能同时有两个 BEFORE UPDATE 触发器，但可以有一个 BEFORE UPDATE 触发器和一个 BEFORE INSERT 触发器，或一个 BEFORE UPDATE 触发器和一个 AFTER UPDATE 触发器。</strong></p><h3 id="5-触发器主体">5) 触发器主体</h3><p><strong>触发器动作主体，包含触发器激活时将要执行的 MySQL 语句。如果要执行多个语句，可使用 BEGIN…END 复合语句结构。</strong></p><h3 id="6-FOR-EACH-ROW">6) FOR EACH ROW</h3><p><strong>一般是指行级触发，对于受触发事件影响的每一行都要激活触发器的动作。例如，使用 INSERT 语句向某个表中插入多行数据时，触发器会对每一行数据的插入都执行相应的触发器动作。</strong></p><blockquote><p><strong>注意：每个表都支持 INSERT、UPDATE 和 DELETE 的 BEFORE 与 AFTER，因此每个表最多支持 6 个触发器。每个表的每个事件每次只允许有一个触发器。单一触发器不能与多个事件或多个表关联。</strong></p></blockquote><p><strong>另外，在 MySQL 中，若需要查看数据库中已有的触发器，则可以使用 SHOW TRIGGERS 语句。</strong></p><h1>二、创建 BEFORE 类型触发器</h1><p><strong>在 test_db 数据库中，数据表 tb_emp8 为员工信息表，包含 id、name、deptId 和 salary 字段，数据表 tb_emp8 的表结构如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create table tb_emp8(<br>    -&gt; id int(11) not null PRIMARY KEY,<br>    -&gt; name VARCHAR(22) UNIQUE,<br>    -&gt; deptId int(11) not null,<br>    -&gt; salary FLOAT DEFAULT 0<br>    -&gt; )charset &#x3D; &#39;utf8mb4&#39;;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; SELECT * FROM tb_emp8;<br>Empty set (0.07 sec)<br>mysql&gt; DESC tb_emp8;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| id     | int(11)     | NO   | PRI | NULL    |       |<br>| name   | varchar(22) | YES  | UNI | NULL    |       |<br>| deptId | int(11)     | NO   | MUL | NULL    |       |<br>| salary | float       | YES  |     | 0       |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.05 sec)<br></code></pre></td></tr></table></figure><h3 id="【实例-1】">【实例 1】</h3><p><strong>创建一个名为 SumOfSalary 的触发器，触发的条件是向数据表 tb_emp8 中插入数据之前，对新插入的 salary 字段值进行求和计算。输入的 SQL 语句和执行过程如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 创建触发器<br>create TRIGGER SumOfSalary<br>before insert on tb_emp8<br>for each ROW<br>set @sum&#x3D;@sum+NEW.salary;<br></code></pre></td></tr></table></figure><p><strong>触发器 SumOfSalary 创建完成之后，向表 tb_emp8 中插入记录时，定义的 sum 值由 0 变成了 1500，即插入值 1000 和 500 的和，如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET @sum&#x3D;0;<br>Query OK, 0 rows affected (0.05 sec)<br><br>#插入数据，会自动调用触发器会自动调用触发器<br>mysql&gt; INSERT INTO tb_emp8<br>    -&gt; VALUES(1,&#39;A&#39;,1,1000),(2,&#39;B&#39;,1,500);<br>Query OK, 2 rows affected (0.09 sec)<br>Records: 2  Duplicates: 0  Warnings: 0<br>mysql&gt; SELECT @sum;<br>+------+<br>| @sum |<br>+------+<br>| 1500 |<br>+------+<br>1 row in set (0.03 sec)<br></code></pre></td></tr></table></figure><h1>三、创建 AFTER 类型触发器</h1><p><strong>在 test_db 数据库中，数据表 tb_emp6 和 tb_emp7 都为员工信息表，包含 id、name、deptId 和 salary 字段，数据表 tb_emp6 和 tb_emp7 的表结构如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM tb_emp6;<br>Empty set (0.07 sec)<br>mysql&gt; SELECT * FROM tb_emp7;<br>Empty set (0.03 sec)<br>mysql&gt; DESC tb_emp6;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| id     | int(11)     | NO   | PRI | NULL    |       |<br>| name   | varchar(25) | YES  |     | NULL    |       |<br>| deptId | int(11)     | YES  | MUL | NULL    |       |<br>| salary | float       | YES  |     | NULL    |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br>mysql&gt; DESC tb_emp7;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| id     | int(11)     | NO   | PRI | NULL    |       |<br>| name   | varchar(25) | YES  |     | NULL    |       |<br>| deptId | int(11)     | YES  |     | NULL    |       |<br>| salary | float       | YES  |     | 0       |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.04 sec)<br></code></pre></td></tr></table></figure><h3 id="【实例-2】">【实例 2】</h3><p><strong>创建一个名为 double_salary 的触发器，触发的条件是向数据表 tb_emp6 中插入数据之后，再向数据表 tb_emp7 中插入相同的数据，并且 salary 为 tb_emp6 中新插入的 salary 字段值的 2 倍。输入的 SQL 语句和执行过程如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TRIGGER double_salary<br>    -&gt; AFTER INSERT ON tb_emp6<br>    -&gt; FOR EACH ROW<br>    -&gt; INSERT INTO tb_emp7<br>    -&gt; VALUES (NEW.id,NEW.name,deptId,2*NEW.salary);<br>Query OK, 0 rows affected (0.25 sec)<br></code></pre></td></tr></table></figure><p><strong>触发器 double_salary 创建完成之后，向表 tb_emp6 中插入记录时，同时向表 tb_emp7 中插入相同的记录，并且 salary 字段为 tb_emp6 中 salary 字段值的 2 倍，如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 插入后触发<br>mysql&gt; INSERT INTO tb_emp6<br>    -&gt; VALUES (1,&#39;A&#39;,1,1000),(2,&#39;B&#39;,1,500);<br>Query OK, 2 rows affected (0.09 sec)<br>Records: 2  Duplicates: 0  Warnings: 0<br><br>mysql&gt; SELECT * FROM tb_emp6;<br>+----+------+--------+--------+<br>| id | name | deptId | salary |<br>+----+------+--------+--------+<br>|  1 | A    |      1 |   1000 |<br>|  2 | B    |      1 |    500 |<br>+----+------+--------+--------+<br>3 rows in set (0.04 sec)<br><br>mysql&gt; SELECT * FROM tb_emp7;<br>+----+------+--------+--------+<br>| id | name | deptId | salary |<br>+----+------+--------+--------+<br>|  1 | A    |      1 |   2000 |<br>|  2 | B    |      1 |   1000 |<br>+----+------+--------+--------+<br>2 rows in set (0.06 sec)<br><br>#删除触发器<br>drop trigger double_salary;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、MySQL创建触发器（CREATE TRIGGER）&lt;/h1&gt;
&lt;h2 id=&quot;基本语法&quot;&gt;基本语法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在 MySQL 5.7 中，可以使用 CREATE TRIGGER 语句创建触发器。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;语法格
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL触发器</title>
    <link href="https://wsdlxgp.top/posts/f9da.html"/>
    <id>https://wsdlxgp.top/posts/f9da.html</id>
    <published>2020-06-14T16:00:00.000Z</published>
    <updated>2020-06-19T05:15:55.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A：MySQL触发器到底是什么？">A：MySQL触发器到底是什么？</h2><p><strong>MySQL 的触发器和存储过程一样，都是嵌入到 MySQL 中的一段程序，是 MySQL 中管理数据的有力工具。不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，而是通过对数据表的相关操作来触发、激活从而实现执行。比如当对 student 表进行操作（INSERT，DELETE 或 UPDATE）时就会激活它执行。</strong></p><p><strong>触发器与数据表关系密切，主要用于保护表中的数据。特别是当有多个表具有一定的相互联系的时候，触发器能够让不同的表保持数据的一致性。</strong></p><p><strong>在 MySQL 中，只有执行 INSERT、UPDATE 和 DELETE 操作时才能激活触发器，其它 SQL 语句则不会激活触发器。</strong></p><h4 id="那么为什么要使用触发器呢？比如，在实际开发项目时，我们经常会遇到以下情况：">那么为什么要使用触发器呢？比如，在实际开发项目时，我们经常会遇到以下情况：</h4><ul><li><strong>在学生表中添加一条关于学生的记录时，学生的总数就必须同时改变。</strong></li><li><strong>增加一条学生记录时，需要检查年龄是否符合范围要求。</strong></li><li><strong>删除一条学生信息时，需要删除其成绩表上的对应记录。</strong></li><li><strong>删除一条数据时，需要在数据库存档表中保留一个备份副本。</strong></li></ul><p><strong>虽然上述情况实现的业务逻辑不同，但是它们都需要在数据表发生更改时，自动进行一些处理。这时就可以使用触发器处理。例如，对于第一种情况，可以创建一个触发器对象，每当添加一条学生记录时，就执行一次计算学生总数的操作，这样就可以保证每次添加一条学生记录后，学生总数和学生记录数是一致的。</strong></p><h2 id="B-触发器的优缺点">B: 触发器的优缺点</h2><h3 id="触发器的优点如下：">触发器的优点如下：</h3><ul><li><strong>触发器的执行是自动的，当对触发器相关表的数据做出相应的修改后立即执行。</strong></li><li><strong>触发器可以实施比 FOREIGN KEY 约束、CHECK 约束更为复杂的检查和操作。</strong></li><li><strong>触发器可以实现表数据的级联更改，在一定程度上保证了数据的完整性。</strong></li></ul><h3 id="触发器的缺点如下：">触发器的缺点如下：</h3><ul><li><strong>使用触发器实现的业务逻辑在出现问题时很难进行定位，特别是涉及到多个触发器的情况下，会使后期维护变得困难。</strong></li><li><strong>大量使用触发器容易导致代码结构被打乱，增加了程序的复杂性，</strong></li><li><strong>如果需要变动的数据量较大时，触发器的执行效率会非常低。</strong></li></ul><h2 id="C：MySQL-支持的触发器">C：MySQL 支持的触发器</h2><p><strong>在实际使用中，MySQL 所支持的触发器有三种：INSERT 触发器、UPDATE 触发器和 DELETE 触发器。</strong></p><h3 id="1-INSERT-触发器">1) INSERT 触发器</h3><p><strong>在 INSERT 语句执行之前或之后响应的触发器。</strong></p><p><strong>使用 INSERT 触发器需要注意以下几点：</strong></p><ul><li><strong>在 INSERT 触发器代码内，可引用一个名为 NEW（不区分大小写）的虚拟表来访问被插入的行。</strong></li><li><strong>在 BEFORE INSERT 触发器中，NEW 中的值也可以被更新，即允许更改被插入的值（只要具有对应的操作权限）。</strong></li><li><strong>对于 AUTO_INCREMENT 列，NEW 在 INSERT 执行之前包含的值是 0，在 INSERT 执行之后将包含新的自动生成值。</strong></li></ul><h4 id="2-UPDATE-触发器">2) UPDATE 触发器</h4><p><strong>在 UPDATE 语句执行之前或之后响应的触发器。</strong></p><p><strong>使用 UPDATE 触发器需要注意以下几点：</strong></p><ul><li><strong>在 UPDATE 触发器代码内，可引用一个名为 NEW（不区分大小写）的虚拟表来访问更新的值。</strong></li><li><strong>在 UPDATE 触发器代码内，可引用一个名为 OLD（不区分大小写）的虚拟表来访问 UPDATE 语句执行前的值。</strong></li><li><strong>在 BEFORE UPDATE 触发器中，NEW 中的值可能也被更新，即允许更改将要用于 UPDATE 语句中的值（只要具有对应的操作权限）。</strong></li><li><strong>OLD 中的值全部是只读的，不能被更新。</strong></li></ul><p><em><strong>注意：当触发器设计对触发表自身的更新操作时，只能使用 BEFORE 类型的触发器，AFTER 类型的触发器将不被允许。</strong></em></p><h4 id="3-DELETE-触发器">3) DELETE 触发器</h4><p><strong>在 DELETE 语句执行之前或之后响应的触发器。</strong></p><p><strong>使用 DELETE 触发器需要注意以下几点：</strong></p><ul><li><strong>在 DELETE 触发器代码内，可以引用一个名为 OLD（不区分大小写）的虚拟表来访问被删除的行。</strong></li><li><strong>OLD 中的值全部是只读的，不能被更新。</strong></li></ul><p><strong>总体来说，触发器使用的过程中，MySQL 会按照以下方式来处理错误。</strong></p><p><strong>对于事务性表，如果触发程序失败，以及由此导致的整个语句失败，那么该语句所执行的所有更改将回滚；对于非事务性表，则不能执行此类回滚，即使语句失败，失败之前所做的任何更改依然有效。</strong></p><p><strong>若 BEFORE 触发程序失败，则 MySQL 将不执行相应行上的操作。</strong></p><p><strong>若在 BEFORE 或 AFTER 触发程序的执行过程中出现错误，则将导致调用触发程序的整个语句失败。</strong></p><p><strong>仅当 BEFORE 触发程序和行操作均已被成功执行，MySQL 才会执行 AFTER 触发程序。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A：MySQL触发器到底是什么？&quot;&gt;A：MySQL触发器到底是什么？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MySQL 的触发器和存储过程一样，都是嵌入到 MySQL 中的一段程序，是 MySQL 中管理数据的有力工具。不同的是执行存储过程要使用 CALL 语句来调用，
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL创建存储过程</title>
    <link href="https://wsdlxgp.top/posts/bc0b.html"/>
    <id>https://wsdlxgp.top/posts/bc0b.html</id>
    <published>2020-06-13T16:00:00.000Z</published>
    <updated>2020-06-19T05:15:48.608Z</updated>
    
    <content type="html"><![CDATA[<h1>一、MySQL创建存储过程</h1><h2 id="1、基本语法">1、基本语法</h2><p><strong>可以使用 <code>CREATE PROCEDURE</code> 语句创建存储过程。</strong></p><h5 id="语法格式如下：">语法格式如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE PROCEDURE &lt;过程名&gt; ( [过程参数[,…] ] ) &lt;过程体&gt;<br>[过程参数[,…] ] 格式<br>[ IN | OUT | INOUT ] &lt;参数名&gt; &lt;类型&gt;<br></code></pre></td></tr></table></figure><h2 id="2、语法说明如下：">2、语法说明如下：</h2><h4 id="1-过程名">1) 过程名</h4><p><strong>存储过程的名称，默认在当前数据库中创建。若需要在特定数据库中创建存储过程，则要在名称前面加上数据库的名称，即 db_name.sp_name。需要注意的是，名称应当尽量避免选取与 MySQL 内置函数相同的名称，否则会发生错误。</strong></p><h4 id="2-过程参数">2) 过程参数</h4><p><strong>存储过程的参数列表。其中，<code>&lt;参数名&gt;</code>为参数名，<code>&lt;类型&gt;</code>为参数的类型（可以是任何有效的 MySQL 数据类型）。当有多个参数时，参数列表中彼此间用逗号分隔。存储过程可以没有参数（此时存储过程的名称后仍需加上一对括号），也可以有 1 个或多个参数。</strong></p><p><strong>MySQL 存储过程支持三种类型的参数，即输入参数、输出参数和输入/输出参数，分别用 IN、OUT 和 INOUT 三个关键字标识。其中，输入参数可以传递给一个存储过程，输出参数用于存储过程需要返回一个操作结果的情形，而输入/输出参数既可以充当输入参数也可以充当输出参数。</strong></p><p><strong>需要注意的是，参数的取名不要与数据表的列名相同，否则尽管不会返回出错信息，但是存储过程的 SQL 语句会将参数名看作列名，从而引发不可预知的结果。</strong></p><h4 id="3-过程体">3) 过程体</h4><p><strong>存储过程的主体部分，也称为存储过程体，包含在过程调用的时候必须执行的 SQL 语句。这个部分以关键字 BEGIN 开始，以关键字 END 结束。若存储过程体中只有一条 SQL 语句，则可以省略 BEGIN-END 标志。</strong></p><p><strong>在存储过程的创建中，经常会用到一个十分重要的 MySQL 命令，即 DELIMITER 命令，特别是对于通过命令行的方式来操作 MySQL 数据库的使用者，更是要学会使用该命令。</strong></p><p><strong>在 MySQL 中，服务器处理 SQL 语句默认是以分号作为语句结束标志的。然而，在创建存储过程时，存储过程体可能包含有多条 SQL 语句，这些 SQL 语句如果仍以分号作为语句结束符，那么 MySQL 服务器在处理时会以遇到的第一条 SQL 语句结尾处的分号作为整个程序的结束符，而不再去处理存储过程体中后面的 SQL 语句，这样显然不行。</strong></p><h3 id="为解决以上问题，通常使用-DELIMITER-命令将结束命令修改为其他字符。语法格式如下：">为解决以上问题，通常使用 <strong>DELIMITER</strong> 命令将结束命令修改为其他字符。语法格式如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER $$<br></code></pre></td></tr></table></figure><h5 id="语法说明如下：">语法说明如下：</h5><ul><li><strong>$$ 是用户定义的结束符，通常这个符号可以是一些特殊的符号，如两个“?”或两个“￥”等。</strong></li><li><strong>当使用 DELIMITER 命令时，应该避免使用反斜杠“\”字符，因为它是 MySQL 的转义字符。</strong></li></ul><p><strong>在 MySQL 命令行客户端输入如下 SQL 语句。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; DELIMITER ??<br></code></pre></td></tr></table></figure><p><strong>成功执行这条 SQL 语句后，任何命令、语句或程序的结束标志就换为两个问号“??”了。</strong></p><p><strong>若希望换回默认的分号“;”作为结束标志，则在 MySQL 命令行客户端输入下列语句即可：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; DELIMITER ;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：DELIMITER 和分号“;”之间一定要有一个空格。在创建存储过程时，必须具有 CREATE ROUTINE 权限。可以使用 SHOW PROCEDURE STATUS 命令查看数据库中存在哪些存储过程，若要查看某个存储过程的具体信息，则可以使用 SHOW CREATE PROCEDURE &lt;存储过程名&gt;。</strong></p></blockquote><h2 id="3、创建不带参数的存储过程">3、创建不带参数的存储过程</h2><h3 id="例-1">例 1</h3><p><strong>创建名称为 ShowStuScore 的存储过程，存储过程的作用是从学生成绩信息表中查询学生的成绩信息，输入的 SQL 语句和执行过程如下所示。</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi">mysql&gt; DELIMITER <span class="hljs-comment">//</span><br>mysql&gt; CREATE <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">ShowStuScore</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    -&gt; <span class="hljs-title">BEGIN</span></span><br><span class="hljs-function">    -&gt; <span class="hljs-title">SELECT</span> * <span class="hljs-title">FROM</span> <span class="hljs-title">tb_students_score</span>;</span><br>    -&gt; <span class="hljs-keyword">END</span> <span class="hljs-comment">//</span><br>Query OK， <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0.09</span> sec)<br></code></pre></td></tr></table></figure><p><strong>创建存储过程 ShowStuScore 后，通过 CALL 语句调用该存储过程的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; DELIMITER ;<br>mysql&gt; CALL ShowStuScore();<br>+--------------+---------------+<br>|<span class="hljs-string"> student_name </span>|<span class="hljs-string"> student_score </span>|<br>+--------------+---------------+<br>|<span class="hljs-string"> Dany         </span>|<span class="hljs-string">            90 </span>|<br>|<span class="hljs-string"> Green        </span>|<span class="hljs-string">            99 </span>|<br>|<span class="hljs-string"> Henry        </span>|<span class="hljs-string">            95 </span>|<br>|<span class="hljs-string"> Jane         </span>|<span class="hljs-string">            98 </span>|<br>|<span class="hljs-string"> Jim          </span>|<span class="hljs-string">            88 </span>|<br>|<span class="hljs-string"> John         </span>|<span class="hljs-string">            94 </span>|<br>|<span class="hljs-string"> Lily         </span>|<span class="hljs-string">           100 </span>|<br>|<span class="hljs-string"> Susan        </span>|<span class="hljs-string">            96 </span>|<br>|<span class="hljs-string"> Thomas       </span>|<span class="hljs-string">            93 </span>|<br>|<span class="hljs-string"> Tom          </span>|<span class="hljs-string">            89 </span>|<br>+--------------+---------------+<br>10 rows in set (0.00 sec)<br>Query OK, 0 rows affected (0.02 sec)<br></code></pre></td></tr></table></figure><h3 id="例-2">例 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 创建存储过程<br>delimiter $$<br>create PROCEDURE test_bank()<br>BEGIN<br>select * from bank;<br>END$$<br><br># 调用存储过程<br>delimiter ;<br>call test_bank();<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200615150109398.png" alt="image-20200615150109398"></p><h2 id="4、创建带参数的存储过程">4、创建带参数的存储过程</h2><h3 id="例-3">例 3</h3><p><strong>创建名称为 GetScoreByStu 的存储过程，输入参数是学生姓名。存储过程的作用是通过输入的学生姓名从学生成绩信息表中查询指定学生的成绩信息，输入的 SQL 语句和执行过程如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DELIMITER &#x2F;&#x2F;<br>mysql&gt; CREATE PROCEDURE GetScoreByStu<br>    -&gt; (IN name VARCHAR(30))<br>    -&gt; BEGIN<br>    -&gt; SELECT student_score FROM tb_students_score<br>    -&gt; WHERE student_name&#x3D;name;<br>    -&gt; END &#x2F;&#x2F;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure><p><strong>创建存储过程 GetScoreByStu 后，通过 CALL 语句调用该存储过程，SQL 语句和执行结果如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DELIMITER ;<br>mysql&gt; CALL GetScoreByStu(&#39;Green&#39;);<br>+---------------+<br>| student_score |<br>+---------------+<br>|            99 |<br>+---------------+<br>1 row in set (0.03 sec)<br>Query OK, 0 rows affected (0.03 sec)<br></code></pre></td></tr></table></figure><h3 id="例-4">例 4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 创建带参数的存储过程<br>delimiter $$<br>create PROCEDURE show_customer<br>(in name VARCHAR(20))<br>BEGIN<br>select * from bank where cusName&#x3D;name;<br>END $$<br>#调用带参数的存储过程<br>delimiter ;<br>call show_customer(&#39;zs&#39;);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200615150729887.png" alt="image-20200615150729887"></p><h1>二、存储过程的参数</h1><p><strong>MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATEPROCEDURE 存储过程名([[IN |OUT |INOUT ] 参数名 数据类形...])<br></code></pre></td></tr></table></figure><ul><li><strong>IN 输入参数：表示调用者向过程传入值（传入值可以是字面量或变量）</strong></li><li><strong>OUT 输出参数：表示过程向调用者传出值(可以返回多个值)（传出值只能是变量）</strong></li><li><strong>INOUT 输入输出参数：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）</strong></li></ul><h2 id="1、in-输入参数">1、in 输入参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 存储过程的参数<br>delimiter $$<br>create PROCEDURE test(in p_in int)<br>BEGIN<br>  SELECT p_in;<br>  set p_in &#x3D; 2;<br>  select p_in;<br>END $$<br>    <br>delimiter ; <br>set @p_in&#x3D;1;<br>call in_param(@p_in);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200615151115048.png" alt="image-20200615151115048"></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200615151137069.png" alt="image-20200615151137069"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select @p_in;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200615151124534.png" alt="image-20200615151124534"></p><p><strong>以上可以看出，p_in 在存储过程中被修改，但并不影响 @p_id 的值，因为前者为局部变量、后者为全局变量。</strong></p><h2 id="2、out输出参数">2、out输出参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; delimiter &#x2F;&#x2F;<br>mysql&gt; create procedure out_param(out p_out int)<br>    -&gt;   begin<br>    -&gt;     select p_out;<br>    -&gt;     set p_out&#x3D;2;<br>    -&gt;     select p_out;<br>    -&gt;   end<br>    -&gt; &#x2F;&#x2F;<br>mysql&gt; delimiter ;<br> <br>mysql&gt; set @p_out&#x3D;1;<br> <br>mysql&gt; call out_param(@p_out);<br>+-------+<br>| p_out |<br>+-------+<br>|  NULL |<br>+-------+<br>　　#因为out是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为null<br>+-------+<br>| p_out |<br>+-------+<br>|     2 |<br>+-------+<br> <br>mysql&gt; select @p_out;<br>+--------+<br>| @p_out |<br>+--------+<br>|      2 |<br>+--------+<br>　　#调用了out_param存储过程，输出参数，改变了p_out变量的值<br></code></pre></td></tr></table></figure><h2 id="3、inout输入参数">3、inout输入参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; delimiter $$<br>mysql&gt; create procedure inout_param(inout p_inout int)<br>    -&gt;   begin<br>    -&gt;     select p_inout;<br>    -&gt;     set p_inout&#x3D;2;<br>    -&gt;     select p_inout;<br>    -&gt;   end<br>    -&gt; $$<br>mysql&gt; delimiter ;<br> <br>mysql&gt; set @p_inout&#x3D;1;<br> <br>mysql&gt; call inout_param(@p_inout);<br>+---------+<br>| p_inout |<br>+---------+<br>|       1 |<br>+---------+<br> <br>+---------+<br>| p_inout |<br>+---------+<br>|       2 |<br>+---------+<br> <br>mysql&gt; select @p_inout;<br>+----------+<br>| @p_inout |<br>+----------+<br>|        2 |<br>+----------+<br>#调用了inout_param存储过程，接受了输入的参数，也输出参数，改变了变量<br></code></pre></td></tr></table></figure><h3 id="注意："><strong>注意：</strong></h3><h4 id="1、如果过程没有参数，也必须在过程名后面写上小括号例：">1、如果过程没有参数，也必须在过程名后面写上小括号例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……<br></code></pre></td></tr></table></figure><h4 id="2、确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理">2、确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理</h4><h4 id="建议：">建议：</h4><ul><li><strong>输入值使用in参数。</strong></li><li><strong>返回值使用out参数。</strong></li><li><strong>inout参数就尽量的少用。</strong></li></ul><h1>三、MySQL删除存储过程（DROP PROCEDURE）</h1><p><strong>存储过程被创建后，就会一直保存在数据库服务器上，直至被删除。当 <a href="http://c.biancheng.net/mysql/" target="_blank" rel="noopener">MySQL</a> 数据库中存在废弃的存储过程时，我们需要将它从数据库中删除。</strong></p><p><strong>MySQL 中使用 DROP PROCEDURE 语句来删除数据库中已经存在的存储过程。语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP &#123; PROCEDURE | FUNCTION &#125; [ IF EXISTS ] &lt;过程名&gt;<br></code></pre></td></tr></table></figure><h4 id="语法说明如下：-2">语法说明如下：</h4><ul><li><strong>过程名：指定要删除的存储过程的名称。</strong></li><li><strong>IF EXISTS：指定这个关键字，用于防止因删除不存在的存储过程而引发的错误。</strong></li></ul><p><em><strong>注意：存储过程名称后面没有参数列表，也没有括号，在删除之前，必须确认该存储过程没有任何依赖关系，否则会导致其他与之关联的存储过程无法运行。</strong></em></p><h3 id="实例-1">实例 1</h3><p><strong>下面删除存储过程 showstuscore，SQL 语句和运行结果如下：</strong></p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cal">mysql&gt; DROP <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">test</span>;</span><br>Query OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0.08</span> sec)<br></code></pre></td></tr></table></figure><p><strong>删除后，可以通过查询 information_schema 数据库下的 routines 表来确认上面的删除是否成功。SQL 语句和运行结果如下：</strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> information_schema.routines <span class="hljs-keyword">WHERE</span> routine_name=<span class="hljs-string">'showstuscore'</span>;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.03</span> sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，没有查询出任何记录，说明存储过程 showstuscore 已经被删除了。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、MySQL创建存储过程&lt;/h1&gt;
&lt;h2 id=&quot;1、基本语法&quot;&gt;1、基本语法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;可以使用 &lt;code&gt;CREATE PROCEDURE&lt;/code&gt; 语句创建存储过程。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;语法格式如下：&quot;&gt;语法格
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储过程</title>
    <link href="https://wsdlxgp.top/posts/ae29.html"/>
    <id>https://wsdlxgp.top/posts/ae29.html</id>
    <published>2020-06-12T16:00:00.000Z</published>
    <updated>2020-06-19T05:15:43.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A：MySQL存储过程简介">A：MySQL存储过程简介</h2><p><strong>我们前面所学习的 MySQL 语句都是针对一个表或几个表的单条 SQL 语句，但是在数据库的实际操作中，经常会有需要多条 SQL 语句处理多个表才能完成的操作。</strong></p><p><strong>例如，为了确认学生能否毕业，需要同时查询学生档案表、成绩表和综合表，此时就需要使用多条 SQL 语句来针对这几个数据表完成处理要求。</strong></p><p><strong><code>存储过程是一组为了完成特定功能的 SQL 语句集合。</code>使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需调用“CALL存储过程名字”即可自动完成。</strong></p><p><strong>常用操作数据库的 SQL 语句在执行的时候需要先编译，然后执行。存储过程则采用另一种方式来执行 SQL 语句。</strong></p><p><strong>一个存储过程是一个可编程的函数，它在数据库中创建并保存，一般由 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的特定功能时，存储过程尤为合适。</strong></p><p><strong>MySQL 5.0 版本以前并不支持存储过程，这使 MySQL 在应用上大打折扣。MySQL 从 5.0 版本开始支持存储过程，既提高了数据库的处理速度，同时也提高了数据库编程的灵活性</strong></p><p><strong>存储过程是数据库中的一个重要功能，存储过程可以用来转换数据、数据迁移、制作报表，它类似于编程语言，一次执行成功，就可以随时被调用，完成指定的功能操作。</strong></p><p><strong>使用存储过程不仅可以提高数据库的访问效率，同时也可以提高数据库使用的安全性。</strong></p><p><strong>对于调用者来说，存储过程封装了 SQL 语句，调用者无需考虑逻辑功能的具体实现过程。只是简单调用即可，它可以被 Java 和 C# 等编程语言调用。</strong></p><h2 id="B：存储过程有如下优点：">B：存储过程有如下优点：</h2><h3 id="1-封装性">1) 封装性</h3><p><strong>通常完成一个逻辑功能需要多条 SQL 语句，而且各个语句之间很可能传递参数，所以，编写逻辑功能相对来说稍微复杂些，而存储过程可以把这些 SQL 语句包含到一个独立的单元中，使外界看不到复杂的 SQL 语句，只需要简单调用即可达到目的。并且数据库专业人员可以随时对存储过程进行修改，而不会影响到调用它的应用程序源代码。</strong></p><h3 id="2-可增强-SQL-语句的功能和灵活性">2) 可增强 SQL 语句的功能和灵活性</h3><p><strong>存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</strong></p><h3 id="3-可减少网络流量">3) 可减少网络流量</h3><p><strong>由于存储过程是在服务器端运行的，且执行速度快，因此当客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而可降低网络负载。</strong></p><h3 id="4-高性能">4) 高性能</h3><p><strong>当存储过程被成功编译后，就存储在数据库服务器里了，以后客户端可以直接调用，这样所有的 SQL 语句将从服务器执行，从而提高性能。但需要说明的是，存储过程不是越多越好，过多的使用存储过程反而影响系统性能。</strong></p><h3 id="5-提高数据库的安全性和数据的完整性">5) 提高数据库的安全性和数据的完整性</h3><p><strong>存储过程提高安全性的一个方案就是把它作为中间组件，存储过程里可以对某些表做相关操作，然后存储过程作为接口提供给外部程序。这样，外部程序无法直接操作数据库表，只能通过存储过程来操作对应的表，因此在一定程度上，安全性是可以得到提高的。</strong></p><h3 id="6-使数据独立">6) 使数据独立</h3><p><strong>数据的独立可以达到解耦的效果，也就是说，程序可以调用存储过程，来替代执行多条的 SQL 语句。这种情况下，存储过程把数据同用户隔离开来，优点就是当数据表的结构改变时，调用表不用修改程序，只需要数据库管理者重新编写存储过程即可。</strong></p><h2 id="C：MySQL存储过程的优点">C：<strong>MySQL存储过程的优点</strong></h2><ul><li><strong>通常存储过程有助于提高应用程序的性能。当创建，存储过程被编译之后，就存储在数据库中。 但是，MySQL实现的存储过程略有不同。 MySQL存储过程按需编译。 在编译存储过程之后，MySQL将其放入缓存中。 MySQL为每个连接维护自己的存储过程高速缓存。 如果应用程序在单个连接中多次使用存储过程，则使用编译版本，否则存储过程的工作方式类似于查询。</strong></li><li><strong>存储过程有助于减少应用程序和数据库服务器之间的流量，因为应用程序不必发送多个冗长的SQL语句，而只能发送存储过程的名称和参数。</strong></li><li><strong>存储的程序对任何应用程序都是可重用的和透明的。 存储过程将数据库接口暴露给所有应用程序，以便开发人员不必开发存储过程中已支持的功能。</strong></li><li><strong>存储的程序是安全的。 数据库管理员可以向访问数据库中存储过程的应用程序授予适当的权限，而不向基础数据库表提供任何权限。</strong></li></ul><h2 id="D：MySQL存储过程的缺点">D：MySQL存储过程的缺点</h2><ul><li><strong>如果使用大量存储过程，那么使用这些存储过程的每个连接的内存使用量将会大大增加。 此外，如果您在存储过程中过度使用大量逻辑操作，则CPU使用率也会增加，因为数据库服务器的设计不当于逻辑运算。</strong></li><li><strong>存储过程的构造使得开发具有复杂业务逻辑的存储过程变得更加困难。</strong></li><li><strong>很难调试存储过程。只有少数数据库管理系统允许您调试存储过程。不幸的是，MySQL不提供调试存储过程的功能。</strong></li><li><strong>开发和维护存储过程并不容易。开发和维护存储过程通常需要一个不是所有应用程序开发人员拥有的专业技能。这可能会导致应用程序开发和维护阶段的问题。</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A：MySQL存储过程简介&quot;&gt;A：MySQL存储过程简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;我们前面所学习的 MySQL 语句都是针对一个表或几个表的单条 SQL 语句，但是在数据库的实际操作中，经常会有需要多条 SQL 语句处理多个表才能完成的操作。&lt;/stron
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL用户管理（2）</title>
    <link href="https://wsdlxgp.top/posts/66c1.html"/>
    <id>https://wsdlxgp.top/posts/66c1.html</id>
    <published>2020-06-11T16:00:00.000Z</published>
    <updated>2020-06-19T05:15:37.604Z</updated>
    
    <content type="html"><![CDATA[<h1>一、MySQL root修改普通用户密码</h1><h2 id="1、使用SET语句修改普通用户的密码">1、使用SET语句修改普通用户的密码</h2><p><strong>在 MySQL 中，只有 root 用户可以通过更新 MySQL 数据库来更改密码。使用 root 用户登录到 MySQL 服务器后，可以使用 SET 语句来修改普通用户密码。语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SET PASSWORD FOR &#39;username&#39;@&#39;hostname&#39; &#x3D; PASSWORD (&#39;newpwd&#39;);<br></code></pre></td></tr></table></figure><p><strong>其中，username 参数是普通用户的用户名，hostname 参数是普通用户的主机名，newpwd 是要更改的新密码。</strong></p><p><strong>注意：新密码必须使用 PASSWORD() 函数来加密，如果不使用 PASSWORD() 加密，也会执行成功，但是用户会无法登录。</strong></p><p><strong>如果是普通用户修改密码，可省略 FOR 子句来更改自己的密码。语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SET PASSWORD &#x3D; PASSWORD(&#39;newpwd&#39;);<br></code></pre></td></tr></table></figure><h3 id="示例-1">示例 1</h3><p><strong>首先创建一个没有密码的 testuser 用户，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; CREATE USER &#39;testuser&#39;@&#39;localhost&#39;;<br>Query OK, 0 rows affected (0.14 sec)<br></code></pre></td></tr></table></figure><p><strong>root 用户登录 MySQL 服务器后，再使用 SET 语句将 testuser 用户的密码修改为“newpwd”，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SET PASSWORD FOR &#39;testuser&#39;@&#39;localhost&#39; &#x3D; PASSWORD(&quot;newpwd&quot;);<br>Query OK, 0 rows affected, 1 warning (0.01 sec)<br></code></pre></td></tr></table></figure><p><strong>由运行结果可以看出，SET 语句执行成功，testuser 用户的密码被成功设置为“newpwd”。</strong></p><p><strong>下面验证 testuser 用户密码是否修改成功。退出 MySQL 服务器，使用 testuser 用户登录，输入密码“newpwd”，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">C:\Users\leovo&gt;mysql -utestuser -p<br>Enter password: ******<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 15<br>Server version: 5.7.29-log MySQL Community Server (GPL)<br> <br>Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.<br> <br>Oracle is a registered trademark of Oracle Corporation and&#x2F;or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br> <br>Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.<br></code></pre></td></tr></table></figure><p><strong>由运行结果可以看出，testuser 用户登录成功，修改密码成功。</strong></p><h3 id="示例-2">示例 2</h3><p><strong>使用 testuser 用户登录 MySQL 服务器，再使用 SET 语句将密码更改为“newpwd1”，SQL 语句和运行结果如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SET PASSWORD &#x3D; PASSWORD(&#39;newpwd1&#39;);<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>由运行结果可以看出，修改密码成功。</strong></p><h2 id="2、使用UPDATE语句修改普通用户的密码">2、使用UPDATE语句修改普通用户的密码</h2><p><strong>使用 root 用户登录 MySQL 服务器后，可以使用 UPDATE 语句修改 MySQL 数据库的 user 表的 authentication_string 字段，从而修改普通用户的密码。UPDATA 语句的语法如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">UPDATE MySQL.user SET authentication_string &#x3D; PASSWORD(&quot;newpwd&quot;) WHERE User &#x3D; &quot;username&quot; AND Host &#x3D; &quot;hostname&quot;;<br></code></pre></td></tr></table></figure><p><strong>其中，username 参数是普通用户的用户名，hostname 参数是普通用户的主机名，newpwd 是要更改的新密码。</strong></p><p><strong>注意，执行 UPDATE 语句后，需要执行 FLUSH PRIVILEGES 语句重新加载用户权限。</strong></p><h3 id="示例-3">示例 3</h3><p><strong>使用 root 用户登录 MySQL 服务器，再使用 UPDATE 语句将 testuser 用户的密码修改为“newpwd2”的 SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; UPDATE MySQL.user SET authentication_string &#x3D; PASSWORD (&quot;newpwd2&quot;)<br>    -&gt; WHERE User &#x3D; &quot;testuser&quot; AND Host &#x3D; &quot;localhost&quot;;<br>Query OK, 1 row affected, 1 warning (0.07 sec)<br>Rows matched: 1  Changed: 1  Warnings: 1<br>mysql&gt; FLUSH PRIVILEGES;<br>Query OK, 0 rows affected (0.03 sec)<br></code></pre></td></tr></table></figure><p><strong>由运行结果可以看出，密码修改成功。testuser 的密码被修改成了 newpwd2。使用 FLUSH PRIVILEGES 重新加载权限后，就可以使用新的密码登录 testuser 用户了。</strong></p><h2 id="3、使用-GRANT-语句修改普通用户密码">3、使用 GRANT 语句修改普通用户密码</h2><p><strong>除了前面介绍的方法，还可以在全局级别使用 GRANT USAGE 语句指定某个账户的密码而不影响账户当前的权限。需要注意的是，使用 GRANT 语句修改密码，必须拥有 GRANT 权限。一般情况下最好使用该方法来指定或修改密码。语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">GRANT USAGE ON *.* TO &#39;user&#39;@’hostname’ IDENTIFIED BY &#39;newpwd&#39;;<br></code></pre></td></tr></table></figure><p><strong>其中，username 参数是普通用户的用户名，hostname 参数是普通用户的主机名，newpwd 是要更改的新密码。</strong></p><h3 id="示例-4">示例 4</h3><p><strong>使用 root 用户登录 MySQL 服务器，再使用 GRANT 语句将 testuser 用户的密码修改为“newpwd3”，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; GRANT USAGE ON *.* TO &#39;testuser&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;newpwd3&#39;;<br>Query OK, 0 rows affected, 1 warning (0.05 sec)<br></code></pre></td></tr></table></figure><p><strong>由运行结果可以看出，密码修改成功。</strong></p><h1>二、MySQL修改root密码</h1><h2 id="1、使用mysqladmin命令在命令行指定新密码">1、使用mysqladmin命令在命令行指定新密码</h2><p><strong>root 用户可以使用 mysqladmin 命令来修改密码，mysqladmin 的语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysqladmin -u username -h hostname -p password &quot;newpwd&quot;<br></code></pre></td></tr></table></figure><h4 id="语法参数说明如下：">语法参数说明如下：</h4><ul><li><strong>usermame 指需要修改密码的用户名称，在这里指定为 root 用户；</strong></li><li><strong>hostname 指需要修改密码的用户主机名，该参数可以不写，默认是 localhost；</strong></li><li><strong>password 为关键字，而不是指旧密码；</strong></li><li><strong>newpwd 为新设置的密码，必须用双引号括起来。如果使用单引号会引发错误，可能会造成修改后的密码不是你想要的。</strong></li></ul><p><strong>执行完上面的语句，root 用户的密码将被修改为“newpwd”。</strong></p><h3 id="示例-1-2">示例 1</h3><p><strong>下面使用 mysqladmin 将 root 用户的密码修改为“rootpwd”，在 Windows 命令行窗口（cmd）中执行命令和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">C:\Users\leovo&gt;mysqladmin -u root -p password &quot;rootpwd&quot;<br>Enter password: ****<br>mysqladmin: [Warning] Using a password on the command line interface can be insecure.<br>Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.<br></code></pre></td></tr></table></figure><p><strong>输入 mysqladmin 命令后，按回车键，然后输入 root 用户原来的密码。执行完毕后，密码修改成功，root 用户登录时将使用新的密码。</strong></p><p><strong>运行结果中，输入密码后会提示在命令行界面上使用密码可能不安全的警告信息，因为在命令行输入密码时，MySQL 服务器就会提示这些安全警告信息。</strong></p><p><strong>下面使用修改后的“rootpwd”密码登录 root 用户，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">C:\Users\leovo&gt;mysql -uroot -p<br>Enter password: *******<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 23<br>Server version: 5.7.29-log MySQL Community Server (GPL)<br><br>Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and&#x2F;or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.<br></code></pre></td></tr></table></figure><p><strong>结果显示，root 用户登录成功，所以使用 mysqladmin 命令修改 root 用户密码成功。</strong></p><h2 id="2、修改MySQL数据库的user表">2、修改MySQL数据库的user表</h2><p><strong>因为所有账户信息都保存在 user 表中，因此可以直接通过修改 user 表来改变 root 用户的密码。</strong></p><p><strong>root 用户登录到 MySQL 服务器后，可以使用 UPDATE 语句修改 MySQL 数据库的 user 表的 authentication_string 字段，从而修改用户的密码。</strong></p><p><strong>使用 UPDATA 语句修改 root 用户密码的语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE mysql.user set authentication_string &#x3D; PASSWORD (&quot;rootpwd) WHERE User &#x3D; &quot;root&quot; and Host&#x3D;&quot;localhost&quot;;<br></code></pre></td></tr></table></figure><p><strong>新密码必须使用 PASSWORD() 函数来加密。执行UPDATE语句后，需要执行FLUSH PRIVILEGES语句重新加载用户权限。</strong></p><h3 id="示例-2-2">示例 2</h3><p><strong>下面使用 UPDATE 语句将 root用户的密码修改为“rootpwd2”。</strong></p><p><strong>使用 root 用户登录到 MySQL 服务器后，SQL 语句和运行结果如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; UPDATE mysql.user set authentication_string &#x3D; password (&quot;rootpwd2&quot;)<br>    -&gt; WHERE User &#x3D; &quot;root&quot; and Host &#x3D; &quot;localhost&quot;;<br>Query OK, 1 row affected, 0 warning (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings:0<br>mysql&gt; FLUSH PRIVILEGES;<br>Query OK, 0 rows affected (0.06 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，密码修改成功。而且使用了<code>FLUSH PRIVILEGES;</code>语句加载权限。退出后就必须使用新密码来登录了。</strong></p><h2 id="3、使用SET语句修改root用户的密码">3、使用SET语句修改root用户的密码</h2><p><strong>SET PASSWORD 语句可以用来重新设置其他用户的登录密码或者自己使用的账户的密码。使用 SET 语句修改密码的语法结构如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET PASSWORD &#x3D; PASSWORD (&quot;rootpwd&quot;);<br></code></pre></td></tr></table></figure><h3 id="示例-3-2">示例 3</h3><p><strong>下面使用 SET 语句将 root 用户的密码修改为“rootpwd3”。</strong></p><p><strong>使用 root 用户登录到 MySQL 服务器后，SQL 语句和运行结果如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MySQL&gt; SET PASSWORD &#x3D; password (&quot;rootpwd3&quot;);<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，SET 语句执行成功，root 用户的密码被成功设置为“rootpwd3”。</strong></p><h1>三、MySQL忘记root密码解决方案</h1><p><strong>在忘记 MySQL 密码的情况下，可以通过 <code>--skip-grant-tables</code> 关闭服务器的认证，然后重置 root 的密码，具体操作步骤如下。</strong></p><p><strong>步骤 1)：关闭正在运行的 MySQL 服务。打开 cmd 进入 MySQL 的 bin 目录。</strong></p><p><strong>步骤 2)：输入<code>mysqld --console --skip-grant-tables --shared-memory</code> 命令。–skip-grant-tables 会让 MySQL 服务器跳过验证步骤，允许所有用户以匿名的方式，无需做密码验证就可以直接登录 MySQL 服务器，并且拥有所有的操作权限。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614165937752.png" alt="image-20200614165937752"></p><p><strong>步骤 3)：上一个 DOS 窗口不要关闭，打开一个新的 DOS 窗口，此时仅输入 mysql 命令，不需要用户名和密码，即可连接到 MySQL。</strong></p><p><strong>步骤 4)：输入命令 <code>update mysql.user set authentication_string=password('root') where user='root' and Host ='localhost';</code> 设置新密码。</strong></p><p><strong>注意：MySQL 5.7 版本中的 user 表里已经去掉了 password 字段，改为了 authentication_string。</strong></p><p><strong>步骤 5)：刷新权限（必须步骤），输入<code>flush privileges;</code>命令。</strong></p><p><strong>步骤 6)：因为之前使用 --skip-grant-tables 启动，所以需要重启 MySQL 服务器去掉 --skip-grant-tables。输入无误后输入<code>quit;</code>命令退出 MySQL 服务。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614170003331.png" alt="image-20200614170003331"></p><p><strong>步骤 7)：重启 MySQL 服务，使用用户名 root 和刚才设置的新密码 root 登录就可以了。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614170016966.png" alt="image-20200614170016966"></p><h1>四、MySQL修改密码的3种方式</h1><h2 id="1-使用-SET-PASSWORD-命令">1. 使用 SET PASSWORD 命令</h2><p><strong>步骤 1)：输入命令<code>mysql -u root -p</code>指定 root 用户登录 MySQL，输入后按回车键输入密码。如果没有配置环境变量，请在 MySQL 的 bin 目录下登录操作。</strong></p><p><strong>步骤 2)：使用 SET PASSWORD 修改密码命令格式为 <code>set password for username @localhost = password(newpwd);</code>，其中 username 为要修改密码的用户名，newpwd 为要修改的新密码。如图所示。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614170059293.png" alt="image-20200614170059293"></p><p><strong>步骤 3)：输入<code>quit;</code>命令退出 MySQL 重新登录，输入新密码“root”登录就可以了；</strong></p><h2 id="2-使用mysqladmin修改密码">2. 使用mysqladmin修改密码</h2><p><strong>使用 mysqladmin 命令修改 MySQL 的 root 用户密码格式为 <code>mysqladmin -u用户名 -p旧密码 password 新密码</code>。</strong></p><p><strong>注意：下图修改密码的命令中 -uroot 和 -proot 是整体，不要写成 -u root -p root，-u 和 root 间可以加空格，但是会有警告出现，所以就不要加空格了。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614170130114.png" alt="image-20200614170130114"></p><h2 id="3-UPDATE直接编辑user表">3. UPDATE直接编辑user表</h2><p><strong>步骤 1)：输入命令<code>mysql -u root -p</code>指定 root 用户登录 MySQL，输入后按回车键输入密码。如果没有配置环境变量，请在 MySQL 的 bin 目录下登录操作。</strong></p><p><strong>步骤 2)：输入<code>use mysql;</code>命令连接权限数据库。</strong></p><p><strong>步骤 3)：输入命令<code>update mysql.user set authentication_string=password('新密码') where user='用户名' and Host ='localhost';</code>设置新密码。</strong></p><p><strong>步骤 4)：输入 <code>flush privileges;</code> 命令刷新权限。</strong></p><p><strong>步骤 5)：输入<code>quit;</code>命令退出 MySQL 重新登录，此时密码已经修改为刚才输入的新密码了。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614170154428.png" alt="image-20200614170154428"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#创建数据库<br>DROP DATABASE IF EXISTS &#96;bankDB&#96;;<br>CREATE DATABASE &#96;bankDB&#96;;<br><br>USE &#96;bankDB&#96;;<br><br>DROP TABLE IF EXISTS &#96;userInfo&#96;;<br>CREATE TABLE &#96;userInfo&#96;  #用户信息表<br>(<br>  &#96;customerID&#96; INT(4) PRIMARY KEY AUTO_INCREMENT COMMENT &#39;用户编号&#39;,<br>  &#96;customerName&#96; CHAR(8) NOT NULL COMMENT &#39;用户编号&#39;,<br>  &#96;PID&#96; CHAR(18) UNIQUE NOT NULL COMMENT &#39;身份证号&#39;,<br>  &#96;telephone&#96; CHAR(20) NOT NULL COMMENT &#39;手机号码&#39;,<br>  &#96;address&#96; VARCHAR(50) COMMENT &#39;居住地址&#39;<br>)ENGINE &#x3D; INNODB,CHARSET&#x3D;UTF8,COMMENT&#x3D;&#39;用户表&#39;;<br><br>DROP TABLE IF EXISTS &#96;cardInfo&#96;;<br>CREATE TABLE &#96;cardInfo&#96;  #银行卡信息表<br>(<br>  &#96;cardID&#96;  CHAR(19) NOT NULL PRIMARY KEY COMMENT &#39;卡号&#39;,<br>   &#96;password&#96; CHAR(6) NOT NULL DEFAULT &#39;888888&#39; COMMENT &#39;密码&#39;,<br>  &#96;curID&#96;  VARCHAR(10) NOT NULL DEFAULT &#39;RMB&#39; COMMENT &#39;币种&#39;,<br>  &#96;savingID&#96; INT NOT NULL COMMENT &#39;存款类型&#39;,<br>  &#96;openDate&#96;  TIMESTAMP NOT NULL COMMENT &#39;开户日期&#39; ,<br>  &#96;openMoney&#96;  DECIMAL(20,2) NOT NULL DEFAULT 1 COMMENT &#39;开户金额&#39; ,<br>  &#96;balance&#96;  DECIMAL(20,2) NOT NULL DEFAULT 1 COMMENT &#39;余额&#39;,<br>  &#96;IsReportLoss&#96; BIT  NOT NULL  DEFAULT 0 COMMENT &#39;是否挂失&#39;,<br>  &#96;customerID&#96; INT NOT NULL<br>) ENGINE &#x3D; INNODB,CHARSET&#x3D;UTF8,COMMENT&#x3D;&#39;银行卡信息表&#39;;<br><br>DROP TABLE IF EXISTS &#96;tradeInfo&#96;;<br>CREATE TABLE &#96;tradeInfo&#96;  #交易信息表<br>(<br>  cardID  CHAR(16) NOT NULL COMMENT &#39;卡号&#39;,<br>  tradeDate  TIMESTAMP NOT NULL  COMMENT &#39;交易日期&#39;,<br>  tradeMoney  DECIMAL(20,2) NOT NULL COMMENT &#39;实际交易金额&#39;,<br>  tradeType  CHAR(4) NOT NULL COMMENT &#39;交易类型&#39;, <br>  remark  TEXT COMMENT &#39;备注&#39;  <br>)ENGINE &#x3D; INNODB,CHARSET&#x3D;UTF8,COMMENT&#x3D;&#39;交易信息表&#39;;<br><br>DROP TABLE IF EXISTS &#96;deposit&#96;;<br>CREATE TABLE &#96;deposit&#96;  #存款类型表<br>(<br>  savingID  INT(4)  AUTO_INCREMENT PRIMARY KEY,<br>  savingName  VARCHAR(20) NOT NULL,<br>  descrip VARCHAR(50)<br>)ENGINE &#x3D; INNODB,CHARSET&#x3D;UTF8,COMMENT&#x3D;&#39;存款类型表&#39;;<br><br><br>&#x2F;*--加约束--$*&#x2F;<br><br>ALTER TABLE cardInfo     <br>   ADD CONSTRAINT  FK_customerID <br>   FOREIGN KEY(customerID) <br>   REFERENCES userInfo(customerID),<br>   ADD  CONSTRAINT  FK_savingID  <br>   FOREIGN KEY(savingID) <br>   REFERENCES deposit(savingID);<br><br>ALTER TABLE tradeInfo<br>  ADD CONSTRAINT  FK_cardID  <br>  FOREIGN KEY(cardID) <br>  REFERENCES cardInfo(cardID);<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、MySQL root修改普通用户密码&lt;/h1&gt;
&lt;h2 id=&quot;1、使用SET语句修改普通用户的密码&quot;&gt;1、使用SET语句修改普通用户的密码&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在 MySQL 中，只有 root 用户可以通过更新 MySQL 数据库来更改密码。使用 ro
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL用户管理（1）</title>
    <link href="https://wsdlxgp.top/posts/22c1.html"/>
    <id>https://wsdlxgp.top/posts/22c1.html</id>
    <published>2020-06-10T16:00:00.000Z</published>
    <updated>2020-06-19T05:15:31.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A：补充技能点">A：补充技能点</h2><h3 id="MySQL用户管理"><strong>MySQL用户管理</strong></h3><ul><li><strong>创建普通用户</strong></li><li><strong>执行GRANT语句创建用户并授权</strong></li><li><strong>使用mysqladmin命令修改root账户密码</strong></li><li><strong>使用SET命令修改用户密码</strong></li><li><strong>删除普通用户</strong></li></ul><p><strong>MySQL 在安装时会自动创建一个名为 mysql 的数据库，mysql 数据库中存储的都是用户权限表。用户登录以后，MySQL 会根据这些权限表的内容为每个用户赋予相应的权限。</strong></p><p><strong>user 表是 MySQL 中最重要的一个权限表，用来记录允许连接到服务器的账号信息。需要注意的是，在 user 表里启用的所有权限都是全局级的，适用于所有数据库。</strong></p><p><strong>user 表中的字段大致可以分为 4 类，分别是用户列、权限列、安全列和资源控制列。</strong></p><h2 id="B：为什么需要用户管理">B：为什么需要用户管理</h2><h4 id="root是超级管理员用户，很容易引发由于误操作所导致的数据不安全问题，怎么办"><strong>root是超级管理员用户，很容易引发由于误操作所导致的数据不安全问题，怎么办?</strong></h4><blockquote><p><strong>针对不同用户进行合理的用户角色权限分配，即用户管理</strong></p></blockquote><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200612150731946.png" alt="image-20200612150731946"></p><h1>一、MySQL创建用户（3种方式）</h1><h4 id="MySQL-提供了以下-3-种方法创建用户。">MySQL 提供了以下 3 种方法创建用户。</h4><ul><li><strong>使用 CREATE USER 语句创建用户</strong></li><li><strong>在 mysql.user 表中添加用户</strong></li><li><strong>使用 GRANT 语句创建用户</strong></li></ul><h2 id="1-使用CREATE-USER语句创建用户">1. 使用CREATE USER语句创建用户</h2><p><strong>可以使用 <code>CREATE USER</code> 语句来创建 MySQL 用户，并设置相应的密码。其基本语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER &lt;用户&gt; [ IDENTIFIED BY [ PASSWORD ] &#39;password&#39; ] [ ,用户 [ IDENTIFIED BY [ PASSWORD ] &#39;password&#39; ]]<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200612150916248.png" alt="image-20200612150916248"></p><h3 id="例1">例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 创建普通用户<br>create user &#96;teacher&#96;@&#96;localhost&#96; IDENTIFIED BY &#39;123456&#39;;<br>create user &#96;student&#96;@&#96;localhost&#96;<br><br># 查看用户<br>use mysql;<br>select host,user from user;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200612151258167.png" alt="image-20200612151258167"></p><h3 id="例2">例2</h3><p><strong>在 MySQL 中，可以使用 password() 函数获取密码的哈希值，查看 test1 哈希值的 SQL 语句和执行过程如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT password(&#39;teacher&#39;);<br>+-------------------------------------------+<br>| password(&#39;teacher&#39;)                       |<br>+-------------------------------------------+<br>| *977F15BF49C046DA76BC81A80146AAB943F679F1 |<br>+-------------------------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>*<em>“<em>977F15BF49C046DA76BC81A80146AAB943F679F1”就是 test1 的哈希值。下面创建用户 test1，SQL 语句和执行过程如下：</em></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE USER &#39;text1&#39;@&#39;localhost&#39;IDENTIFIED BY PASSWORD &#39;*977F15BF49C046DA76BC81A80146AAB943F679F1&#39;;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>执行成功后就可以使用密码“test1”登录了。</strong></p><h2 id="2-使用-INSERT-语句新建用户">2. 使用 INSERT 语句新建用户</h2><p><strong>可以使用 INSERT 语句将用户的信息添加到 mysql.user 表中，但必须拥有对 mysql.user 表的 INSERT 权限。通常 INSERT 语句只添加 Host、User 和 authentication_string 这 3 个字段的值。</strong></p><blockquote><p><strong>MySQL 5.7 的 user 表中的密码字段从 Password 变成了 authentication_string，如果你使用的是 MySQL 5.7 之前的版本，将 authentication_string 字段替换成 Password 即可。</strong></p></blockquote><p><strong>使用 <code>INSERT</code> 语句创建用户的代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO mysql.user(Host, User,  authentication_string, ssl_cipher, x509_issuer, x509_subject) VALUES (&#39;hostname&#39;, &#39;username&#39;, PASSWORD(&#39;password&#39;), &#39;&#39;, &#39;&#39;, &#39;&#39;);<br></code></pre></td></tr></table></figure><p><strong>由于 mysql 数据库的 user 表中，ssl_cipher、x509_issuer 和 x509_subject 这 3 个字段没有默认值，所以向 user 表插入新记录时，一定要设置这 3 个字段的值，否则 INSERT 语句将不能执行。</strong></p><h3 id="例-3">例 3</h3><p><strong>下面使用 INSERT 语句创建名为 test2 的用户，主机名是 localhost，密码也是 test2。SQL 语句和执行过程如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO mysql.user(Host, User, authentication_string, ssl_cipher, x509_issuer, x509_subject) VALUES (&#39;localhost&#39;, &#39;test2&#39;, PASSWORD(&#39;test2&#39;), &#39;&#39;, &#39;&#39;, &#39;&#39;);<br>Query OK, 1 row affected, 1 warning (0.02 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，新建用户成功。但是这时如果通过该账户登录 MySQL 服务器，不会登录成功，因为 test2 用户还没有生效。</strong></p><p><strong>可以使用 FLUSH 命令让用户生效，命令如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><p><strong>使用以上命令可以让 MySQL 刷新系统权限相关表。执行 FLUSH 命令需要 RELOAD 权限。</strong></p><p><strong>注意：user 表中的 User 和 Host 字段区分大小写，创建用户时要指定正确的用户名称或主机名。</strong></p><h2 id="3-使用GRANT语句新建用户">3. 使用GRANT语句新建用户</h2><p><strong>虽然 CREATE USER 和 INSERT INTO 语句都可以创建普通用户，但是这两种方式不便授予用户权限。于是 MySQL 提供了 GRANT 语句。</strong></p><p><strong>使用 GRANT 语句创建用户的基本语法形式如下:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">GRANT priv_type ON database.table TO user [IDENTIFIED BY [PASSWORD] &#39;password&#39;]<br></code></pre></td></tr></table></figure><p><strong>其中：</strong></p><ul><li><strong>priv_type 参数表示新用户的权限；</strong></li><li><strong>database.table 参数表示新用户的权限范围，即只能在指定的数据库和表上使用自己的权限；</strong></li><li><strong>user 参数指定新用户的账号，由用户名和主机名构成；</strong></li><li><strong>IDENTIFIED BY 关键字用来设置密码；</strong></li><li><strong>password 参数表示新用户的密码。</strong></li></ul><h3 id="例-4">例 4</h3><p><strong>下面使用 GRANT 语句创建名为 test3 的用户，主机名为 localhost，密码为 test3。该用户对所有数据库的所有表都有 SELECT 权限。SQL 语句和执行过程如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; GRANT SELECT ON*.* TO &#39;test3&#39;@localhost IDENTIFIED BY &#39;test3&#39;;<br>Query OK, 0 rows affected, 1 warning (0.01 sec)<br></code></pre></td></tr></table></figure><p><strong>其中，“<em>.</em>” 表示所有数据库下的所有表。结果显示创建用户成功，且 test3 用户对所有表都有查询（SELECT）权限。</strong></p><p><strong>技巧：GRANT 语句是 MySQL 中一个非常重要的语句，它可以用来创建用户、修改用户密码和设置用户权限。教程后面会详细介绍如何使用 GRANT 语句修改密码、更改权限。</strong></p><h1>二、MySQL修改用户（RENAME USER）</h1><p><strong>在 MySQL中，我们可以使用 RENAME USER 语句修改一个或多个已经存在的用户账号。</strong></p><h5 id="语法格式如下：">语法格式如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">RENAME USER &lt;旧用户&gt; TO &lt;新用户&gt;<br></code></pre></td></tr></table></figure><h5 id="其中：">其中：</h5><ul><li><strong>&lt;旧用户&gt;：系统中已经存在的 MySQL 用户账号。</strong></li><li><strong>&lt;新用户&gt;：新的 MySQL 用户账号。</strong></li></ul><h4 id="使用-RENAME-USER-语句时应注意以下几点：">使用 RENAME USER 语句时应注意以下几点：</h4><ul><li><strong>RENAME USER 语句用于对原有的 MySQL 用户进行重命名。</strong></li><li><strong>若系统中旧账户不存在或者新账户已存在，该语句执行时会出现错误。</strong></li><li><strong>使用 RENAME USER 语句，必须拥有 mysql 数据库的 UPDATE 权限或全局 CREATE USER 权限。</strong></li></ul><h3 id="例-1">例 1</h3><p><strong>使用 RENAME USER 语句将用户名 test1 修改为 testUser1，主机是 localhost。SQL 语句和执行过程如下。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; RENAME USER &#39;test1&#39;@&#39;localhost&#39;<br>    -&gt; TO &#39;testUser1&#39;@&#39;localhost&#39;;<br>Query OK, 0 rows affected (0.03 sec)<br></code></pre></td></tr></table></figure><p><strong>在 cmd 命令行工具中，使用 testUser1 用户登录数据库服务器，如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">C:\Users\USER&gt;mysql -h localhost -u testUser1 -p<br>Enter password: *****<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 7<br>Server version: 5.7.20-log MySQL Community Server (GPL)<br>Copyright (c) 2000, 2017, Oracle and&#x2F;or its affiliates. All rights reserved.<br>Oracle is a registered trademark of Oracle Corporation and&#x2F;or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br>Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.<br></code></pre></td></tr></table></figure><h1>三、MySQL删除用户（DROP/DELETE USER）</h1><p><strong>在 MySQL 数据库中，可以使用 DROP USER 语句删除用户，也可以直接在 mysql.user 表中删除用户以及相关权限。</strong></p><h2 id="1-使用-DROP-USER-语句删除普通用户">1. 使用 DROP USER 语句删除普通用户</h2><p><strong>使用 DROP USER 语句删除用户的语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP USER &lt;用户1&gt; [ , &lt;用户2&gt; ]…<br></code></pre></td></tr></table></figure><p><strong>其中，用户用来指定需要删除的用户账号。</strong></p><p><strong>使用 DROP USER 语句应注意以下几点：</strong></p><ul><li><strong>DROP USER 语句可用于删除一个或多个用户，并撤销其权限。</strong></li><li><strong>使用 DROP USER 语句必须拥有 mysql 数据库的 DELETE 权限或全局 CREATE USER 权限。</strong></li><li><strong>在 DROP USER 语句的使用中，若没有明确地给出账户的主机名，则该主机名默认为“%”。</strong></li></ul><blockquote><p><strong>注意：用户的删除不会影响他们之前所创建的表、索引或其他数据库对象，因为 MySQL 并不会记录是谁创建了这些对象。</strong></p></blockquote><h3 id="例-1-2">例 1</h3><p><strong>下面使用 DROP USER 语句删除用户’test1@‘localhost’。SQL 语句和执行过程如下。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DROP USER &#39;test1&#39;@&#39;localhost&#39;;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>在 cmd 命令行工具中，使用 test1 用户登录数据库服务器，发现登录失败，说明用户已经删除，如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">C:\Users\USER&gt;mysql -h localhost -u test1 -p<br>Enter password: ****<br>ERROR 1045 (28000): Access denied for user &#39;test&#39;@&#39;localhost&#39; (using  password: YES)<br></code></pre></td></tr></table></figure><h2 id="2-使用DELETE语句删除普通用户">2. 使用DELETE语句删除普通用户</h2><p><strong>可以使用 DELETE 语句直接删除 mysql.user 表中相应的用户信息，但必须拥有 mysql.user 表的 DELETE 权限。其基本语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM mysql.user WHERE Host&#x3D;&#39;hostname&#39; AND User&#x3D;&#39;username&#39;;<br></code></pre></td></tr></table></figure><p><strong>Host 和 User 这两个字段都是 mysql.user 表的主键。因此，需要两个字段的值才能确定一条记录。</strong></p><h3 id="例-2">例 2</h3><p><strong>下面使用 DELETE 语句删除用户’test2’@‘localhost’。SQL 语句和执行过程如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM mysql.user WHERE Host&#x3D;&#39;localhost&#39;AND User&#x3D;&#39;test2&#39;;<br>Query OK, 1 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示删除成功。可以使用 SELETE 语句查询 mysql.user 表，以确定该用户是否已经成功删除。</strong></p><h1>四、MySQL查看用户权限</h1><p><strong>在 MySQL 中，可以通过查看 mysql.user 表中的数据记录来查看相应的用户权限，也可以使用 SHOW GRANTS 语句查询用户的权限。</strong></p><p><strong>mysql 数据库下的 user 表中存储着用户的基本权限，可以使用 SELECT 语句来查看。SELECT 语句的代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM mysql.user;<br></code></pre></td></tr></table></figure><p><strong>要执行该语句，必须拥有对 user 表的查询权限。</strong></p><p><em><strong>注意：新创建的用户只有登录 MySQL 服务器的权限，没有任何其它权限，不能查询 user 表。</strong></em></p><p><strong>除了使用 SELECT 语句之外，还可以使用 SHOW GRANTS FOR 语句查看权限。其语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW GRANTS FOR &#39;username&#39;@&#39;hostname&#39;;<br></code></pre></td></tr></table></figure><p><strong>其中，username 表示用户名，hostname 表示主机名或主机 IP。</strong></p><h3 id="例-1-3">例 1</h3><p><strong>下面创建 testuser1 用户并查询权限，SQL 语句和执行过程如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE USER &#39;testuser1&#39;@&#39;localhost&#39;;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; SHOW GRANTS FOR &#39;testuser1&#39;@&#39;localhost&#39;;<br>+-----------------------------------------------+<br>| Grants for testuser1@localhost                |<br>+-----------------------------------------------+<br>| GRANT USAGE ON *.* TO &#39;testuser1&#39;@&#39;localhost&#39; |<br>+-----------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>其中，<code>USAGE ON *.*</code>表示该用户对任何数据库和任何表都没有权限。</strong></p><h3 id="例-2-2">例 2</h3><p><strong>下面查询 root 用户的权限，代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW GRANTS FOR &#39;root&#39;@&#39;localhost&#39;;<br>+---------------------------------------------------------------------+<br>| Grants for root@localhost                                           |<br>+---------------------------------------------------------------------+<br>| GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;localhost&#39; WITH GRANT OPTION |<br>| GRANT PROXY ON &#39;&#39;@&#39;&#39; TO &#39;root&#39;@&#39;localhost&#39; WITH GRANT OPTION        |<br>+---------------------------------------------------------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h1>五、MySQL GRANT：用户授权</h1><p><strong>授权就是为某个用户赋予某些权限。例如，可以为新建的用户赋予查询所有数据库和表的权限。MySQL 提供了 GRANT 语句来为用户设置权限。</strong></p><p><strong>在 MySQL 中，拥有 GRANT 权限的用户才可以执行 GRANT 语句，其语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">GRANT priv_type [(column_list)] ON database.table<br>TO user [IDENTIFIED BY [PASSWORD] &#39;password&#39;]<br>[, user[IDENTIFIED BY [PASSWORD] &#39;password&#39;]] ...<br>[WITH with_option [with_option]...]<br></code></pre></td></tr></table></figure><h2 id="1、权限类型说明">1、权限类型说明</h2><h3 id="1）授予数据库权限时，-权限类型-可以指定为以下值：">1）授予数据库权限时，&lt;权限类型&gt;可以指定为以下值：</h3><p>![image-20200614164858090](G:\四期\数据库\mysql文档\11  MySQL 事务（2）.assets\image-20200614164858090.png)</p><h3 id="2-授予表权限时，-权限类型-可以指定为以下值：">2) 授予表权限时，&lt;权限类型&gt;可以指定为以下值：</h3><p>![image-20200614164921901](G:\四期\数据库\mysql文档\11  MySQL 事务（2）.assets\image-20200614164921901.png)</p><h3 id="3-授予列权限时，-权限类型-的值只能指定为-SELECT、INSERT-和-UPDATE，同时权限的后面需要加上列名列表-column-list。">3) 授予列权限时，&lt;权限类型&gt;的值只能指定为 SELECT、INSERT 和 UPDATE，同时权限的后面需要加上列名列表 column-list。</h3><h3 id="4-最有效率的权限是用户权限。">4) 最有效率的权限是用户权限。</h3><p><strong>授予用户权限时，&lt;权限类型&gt;除了可以指定为授予数据库权限时的所有值之外，还可以是下面这些值：</strong></p><ul><li><strong>CREATE USER：表示授予用户可以创建和删除新用户的权限。</strong></li><li><strong>SHOW DATABASES：表示授予用户可以使用 SHOW DATABASES 语句查看所有已有的数据库的定义的权限。</strong></li></ul><h3 id="例-1-4">例 1</h3><p><strong>使用 GRANT 语句创建一个新的用户 testUser，密码为 testPwd。用户 testUser 对所有的数据有查询、插入权限，并授予 GRANT 权限。SQL 语句和执行过程如下。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; GRANT SELECT,INSERT ON *.*<br>    -&gt; TO &#39;testUser&#39;@&#39;localhost&#39;<br>    -&gt; IDENTIFIED BY &#39;testPwd&#39;<br>    -&gt; WITH GRANT OPTION;<br>Query OK, 0 rows affected, 1 warning (0.05 sec)<br></code></pre></td></tr></table></figure><p><strong>使用 SHOW GRANTS 语句查询用户 testUser 的权限，如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW GRANTS FOR &#39;testUser&#39;@&#39;localhost&#39;;<br>+-------------------------------------------------------------------------+<br>| Grants for testUser@localhost                                           |<br>+-------------------------------------------------------------------------+<br>| GRANT SELECT, INSERT ON *.* TO &#39;testUser&#39;@&#39;localhost&#39; WITH GRANT OPTION |<br>+-------------------------------------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，testUser 对所有数据库的所有表有查询、插入权限，并可以将这些权限赋予给别的用户。</strong></p><h1>六、MySQL REVOKE：删除用户权限</h1><p><strong>在 MySQL 中，可以使用 REVOKE 语句删除某个用户的某些权限（此用户不会被删除），在一定程度上可以保证系统的安全性。例如，如果数据库管理员觉得某个用户不应该拥有 DELETE 权限，那么就可以删除 DELETE 权限。</strong></p><p><strong>使用 REVOKE 语句删除权限的语法格式有两种形式，如下所示：</strong></p><h2 id="1）第一种">1）第一种</h2><p><strong>删除用户某些特定的权限，语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">REVOKE priv_type [(column_list)]...<br>ON database.table<br>FROM user [, user]...<br></code></pre></td></tr></table></figure><p><strong>REVOKE 语句中的参数与 GRANT 语句的参数意思相同。其中：</strong></p><ul><li><strong>priv_type 参数表示权限的类型；</strong></li><li><strong>column_list 参数表示权限作用于哪些列上，没有该参数时作用于整个表上；</strong></li><li><strong>user 参数由用户名和主机名构成，格式为“username’@‘hostname’”。</strong></li></ul><h2 id="2）第二种">2）第二种</h2><p><strong>删除特定用户的所有权限，语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">REVOKE ALL PRIVILEGES, GRANT OPTION FROM user [, user] ...<br></code></pre></td></tr></table></figure><p><strong>删除用户权限需要注意以下几点：</strong></p><ul><li><strong>REVOKE 语法和 GRANT 语句的语法格式相似，但具有相反的效果。</strong></li><li><strong>要使用 REVOKE 语句，必须拥有 MySQL 数据库的全局 CREATE USER 权限或 UPDATE 权限。</strong></li></ul><h3 id="例-1-5">例 1</h3><p><strong>使用 REVOKE 语句取消用户 testUser 的插入权限，SQL 语句和执行过程如下。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; REVOKE INSERT ON *.*<br>    -&gt; FROM &#39;testUser&#39;@&#39;localhost&#39;;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; SHOW GRANTS FOR &#39;testUser&#39;@&#39;localhost&#39;;<br>+-----------------------------------------------------------------+<br>| Grants for testUser@localhost                                   |<br>+-----------------------------------------------------------------+<br>| GRANT SELECT ON *.* TO &#39;testUser&#39;@&#39;localhost&#39; WITH GRANT OPTION |<br>+-----------------------------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，删除 testUser 用户的 INSERT 权限成功。</strong></p><h3 id="创建用户并授权">创建用户并授权</h3><p><strong>GRANT语句可实现创建用户同时授权或为已存在的用户授权</strong><br>![image-20200612151755831](G:\四期\数据库\mysql文档\11  MySQL用户管理（1）.assets\image-20200612151755831.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 给用户授权<br>grant insert,select on myschool.student<br>to &#96;xgp&#96;@&#96;localhost&#96; IDENTIFIED by &#39;123456&#39;;<br><br>grant select on myschool.student to &#96;student&#96;@&#96;localhost&#96;;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use myschool;<br>delete from student;<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">WINDOWS</span>\<span class="hljs-title">system32</span>&gt;<span class="hljs-title">mysqladmin</span> -<span class="hljs-title">u</span> <span class="hljs-title">xgp</span> -<span class="hljs-title">p</span> <span class="hljs-title">password</span> "1111"</span><br><span class="hljs-function"><span class="hljs-title">Enter</span> <span class="hljs-title">password</span>: ******</span><br><span class="hljs-function"><span class="hljs-title">mysqladmin</span>: [<span class="hljs-title">Warning</span>] <span class="hljs-title">Using</span> <span class="hljs-title">a</span> <span class="hljs-title">password</span> <span class="hljs-title">on</span> <span class="hljs-title">the</span> <span class="hljs-title">command</span> <span class="hljs-title">line</span> <span class="hljs-title">interface</span> <span class="hljs-title">can</span> <span class="hljs-title">be</span> <span class="hljs-title">insecure</span>.</span><br><span class="hljs-function"><span class="hljs-title">Warning</span>: <span class="hljs-title">Since</span> <span class="hljs-title">password</span> <span class="hljs-title">will</span> <span class="hljs-title">be</span> <span class="hljs-title">sent</span> <span class="hljs-title">to</span> <span class="hljs-title">server</span> <span class="hljs-title">in</span> <span class="hljs-title">plain</span> <span class="hljs-title">text</span>, <span class="hljs-title">use</span> <span class="hljs-title">ssl</span> <span class="hljs-title">connection</span> <span class="hljs-title">to</span> <span class="hljs-title">ensure</span> <span class="hljs-title">password</span> <span class="hljs-title">safety</span>.</span><br></code></pre></td></tr></table></figure><p>![image-20200612153552461](G:\四期\数据库\mysql文档\11  MySQL用户管理（1）.assets\image-20200612153552461.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set password &#x3D; password(&quot; 8888 )<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET PASSWORD FOR &#96;teacher&#96;@localhost&#96; &#x3D; PASSWORD(&quot;8888&quot;);<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop user xgp@localhost;<br>select * from user;<br></code></pre></td></tr></table></figure><p>![image-20200612154416018](G:\四期\数据库\mysql文档\11  MySQL用户管理（1）.assets\image-20200612154416018.png)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A：补充技能点&quot;&gt;A：补充技能点&lt;/h2&gt;
&lt;h3 id=&quot;MySQL用户管理&quot;&gt;&lt;strong&gt;MySQL用户管理&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建普通用户&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行GRANT语句
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 事务(2)</title>
    <link href="https://wsdlxgp.top/posts/40d5.html"/>
    <id>https://wsdlxgp.top/posts/40d5.html</id>
    <published>2020-06-09T16:00:00.000Z</published>
    <updated>2020-06-19T05:15:25.985Z</updated>
    
    <content type="html"><![CDATA[<h1>一、MySQL设置事务自动提交（开启和关闭）</h1><p><strong>MySQL 默认开启事务自动提交模式，即除非显式的开启事务（BEGIN 或 START TRANSACTION），否则每条 SOL 语句都会被当做一个单独的事务自动执行。但有些情况下，我们需要关闭事务自动提交来保证数据的一致性。下面主要介绍如何设置事务自动提交模式。</strong></p><p><strong>在 MySQL 中，可以通过  SHOW VARIABLES 语句查看当前事务自动提交模式，如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW VARIABLES LIKE &#39;autocommit&#39;;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| autocommit    | ON    |<br>+---------------+-------+<br>1 row in set, 1 warning (0.04 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，autocommit 的值是 ON，表示系统开启自动提交模式。</strong></p><p><strong>在 MySQL 中，可以使用 SET autocommit 语句设置事务的自动提交模式，语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET autocommit &#x3D; 0|1|ON|OFF;<br></code></pre></td></tr></table></figure><p><strong>对取值的说明：</strong></p><ul><li><strong>值为 0 和值为 OFF：关闭事务自动提交。如果关闭自动提交，用户将会一直处于某个事务中，只有提交或回滚后才会结束当前事务，重新开始一个新事务。</strong></li><li><strong>值为 1 和值为 ON：开启事务自动提交。如果开启自动提交，则每执行一条 SQL 语句，事务都会提交一次。</strong></li></ul><h2 id="示例">示例</h2><p><strong>下面我们关闭事务自动提交，模拟银行转账。</strong></p><p><strong>使用 SET autocommit 语句关闭事务自动提交，且张三转给李四 500 元，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SET autocommit &#x3D; 0;                                                      ;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; SELECT * FROM mybank.bank;<br>+--------------+--------------+<br>| cusName | cusMoney |<br>+--------------+--------------+<br>| 张三         |      1000.00 |<br>| 李四         |         1.00 |<br>+--------------+--------------+<br>2 rows in set (0.00 sec)<br>mysql&gt; UPDATE bank SET cusMoney &#x3D; cusMoney-500 WHERE cusName&#x3D;&#39;张三&#39; ;<br>Query OK, 1 row affected (0.02 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>mysql&gt; UPDATE bank SET cusMoney &#x3D; cusMoney+500 WHERE cusName&#x3D;&#39;李四&#39;;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br></code></pre></td></tr></table></figure><p><strong>这时重新打开一个 cmd 窗口，查看 bank 数据表中张三和李四的余额，SQL 语句和运行结果如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM mybank.bank;<br>+--------------+--------------+<br>| cusName | cusMoney |<br>+--------------+--------------+<br>| 张三         |      1000.00 |<br>| 李四         |         1.00 |<br>+--------------+--------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，张三和李四的余额是事务执行前的数据。</strong></p><p><strong>下面在之前的窗口中使用 COMMIT 语句提交事务，并查询 bank 数据表的数据，如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; COMMIT;<br>Query OK, 0 rows affected (0.07 sec)<br>mysql&gt; SELECT * FROM mybank.bank;<br>+--------------+--------------+<br>| cusName | cusMoney |<br>+--------------+--------------+<br>| 张三         |       500.00 |<br>| 李四         |       501.00 |<br>+--------------+--------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，bank 数据表的数据更新成功。</strong></p><p><strong>在本例中，关闭自动提交后，该位置会作为一个事务起点，直到执行 COMMIT 语句和 ROLLBACK 语句后，该事务才结束。结束之后，这就是下一个事务的起点。</strong></p><p><strong>关闭自动提交功能后，只用当执行 COMMIT 命令后，MySQL 才将数据表中的资料提交到数据库中。如果执行 ROLLBACK 命令，数据将会被回滚。如果不提交事务，而终止 MySQL 会话，数据库将会自动执行回滚操作。</strong></p><p><strong>使用 BEGIN 或 START TRANSACTION 开启一个事务之后，自动提交将保持禁用状态，直到使用 COMMIT 或 ROLLBACK 结束事务。之后，自动提交模式会恢复到之前的状态，即如果 BEGIN 前 autocommit = 1，则完成本次事务后 autocommit 还是 1。如果 BEGIN 前 autocommit = 0，则完成本次事务后 autocommit 还是 0。</strong></p><h1>二、MySQL事务隔离级别详解</h1><p><strong>在《<a href="http://c.biancheng.net/view/7289.html" target="_blank" rel="noopener">数据库事务</a>》一节中介绍了 MySQL 事务的四大特性，其中事务的隔离性就是指当多个事务同时运行时，各事务之间相互隔离，不可互相干扰。</strong></p><p><strong>如果事务没有隔离性，就容易出现脏读、不可重复读和幻读等情况。</strong></p><h4 id="1-脏读">1) 脏读</h4><p><strong>脏读是指一个事务正在访问数据，并且对数据进行了修改，但是这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</strong></p><h4 id="2-不可重复读">2) 不可重复读</h4><p><strong>不可重复读是指在一个事务内，多次读取同一个数据。</strong></p><p><strong>在这个事务还没有结束时，另外一个事务也访问了该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</strong></p><h4 id="3-幻读">3) 幻读</h4><p><strong>幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</strong></p><p><strong>为了解决以上这些问题，标准 SQL 定义了 4 类事务隔离级别，用来指定事务中的哪些数据改变是可见的，哪些数据改变是不可见的。</strong></p><h4 id="MySQL-包括的事务隔离级别如下："><strong>MySQL 包括的事务隔离级别如下：</strong></h4><ul><li><strong>读未提交（READ UNCOMITTED）</strong></li><li><strong>读提交（READ COMMITTED）</strong></li><li><strong>可重复读（REPEATABLE READ）</strong></li><li><strong>串行化（SERIALIZABLE）</strong></li></ul><h4 id="MySQL-事务隔离级别可能产生的问题如下表所示："><strong>MySQL 事务隔离级别可能产生的问题如下表所示：</strong></h4><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMITTED</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>×</td><td>√</td></tr><tr><td>SERIALIZABLE</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p><strong>MySQL 的事务的隔离级别由低到高分别为 READ UNCOMITTED、READ COMMITTED、REPEATABLE READ、SERIALIZABLE。低级别的隔离级别可以支持更高的并发处理，同时占用的系统资源更少。</strong></p><p><strong>下面根据实例来一一阐述它们的概念和联系。</strong></p><h2 id="1-读未提交（READ-UNCOMITTED，RU）">1. 读未提交（READ UNCOMITTED，RU）</h2><p><strong>顾名思义，读未提交就是可以读到未提交的内容。</strong></p><p><strong>如果一个事务读取到了另一个未提交事务修改过的数据，那么这种隔离级别就称之为读未提交。</strong></p><p><strong>在该隔离级别下，所有事务都可以看到其它未提交事务的执行结果。因为它的性能与其他隔离级别相比没有高多少，所以一般情况下，该隔离级别在实际应用中很少使用。</strong></p><p><strong>例 1 主要演示了在读未提交隔离级别中产生的脏读现象。</strong></p><h3 id="示例-1">示例 1</h3><h4 id="1-先在-test-数据库中创建-testnum-数据表，并插入数据。SQL-语句和执行结果如下：">1) 先在 test 数据库中创建 testnum 数据表，并插入数据。SQL 语句和执行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE testnum(<br>    -&gt; num INT(4));<br>Query OK, 0 rows affected (0.57 sec)<br>mysql&gt; INSERT INTO test.testnum (num) VALUES(1),(2),(3),(4),(5);<br>Query OK, 5 rows affected (0.09 sec)<br></code></pre></td></tr></table></figure><h4 id="2-下面的语句需要在两个命令行窗口中执行。为了方便理解，我们分别称之为-A-窗口和-B-窗口。">2) 下面的语句需要在两个命令行窗口中执行。为了方便理解，我们分别称之为 A 窗口和 B 窗口。</h4><p><strong>在 A 窗口中修改事务隔离级别，因为 A 窗口和 B 窗口的事务隔离级别需要保持一致，所以我们使用 SET GLOBAL TRANSACTION 修改全局变量。SQL 语句如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;<br>Query OK, 0 rows affected (0.04 sec)<br>flush privileges;<br>Query OK, 0 rows affected (0.04 sec)<br></code></pre></td></tr></table></figure><p><strong>查询事务隔离级别，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;%tx_isolation%&#39;\G<br>*************************** 1. row ***************************<br>Variable_name: tx_isolation<br>        Value: READ-UNCOMMITTED<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，现在 MySQL 的事务隔离级别为 READ-UNCOMMITTED。</strong></p><h4 id="3-在-A-窗口中开启一个事务，并查询-testnum-数据表，SQL-语句和运行结果如下：">3) 在 A 窗口中开启一个事务，并查询 testnum 数据表，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; BEGIN;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; SELECT * FROM testnum;<br>+------+<br>| num  |<br>+------+<br>|    1 |<br>|    2 |<br>|    3 |<br>|    4 |<br>|    5 |<br>+------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="4-打开-B-窗口，查看当前-MySQL-的事务隔离级别，SQL-语句如下：">4) 打开 B 窗口，查看当前 MySQL 的事务隔离级别，SQL 语句如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;%tx_isolation%&#39;\G<br>*************************** 1. row ***************************<br>Variable_name: tx_isolation<br>        Value: READ-UNCOMMITTED<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>确定事务隔离级别是 READ-UNCOMMITTED 后，开启一个事务，并使用 UPDATE 语句更新 testnum 数据表，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; BEGIN;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; UPDATE test.testnum SET num&#x3D;num*2 WHERE num&#x3D;2;<br>Query OK, 1 row affected (0.02 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br></code></pre></td></tr></table></figure><h4 id="5-现在返回-A-窗口，再次查询-testnum-数据表，SQL-语句和运行结果如下：">5) 现在返回 A 窗口，再次查询 testnum 数据表，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM testnum;<br>+------+<br>| num  |<br>+------+<br>|    1 |<br>|    4 |<br>|    3 |<br>|    4 |<br>|    5 |<br>+------+<br>5 rows in set (0.02 sec)<br></code></pre></td></tr></table></figure><p><strong>由结果可以看出，A 窗口中的事务读取到了更新后的数据。</strong></p><h4 id="6-下面在-B-窗口中回滚事务，SQL-语句和运行结果如下：">6) 下面在 B 窗口中回滚事务，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; ROLLBACK;<br>Query OK, 0 rows affected (0.09 sec)<br></code></pre></td></tr></table></figure><h4 id="7-在-A-窗口中查询-testnum-数据表，SQL-语句和运行结果如下：">7) 在 A 窗口中查询 testnum 数据表，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM testnum;<br>+------+<br>| num  |<br>+------+<br>|    1 |<br>|    2 |<br>|    3 |<br>|    4 |<br>|    5 |<br>+------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>当 MySQL 的事务隔离级别为 READ UNCOMITTED 时，首先分别在 A 窗口和 B 窗口中开启事务，在 B 窗口中的事务更新但未提交之前， A 窗口中的事务就已经读取到了更新后的数据。但由于 B 窗口中的事务回滚了，所以 A 事务出现了脏读现象。</strong></p><p><strong>使用读提交隔离级别可以解决实例中产生的脏读问题。</strong></p><h2 id="2-读提交（READ-COMMITTED，RC）">2. 读提交（READ COMMITTED，RC）</h2><p><strong>顾名思义，读提交就是只能读到已经提交了的内容。</strong></p><p><strong>如果一个事务只能读取到另一个已提交事务修改过的数据，并且其它事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值，那么这种隔离级别就称之为读提交。</strong></p><p><strong>该隔离级别满足了隔离的简单定义：一个事务从开始到提交前所做的任何改变都是不可见的，事务只能读取到已经提交的事务所做的改变。</strong></p><p><strong>这是大多数数据库系统的默认事务隔离级别（例如 Oracle、SQL Server），但不是 MySQL 默认的。</strong></p><p><strong>例 2 演示了在读提交隔离级别中产生的不可重复读问题。</strong></p><h3 id="示例-2">示例 2</h3><h4 id="1-使用-SET-语句将-MySQL-事务隔离级别修改为-READ-COMMITTED，并查看。SQL-语句和运行结果如下：">1) 使用 SET 语句将 MySQL 事务隔离级别修改为 READ COMMITTED，并查看。SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; show variables like &#39;%tx_isolation%&#39;\G<br>*************************** 1. row ***************************<br>Variable_name: tx_isolation<br>        Value: READ-COMMITTED<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="2-确定当前事务隔离级别为-READ-COMMITTED-后，开启一个事务，SQL-语句和运行结果如下：">2) 确定当前事务隔离级别为 READ COMMITTED 后，开启一个事务，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; BEGIN;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="3-在-B-窗口中开启事务，并使用-UPDATE-语句更新-testnum-数据表，SQL-语句和运行结果如下：">3) 在 B 窗口中开启事务，并使用 UPDATE 语句更新 testnum 数据表，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; BEGIN;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt;  UPDATE test.testnum SET num&#x3D;num*2 WHERE num&#x3D;2;<br>Query OK, 1 row affected (0.07 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br></code></pre></td></tr></table></figure><h4 id="4-在-A-窗口中查询-testnum-数据表，SQL-语句和运行结果如下：">4) 在 A 窗口中查询 testnum 数据表，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * from test.testnum;<br>+------+<br>| num  |<br>+------+<br>|    1 |<br>|    2 |<br>|    3 |<br>|    4 |<br>|    5 |<br>+------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="5-提交-B-窗口中的事务，SQL-语句和运行结果如下：">5) 提交 B 窗口中的事务，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; COMMIT;<br>Query OK, 0 rows affected (0.07 sec)<br></code></pre></td></tr></table></figure><h4 id="6-在-A-窗口中查询-testnum-数据表，SQL-语句和运行结果如下：">6) 在 A 窗口中查询 testnum 数据表，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * from test.testnum;<br>+------+<br>| num  |<br>+------+<br>|    1 |<br>|    4 |<br>|    3 |<br>|    4 |<br>|    5 |<br>+------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>当 MySQL 的事务隔离级别为 READ COMMITTED 时，首先分别在 A 窗口和 B 窗口中开启事务，在 B 窗口中的事务更新并提交后，A 窗口中的事务读取到了更新后的数据。在该过程中，A 窗口中的事务必须要等待 B 窗口中的事务提交后才能读取到更新后的数据，这样就解决了脏读问题。而处于 A 窗口中的事务出现了不同的查询结果，即不可重复读现象。</strong></p><p><strong>使用可重复读隔离级别可以解决实例中产生的不可重复读问题。</strong></p><h2 id="3-可重复读（REPEATABLE-READ，RR）">3. 可重复读（REPEATABLE READ，RR）</h2><p><strong>顾名思义，可重复读是专门针对不可重复读这种情况而制定的隔离级别，可以有效的避免不可重复读。</strong></p><p><strong>在一些场景中，一个事务只能读取到另一个已提交事务修改过的数据，但是第一次读过某条记录后，即使其它事务修改了该记录的值并且提交，之后该事务再读该条记录时，读到的仍是第一次读到的值，而不是每次都读到不同的数据。那么这种隔离级别就称之为可重复读。</strong></p><p><strong>可重复读是 MySQL 的默认事务隔离级别，它能确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。在该隔离级别下，如果有事务正在读取数据，就不允许有其它事务进行修改操作，这样就解决了可重复读问题。</strong></p><p><strong>例 3 演示了在可重复读隔离级别中产生的幻读问题。</strong></p><h3 id="示例-3">示例 3</h3><h4 id="1-在-test-数据库中创建-testuser-数据表，SQL-语句和执行结果如下：">1) 在 test 数据库中创建 testuser 数据表，SQL 语句和执行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE testuser(<br>    -&gt; id INT (4) PRIMARY KEY,<br>    -&gt; name VARCHAR(20));<br>Query OK, 0 rows affected (0.29 sec)<br></code></pre></td></tr></table></figure><h4 id="2-使用-SET-语句修改事务隔离级别，SQL-语句如下：">2) 使用 SET 语句修改事务隔离级别，SQL 语句如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="3-在-A-窗口中开启事务，并查询-testuser-数据表，SQL-语句和运行结果如下：">3) 在 A 窗口中开启事务，并查询 testuser 数据表，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; BEGIN;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; SELECT * FROM test.testuser where id&#x3D;1;<br>Empty set (0.04 sec)<br></code></pre></td></tr></table></figure><h4 id="4-在-B-窗口中开启一个事务，并向-testuser-表中插入一条数据，SQL-语句和运行结果如下：">4) 在 B 窗口中开启一个事务，并向 testuser 表中插入一条数据，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; BEGIN;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt;  INSERT INTO test.testuser VALUES(1,&#39;zhangsan&#39;);<br>Query OK, 1 row affected (0.04 sec)<br>mysql&gt; COMMIT;<br>Query OK, 0 rows affected (0.06 sec)<br></code></pre></td></tr></table></figure><h4 id="5-现在返回-A-窗口，向-testnum-数据表中插入数据，SQL-语句和运行结果如下：">5) 现在返回 A 窗口，向 testnum 数据表中插入数据，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO test.testuser VALUES(1,&#39;lisi&#39;);<br>ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;PRIMARY&#39;<br>mysql&gt;  SELECT * FROM test.testuser where id&#x3D;1;<br>Empty set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>使用串行化隔离级别可以解决实例中产生的幻读问题。</strong></p><h2 id="4-串行化（SERIALIZABLE）">4. 串行化（SERIALIZABLE）</h2><p><strong>如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。那么这种隔离级别就称之为串行化。</strong></p><p><strong>SERIALIZABLE 是最高的事务隔离级别，主要通过强制事务排序来解决幻读问题。简单来说，就是在每个读取的数据行上加上共享锁实现，这样就避免了脏读、不可重复读和幻读等问题。但是该事务隔离级别执行效率低下，且性能开销也最大，所以一般情况下不推荐使用。</strong></p><h1>三、MySQL查看和修改事务隔离级别</h1><p><strong>在《<a href="http://c.biancheng.net/view/7265.html" target="_blank" rel="noopener">MySQL事务隔离级别</a>》一节中我们了解了 MySQL 的事务隔离级别，本节主要介绍查看和修改事务隔离级别的几种方法。</strong></p><h2 id="查看事务隔离级别">查看事务隔离级别</h2><p><strong>在 MySQL 中，可以通过<code>show variables like '%tx_isolation%'</code>或<code>select @@tx_isolation;</code>语句来查看当前事务隔离级别。</strong></p><p><strong>查看当前事务隔离级别的 SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;%tx_isolation%&#39;;<br>+---------------+-----------------+<br>| Variable_name | Value           |<br>+---------------+-----------------+<br>| tx_isolation  | REPEATABLE-READ |<br>+---------------+-----------------+<br>1 row in set, 1 warning (0.17 sec）<br>mysql&gt; select @@tx_isolation;<br>+-----------------+<br>| @@tx_isolation  |<br>+-----------------+<br>| REPEATABLE-READ |<br>+-----------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>结果显示，目前 MySQL 的事务隔离级别是 REPEATABLE-READ。</strong></p><p><strong>另外，还可以使用下列语句分别查询全局和会话的事务隔离级别：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @@global.tx_isolation;<br>SELECT @@session.tx_isolation;<br></code></pre></td></tr></table></figure><p><strong>提示：在MySQL 8.0.3 中，tx_isolation 变量被 transaction_isolation 变量替换了。在 MySQL 8.0.3 版本中查询事务隔离级别，只要把上述查询语句中的 tx_isolation 变量替换成 transaction_isolation 变量即可。</strong></p><h2 id="修改事务隔离级别">修改事务隔离级别</h2><p><strong>MySQL 提供了 SET TRANSACTION 语句，该语句可以改变单个会话或全局的事务隔离级别。语法格式如下：</strong></p><p><strong>SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}</strong></p><p><strong>其中，SESSION 和 GLOBAL 关键字用来指定修改的事务隔离级别的范围：</strong></p><ul><li><strong>SESSION：表示修改的事务隔离级别将应用于当前 session（当前 cmd 窗口）内的所有事务；</strong></li><li><strong>GLOBAL：表示修改的事务隔离级别将应用于所有 session（全局）中的所有事务，且当前已经存在的 session 不受影响；</strong></li><li><strong>如果省略 SESSION 和 GLOBAL，表示修改的事务隔离级别将应用于当前 session 内的下一个还未开始的事务。</strong></li></ul><p><strong>任何用户都能改变会话的事务隔离级别，但是只有拥有 SUPER 权限的用户才能改变全局的事务隔离级别。</strong></p><p><strong>如果使用普通用户修改全局事务隔离级别，就会提示需要超级权限才能执行此操作的错误信息，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">C:\Users\leovo&gt;mysql -utestuser -p<br>Enter password: ******<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 41<br>Server version: 5.7.29-log MySQL Community Server (GPL)<br> <br>Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.<br> <br>Oracle is a registered trademark of Oracle Corporation and&#x2F;or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br> <br>Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.<br> <br>mysql&gt; SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;<br>ERROR 1227 (42000): Access denied; you need (at least one of) the SUPER privilege(s) for this operation<br>mysql&gt; SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="示例-1-2">示例 1</h4><p><strong>使用 SET TRANSACTION 语句分别修改 session 和全局的事务隔离级别SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt;  select @@session.tx_isolation;<br>+------------------------+<br>| @@session.tx_isolation |<br>+------------------------+<br>| SERIALIZABLE           |<br>+------------------------+<br>1 row in set, 1 warning (0.00 sec)<br><br>mysql&gt; SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt;  select @@global.tx_isolation;<br>+-----------------------+<br>| @@global.tx_isolation |<br>+-----------------------+<br>| REPEATABLE-READ       |<br>+-----------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>还可以使用 set tx_isolation 命令直接修改当前 session 的事务隔离级别，SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; set tx_isolation&#x3D;&#39;READ-COMMITTED&#39;;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br>mysql&gt; select @@session.tx_isolation;<br>+------------------------+<br>| @@session.tx_isolation |<br>+------------------------+<br>| READ-COMMITTED         |<br>+------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、MySQL设置事务自动提交（开启和关闭）&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MySQL 默认开启事务自动提交模式，即除非显式的开启事务（BEGIN 或 START TRANSACTION），否则每条 SOL 语句都会被当做一个单独的事务自动执行。但有些情况下，我们需要关
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 事务(1)</title>
    <link href="https://wsdlxgp.top/posts/b0d5.html"/>
    <id>https://wsdlxgp.top/posts/b0d5.html</id>
    <published>2020-06-08T16:00:00.000Z</published>
    <updated>2020-06-19T05:15:20.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-MySQL-事务">A: MySQL 事务</h2><p><strong>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</strong></p><ul><li><strong>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</strong></li><li><strong>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</strong></li><li><strong>事务用来管理 insert,update,delete 语句</strong></li></ul><p><strong>一般来说，事务是必须满足4个条件（ACID）: :原子性（<code>A</code>tomicity，或称不可分割性）、一致性（<code>C</code>onsistency）、隔离性（<code>I</code>solation，又称独立性）、持久性（<code>D</code>urability）。</strong></p><ul><li><strong><code>原子性</code>:一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</strong></li><li><strong><code>一致性</code>:在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</strong></li><li><strong><code>隔离性</code>:数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</strong></li><li><strong><code>持久性</code>:事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</strong></li></ul><blockquote><p><strong>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</strong></p></blockquote><h2 id="B-关于事务的一些术语">B: 关于事务的一些术语</h2><ul><li><strong>开启事务：Start Transaction</strong></li><li><strong>事务结束：End Transaction</strong></li><li><strong>提交事务：Commit Transaction</strong></li><li><strong>回滚事务：Rollback Transaction</strong></li></ul><h2 id="C-MYSQL-事务处理主要有两种方法：">C: MYSQL 事务处理主要有两种方法：</h2><h3 id="1、用-BEGIN-ROLLBACK-COMMIT来实现">1、用 BEGIN, ROLLBACK, COMMIT来实现</h3><ul><li><strong>BEGIN</strong> 开始一个事务</li><li><strong>ROLLBACK</strong> 事务回滚</li><li><strong>COMMIT</strong> 事务确认</li></ul><h3 id="2、直接用-SET-来改变-MySQL-的自动提交模式">2、直接用 SET 来改变 MySQL 的自动提交模式:</h3><ul><li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li><li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; use RUNOOB;<br>Database changed<br>mysql&gt; CREATE TABLE runoob_transaction_test( id int(5)) engine&#x3D;innodb;  # 创建数据表<br>Query OK, 0 rows affected (0.04 sec)<br> <br>mysql&gt; select * from runoob_transaction_test;<br>Empty set (0.01 sec)<br> <br>mysql&gt; begin;  # 开始事务<br>Query OK, 0 rows affected (0.00 sec)<br> <br>mysql&gt; insert into runoob_transaction_test value(5);<br>Query OK, 1 rows affected (0.01 sec)<br> <br>mysql&gt; insert into runoob_transaction_test value(6);<br>Query OK, 1 rows affected (0.00 sec)<br> <br>mysql&gt; commit; # 提交事务<br>Query OK, 0 rows affected (0.01 sec)<br> <br>mysql&gt;  select * from runoob_transaction_test;<br>+------+<br>| id   |<br>+------+<br>| 5    |<br>| 6    |<br>+------+<br>2 rows in set (0.01 sec)<br> <br>mysql&gt; begin;    # 开始事务<br>Query OK, 0 rows affected (0.00 sec)<br> <br>mysql&gt;  insert into runoob_transaction_test values(7);<br>Query OK, 1 rows affected (0.00 sec)<br> <br>mysql&gt; rollback;   # 回滚<br>Query OK, 0 rows affected (0.00 sec)<br> <br>mysql&gt;   select * from runoob_transaction_test;   # 因为回滚所以数据没有插入<br>+------+<br>| id   |<br>+------+<br>| 5    |<br>| 6    |<br>+------+<br>2 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="D-什么是事务">D: 什么是事务</h2><ul><li><strong>事务(TRANSACTION)是作为单个逻辑工作单元执行的一系列操作</strong></li><li><strong>多个操作作为一个整体向系统提交，要么都执行、要么都不执行</strong></li><li><strong>事务是一个不可分割的工作逻辑单元</strong></li></ul><blockquote><p><strong>转账过程就是一个整体</strong><br><strong>它需要两条UPDATE语句来完成，这两条语句是一个整体</strong><br><strong>如果其中任一条出现错误， 则整个转账业务也应取消，两个账户中的余额应恢复</strong><br><strong>到原来的数据，从而确保转账前和转账后的余额不变，即都是1001元</strong></p></blockquote><h2 id="E-为什么需要事务">E: 为什么需要事务</h2><p><strong>了解事务之前，先来看看数据库为什么需要有事务，假设没有事务会有什么影响？</strong></p><p><strong>举一个转账的例子，假设你朋友向你借10000元，你打开APP，乐呵呵的把钱转了，你的卡里已经少了10000元，但是你打电话给朋友时，你朋友说没有收到啊，你这时候肯定卖银行怎么不靠谱，没到账怎么把我卡里的钱给扣了。</strong></p><p><strong>我们来捋一捋上述银行发生的过程，简单的分三步：</strong></p><p><strong>A发起转账10000给B -&gt; A银行卡减10000元 -&gt; B银行卡增加10000元。</strong></p><p><strong>上述案例是第三步出现了问题，如果有事务，则不会发生案例中的事情，可以理解为事务就是这三个步骤是一根绳子上的蚂蚱，要么都成功，要么都失败。</strong></p><p><strong>所以数据库引入事务的主要目的是事务会把数据库会从一种一致状态转换到另一种一致状态，数据库提交工作时可以确保要么所有修改都保存，要么所有修改都不保存。</strong></p><p><strong>了解事务，还需要了解事务的理论依据ACID，也可以说事务的几个特性。</strong></p><h1>一、银行转账问题</h1><ul><li><strong>假定资金从账户A转到账户B，至少需要两步</strong></li><li><ul><li><strong>账户A的资金减少</strong></li></ul></li><li><ul><li><strong>然后账户B的资金相应增加</strong></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database if EXISTS &#96;bankdb&#96;;<br>create database &#96;bankdb&#96;;<br>use &#96;bankdb&#96;;<br><br>drop table IF EXISTS &#96;bank&#96;;<br>create table &#96;bank&#96;(<br>  &#96;cusName&#96; VARCHAR(20),   #用户名<br>  &#96;cusMoney&#96; DECIMAL(10,2)   #用户名<br>)CHARSET &#x3D; &#39;utf8mb4&#39;;<br><br>insert into bank<br>VALUES(&#39;张三&#39;,1000),(&#39;李四&#39;,1);<br><br># 模拟转账<br>UPDATE bank<br>set cusMoney&#x3D;cusMoney-500<br>where cusName&#x3D;&#39;张三&#39;;<br><br>UPDATE bank<br>set cusMoney&#x3D;cusMoney+500<br>where cusName&#x3D;&#39;李四&#39;;<br><br># 查看账户<br>select * from bank;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200612144209571.png" alt="image-20200612144209571"></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200612143038859.png" alt="image-20200612143038859"></p><p><strong>下面开始模拟实现转账功能。从张三的账户直接转账 500 元到李四的账户，可以使用 UPDATE 语句分别修改张三的账户和李四的账户。张三的账户减少 500 元，李四的账户增加 500 元， SQL 语句如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 模拟转账<br>BEGIN;         #开始<br>UPDATE bank<br>set cusMoney&#x3D;cusMoney-500<br>where cusName&#x3D;&#39;张三&#39;;<br><br>UPDATE bank<br>set cusMoney&#x3D;cusMoney+500<br>where cusName&#x3D;&#39;李四&#39;;<br>COMMIT;        # 结束<br><br># 查看一下<br>select * from bank;<br></code></pre></td></tr></table></figure><p>![image-20200614160258903](G:\四期\数据库\mysql文档\09 MySQL 事务+用户权限.assets\image-20200614160258903.png)</p><p><strong>正常情况下，执行以上的转账操作后，余额总和应保持不变，仍为 1001 元。但是，如果在这个过程的其中一个环节出现差错，如在张三的账户减少 500 元之后，这时发生了服务器故障，李四的账户没有立即增加 500 元，此时，第三方读取到两个账户的余额总和变为 500+1=501 元，即账户总额间少了 500 元。</strong></p><p><strong>MySQL 为了解决此类问题，提供了事务。事务可以将一系列的数据操作捆绑成一个整体进行统一管理，如果某一事务执行成功，则在该事务中进行的所有数据更改均会提交，成为数据库中的永久组成部分。如果事务执行时遇到错误，则就必须取消或回滚。取消或回滚后，数据将全部恢复到操作前的状态，所有数据的更改均被清除。</strong></p><p><strong>MySQL 通过事务保证了数据的一致性。上述提到的转账过程就是一个事务，它需要两条 UPDATE 语句来完成。这两条语句是一个整体，如果其中任何一个环节出现问题，则整个转账业务也应取消，两个账户中的余额应恢复为原来的数据，从而确保转账前和转账后的余额总和不变，即都是 1001 元。</strong></p><h1>二、执行事务的语法和流程</h1><p><strong>SQL 使用下列语句来管理事务。</strong></p><h4 id="1-开始事务">1) 开始事务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">BEGIN;<br></code></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">START TRANSACTION;<br></code></pre></td></tr></table></figure><p><strong>这个语句显式地标记一个事务的起始点。</strong></p><h4 id="2-提交事务">2) 提交事务</h4><p><strong>MySQL 使用下面的语句来提交事务：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">COMMIT;<br></code></pre></td></tr></table></figure><p><strong>COMMIT 表示提交事务，即提交事务的所有操作，具体地说，就是将事务中所有对数据库的更新都写到磁盘上的物理数据库中，事务正常结束。</strong></p><p><strong>提交事务，意味着将事务开始以来所执行的所有数据都修改成为数据库的永久部分，因此也标志着一个事务的结束。一旦执行了该命令，将不能回滚事务。只有在所有修改都准备好提交给数据库时，才执行这一操作。</strong></p><h4 id="3-回滚（撤销）事务">3) 回滚（撤销）事务</h4><p><strong>MySQL 使用以下语句回滚事务：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ROLLBACK;<br></code></pre></td></tr></table></figure><p><strong>ROLLBACK 表示撤销事务，即在事务运行的过程中发生了某种故障，事务不能继续执行，系统将事务中对数据库的所有已完成的操作全部撤销，回滚到事务开始时的状态。这里的操作指对数据库的更新操作。</strong></p><p><strong>当事务执行过程中遇到错误时，使用 ROLLBACK 语句使事务回滚到起点或指定的保持点处。同时，系统将清除自事务起点或到某个保存点所做的所有的数据修改，并且释放由事务控制的资源。因此，这条语句也标志着事务的结束。</strong></p><h4 id="总结">总结</h4><p><strong>BEGIN 或 START TRANSACTION 语句后面的 SQL 语句对数据库数据的更新操作都将记录在事务日志中，直至遇到 ROLLBACK 语句或 COMMIT 语句。如果事务中某一操作失败且执行了 ROLLBACK 语句，那么在开启事务语句之后所有更新的数据都能回滚到事务开始前的状态。如果事务中的所有操作都全部正确完成，并且使用了 COMMIT 语句向数据库提交更新数据，则此时的数据又处在新的一致状态。</strong></p><h2 id="1、实例演示">1、实例演示</h2><p><strong>下面通过两个例子来演示一下 MySQL 事务的具体用法。</strong></p><h3 id="示例-1">示例 1</h3><p><strong>下面模拟在张三的账户减少 500 元后，李四的账户还未增加 500 时，有其他会话访问数据表的场景。由于代码需要在两个窗口中执行，为了方便阅读，这里我们称为 A 窗口和 B 窗口。</strong></p><h4 id="1-在-A-窗口中开启一个事务，并更新-mybank-数据库中-bank-表的数据，SQL-语句和运行结果如下：">1) 在 A 窗口中开启一个事务，并更新 mybank 数据库中 bank 表的数据，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; USE mybank;<br>Database changed<br>mysql&gt; BEGIN;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; UPDATE bank SET cusMoney &#x3D; cusMoney-500<br>    -&gt; WHERE cusName&#x3D;&#39;张三&#39;;<br>Query OK, 1 row affected (0.05 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br></code></pre></td></tr></table></figure><h4 id="2-在-B-窗口中查询-bank-数据表中的数据，SQL-语句和运行结果如下：">2) 在 B 窗口中查询 bank 数据表中的数据，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM mybank.bank;<br>+--------------+--------------+<br>| cusName | cusMoney |<br>+--------------+--------------+<br>| 张三         |      1000.00 |<br>| 李四         |         1.00 |<br>+--------------+--------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>从结果可以看出，虽然 A 窗口中的事务已经更改了 bank 表中的数据，但没有立即更新数据，这时其他会话读取到的仍然是更新前的数据。</strong></p><h4 id="3-在-A-窗口中继续执行事务并提交事务，SQL-语句和运行结果如下：">3) 在 A 窗口中继续执行事务并提交事务，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; UPDATE bank SET cusMoney &#x3D; cusMoney+500<br>    -&gt; WHERE cusName&#x3D;&#39;李四&#39;;<br>Query OK, 1 row affected (0.05 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>mysql&gt; COMMIT;<br>Query OK, 0 rows affected (0.07 sec)<br></code></pre></td></tr></table></figure><h4 id="4-在-B-窗口中再次查询-bank-数据表的数据，SQL-语句和运行结果如下：">4) 在 B 窗口中再次查询 bank 数据表的数据，SQL 语句和运行结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM mybank.bank;<br>+--------------+--------------+<br>| cusName | cusMoney |<br>+--------------+--------------+<br>| 张三         |       500.00 |<br>| 李四         |       501.00 |<br>+--------------+--------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>在 A 窗口中执行 COMMIT 提交事务后，对数据所做的更新将一起提交，其他会话读取到的是更新后的数据。从结果可以看出张三和李四的总账户余额和转账前保持一致，这样数据从一个一致性状态更新到另一个一致性状态。</strong></p><p><strong>前面提到，当事务在执行中出现问题，也就是不能按正常的流程执行一个完整的事务时，可以使用 ROLLBACK 语句进行回滚，使用数据恢复到初始状态。</strong></p><p><strong>在例 1 中，张三的账户余额已经减少到 500 元，如果再转出 1000 元，将会出现余额为负数，因此需要回滚到原始状态。如例 2 所示。</strong></p><h3 id="示例-2">示例 2</h3><p><strong>将张三的账户余额减少 1000 元，并让事务回滚，SQL 语句和运行结果如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; BEGIN;<br>Query OK, 0 rows affected (0.00 sec)<br> <br>mysql&gt; UPDATE bank SET cusMoney &#x3D; cusMoney-1000 WHERE cusName&#x3D;&#39;张三&#39;;<br>Query OK, 1 row affected (0.04 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br> <br>mysql&gt; ROLLBACK;<br>Query OK, 0 rows affected (0.07 sec)<br> <br>mysql&gt; SELECT * FROM mybank.bank;<br>+--------------+--------------+<br>| cusName | cusMoney |<br>+--------------+--------------+<br>| 张三         |       500.00 |<br>| 李四         |       501.00 |<br>+--------------+--------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>从结果可以看出，执行事务回滚后，账户数据恢复到初始状态，即该事务执行之前的状态。</strong></p><h3 id="拓展">拓展</h3><p><strong>在数据库操作中，为了有效保证并发读取数据的正确性，提出了事务的隔离级别。在例 1 和例 2 的演示中，事务的隔离级别为默认隔离级别。在 MySQL 中，事务的默认隔离级别是 REPEATABLE-READ （可重读）隔离级别，即事务未结束时（未执行 COMMIT 或 ROLLBACK），其它会话只能读取到未提交数据。</strong></p><p><strong>请猛击《<a href="http://c.biancheng.net/view/7265.html" target="_blank" rel="noopener">MySQL事务隔离级别</a>》了解更多内容。</strong></p><h2 id="2、注意事项">2、注意事项</h2><p><strong>MySQL 事务是一项非常消耗资源的功能，大家在使用过程中要注意以下几点。</strong></p><h4 id="1-事务尽可能简短">1) 事务尽可能简短</h4><p><strong>事务的开启到结束会在数据库管理系统中保留大量资源，以保证事务的原子性、一致性、隔离性和持久性。如果在多用户系统中，较大的事务将会占用系统的大量资源，使得系统不堪重负，会影响软件的运行性能，甚至导致系统崩溃。</strong></p><h4 id="2-事务中访问的数据量尽量最少">2) 事务中访问的数据量尽量最少</h4><p><strong>当并发执行事务处理时，事务操作的数据量越少，事务之间对相同数据的操作就越少。</strong></p><h4 id="3-查询数据时尽量不要使用事务">3) 查询数据时尽量不要使用事务</h4><p><strong>对数据进行浏览查询操作并不会更新数据库的数据，因此应尽量不使用事务查询数据，避免占用过量的系统资源。</strong></p><h4 id="4-在事务处理过程中尽量不要出现等待用户输入的操作">4) 在事务处理过程中尽量不要出现等待用户输入的操作</h4><p><strong>在处理事务的过程中，如果需要等待用户输入数据，那么事务会长时间地占用资源，有可能造成系统阻塞。</strong></p><h3 id="回滚">回滚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">BEGIN;<br>UPDATE bank<br>set cusMoney&#x3D;cusMoney+500<br>where cusName&#x3D;&#39;张三&#39;;<br>ROLLBACK;<br><br>select * from bank;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200612144437603.png" alt="image-20200612144437603"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">BEGIN;<br>UPDATE bank<br>set cusMoney&#x3D;cusMoney+500<br>where cusName&#x3D;&#39;张三&#39;;<br>COMMIT;<br><br>select * from bank;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200612144620291.png" alt="image-20200612144620291"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">查看事务状态:SHOW VARIABLES LIKE &#39;AUTOCOMMIT&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200612150215912.png" alt="image-20200612150215912"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-MySQL-事务&quot;&gt;A: MySQL 事务&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引</title>
    <link href="https://wsdlxgp.top/posts/8338.html"/>
    <id>https://wsdlxgp.top/posts/8338.html</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2020-06-19T05:15:10.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-为什么要使用索引">A: 为什么要使用索引</h2><p><strong>索引是 MySQL 中一种十分重要的数据库对象。它是数据库性能调优技术的基础，常用于实现数据的快速检索。</strong></p><p><strong>索引就是根据表中的一列或若干列按照一定顺序建立的列值与记录行之间的对应关系表，实质上是一张描述索引列的列值与原表中记录行之间一一对应关系的有序表。</strong></p><p><strong>在 MySQL 中，通常有以下两种方式访问数据库表的行数据：</strong></p><h4 id="1-顺序访问">1) 顺序访问</h4><p><strong>顺序访问是在表中实行全表扫描，从头到尾逐行遍历，直到在无序的行数据中找到符合条件的目标数据。这种方式实现比较简单，但是当表中有大量数据的时候，效率非常低下。例如，在几千万条数据中查找少量的数据时，使用顺序访问方式将会遍历所有的数据，花费大量的时间，显然会影响数据库的处理性能。</strong></p><h4 id="2-索引访问">2) 索引访问</h4><p><strong>索引访问是通过遍历索引来直接访问表中记录行的方式。使用这种方式的前提是对表建立一个索引，在列上创建了索引之后，查找数据时可以直接根据该列上的索引找到对应记录行的位置，从而快捷地查找到数据。索引存储了指定列数据值的指针，根据指定的排序顺序对这些指针排序。</strong></p><p><strong>例如，在学生基本信息表 students 中，如果基于 student_id 建立了索引，系统就建立了一张索引列到实际记录的映射表，当用户需要查找 student_id 为 12022 的数据的时候，系统先在 student_id 索引上找到该记录，然后通过映射表直接找到数据行，并且返回该行数据。因为扫描索引的速度一般远远大于扫描实际数据行的速度，所以采用索引的方式可以大大提高数据库的工作效率。</strong></p><h2 id="B-索引的分类">B: 索引的分类</h2><p><strong>索引的类型和存储引擎有关，每种存储引擎所支持的索引类型不一定完全相同。根据存储方式的不同，MySQL 中常用的索引在物理上分为以下两类。</strong></p><h4 id="1-B-树索引">1) B-树索引</h4><p><strong>B-树索引又称为 BTREE 索引，目前大部分的索引都是采用 B-树索引来存储的。B-树索引是一个典型的<a href="http://c.biancheng.net/data_structure/" target="_blank" rel="noopener">数据结构</a>，其包含的组件主要有以下几个：</strong></p><ul><li><strong>叶子节点：包含的条目直接指向表里的数据行。叶子节点之间彼此相连，一个叶子节点有一个指向下一个叶子节点的指针。</strong></li><li><strong>分支节点：包含的条目指向索引里其他的分支节点或者叶子节点。</strong></li><li><strong>根节点：一个 B-树索引只有一个根节点，实际上就是位于树的最顶端的分支节点。</strong></li></ul><h4 id="2-哈希索引">2) 哈希索引</h4><p><strong>哈希（Hash）一般翻译为“散列”，也有直接音译成“哈希”的，就是把任意长度的输入（又叫作预映射，pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。</strong></p><p><strong>哈希索引也称为散列索引或 HASH 索引。MySQL 目前仅有 MEMORY 存储引擎和 HEAP 存储引擎支持这类索引。其中，MEMORY 存储引擎可以支持 B- 树索引和 HASH 索引，且将 HASH 当成默认索引。</strong></p><h2 id="C-常用索引类型">C: 常用索引类型</h2><table><thead><tr><th>普通索引</th><th>●基本索引类型<br>●允许在定义索引的列中插入重复值和空值</th></tr></thead><tbody><tr><td>唯一索引</td><td>●索引列数据不重复<br>●允许有空值</td></tr><tr><td>主键索引</td><td>●主键列中的每个值是非空、唯一的</td></tr><tr><td>复合索引</td><td>●一个主键将自动创建主键索引<br>●将多个列组合作为索引</td></tr><tr><td>全文索引</td><td>●支持值的全文查找</td></tr><tr><td>空间索引</td><td>●允许重复值和空值<br>●对空间数据类型的列建立的索引</td></tr></tbody></table><h2 id="D-索引的使用原则和注意事项">D: 索引的使用原则和注意事项</h2><p><strong>虽然索引可以加快查询速度，提高 MySQL 的处理性能，但是过多地使用索引也会造成以下弊端：</strong></p><ul><li><strong>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</strong></li><li><strong>除了数据表占数据空间之外，每一个索引还要占一定的物理空间。如果要建立聚簇索引，那么需要的空间就会更大。</strong></li><li><strong>当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</strong></li></ul><blockquote><p><strong>注意：索引可以在一些情况下加速查询，但是在某些情况下，会降低效率。</strong></p></blockquote><p><strong>索引只是提高效率的一个因素，因此在建立索引的时候应该遵循以下原则：</strong></p><ul><li><strong>在经常需要搜索的列上建立索引，可以加快搜索的速度。</strong></li><li><strong>在作为主键的列上创建索引，强制该列的唯一性，并组织表中数据的排列结构。</strong></li><li><strong>在经常使用表连接的列上创建索引，这些列主要是一些外键，可以加快表连接的速度。</strong></li><li><strong>在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，所以其指定的范围是连续的。</strong></li><li><strong>在经常需要排序的列上创建索引，因为索引已经排序，所以查询时可以利用索引的排序，加快排序查询。</strong></li><li><strong>在经常使用 WHERE 子句的列上创建索引，加快条件的判断速度。</strong></li></ul><p><strong>与此对应，在某些应用场合下建立索引不能提高 MySQL 的工作效率，甚至在一定程度上还带来负面效应，降低了数据库的工作效率，一般来说不适合创建索引的环境如下：</strong></p><ul><li><strong>对于那些在查询中很少使用或参考的列不应该创建索引。因为这些列很少使用到，所以有索引或者无索引并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度，并增大了空间要求。</strong></li><li><strong>对于那些只有很少数据值的列也不应该创建索引。因为这些列的取值很少，例如人事表的性别列。查询结果集的数据行占了表中数据行的很大比例，增加索引并不能明显加快检索速度。</strong></li><li><strong>对于那些定义为 TEXT、IMAGE 和 BIT 数据类型的列不应该创建索引。因为这些列的数据量要么相当大，要么取值很少。</strong></li><li><strong>当修改性能远远大于检索性能时，不应该创建索引。因为修改性能和检索性能是互相矛盾的。当创建索引时，会提高检索性能，降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</strong></li></ul><h1>一、MySQL创建索引</h1><h2 id="1、MySQL-提供了三种创建索引的方法：">1、MySQL 提供了三种创建索引的方法：</h2><h3 id="1-使用-CREATE-INDEX-语句">1) 使用 CREATE INDEX 语句</h3><p><strong>可以使用专门用于创建索引的 CREATE INDEX 语句在一个已有的表上创建索引，但该语句不能创建主键。</strong></p><h5 id="语法格式：">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE &lt;索引名&gt; ON &lt;表名&gt; (&lt;列名&gt; [&lt;长度&gt;] [ ASC | DESC])<br></code></pre></td></tr></table></figure><h3 id="2-使用-CREATE-TABLE-语句">2) 使用 CREATE TABLE 语句</h3><p><strong>索引也可以在创建表（CREATE TABLE）的同时创建。在 CREATE TABLE 语句中添加以下语句。语法格式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CONSTRAINT PRIMARY KEY [索引类型] (&lt;列名&gt;,…)<br></code></pre></td></tr></table></figure><h5 id="语法格式：-2">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">KEY | INDEX [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)<br></code></pre></td></tr></table></figure><p><strong>在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的索引。</strong></p><h5 id="语法格式：-3">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UNIQUE [ INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)<br></code></pre></td></tr></table></figure><p><strong>在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的唯一性索引。</strong></p><h5 id="语法格式：-4">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">FOREIGN KEY &lt;索引名&gt; &lt;列名&gt;<br></code></pre></td></tr></table></figure><p><strong>在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的外键。</strong></p><p><strong>在使用 CREATE TABLE 语句定义列选项的时候，可以通过直接在某个列定义后面添加 PRIMARY KEY 的方式创建主键。而当主键是由多个列组成的多列索引时，则不能使用这种方法，只能用在语句的最后加上一个 PRIMARY KRY(&lt;列名&gt;，…) 子句的方式来实现。</strong></p><h4 id="3-使用-ALTER-TABLE-语句">3) 使用 ALTER TABLE 语句</h4><p><strong>CREATE INDEX 语句可以在一个已有的表上创建索引，ALTER TABLE 语句也可以在一个已有的表上创建索引。在使用 ALTER TABLE 语句修改表的同时，可以向已有的表添加索引。具体的做法是在 ALTER TABLE 语句中添加以下语法成分的某一项或几项。</strong></p><h5 id="语法格式：-5">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ADD INDEX [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)<br></code></pre></td></tr></table></figure><p><strong>在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表添加索引。</strong></p><h5 id="语法格式：-6">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ADD PRIMARY KEY [&lt;索引类型&gt;] (&lt;列名&gt;,…)<br></code></pre></td></tr></table></figure><p><strong>在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表添加主键。</strong></p><h5 id="语法格式：-7">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ADD UNIQUE [ INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)<br></code></pre></td></tr></table></figure><p><strong>在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表添加唯一性索引。</strong></p><h5 id="语法格式：-8">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ADD FOREIGN KEY [&lt;索引名&gt;] (&lt;列名&gt;,…)<br></code></pre></td></tr></table></figure><p><strong>在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表添加外键。</strong></p><h2 id="2、创建一般索引">2、创建一般索引</h2><p><strong>创建一个表 tb_stu_info，在该表的 height 字段创建一般索引。输入的 SQL 语句和执行过程如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE tb_stu_info<br>    -&gt; (<br>    -&gt; id INT NOT NULL,<br>    -&gt; name CHAR(45) DEFAULT NULL,<br>    -&gt; dept_id INT DEFAULT NULL,<br>    -&gt; age INT DEFAULT NULL,<br>    -&gt; height INT DEFAULT NULL,<br>    -&gt; INDEX(height)<br>    -&gt; );<br>Query OK，0 rows affected (0.40 sec)<br>mysql&gt; SHOW CREATE TABLE tb_stu_info\G<br>*************************** 1. row ***************************<br>       Table: tb_stu_info<br>Create Table: CREATE TABLE &#96;tb_stu_info&#96; (<br>  &#96;id&#96; int(11) NOT NULL,<br>  &#96;name&#96; char(45) DEFAULT NULL,<br>  &#96;dept_id&#96; int(11) DEFAULT NULL,<br>  &#96;age&#96; int(11) DEFAULT NULL,<br>  &#96;height&#96; int(11) DEFAULT NULL,<br>  KEY &#96;height&#96; (&#96;height&#96;)<br>) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;gb2312<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="3、创建唯一索引">3、创建唯一索引</h2><p><strong>创建一个表 tb_stu_info2，在该表的 id 字段上使用 UNIQUE 关键字创建唯一索引。输入的 SQL 语句和执行过程如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE tb_stu_info2<br>    -&gt; (<br>    -&gt; id INT NOT NULL,<br>    -&gt; name CHAR(45) DEFAULT NULL,<br>    -&gt; dept_id INT DEFAULT NULL,<br>    -&gt; age INT DEFAULT NULL,<br>    -&gt; height INT DEFAULT NULL,<br>    -&gt; UNIQUE INDEX(height)<br>    -&gt; );<br>Query OK，0 rows affected (0.40 sec)<br><br>mysql&gt; SHOW CREATE TABLE tb_stu_info2\G<br>*************************** 1. row ***************************<br>       Table: tb_stu_info2<br>Create Table: CREATE TABLE &#96;tb_stu_info2&#96; (<br>  &#96;id&#96; int(11) NOT NULL,<br>  &#96;name&#96; char(45) DEFAULT NULL,<br>  &#96;dept_id&#96; int(11) DEFAULT NULL,<br>  &#96;age&#96; int(11) DEFAULT NULL,<br>  &#96;height&#96; int(11) DEFAULT NULL,<br>  UNIQUE KEY &#96;height&#96; (&#96;height&#96;)<br>) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;gb2312<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h1>二、查看索引</h1><p><strong>在 MySQL 中，如果要查看已创建的索引的情况，可以使用 SHOW INDEX 语句查看表中创建的索引。</strong></p><h5 id="语法格式：-9">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SHOW INDEX FROM &lt;表名&gt; [ FROM &lt;数据库名&gt;]<br></code></pre></td></tr></table></figure><p><strong>语法说明如下：</strong></p><ul><li><strong><code>&lt;表名&gt;</code>：要显示索引的表。</strong></li><li><strong><code>&lt;数据库名&gt;</code>：要显示的表所在的数据库。</strong></li></ul><p><strong>显示数据库 mytest 的表 course 的索引情况。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SHOW INDEX FROM course FROM mytest;<br></code></pre></td></tr></table></figure><p><strong>该语句会返回一张结果表，该表有如下几个字段，每个字段所显示的内容说明如下。</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Table</td><td>表示创建索引的数据表名，这里是 tb_stu_info2 数据表。</td></tr><tr><td>Non_unique</td><td>表示该索引是否是唯一索引。若不是唯一索引，则该列的值为 1；若是唯一索引，则该列的值为 0。</td></tr><tr><td>Key_name</td><td>表示索引的名称。</td></tr><tr><td>Seq_in_index</td><td>表示该列在索引中的位置，如果索引是单列的，则该列的值为 1；如果索引是组合索引，则该列的值为每列在索引定义中的顺序。</td></tr><tr><td>Column_name</td><td>表示定义索引的列字段。</td></tr><tr><td>Collation</td><td>表示列以何种顺序存储在索引中。在 MySQL 中，升序显示值“A”（升序），若显示为 NULL，则表示无分类。</td></tr><tr><td>Cardinality</td><td>索引中唯一值数目的估计值。基数根据被存储为整数的统计数据计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL 使用该索引的机会就越大。</td></tr><tr><td>Sub_part</td><td>表示列中被编入索引的字符的数量。若列只是部分被编入索引，则该列的值为被编入索引的字符的数目；若整列被编入索引，则该列的值为 NULL。</td></tr><tr><td>Packed</td><td>指示关键字如何被压缩。若没有被压缩，值为 NULL。</td></tr><tr><td>Null</td><td>用于显示索引列中是否包含 NULL。若列含有 NULL，该列的值为 YES。若没有，则该列的值为 NO。</td></tr><tr><td>Index_type</td><td>显示索引使用的类型和方法（BTREE、FULLTEXT、HASH、RTREE）。</td></tr><tr><td>Comment</td><td>显示评注。</td></tr></tbody></table><h3 id="【实例-】">【实例 】</h3><p><strong>使用 SHOW INDEX 语句查看表 tb_stu_info2 的索引信息，输入的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW INDEX FROM tb_stu_info2\G<br>*************************** 1. row ***************************<br>        Table: tb_stu_info2<br>   Non_unique: 0<br>     Key_name: height<br>Seq_in_index: 1<br>  Column_name: height<br>    Collation: A<br>  Cardinality: 0<br>     Sub_part: NULL<br>       Packed: NULL<br>         Null: YES<br>   Index_type: BTREE<br>      Comment:<br>Index_comment:<br>1 row in set (0.03 sec)<br></code></pre></td></tr></table></figure><h1>三、MySQL修改和删除索引</h1><h2 id="基本语法">基本语法</h2><p><strong>当不再需要索引时，可以使用 DROP INDEX 语句或 ALTER TABLE 语句来对索引进行删除。</strong></p><h4 id="1-使用-DROP-INDEX-语句">1) 使用 DROP INDEX 语句</h4><h5 id="语法格式：-10">语法格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP INDEX &lt;索引名&gt; ON &lt;表名&gt;<br></code></pre></td></tr></table></figure><h4 id="语法说明如下：">语法说明如下：</h4><ul><li><strong><code>&lt;索引名&gt;</code>：要删除的索引名。</strong></li><li><strong><code>&lt;表名&gt;</code>：指定该索引所在的表名。</strong></li></ul><h4 id="2-使用-ALTER-TABLE-语句">2) 使用 ALTER TABLE 语句</h4><p><strong>根据 ALTER TABLE 语句的语法可知，该语句也可以用于删除索引。具体使用方法是将 ALTER TABLE 语句的语法中部分指定为以下子句中的某一项。</strong></p><ul><li><strong>DROP PRIMARY KEY：表示删除表中的主键。一个表只有一个主键，主键也是一个索引。</strong></li><li><strong>DROP INDEX index_name：表示删除名称为 index_name 的索引。</strong></li><li><strong>DROP FOREIGN KEY fk_symbol：表示删除外键。</strong></li></ul><blockquote><p><strong>注意：如果删除的列是索引的组成部分，那么在删除该列时，也会将该列从索引中删除；如果组成索引的所有列都被删除，那么整个索引将被删除。</strong></p></blockquote><h2 id="删除索引">删除索引</h2><h3 id="【实例-1】">【实例 1】</h3><p><strong>删除表 tb_stu_info 中的索引，输入的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mysql&gt; DROP INDEX height<br>    -&gt; ON tb_stu_info;<br>Query OK, 0 rows affected (0.27 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br>mysql&gt; SHOW CREATE TABLE tb_stu_info\G<br>*************************** 1. row ***************************<br>       Table: tb_stu_info<br>Create Table: CREATE TABLE `tb_stu_info` (<br>  `id` int(11) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  `name` char(45)<span class="hljs-built_in"> DEFAULT </span><span class="hljs-literal">NULL</span>,<br>  `dept_id` int(11)<span class="hljs-built_in"> DEFAULT </span><span class="hljs-literal">NULL</span>,<br>  `age` int(11)<span class="hljs-built_in"> DEFAULT </span><span class="hljs-literal">NULL</span>,<br>  `height` int(11)<span class="hljs-built_in"> DEFAULT </span><span class="hljs-literal">NULL</span><br>) <span class="hljs-attribute">ENGINE</span>=InnoDB<span class="hljs-built_in"> DEFAULT </span><span class="hljs-attribute">CHARSET</span>=gb2312<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-builtin-name">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="【实例-2】">【实例 2】</h3><p><strong>删除表 tb_stu_info2 中名称为 id 的索引，输入的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mysql&gt; ALTER TABLE tb_stu_info2<br>    -&gt; DROP INDEX height;<br>Query OK, 0 rows affected (0.13 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br>mysql&gt; SHOW CREATE TABLE tb_stu_info2\G<br>*************************** 1. row ***************************<br>       Table: tb_stu_info2<br>Create Table: CREATE TABLE `tb_stu_info2` (<br>  `id` int(11) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  `name` char(45)<span class="hljs-built_in"> DEFAULT </span><span class="hljs-literal">NULL</span>,<br>  `dept_id` int(11)<span class="hljs-built_in"> DEFAULT </span><span class="hljs-literal">NULL</span>,<br>  `age` int(11)<span class="hljs-built_in"> DEFAULT </span><span class="hljs-literal">NULL</span>,<br>  `height` int(11)<span class="hljs-built_in"> DEFAULT </span><span class="hljs-literal">NULL</span><br>) <span class="hljs-attribute">ENGINE</span>=InnoDB<span class="hljs-built_in"> DEFAULT </span><span class="hljs-attribute">CHARSET</span>=gb2312<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-builtin-name">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h1>四、MySQL索引的设计原则</h1><p><strong>索引的设计可以遵循一些已有的原则，创建索引的时候应尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。本节将介绍一些索引的设计原则。</strong></p><h4 id="1-选择唯一性索引">1. 选择唯一性索引</h4><p><strong>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。如果使用姓名的话，可能存在同名现象，从而降低查询速度。</strong></p><h4 id="2-为经常需要排序、分组和联合操作的字段建立索引">2. 为经常需要排序、分组和联合操作的字段建立索引</h4><p><strong>经常需要 ORDER BY、GROUP BY、DISTINCT 和 UNION 等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</strong></p><h4 id="3-为常作为查询条件的字段建立索引">3. 为常作为查询条件的字段建立索引</h4><p><strong>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</strong></p><p><strong>注意：常查询条件的字段不一定是所要选择的列，换句话说，最适合索引的列是出现在 WHERE 子句中的列，或连接子句中指定的列，而不是出现在 SELECT 关键字后的选择列表中的列。</strong></p><h4 id="4-限制索引的数目">4. 限制索引的数目</h4><p><strong>索引的数目不是“越多越好”。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。在修改表的内容时，索引必须进行更新，有时还可能需要重构。因此，索引越多，更新表的时间就越长。</strong></p><p><strong>如果有一个索引很少利用或从不使用，那么会不必要地减缓表的修改速度。此外，MySQL 在生成一个执行计划时，要考虑各个索引，这也要花费时间。创建多余的索引给查询优化带来了更多的工作。索引太多，也可能会使 MySQL 选择不到所要使用的最佳索引。</strong></p><h4 id="5-尽量使用数据量少的索引">**5. **尽量使用数据量少的索引</h4><p><strong>如果索引的值很长，那么查询的速度会受到影响。例如，对一个 CHAR(100) 类型的字段进行全文检索需要的时间肯定要比对 CHAR(10) 类型的字段需要的时间要多。</strong></p><h4 id="6-数据量小的表最好不要使用索引">6. 数据量小的表最好不要使用索引</h4><p><strong>由于数据较小，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</strong></p><h4 id="7-尽量使用前缀来索引">7. 尽量使用前缀来索引</h4><p><strong>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT 和 BLOG 类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</strong></p><h4 id="8-删除不再使用或者很少使用的索引">**8. **删除不再使用或者很少使用的索引</h4><p><strong>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。应该定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</strong></p><h4 id="总结">总结</h4><p><strong>选择索引的最终目的是为了使查询的速度变快，上面给出的原则是最基本的准则，但不能只拘泥于上面的准则。应该在学习和工作中不断的实践，根据应用的实际情况进行分析和判断，选择最合适的索引方式。</strong></p><h1>小练习</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create index index_fruit<br>on fruit(sid);<br><br>show index from fruit;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200611180313902.png" alt="image-20200611180313902"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop index index_fruit on fruit;<br>show index from fruit;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200611180351884.png" alt="image-20200611180351884"></p><h2 id="创建索引的指导原则">创建索引的指导原则</h2><h3 id="按照下列标准选择建立索引的列">按照下列标准选择建立索引的列</h3><p><strong>◆频繁搜索的列</strong><br><strong>◆经常用作查询选择的列</strong><br><strong>◆经常排序、分组的列</strong><br><strong>◆经常用作连接的列(主键/外键)</strong></p><h3 id="请不要使用下面的列创建索引">请不要使用下面的列创建索引</h3><p><strong>◆仅包含几个不同值的列</strong><br><strong>◆表中仅包含几行</strong></p><h2 id="使用索引时注意事项">使用索引时注意事项</h2><ul><li><strong>查询时减少使用*返回全部列，不要返回不需要的列</strong></li><li><strong>索引应该尽量小，在字节数小的列上建立索引</strong></li><li><strong>WHERE子句中有多个条件表达式时，包含索引列的表达式应置3 F其他条件表达式之前</strong></li><li><strong>避免在ORDER BY子句中使用表达式</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-为什么要使用索引&quot;&gt;A: 为什么要使用索引&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;索引是 MySQL 中一种十分重要的数据库对象。它是数据库性能调优技术的基础，常用于实现数据的快速检索。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;索引就是根据表中的一列或若干列
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL视图</title>
    <link href="https://wsdlxgp.top/posts/a0ec.html"/>
    <id>https://wsdlxgp.top/posts/a0ec.html</id>
    <published>2020-06-06T16:00:00.000Z</published>
    <updated>2020-06-19T05:15:02.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A：什么是视图？视图是干什么用的？">A：什么是视图？视图是干什么用的？</h2><ul><li><strong>视图（view）是一种虚拟存在的表，是一个逻辑表，本身并不包含数据。作为一个select语句保存在数据字典中的。</strong></li><li><strong>通过视图，可以展现基表的部分数据；视图数据来自定义视图的查询中使用的表，使用视图动态生成。</strong></li><li><strong>基表：用来创建视图的表叫做基表base table</strong></li></ul><p><strong>数据库视图的创建是基于<code>SQL SELECT query</code>和<code>JOIN</code>的。视图和表很相似，它也包含行和列，所以可以直接对它进行查询操作。另外大多数的数据库同样允许进行<code>UPADTE</code>操作，但必须满足一定的条件。视图的数据结构如图：</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614111224870.png" alt="image-20200614111224870"></p><p><strong>我们需要理解，数据库并没有存储视图所关联的数据，存储的只是视图的定义也就是相应的<code>SQL SELECT and JOIN</code>。</strong></p><h2 id="B：为什么要使用视图？">B：为什么要使用视图？</h2><h3 id="（a）因为视图的诸多优点，如下">（a）因为视图的诸多优点，如下</h3><ul><li><p><strong><code>视图可以简化你的复杂查询</code>：视图的定义是基于一个查询声明，这个查询声明可能关联了很多底层表。我们可以使用视图向数据库的使用者或者外部程序隐藏复杂的底层表关系。</strong></p></li><li><p><strong><code>视图可以限制特定用户的数据访问权</code>：有时我们希望隐藏某些表的一些数据对一些特定用户，这时视图可以很好的帮助我们实现这个功能。</strong></p></li><li><p><strong><code>视图可以使用可计算的列</code>：我们知道表的列一般都不支持动态计算，但是视图的列是支持的。假设在有一张<code>order_details</code>表，其中包含<code>product_nums</code>和<code>price_each</code>两列，当我们需要查询<code>order</code>总价时我们就需要查询出结果后在代码中进行计算，如果我们使用视图的话可以在视图中添加一列<code>total_price(product_nums*price_each)</code>。这样就可以直接查询出<code>order</code>的总价。</strong></p></li><li><p><strong><code>视图可以帮助我们兼容旧的系统</code>：假设我们拥有一个数据中心，这个数据中心被很多的程序在使用。如果有一天我们决定重新设计这个数据中心以适应一些新的业务需求，可能需要删除一些旧的表，并且创建一些新的表，但是我们并不希望这些变动影响到那些老的程序。那么我们可以创建一些视图用来适配那些老的程序</strong>。</p></li><li><p><strong><code>简单</code>：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</strong></p></li><li><p><strong><code>安全</code>：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</strong></p></li><li><p><strong><code>数据独立</code>：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</strong></p></li></ul><p><strong>总而言之，使用视图的大部分情况是为了保障数据安全性，提高查询效率。</strong></p><h2 id="C：视图简易分析">C：视图简易分析</h2><p><strong>百度百科定义了什么是视图，但是对缺乏相关知识的人可能还是难以理解或者只有一个比较抽象的概念，笔者举个例子来解释下什么是视图。</strong></p><blockquote><p><strong>朕想要了解皇宫的国库的相关情况，想知道酒窖有什么酒，剩多少，窖藏多少年，于是派最信任的高公公去清点，高公公去国库清点后报给了朕；朕又想知道藏书情况，于是又派高公公去清点并回来报告给朕，又想知道金银珠宝如何，又派高公公清点。。。过一段时间又想知道藏书情况，高公公还得重新再去清点，皇上问一次，高公公就得跑一次路。</strong></p><p><strong>后来皇上觉得高公公不容易，就成立了国库管理部门，小邓子负责酒窖，小卓子负责藏书，而小六子负责金库的清点。。。后来皇上每次想了解国库就直接问话负责人，负责人就按照职责要求进行汇报。</strong></p></blockquote><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614111016660.png" alt="image-20200614111016660"></p><blockquote><p><strong>安排专人管理后，每次皇上想要了解国库情况，就不必让高公公每次都跑一趟，而是指定的人员按照指定的任务完成指定的汇报工作就可以了。</strong></p></blockquote><p><strong>和数据库相对应，每次进行查询工作，都需要编写查询代码进行查询；而视图的作用就是不必每次都重新编写查询的SQL代码，而是通过视图直接查询即可。因此：</strong></p><p><strong>视图是虚拟表，本身不存储数据，而是按照指定的方式进行查询。</strong></p><h2 id="D：使用场合">D：使用场合</h2><p><strong>权限控制的时候，不希望用户访问表中某些含敏感信息的列，比如salary…</strong></p><p><strong>关键信息来源于多个复杂关联表，可以创建视图提取我们需要的信息，简化操作；</strong></p><h2 id="E：视图相关的MySQL指令">E：视图相关的MySQL指令</h2><table><thead><tr><th>操作指令</th><th>代码</th></tr></thead><tbody><tr><td>创建视图</td><td>CREATE VIEW 视图名(列1，列2…) AS SELECT (列1，列2…) FROM …;</td></tr><tr><td>使用视图</td><td>当成表使用就好</td></tr><tr><td>修改视图</td><td>CREATE OR REPLACE VIEW 视图名 AS SELECT […] FROM […];</td></tr><tr><td>查看数据库已有视图</td><td><code>&gt;SHOW TABLES [like...];</code>（可以使用模糊查找）</td></tr><tr><td>查看视图详情</td><td>DESC 视图名<code>或者</code>SHOW FIELDS FROM 视图名</td></tr><tr><td>视图条件限制</td><td>[WITH CHECK OPTION]</td></tr></tbody></table><h2 id="F：使用视图注意事项：">F：使用视图注意事项：</h2><ul><li><p><strong>视图中可以使用多个表</strong></p></li><li><p><strong>一个视图可以嵌套另一个视图</strong></p></li><li><p><strong>对视图数据进行添加、更新和删除操作直接影响所引用表中的数据</strong></p></li><li><p><strong>当视图数据来自多个表时，不允许添加和删除数据</strong></p></li><li><p><strong>创建视图需要足够的访问权限。</strong></p></li><li><p><strong>创建视图的数目没有限制。</strong></p></li><li><p><strong>视图不能索引，也不能有关联的触发器、默认值或规则。</strong></p></li><li><p><strong>视图可以和表一起使用。</strong></p></li><li><p><strong>视图不包含数据，所以每次使用视图时，都必须执行查询中所需的任何一个检索操作。如果用多个连接和过滤条件创建了复杂的视图或嵌套了视图，可能会发现系统运行性能下降得十分严重。因此，在部署大量视图应用时，应该进行系统测试。</strong></p></li></ul><blockquote><p><strong>提示：ORDER BY 子句可以用在视图中，但若该视图检索数据的 SELECT 语句中也含有 ORDER BY 子句，则该视图中的 ORDER BY 子句将被覆盖。</strong></p></blockquote><h1>一、MySql创建视图</h1><p><strong>创建视图与创建表语法类似，不同的是创建视图是从一条查询语句创建的。视图创建后，可以像一张表一样使用，但只能用于数据查询，如：可以在一个查询中使用、可以在存储过程中、可以在另一个视图中使用。MySql创建视图语法如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW 视图名 AS SELECT 查询语句;<br></code></pre></td></tr></table></figure><h3 id="创建表">创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb_students_info(<br>true&#96;id&#96; int(4) not null comment &#39;id&#39; primary key auto_increment,<br>true&#96;name&#96; varchar(50) not null comment &#39;name&#39;,<br>true&#96;dept_id&#96; varchar(20) not null comment &#39;dept_id&#39;,<br>true&#96;age&#96; int(4) unsigned comment &#39;age&#39;,<br>true&#96;sex&#96; varchar(50) comment &#39;sex&#39;,<br>true&#96;height&#96; int(4) unsigned comment &#39;height&#39;,<br>true&#96;login_date&#96; datetime comment &#39;login_date&#39;<br>)charset&#x3D;&#39;utf8&#39; comment&#x3D;&#39;tb_students_info&#39;;<br><br>select * from tb_students_info;<br></code></pre></td></tr></table></figure><h3 id="插入数据">插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into tb_students_info(id,name,dept_id,age,sex,height,login_date)<br>values(1,&#39;Dany&#39;,&#39;1&#39;,&#39;25&#39;,&#39;F&#39;,&#39;160&#39;,&#39;2015-09-10&#39;),<br>(2,&#39;Green&#39;,&#39;3&#39;,&#39;23&#39;,&#39;F&#39;,&#39;158&#39;,&#39;2016-10-22&#39;),<br>(3,&#39;Henry&#39;,&#39;2&#39;,&#39;23&#39;,&#39;M&#39;,&#39;185&#39;,&#39;2015-05-31&#39;),<br>(4,&#39;Jane&#39;,&#39;1&#39;,&#39;22&#39;,&#39;F&#39;,&#39;162&#39;,&#39;2016-12-20&#39;),<br>(5,&#39;Jim&#39;,&#39;1&#39;,&#39;24&#39;,&#39;M&#39;,&#39;175&#39;,&#39;2016-01-15&#39;),<br>(6,&#39;John&#39;,&#39;2&#39;,&#39;21&#39;,&#39;M&#39;,&#39;172&#39;,&#39;2015-11-11&#39;),<br>(7,&#39;Lily&#39;,&#39;6&#39;,&#39;22&#39;,&#39;F&#39;,&#39;165&#39;,&#39;2016-02-26&#39;),<br>(8,&#39;Susan&#39;,&#39;4&#39;,&#39;23&#39;,&#39;F&#39;,&#39;170&#39;,&#39;2015-10-01&#39;),<br>(9,&#39;Thomas&#39;,&#39;3&#39;,&#39;22&#39;,&#39;M&#39;,&#39;178&#39;,&#39;2016-06-07&#39;),<br>(10,&#39;Tom&#39;,&#39;4&#39;,&#39;23&#39;,&#39;M&#39;,&#39;165&#39;,&#39;2016-08-05&#39;);<br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from tb_students_info;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614132739829.png" alt="image-20200614132739829"></p><h2 id="1、创建基于单表的视图">1、创建基于单表的视图</h2><p><strong>MySQL 可以在单个数据表上创建视图。</strong></p><p><strong>查看 test_db 数据库中的 tb_students_info 表的数据，如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM tb_students_info;<br>+----+--------+---------+------+------+--------+---------------------+<br>| id | name   | dept_id | age  | sex  | height | login_date          |<br>+----+--------+---------+------+------+--------+---------------------+<br>|  1 | Dany   | 1       |   25 | F    |    160 | 2015-09-10 00:00:00 |<br>|  2 | Green  | 3       |   23 | F    |    158 | 2016-10-22 00:00:00 |<br>|  3 | Henry  | 2       |   23 | M    |    185 | 2015-05-31 00:00:00 |<br>|  4 | Jane   | 1       |   22 | F    |    162 | 2016-12-20 00:00:00 |<br>|  5 | Jim    | 1       |   24 | M    |    175 | 2016-01-15 00:00:00 |<br>|  6 | John   | 2       |   21 | M    |    172 | 2015-11-11 00:00:00 |<br>|  7 | Lily   | 6       |   22 | F    |    165 | 2016-02-26 00:00:00 |<br>|  8 | Susan  | 4       |   23 | F    |    170 | 2015-10-01 00:00:00 |<br>|  9 | Thomas | 3       |   22 | M    |    178 | 2016-06-07 00:00:00 |<br>| 10 | Tom    | 4       |   23 | M    |    165 | 2016-08-05 00:00:00 |<br>+----+--------+---------+------+------+--------+---------------------+<br>10 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="【实例-1】">【实例 1】</h3><p><strong>在 tb_students_info 表上创建一个名为 view_students_info 的视图，输入的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE VIEW view_students_info<br>    -&gt; AS SELECT * FROM tb_students_info;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; SELECT * FROM view_students_info;<br>+----+--------+---------+------+------+--------+---------------------+<br>| id | name   | dept_id | age  | sex  | height | login_date          |<br>+----+--------+---------+------+------+--------+---------------------+<br>|  1 | Dany   | 1       |   25 | F    |    160 | 2015-09-10 00:00:00 |<br>|  2 | Green  | 3       |   23 | F    |    158 | 2016-10-22 00:00:00 |<br>|  3 | Henry  | 2       |   23 | M    |    185 | 2015-05-31 00:00:00 |<br>|  4 | Jane   | 1       |   22 | F    |    162 | 2016-12-20 00:00:00 |<br>|  5 | Jim    | 1       |   24 | M    |    175 | 2016-01-15 00:00:00 |<br>|  6 | John   | 2       |   21 | M    |    172 | 2015-11-11 00:00:00 |<br>|  7 | Lily   | 6       |   22 | F    |    165 | 2016-02-26 00:00:00 |<br>|  8 | Susan  | 4       |   23 | F    |    170 | 2015-10-01 00:00:00 |<br>|  9 | Thomas | 3       |   22 | M    |    178 | 2016-06-07 00:00:00 |<br>| 10 | Tom    | 4       |   23 | M    |    165 | 2016-08-05 00:00:00 |<br>+----+--------+---------+------+------+--------+---------------------+<br>10 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>默认情况下，创建的视图和基本表的字段是一样的，也可以通过指定视图字段的名称来创建视图。</strong></p><h3 id="【实例-2】">【实例 2】</h3><p><strong>在 tb_students_info 表上创建一个名为 v_students_info 的视图，输入的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE VIEW v_students_info<br>    -&gt; (s_id,s_name,d_id,s_age,s_sex,s_height,s_date)<br>    -&gt; AS SELECT id,name,dept_id,age,sex,height,login_date<br>    -&gt; FROM tb_students_info;<br>Query OK, 0 rows affected (0.06 sec)<br><br>mysql&gt; SELECT * FROM v_students_info;<br>+------+--------+------+-------+-------+----------+---------------------+<br>| s_id | s_name | d_id | s_age | s_sex | s_height | s_date              |<br>+------+--------+------+-------+-------+----------+---------------------+<br>|    1 | Dany   | 1    |    25 | F     |      160 | 2015-09-10 00:00:00 |<br>|    2 | Green  | 3    |    23 | F     |      158 | 2016-10-22 00:00:00 |<br>|    3 | Henry  | 2    |    23 | M     |      185 | 2015-05-31 00:00:00 |<br>|    4 | Jane   | 1    |    22 | F     |      162 | 2016-12-20 00:00:00 |<br>|    5 | Jim    | 1    |    24 | M     |      175 | 2016-01-15 00:00:00 |<br>|    6 | John   | 2    |    21 | M     |      172 | 2015-11-11 00:00:00 |<br>|    7 | Lily   | 6    |    22 | F     |      165 | 2016-02-26 00:00:00 |<br>|    8 | Susan  | 4    |    23 | F     |      170 | 2015-10-01 00:00:00 |<br>|    9 | Thomas | 3    |    22 | M     |      178 | 2016-06-07 00:00:00 |<br>|   10 | Tom    | 4    |    23 | M     |      165 | 2016-08-05 00:00:00 |<br>+------+--------+------+-------+-------+----------+---------------------+<br>10 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>可以看到，view_students_info 和 v_students_info 两个视图中的字段名称不同，但是数据却相同。因此，在使用视图时，可能用户不需要了解基本表的结构，更接触不到实际表中的数据，从而保证了数据库的安全。</strong></p><h2 id="2、创建基于多表的视图">2、创建基于多表的视图</h2><p><strong>MySQL 中也可以在两个以上的表中创建视图，使用 CREATE VIEW 语句创建。</strong></p><h3 id="【实例-3】">【实例 3】</h3><p><strong>在表 tb_student_info 和表 tb_departments 上创建视图 v_students_info，输入的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE VIEW v_students_info<br>    -&gt; (s_id,s_name,d_id,s_age,s_sex,s_height,s_date)<br>    -&gt; AS SELECT id,name,dept_id,age,sex,height,login_date<br>    -&gt; FROM tb_students_info;<br>Query OK, 0 rows affected (0.06 sec)<br>mysql&gt; SELECT * FROM v_students_info;<br>+------+--------+------+-------+-------+----------+------------+<br>| s_id | s_name | d_id | s_age | s_sex | s_height | s_date     |<br>+------+--------+------+-------+-------+----------+------------+<br>|    1 | Dany   |    1 |    24 | F     |      160 | 2015-09-10 |<br>|    2 | Green  |    3 |    23 | F     |      158 | 2016-10-22 |<br>|    3 | Henry  |    2 |    23 | M     |      185 | 2015-05-31 |<br>|    4 | Jane   |    1 |    22 | F     |      162 | 2016-12-20 |<br>|    5 | Jim    |    1 |    24 | M     |      175 | 2016-01-15 |<br>|    6 | John   |    2 |    21 | M     |      172 | 2015-11-11 |<br>|    7 | Lily   |    6 |    22 | F     |      165 | 2016-02-26 |<br>|    8 | Susan  |    4 |    23 | F     |      170 | 2015-10-01 |<br>|    9 | Thomas |    3 |    22 | M     |      178 | 2016-06-07 |<br>|   10 | Tom    |    4 |    23 | M     |      165 | 2016-08-05 |<br>+------+--------+------+-------+-------+----------+------------+<br>10 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p><strong>通过这个视图可以很好地保护基本表中的数据。视图中包含 s_id、s_name 和 dept_name，s_id 字段对应 tb_students_info 表中的 id 字段，s_name 字段对应 tb_students_info 表中的 name 字段，dept_name 字段对应 tb_departments 表中的 dept_name 字段。</strong></p><h1>二、查询视图</h1><p><strong>视图一经定义之后，就可以如同查询数据表一样，使用 SELECT 语句查询视图中的数据，语法和查询基础表的数据一样。</strong></p><h4 id="视图用于查询主要应用在以下几个方面：">视图用于查询主要应用在以下几个方面：</h4><ul><li><strong>使用视图重新格式化检索出的数据。</strong></li><li><strong>使用视图简化复杂的表连接。</strong></li><li><strong>使用视图过滤数据。</strong></li></ul><h4 id="DESCRIBE-可以用来查看视图，语法如下：">DESCRIBE 可以用来查看视图，语法如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESCRIBE 视图名；<br></code></pre></td></tr></table></figure><h3 id="【实例-4】">【实例 4】</h3><p><strong>通过 DESCRIBE 语句查看视图 v_students_info 的定义，输入的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DESCRIBE v_students_info;<br>+----------+---------------+------+-----+------------+-------+<br>| Field    | Type          | Null | Key | Default    | Extra |<br>+----------+---------------+------+-----+------------+-------+<br>| s_id     | int(11)       | NO   |     | 0          |       |<br>| s_name   | varchar(45)   | YES  |     | NULL       |       |<br>| d_id     | int(11)       | YES  |     | NULL       |       |<br>| s_age    | int(11)       | YES  |     | NULL       |       |<br>| s_sex    | enum(&#39;M&#39;,&#39;F&#39;) | YES  |     | NULL       |       |<br>| s_height | int(11)       | YES  |     | NULL       |       |<br>| s_date   | date          | YES  |     | 2016-10-22 |       |<br>+----------+---------------+------+-----+------------+-------+<br>7 rows in set (0.04 sec)<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">注意：DESCRIBE 一般情况下可以简写成 DESC，输入这个命令的执行结果和输入 DESCRIBE 是一样的。<br></code></pre></td></tr></table></figure></blockquote><h2 id="1、查看视图的字段信息">1、查看视图的字段信息</h2><p><strong>查看视图的字段信息与查看数据表的字段信息一样，都是使用 DESCRIBE 关键字来查看的。具体语法如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESCRIBE 视图名;<br></code></pre></td></tr></table></figure><p><strong>或简写成：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESC 视图名;<br></code></pre></td></tr></table></figure><h3 id="示例-1">示例 1</h3><p><strong>下面创建学生信息表 studentinfo 的一个视图，用于查询学生姓名和考试分数。</strong></p><p><strong>创建学生信息表 studentinfo 的 SQL 语句和运行结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE studentinfo(<br>    -&gt; ID INT(11) PRIMARY KEY,<br>    -&gt; NAME VARCHAR(20),<br>    -&gt; SCORE DECIMAL(4,2),<br>    -&gt; SUBJECT VARCHAR(20),<br>    -&gt; TEACHER VARCHAR(20));<br>Query OK, 0 rows affected (0.10 sec)<br></code></pre></td></tr></table></figure><p><strong>创建查询学生姓名和分数的视图语句如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE VIEW v_studentinfo AS SELECT name,score FROM studentinfo;<br>Query OK, 0 rows affected (0.04 sec)<br></code></pre></td></tr></table></figure><p><strong>通过 DESCRIBE 语句查看视图 v_studentsinfo 中的字段信息，SQL 语句和运行结果如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DESCRIBE v_studentinfo;<br>+-------+--------------+------+-----+---------+-------+<br>| Field | Type         | Null | Key | Default | Extra |<br>+-------+--------------+------+-----+---------+-------+<br>| name  | varchar(20)  | YES  |     | NULL    |       |<br>| score | decimal(4,2) | YES  |     | NULL    |       |<br>+-------+--------------+------+-----+---------+-------+<br>2 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p><em><strong>注意：使用 DESC 的执行结果和使用 DESCRIBE 是一样的。</strong></em></p><p><strong>由运行结果可以看出，查看视图的字段内容与查看表的字段内容显示的格式是相同的。因此，更能说明视图实际上也是一张数据表了，不同的是，视图中的数据都来自于数据库中已经存在的表。</strong></p><h2 id="查看视图的详细信息">查看视图的详细信息</h2><p><strong>在 MySQL 中，SHOW CREATE VIEW 语句可以查看视图的详细定义。其语法如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE VIEW 视图名;<br></code></pre></td></tr></table></figure><p><strong>通过上面的语句，还可以查看创建视图的语句。创建视图的语句可以作为修改或者重新创建视图的参考，方便用户操作。</strong></p><h3 id="示例-2">示例 2</h3><p><strong>使用 SHOW CREATE VIEW 查看视图，SQL 语句和运行结果如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt;  SHOW CREATE VIEW v_studentinfo \G<br>*************************** 1. row ***************************<br>                View: v_studentinfo<br>         Create View: CREATE ALGORITHM&#x3D;UNDEFINED DEFINER&#x3D;&#96;root&#96;@&#96;localhost&#96; SQL SECURITY DEFINER VIEW &#96;v_studentinfo&#96; AS select &#96;studentinfo&#96;.&#96;NAME&#96; AS &#96;name&#96;,&#96;studentinfo&#96;.&#96;SCORE&#96; AS &#96;score&#96; from &#96;studentinfo&#96;<br>character_set_client: gbk<br>collation_connection: gbk_chinese_ci<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>上述 SQL 语句以<code>\G</code>结尾，这样能使显示结果格式化。如果不使用<code>\G</code>，显示的结果会比较混乱，如下所示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DESCRIBE v_studentinfo;<br>+-------+--------------+------+-----+---------+-------+<br>| Field | Type         | Null | Key | Default | Extra |<br>+-------+--------------+------+-----+---------+-------+<br>| name  | varchar(20)  | YES  |     | NULL    |       |<br>| score | decimal(4,2) | YES  |     | NULL    |       |<br>+-------+--------------+------+-----+---------+-------+<br>2 rows in set (0.01 sec)<br><br>mysql&gt;  SHOW CREATE VIEW v_studentinfo;<br>+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+<br>| View          | Create View                                                                                                                                                                                  | character_set_client | collation_connection |<br>+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+<br>| v_studentinfo | CREATE ALGORITHM&#x3D;UNDEFINED DEFINER&#x3D;&#96;root&#96;@&#96;localhost&#96; SQL SECURITY DEFINER VIEW &#96;v_studentinfo&#96; AS select &#96;studentinfo&#96;.&#96;NAME&#96; AS &#96;name&#96;,&#96;studentinfo&#96;.&#96;SCORE&#96; AS &#96;score&#96; from &#96;studentinfo&#96; | gbk                  | gbk_chinese_ci       |<br>+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><h1>二、 MySql视图修改</h1><h2 id="1、基本语法">1、基本语法</h2><p><strong>可以使用 ALTER VIEW 语句来对已有的视图进行修改。</strong></p><p><strong>语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER VIEW 视图名 AS SELECT 查询语句;<br></code></pre></td></tr></table></figure><h4 id="语法说明如下：">语法说明如下：</h4><ul><li><strong><code>&lt;视图名&gt;</code>：指定视图的名称。该名称在数据库中必须是唯一的，不能与其他表或视图同名。</strong></li><li><strong><code>&lt;SELECT 语句&gt;</code>：指定创建视图的 SELECT 语句，可用于查询多个基础表或源视图。</strong></li></ul><p><strong>需要注意的是，对于 ALTER VIEW 语句的使用，需要用户具有针对视图的 CREATE VIEW 和 DROP 权限，以及由 SELECT 语句选择的每一列上的某些权限。</strong></p><p><strong>修改视图的定义，除了可以通过 ALTER VIEW 外，也可以使用 DROP VIEW 语句先删除视图，再使用 CREATE VIEW 语句来实现。</strong></p><h2 id="2、修改视图内容">2、修改视图内容</h2><p><strong>视图是一个虚拟表，实际的数据来自于基本表，所以通过插入、修改和删除操作更新视图中的数据，实质上是在更新视图所引用的基本表的数据。</strong></p><blockquote><p><strong>注意：对视图的修改就是对基本表的修改，因此在修改时，要满足基本表的数据定义。</strong></p></blockquote><p><strong>某些视图是可更新的。也就是说，可以使用 UPDATE、DELETE 或 INSERT 等语句更新基本表的内容。对于可更新的视图，视图中的行和基本表的行之间必须具有一对一的关系。</strong></p><p><strong>还有一些特定的其他结构，这些结构会使得视图不可更新。更具体地讲，如果视图包含以下结构中的任何一种，它就是不可更新的：</strong></p><ul><li><strong>聚合函数 SUM()、MIN()、MAX()、COUNT() 等。</strong></li><li><strong>DISTINCT 关键字。</strong></li><li><strong>GROUP BY 子句。</strong></li><li><strong>HAVING 子句。</strong></li><li><strong>UNION 或 UNION ALL 运算符。</strong></li><li><strong>位于选择列表中的子查询。</strong></li><li><strong>FROM 子句中的不可更新视图或包含多个表。</strong></li><li><strong>WHERE 子句中的子查询，引用 FROM 子句中的表。</strong></li><li><strong>ALGORITHM 选项为 TEMPTABLE（使用临时表总会使视图成为不可更新的）的时候。</strong></li></ul><h3 id="【实例-1】-2">【实例 1】</h3><p><strong>使用 ALTER 语句修改视图 view_students_info，输入的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; ALTER VIEW view_students_info<br>    -&gt; AS SELECT id,name,age<br>    -&gt; FROM tb_students_info;<br>Query OK, 0 rows affected (0.07 sec)<br>mysql&gt; DESC view_students_info;<br>+-------+-------------+------+-----+---------+-------+<br>| Field | Type        | Null | Key | Default | Extra |<br>+-------+-------------+------+-----+---------+-------+<br>| id    | int(11)     | NO   |     | 0       |       |<br>| name  | varchar(45) | YES  |     | NULL    |       |<br>| age   | int(11)     | YES  |     | NULL    |       |<br>+-------+-------------+------+-----+---------+-------+<br>3 rows in set (0.03 sec)<br></code></pre></td></tr></table></figure><p><strong>用户可以通过视图来插入、更新、删除表中的数据，因为视图是一个虚拟的表，没有数据。通过视图更新时转到基本表上进行更新，如果对视图增加或删除记录，实际上是对基本表增加或删除记录。</strong></p><p><strong>查看视图 view_students_info 的数据内容，如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM view_students_info;<br>+----+--------+------+<br>| id | name   | age  |<br>+----+--------+------+<br>|  1 | Dany   |   24 |<br>|  2 | Green  |   23 |<br>|  3 | Henry  |   23 |<br>|  4 | Jane   |   22 |<br>|  5 | Jim    |   24 |<br>|  6 | John   |   21 |<br>|  7 | Lily   |   22 |<br>|  8 | Susan  |   23 |<br>|  9 | Thomas |   22 |<br>| 10 | Tom    |   23 |<br>+----+--------+------+<br>10 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="【实例-2】-2">【实例 2】</h3><p><strong>使用 UPDATE 语句更新视图 view_students_info，输入的 SQL 语句和执行结果如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; UPDATE view_students_info<br>    -&gt; SET age&#x3D;25 WHERE id&#x3D;1;<br>Query OK, 0 rows affected (0.24 sec)<br>Rows matched: 1  Changed: 0  Warnings: 0<br>mysql&gt; SELECT * FROM view_students_info;<br>+----+--------+------+<br>| id | name   | age  |<br>+----+--------+------+<br>|  1 | Dany   |   25 |<br>|  2 | Green  |   23 |<br>|  3 | Henry  |   23 |<br>|  4 | Jane   |   22 |<br>|  5 | Jim    |   24 |<br>|  6 | John   |   21 |<br>|  7 | Lily   |   22 |<br>|  8 | Susan  |   23 |<br>|  9 | Thomas |   22 |<br>| 10 | Tom    |   23 |<br>+----+--------+------+<br>10 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>查看基本表 tb_students_info 和视图 v_students_info 的内容，如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM tb_students_info;<br>+----+--------+---------+------+------+--------+------------+<br>| id | name   | dept_id | age  | sex  | height | login_date |<br>+----+--------+---------+------+------+--------+------------+<br>|  1 | Dany   |       1 |   25 | F    |    160 | 2015-09-10 |<br>|  2 | Green  |       3 |   23 | F    |    158 | 2016-10-22 |<br>|  3 | Henry  |       2 |   23 | M    |    185 | 2015-05-31 |<br>|  4 | Jane   |       1 |   22 | F    |    162 | 2016-12-20 |<br>|  5 | Jim    |       1 |   24 | M    |    175 | 2016-01-15 |<br>|  6 | John   |       2 |   21 | M    |    172 | 2015-11-11 |<br>|  7 | Lily   |       6 |   22 | F    |    165 | 2016-02-26 |<br>|  8 | Susan  |       4 |   23 | F    |    170 | 2015-10-01 |<br>|  9 | Thomas |       3 |   22 | M    |    178 | 2016-06-07 |<br>| 10 | Tom    |       4 |   23 | M    |    165 | 2016-08-05 |<br>+----+--------+---------+------+------+--------+------------+<br>10 rows in set (0.00 sec)<br><br>mysql&gt; SELECT * FROM v_students_info;<br>+------+--------+------+-------+-------+----------+------------+<br>| s_id | s_name | d_id | s_age | s_sex | s_height | s_date     |<br>+------+--------+------+-------+-------+----------+------------+<br>|    1 | Dany   |    1 |    25 | F     |      160 | 2015-09-10 |<br>|    2 | Green  |    3 |    23 | F     |      158 | 2016-10-22 |<br>|    3 | Henry  |    2 |    23 | M     |      185 | 2015-05-31 |<br>|    4 | Jane   |    1 |    22 | F     |      162 | 2016-12-20 |<br>|    5 | Jim    |    1 |    24 | M     |      175 | 2016-01-15 |<br>|    6 | John   |    2 |    21 | M     |      172 | 2015-11-11 |<br>|    7 | Lily   |    6 |    22 | F     |      165 | 2016-02-26 |<br>|    8 | Susan  |    4 |    23 | F     |      170 | 2015-10-01 |<br>|    9 | Thomas |    3 |    22 | M     |      178 | 2016-06-07 |<br>|   10 | Tom    |    4 |    23 | M     |      165 | 2016-08-05 |<br>+------+--------+------+-------+-------+----------+------------+<br>10 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3、修改视图名称">3、修改视图名称</h2><p><strong>修改视图的名称可以先将视图删除，然后按照相同的定义语句进行视图的创建，并命名为新的视图名称。</strong></p><h1>三、MySql视图删除</h1><h2 id="1、基本语法-2">1、基本语法</h2><p><strong>可以使用 DROP VIEW 语句来删除视图。</strong></p><p><strong>语法格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP VIEW &lt;视图名1&gt; [ , &lt;视图名2&gt; …]<br></code></pre></td></tr></table></figure><p><strong>其中：<code>&lt;视图名&gt;</code>指定要删除的视图名。DROP VIEW 语句可以一次删除多个视图，但是必须在每个视图上拥有 DROP 权限。</strong></p><h2 id="2、删除视图">2、删除视图</h2><p><strong>【实例】删除 v_students_info 视图，输入的 SQL 语句和执行过程如下所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DROP VIEW IF EXISTS v_students_info;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; SHOW CREATE VIEW v_students_info;<br>ERROR 1146 (42S02): Table &#39;test_db.v_students_info&#39; doesn&#39;t exist<br></code></pre></td></tr></table></figure><p><em><strong>可以看到，v_students_info 视图已不存在，将其成功删除。</strong></em></p><h1>小练习</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除视图<br>drop view if EXISTS view_student_for_teacher;<br><br>#创建视图<br>create view view_student_for_teacher as<br>select studentNo,studentName,sex,gradeName,phone<br>from student s<br>join grade g<br>on s.gradeId &#x3D; g.gradeID;<br><br>#查看视图<br>select * from  view_student_for_teacher;<br></code></pre></td></tr></table></figure><p>![image-20200611173158789](G:\四期\数据库\mysql文档\06 视图.assets\image-20200611173158789.png)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#查看数据库的视图<br>use information_schema;<br>SELECT * from views\G;<br>select * from views where table_schema ='myschool'\G;<br></code></pre></td></tr></table></figure><h1>视图实例1-创建视图及查询数据操作</h1><p><strong>现有三张表：用户(user)、课程(course)、用户课程中间表(user_course)，表结构及数据如下：</strong></p><p><strong>表定义：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- ----------------------------<br>-- Table structure for &#96;course&#96;<br>-- ----------------------------<br>DROP TABLE IF EXISTS &#96;course&#96;;<br>CREATE TABLE &#96;course&#96; (<br>  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,<br>  &#96;name&#96; varchar(200) NOT NULL,<br>  &#96;description&#96; varchar(500) NOT NULL,<br>  PRIMARY KEY (&#96;id&#96;)<br>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;4 DEFAULT CHARSET&#x3D;utf8;<br><br>-- ----------------------------<br>-- Records of course<br>-- ----------------------------<br>INSERT INTO &#96;course&#96; VALUES (&#39;1&#39;, &#39;JAVA&#39;, &#39;JAVA课程&#39;);<br>INSERT INTO &#96;course&#96; VALUES (&#39;2&#39;, &#39;C++&#39;, &#39;C++课程&#39;);<br>INSERT INTO &#96;course&#96; VALUES (&#39;3&#39;, &#39;C语言&#39;, &#39;C语言课程&#39;);<br><br>-- ----------------------------<br>-- Table structure for &#96;user&#96;<br>-- ----------------------------<br>DROP TABLE IF EXISTS &#96;user&#96;;<br>CREATE TABLE &#96;user&#96; (<br>  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,<br>  &#96;account&#96; varchar(255) NOT NULL,<br>  &#96;name&#96; varchar(255) NOT NULL,<br>  &#96;address&#96; varchar(255) DEFAULT NULL,<br>  &#96;others&#96; varchar(200) DEFAULT NULL,<br>  &#96;others2&#96; varchar(200) DEFAULT NULL,<br>  PRIMARY KEY (&#96;id&#96;)<br>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;4 DEFAULT CHARSET&#x3D;utf8;<br><br>-- ----------------------------<br>-- Records of user<br>-- ----------------------------<br>INSERT INTO &#96;user&#96; VALUES (&#39;1&#39;, &#39;user1&#39;, &#39;小陈&#39;, &#39;美国&#39;, &#39;1&#39;, &#39;1&#39;);<br>INSERT INTO &#96;user&#96; VALUES (&#39;2&#39;, &#39;user2&#39;, &#39;小张&#39;, &#39;日本&#39;, &#39;2&#39;, &#39;2&#39;);<br>INSERT INTO &#96;user&#96; VALUES (&#39;3&#39;, &#39;user3&#39;, &#39;小王&#39;, &#39;中国&#39;, &#39;3&#39;, &#39;3&#39;);<br><br>-- ----------------------------<br>-- Table structure for &#96;user_course&#96;<br>-- ----------------------------<br>DROP TABLE IF EXISTS &#96;user_course&#96;;<br>CREATE TABLE &#96;user_course&#96; (<br>  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,<br>  &#96;userid&#96; bigint(20) NOT NULL,<br>  &#96;courseid&#96; bigint(20) NOT NULL,<br>  PRIMARY KEY (&#96;id&#96;)<br>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;7 DEFAULT CHARSET&#x3D;utf8;<br><br>-- ----------------------------<br>-- Records of user_course<br>-- ----------------------------<br>INSERT INTO &#96;user_course&#96; VALUES (&#39;1&#39;, &#39;1&#39;, &#39;2&#39;);<br>INSERT INTO &#96;user_course&#96; VALUES (&#39;2&#39;, &#39;1&#39;, &#39;3&#39;);<br>INSERT INTO &#96;user_course&#96; VALUES (&#39;3&#39;, &#39;2&#39;, &#39;1&#39;);<br>INSERT INTO &#96;user_course&#96; VALUES (&#39;4&#39;, &#39;2&#39;, &#39;2&#39;);<br>INSERT INTO &#96;user_course&#96; VALUES (&#39;5&#39;, &#39;2&#39;, &#39;3&#39;);<br>INSERT INTO &#96;user_course&#96; VALUES (&#39;6&#39;, &#39;3&#39;, &#39;2&#39;);<br></code></pre></td></tr></table></figure><p><strong>这时，当我们想要查询小张上的所以课程相关信息的时候，需要这样写一条长长的SQL语句，如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    &#96;uc&#96;.&#96;id&#96; AS &#96;id&#96;,<br>    &#96;u&#96;.&#96;name&#96; AS &#96;username&#96;,<br>    &#96;c&#96;.&#96;name&#96; AS &#96;coursename&#96;<br>FROM<br>    &#96;user&#96; &#96;u&#96;<br>LEFT JOIN &#96;user_course&#96; &#96;uc&#96; ON ((&#96;u&#96;.&#96;id&#96; &#x3D; &#96;uc&#96;.&#96;userid&#96;))<br>LEFT JOIN &#96;course&#96; &#96;c&#96; ON ((&#96;uc&#96;.&#96;courseid&#96; &#x3D; &#96;c&#96;.&#96;id&#96;))<br>WHERE<br>    u.&#96;name&#96; &#x3D; &#39;小张&#39;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614140858259.png" alt="image-20200614140858259"></p><p><strong>但是我们可以通过视图简化操作，例如我们创建视图view_user_course如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- ----------------------------<br>-- View structure for &#96;view_user_course&#96;<br>-- ----------------------------<br>DROP VIEW<br>IF EXISTS &#96;view_user_course&#96;;<br><br>CREATE ALGORITHM &#x3D; UNDEFINED <br>DEFINER &#x3D; &#96;root&#96;@&#96;localhost&#96; SQL SECURITY DEFINER <br>VIEW &#96;view_user_course&#96; AS (<br>    SELECT<br>        &#96;uc&#96;.&#96;id&#96; AS &#96;id&#96;,<br>        &#96;u&#96;.&#96;name&#96; AS &#96;username&#96;,<br>        &#96;c&#96;.&#96;name&#96; AS &#96;coursename&#96;<br>    FROM<br>        (<br>            (<br>                &#96;user&#96; &#96;u&#96;<br>                LEFT JOIN &#96;user_course&#96; &#96;uc&#96; ON ((&#96;u&#96;.&#96;id&#96; &#x3D; &#96;uc&#96;.&#96;userid&#96;))<br>            )<br>            LEFT JOIN &#96;course&#96; &#96;c&#96; ON ((&#96;uc&#96;.&#96;courseid&#96; &#x3D; &#96;c&#96;.&#96;id&#96;))<br>        )<br>);<br></code></pre></td></tr></table></figure><p><strong>几点说明（MySQL中的视图在标准SQL的基础之上做了扩展）：</strong></p><p><strong>ALGORITHM=UNDEFINED：指定视图的处理算法；</strong></p><p><strong>DEFINER=<code>root</code>@<code>localhost</code>：指定视图创建者；</strong></p><p><strong>SQL SECURITY DEFINER：指定视图查询数据时的安全验证方式；</strong></p><h4 id="创建好视图之后，我们可以直接用以下SQL语句在视图上查询小张上的所以课程相关信息，同样可以得到所需结果："><strong>创建好视图之后，我们可以直接用以下SQL语句在视图上查询小张上的所以课程相关信息，同样可以得到所需结果：</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    vuc.username,<br>    vuc.coursename<br>FROM<br>    view_user_course vuc<br>WHERE<br>     vuc.username &#x3D; &#39;小张&#39;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200614141009884.png" alt="image-20200614141009884"></p><h1>视图实例2-增删改数据操作</h1><p><strong>继续，我们可以尝试在视图view_user_course上做增删改数据操作，如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update view_user_course set username&#x3D;&#39;test&#39;,coursename&#x3D;&#39;JAVASCRIPT&#39; where id&#x3D;3<br></code></pre></td></tr></table></figure><p>遗憾的是操作失败，提示错误信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[SQL] update view_user_course set username&#x3D;&#39;test&#39;,coursename&#x3D;&#39;JAVASCRIPT&#39; where id&#x3D;3<br><br>[Err] 1393 - Can not modify more than one base table through a join view &#39;demo.view_user_course&#39;<br></code></pre></td></tr></table></figure><p><strong>因为不能在一张由多张关联表连接而成的视图上做同时修改两张表的操作；</strong></p><p><strong>那么哪些操作可以在视图上进行呢？</strong></p><p><strong><code>视图与表是一对一关系情况</code>：如果没有其它约束（如视图中没有的字段，在基本表中是必填字段情况），是可以进行增删改数据操作；</strong></p><h4 id="如我们创建用户关键信息视图view-user-keyinfo，如下："><strong>如我们创建用户关键信息视图view_user_keyinfo，如下：</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- ----------------------------<br>-- View structure for &#96;view_user_keyinfo&#96;<br>-- ----------------------------<br>DROP VIEW<br>IF EXISTS &#96;view_user_keyinfo&#96;;<br><br>CREATE ALGORITHM &#x3D; UNDEFINED DEFINER &#x3D; &#96;root&#96;@&#96;localhost&#96; SQL SECURITY DEFINER VIEW &#96;view_user_keyinfo&#96; AS SELECT<br>    &#96;u&#96;.&#96;id&#96; AS &#96;id&#96;,<br>    &#96;u&#96;.&#96;account&#96; AS &#96;account&#96;,<br>    &#96;u&#96;.&#96;name&#96; AS &#96;username&#96;<br>FROM<br>    &#96;user&#96; &#96;u&#96;;<br></code></pre></td></tr></table></figure><p><strong>进行增删改操作如下，操作成功（注意user表中的其它字段要允许为空，否则操作失败）：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO view_user_keyinfo (account, username)<br>VALUES<br>    (&#39;test1&#39;, &#39;test1&#39;);<br><br>DELETE<br>FROM<br>    view_user_keyinfo<br>WHERE<br>    username &#x3D; &#39;test1&#39;;<br><br>UPDATE view_user_keyinfo<br>SET username &#x3D; &#39;updateuser&#39;<br>WHERE<br>    id &#x3D; 1<br></code></pre></td></tr></table></figure><p><strong><code>视图与表是一对多关系情况</code>：如果只修改一张表的数据，且没有其它约束（如视图中没有的字段，在基本表中是必填字段情况），是可以进行改数据操作，如以下语句，操作成功；</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update view_user_course set coursename&#x3D;&#39;JAVA&#39; where id&#x3D;1;<br><br>update view_user_course set username&#x3D;&#39;test2&#39; where id&#x3D;3;<br></code></pre></td></tr></table></figure><p><strong>以下操作失败：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from view_user_course where id&#x3D;3;<br><br>insert into view_user_course(username, coursename) VALUES(&#39;2&#39;,&#39;3&#39;);<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A：什么是视图？视图是干什么用的？&quot;&gt;A：什么是视图？视图是干什么用的？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;视图（view）是一种虚拟存在的表，是一个逻辑表，本身并不包含数据。作为一个select语句保存在数据字典中的。&lt;/strong&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL子查询</title>
    <link href="https://wsdlxgp.top/posts/b19d.html"/>
    <id>https://wsdlxgp.top/posts/b19d.html</id>
    <published>2020-06-05T16:00:00.000Z</published>
    <updated>2020-06-19T05:14:55.251Z</updated>
    
    <content type="html"><![CDATA[<h1>子查询</h1><p><strong>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从mysql4.1开始引入。在select子句中先计算子查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。子查询中常用的操作符有any（some）、all、in、exists。子查询可以添加到select、update和delete语句中，而且可以进行多层嵌套。子查询中也可以使用比较运算符，如“&lt;”,“&lt;=”,“&gt;”,“&gt;=”和“!=”等。</strong></p><h3 id="示例1">示例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * from student<br>WHERE studentName &#x3D; &#39;李文才&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200610161107839.png" alt="image-20200610161107839"></p><h3 id="示例2">示例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * from student<br>WHERE studentName &#x3D; <br>true(select studentName from student<br>truetruewhere studentNo&#x3D;10001<br>true);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200610161604558.png" alt="image-20200610161604558"></p><h3 id="示例3">示例3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 请查找出年龄大于15岁的学生<br># select * from student<br># where 年龄 &gt; 15;<br><br>select DATEDIFF(NOW(),&#39;2005-01-01&#39;) &#x2F;365<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200610162256661.png" alt="image-20200610162256661"></p><h3 id="（1）带any、some关键字的子查询">（1）带any、some关键字的子查询</h3><p><strong>any和some关键字是同义词，表示满足其中任一条件，它们允许创建一个表达式对子查询的返回值列进行比较，只要满足内层子查询中的任何一个比较条件，就返回一个结果作为外层查询的条件。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb1(<br>truenum1 int not null<br>);<br>insert into tb1 values(1),(5),(13),(27);<br>select * from tb1;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200611161645057.png" alt="image-20200611161645057"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb2(<br>truenum2 int not null<br>);<br>insert into tb2 values(6),(14),(11),(20);<br>select * from tb2;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200611161650169.png" alt="image-20200611161650169"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询tb1比tb2大的数<br>select num1 from tb1<br>where num1 &gt; any<br>(select num2 from tb2);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140211888.png" alt="image-20200613140211888"></p><h3 id="（2）带all关键字的子查询">（2）带all关键字的子查询</h3><p><strong>all关键字与any和some不同，使用all时需要同时满足所有内层查询的条件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># tb1中大于tb2所有数字<br>select num1 from tb1<br>where num1 &gt; all<br>(select num2 from tb2);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140313874.png" alt="image-20200613140313874"></p><h3 id="（3）带exists关键字的子查询">（3）带exists关键字的子查询</h3><p><strong>exists关键字后面的参数是一个任意的子查询，系统对子查询进行运算以判断它是否返回行，如果至少返回一行，那么exists的结果为true，此时外层查询语句将进行查询；如果子查询没有返回任何行，那么exists返回的结果是false，此时外层语句将不进行查询。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table suppliers(<br>  s_id int not null auto_increment,<br>  s_name char(50) not null,<br>  s_city char(50) null,<br>  s_zip char(10) null,<br>  s_call char(50) not null,<br>  primary key(s_id)<br>);<br><br>insert into suppliers(s_id,s_name,s_city,s_zip,s_call)<br>values(101,&#39;FastFruit Inc.&#39;,&#39;tianjin&#39;,&#39;300000&#39;,&#39;48075&#39;),<br>(102,&#39;LT Supplies&#39;,&#39;chongqing&#39;,&#39;400000&#39;,&#39;44333&#39;),<br>(103,&#39;acme&#39;,&#39;shanghai&#39;,&#39;200000&#39;,&#39;90046&#39;),<br>(104,&#39;fnk inc.&#39;,&#39;zhongshan&#39;,&#39;528437&#39;,&#39;11111&#39;),<br>(105,&#39;good set&#39;,&#39;taiyuang&#39;,&#39;030000&#39;,&#39;22222&#39;),<br>(106,&#39;just eat ours&#39;,&#39;beijing&#39;,&#39;010&#39;,&#39;45678&#39;),<br>(107,&#39;dk inc.&#39;,&#39;zhengzhou&#39;,&#39;450000&#39;,&#39;33332&#39;);<br><br>select * from suppliers;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200611162856326.png" alt="image-20200611162856326"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fruit where EXISTS(<br>trueSELECT * from suppliers where s_id&#x3D;107<br>);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200611163315649.png" alt="image-20200611163315649"></p><h3 id="（4）带in关键字的子查询">（4）带in关键字的子查询</h3><p><strong>in关键字进行子查询时，内层查询语句仅仅返回一个数据列，这个数据列里的值将提供给外层查询语句进行比较操作。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select c_id from orders where o_num in<br>-&gt; (select o_num from orderitems where f_id &#x3D; &#39;c0&#39;);<br>+-------+<br>| c_id |<br>+-------+<br>| 10004 |<br>| 10001 |<br>+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（5）带比较运算符的子查询">（5）带比较运算符的子查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select s_id,f_name from fruits<br>-&gt; where s_id &#x3D;<br>-&gt; (select s1.s_id from suppliers as s1 where s1.s_city&#x3D;&#39;tianjin&#39;);<br>+------+------------+<br>| s_id | f_name |<br>+------+------------+<br>| 101 | apple |<br>| 101 | blackberry |<br>| 101 | cherry |<br>+------+------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="5、合并查询结果">5、合并查询结果</h2><p><strong>利用union关键字，可以给出多条select语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同。各个select语句之间使用union或union all关键字分隔。union不使用关键字all，执行的时候删除重复的记录，所有返回的行都是唯一的；使用关键字all的作用是不删除重复行也不对结果进行自动排序。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 合并<br>select sid,sname,sprice from fruitl<br>where sprice &gt; 6<br>UNION all <br>select * from fruit<br>where sid in (101,104);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200611164310547.png" alt="image-20200611164310547"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 合并<br>select sid,sname,sprice from fruit<br>where sprice &gt; 6<br>UNION<br>select * from fruit<br>where sid in (101,104);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200611164415866.png" alt="image-20200611164415866"></p><p><strong>union和union all的区别：使用union all的功能是不删除重复行，加上all关键字语句执行时所需要的资源少，所以尽可能地使用它，因此知道有重复行但是想保留这些行，确定查询结果中不会有重复数据或者不需要去掉重复数据的时候，应当使用union all以提高查询效率。</strong></p><h2 id="6、为表和字段取别名">6、为表和字段取别名</h2><p><strong>前面介绍了分组查询、聚合函数查询和嵌套子查询，取别名使用关键字as为查询结果中的某一列指定一个特别的名字。可以为字段或者表分别取别名，在查询时，使用别名替代指定的内容。</strong></p><h2 id="（1）为表取别名">（1）为表取别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from orders as o<br>-&gt; where o.o_num &#x3D; 30001;<br>+-------+---------------------+-------+<br>| o_num | o_date | c_id |<br>+-------+---------------------+-------+<br>| 30001 | 2008-09-01 00:00:00 | 10001 |<br>+-------+---------------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="（2）为字段取别名">（2）为字段取别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f1.f_name as fruits_name ,f1.f_price as fruits_price<br>-&gt; from fruits as f1<br>-&gt; where f1.f_price &lt; 8;<br>+-------------+--------------+<br>| fruits_name | fruits_price |<br>+-------------+--------------+<br>| apple | 5.20 |<br>| apricot | 2.20 |<br>| berry | 7.60 |<br>| xxxx | 3.60 |<br>| cherry | 3.20 |<br>| lemon | 6.40 |<br>| xbabay | 2.60 |<br>| grape | 5.30 |<br>| xbababa | 3.60 |<br>+-------------+--------------+<br>9 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h1>7、使用正则表达式查询</h1><p><strong>正则表达式通常被用来检索或替换那些符合某个模式的文本内容，根据指定的匹配模式匹配文本中符合要求的特殊字符串。例如从一个文本文件中提取电话号码，查找一篇文章中重复的单词或者替换用户输入的某些敏感词语等等，这些地方都可以使用正则表达式。正则表达式强大且灵活，可以应用于非常复杂的查询。mysql中使用regexp关键字指定正则表达式的字符匹配模式。</strong></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140726862.png" alt="image-20200613140726862"></p><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140741946.png" alt="image-20200613140741946"></p><h2 id="（1）查询以特定字符或字符串开头的记录">（1）查询以特定字符或字符串开头的记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fruit where sname regexp &#39;^苹&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140918742.png" alt="image-20200613140918742"></p><h2 id="（2）查询以特定字符或字符串结尾的记录">（2）查询以特定字符或字符串结尾的记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fruit where sname regexp &#39;果$&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140928609.png" alt="image-20200613140928609"></p><h2 id="（3）用符合‘-’来代替字符串中的任意一个字符">（3）用符合‘.’来代替字符串中的任意一个字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fruit where sname regexp &#39;.果&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140939266.png" alt="image-20200613140939266"></p><h2 id="（4）匹配指定字符中的任意一个">（4）匹配指定字符中的任意一个</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from student where sex regexp &#39;[男]&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613141320008.png" alt="image-20200613141320008"></p><h2 id="（5）使用“-”和“-”来匹配多个字符">（5）使用“*”和“+”来匹配多个字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select studentName from student where studentName regexp &#39;^李*露&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140956924.png" alt="image-20200613140956924"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select studentName from student where studentName regexp &#39;^李+露&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140956924.png" alt="image-20200613140956924"></p><h2 id="（6）匹配指定字符以外的字符">（6）匹配指定字符以外的字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from student where sex regexp &#39;[^男]&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613140948846.png" alt="image-20200613140948846"></p><h2 id="（7）使用-n-或者-n-m-来指定字符串连续出现的次数">（7）使用{n,}或者{n,m}来指定字符串连续出现的次数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select studentName from student where studentName regexp &#39;李&#123;0,&#125;&#39;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/xgpqq/tuchuang/raw/master/img/image-20200613141004270.png" alt="image-20200613141004270"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;子查询&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从mysql4.1开始引入。在select子句中先计算子查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。子查询中常用的操作符有any（some）
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL高级查询</title>
    <link href="https://wsdlxgp.top/posts/98ba.html"/>
    <id>https://wsdlxgp.top/posts/98ba.html</id>
    <published>2020-06-04T16:00:00.000Z</published>
    <updated>2020-06-19T05:14:46.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回想">回想</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select studentNo, studentName, sex, gradeName<br>from student s,grade g<br>where s.gradeId &#x3D; g.gradeID;<br>select studentNo,studentName,sex,gradeName<br>from student s join grade g<br>on s.gradeId &#x3D; g.gradeID;<br></code></pre></td></tr></table></figure><p>![image-20200610140605161](G:\四期\数据库\mysql文档\05 mysql通算符.assets\image-20200610140605161.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(1), sex from student<br>group by sex<br>HAVING sex &#x3D;&#39;男&#39;;<br></code></pre></td></tr></table></figure><p>![image-20200610140916671](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610140916671.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 排序<br>select * from student<br>LIMIT 4,5;<br></code></pre></td></tr></table></figure><p>![image-20200610141016816](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610141016816.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * from student<br>where studentNo in (&#39;10005&#39;,&#39;10001&#39;);<br></code></pre></td></tr></table></figure><p>![image-20200610141245878](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610141245878.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * from student<br>where studentNo BETWEEN 10001 and 10005;<br></code></pre></td></tr></table></figure><p>![image-20200610141437404](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610141437404.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from student<br>where email is null<br>and identityCard is null;<br></code></pre></td></tr></table></figure><p>![image-20200610141528016](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610141528016.png)</p><h1>查询数据</h1><p><strong>数据库管理系统的一个最重要的功能就是数据查询，数据查询不应只是简单查询数据库中存储的数据，还应该根据需要对数据进行筛选，以及确定数据以什么样的格式显示。MySQL提供了功能强大、灵活的语句来实现这些操作。</strong></p><h2 id="1、基本查询语句">1、基本查询语句</h2><p><strong>mysql从数据表中查询数据的基本语句为select语句。select语句的基本格式是：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT &#123;* | &lt;字段列表&gt;&#125; [ FROM &lt;表1&gt;, &lt;表2&gt;.... [ where &lt;表达式&gt; ] [ group by ] [ having ] [ order by<br>&lt;..&gt; ] [ limit &lt;...&gt; ]<br></code></pre></td></tr></table></figure><ul><li><strong>{*|&lt;字段列表&gt;}包含星号通配符选择字段列表，表示查询的字段，其中字段列至少包含一个字段名称，如果要查询多个字段，多个字段之间用逗号隔开，最后一个字段后不要加逗号。</strong></li><li><strong>FROM&lt;表1&gt;,&lt;表2&gt;…：表1和表2表示查询数据的来源，可以是单个或多个。</strong></li><li><strong>WHERE子句是可选项，如果选择该项，将限定查询必须满足的查询条件。</strong></li><li><strong>GROUP BY&lt;字段&gt;，该子句告诉MySQL按什么样的顺序显示查询出来的数据，可以进行的排序有：升序（asc）、降序（desc）。</strong></li><li><strong>[limit]，该子句告诉mysql每次显示查询出来的数据条款。</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create table fruits<br>-&gt; (<br>-&gt; f_id char(10) not null,<br>-&gt; s_id int not null,<br>-&gt; f_name char(255) not null,<br>-&gt; f_price decimal(8,2) not null,<br>-&gt; primary key(f_id)<br>-&gt; );<br>Query OK, 0 rows affected (0.02 sec)<br>mysql&gt; insert into fruits(f_id,s_id,f_name,f_price)<br>-&gt; values(&#39;a1&#39;,101,&#39;apple&#39;,&#39;5.2&#39;),<br>-&gt; (&#39;b1&#39;,101,&#39;blackberry&#39;,&#39;10.2&#39;),<br>-&gt; (&#39;bs1&#39;,102,&#39;orange&#39;,&#39;11.2&#39;),<br>-&gt; (&#39;bs2&#39;,105,&#39;melon&#39;,&#39;8.2&#39;),<br>-&gt; (&#39;t1&#39;,102,&#39;banana&#39;,&#39;10.3&#39;),<br>-&gt; (&#39;t2&#39;,102,&#39;grape&#39;,&#39;5.3&#39;),<br>-&gt; (&#39;o2&#39;,103,&#39;coconut&#39;,&#39;9.2&#39;),<br>-&gt; (&#39;c0&#39;,101,&#39;cherry&#39;,&#39;3.2&#39;),<br>-&gt; (&#39;a2&#39;,103,&#39;apricot&#39;,&#39;2.2&#39;),<br>-&gt; (&#39;l2&#39;,104,&#39;lemon&#39;,&#39;6.4&#39;),<br>-&gt; (&#39;b2&#39;,104,&#39;berry&#39;,&#39;7.6&#39;),<br>-&gt; (&#39;m1&#39;,106,&#39;mango&#39;,&#39;15.7&#39;),<br>-&gt; (&#39;m2&#39;,105,&#39;xbabay&#39;,&#39;2.6&#39;),<br>-&gt; (&#39;t4&#39;,107,&#39;xbababa&#39;,&#39;3.6&#39;),<br>-&gt; (&#39;m3&#39;,105,&#39;xxtt&#39;,&#39;11.6&#39;),<br>-&gt; (&#39;b5&#39;,107,&#39;xxxx&#39;,&#39;3.6&#39;);<br>Query OK, 16 rows affected (0.02 sec)<br>Records: 16 Duplicates: 0 Warnings: 0<br></code></pre></td></tr></table></figure><h2 id="2、单表查询">2、单表查询</h2><p><strong>单表查询是指从一张表数据中查询所需的数据。主要有：查询所有字段、查询指定字段、查询指定记录、查询空值、多条件的查询、对查询结果进行排序等方式。</strong></p><h4 id="1-查询所有字段">&lt;1&gt;查询所有字段</h4><p><strong>在select语句中使用星号（）通配符查询所有字段。 select查询记录最简单的形式是从一个表中检索所有记录，实现的方法是使用星号（）通配符指定查找所有列的名称。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from fruits;<br></code></pre></td></tr></table></figure><h4 id="2-在select语句中指定所有字段-根据前面select语句的格式，select关键字后面的字段名为将要查询的数据，因此可以将表中所有字段的名称跟在select子句后面，如果忘记了字段名称，可以使用DESC命令查看表的结构。有时候，由于表中的字段多，不一定能记住所有的字段名称。因此很不方便，不建议使用。">&lt;2&gt;在select语句中指定所有字段 根据前面select语句的格式，select关键字后面的字段名为将要查询的数据，因此可以将表中所有字段的名称跟在select子句后面，如果忘记了字段名称，可以使用DESC命令查看表的结构。有时候，由于表中的字段多，不一定能记住所有的字段名称。因此很不方便，不建议使用。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">Select f_id,s_id,f_name,f_price from fruit<br></code></pre></td></tr></table></figure><h3 id="（1）查询指定字段">（1）查询指定字段</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段名 from 表名；<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_name from fruits;<br>+------------+<br>| f_name |<br>+------------+<br>| apple |<br>| apricot |<br>| blackberry |<br>| berry |<br>| xxxx |<br>| orange |<br>| melon |<br>| cherry |<br>| lemon |<br>| mango |<br>| xbabay |<br>| xxtt |<br>| coconut |<br>| banana |<br>| grape |<br>| xbababa |<br>+------------+<br>16 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（2）查询多个字段-使用select声明，可以获取多个字段下的数据，只需要在关键字select后面指定要查询的字段的名称，不同字段名称之间用逗号分隔，最后一个字段后面不需要加逗号">（2）查询多个字段 使用select声明，可以获取多个字段下的数据，只需要在关键字select后面指定要查询的字段的名称，不同字段名称之间用逗号分隔，最后一个字段后面不需要加逗号</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段1，字段2，字段3 ....，字段n from 表名；<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_name,f_price from fruits;<br>+------------+---------+<br>| f_name | f_price |<br>+------------+---------+<br>| apple | 5.20 |<br>| apricot | 2.20 |<br>| blackberry | 10.20 |<br>| berry | 7.60 |<br>| xxxx | 3.60 |<br>| orange | 11.20 |<br>| melon | 8.20 |<br>| cherry | 3.20 |<br>| lemon | 6.40 |<br>| mango | 15.70 |<br>| xbabay | 2.60 |<br>| xxtt | 11.60 |<br>| coconut | 9.20 |<br>| banana | 10.30 |<br>| grape | 5.30 |<br>| xbababa | 3.60 |<br>+------------+---------+<br>16 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h3 id="（3）查询指定记录">（3）查询指定记录</h3><p><strong>数据库中包含大量的数据，根据特殊要求可能只需要查询表中的指定数据，相当于对数据的过滤。在select语句中，通过where子句可以对数据进行过滤。</strong></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段1，字段2....字段n from 表名 where 查询条件；  <br></code></pre></td></tr></table></figure></blockquote><p>![image-20200613131557954](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200613131557954.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_name,f_price<br>-&gt; from fruits<br>-&gt; where f_price &#x3D; 10.2;<br>+------------+---------+<br>| f_name | f_price |<br>+------------+---------+<br>| blackberry | 10.20 |<br>+------------+---------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><h3 id="（4）带in关键字的查询">（4）带in关键字的查询</h3><p><strong>in操作符用来查询满足指定范围内的条件的记录，使用IN操作符，将所有检索条件用括号括起来，检索条件之间用逗号分隔开，只要满足条件范围内的一个值即为匹配项。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select s_id,f_name,f_price<br>-&gt; from fruits<br>-&gt; where s_id in (101,102)<br>-&gt; order by f_name;<br>+------+------------+---------+<br>| s_id | f_name | f_price |<br>+------+------------+---------+<br>| 101 | apple | 5.20 |<br>| 102 | banana | 10.30 |<br>| 101 | blackberry | 10.20 |<br>| 101 | cherry | 3.20 |<br>| 102 | grape | 5.30 |<br>| 102 | orange | 11.20 |<br>+------+------------+---------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（5）带between-and的范围查询">（5）带between and的范围查询</h3><p><strong>Between and用来查询某个范围内的值，该操作符需要两个参数，即范围的开始值和结束值，如果字段值满足指定的范围查询条件，则这些记录被返回。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_name,f_price<br>-&gt; from fruits<br>-&gt; where f_price between 2.00 and 10.20;<br>+------------+---------+<br>| f_name | f_price |<br>+------------+---------+<br>| apple | 5.20 |<br>| apricot | 2.20 |<br>| blackberry | 10.20 |<br>| berry | 7.60 |<br>| xxxx | 3.60 |<br>| melon | 8.20 |<br>| cherry | 3.20 |<br>| lemon | 6.40 |<br>| xbabay | 2.60 |<br>| coconut | 9.20 |<br>| grape | 5.30 |<br>| xbababa | 3.60 |<br>+------------+---------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（7）带like的字符匹配查询">（7）带like的字符匹配查询</h3><p><strong>通配符是一种在SQL的where条件子句中拥有特殊意思的字符，SQL语句中支持多种通配符，可以和like一起使用的通配符有‘%’和‘_’。</strong></p><h4 id="1-百分号（-）通配符，匹配任意长度的字符，甚至包括零字符">&lt;1&gt;百分号（%）通配符，匹配任意长度的字符，甚至包括零字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_id,f_name<br>-&gt; from fruits<br>-&gt; where f_name like &#39;b%&#39;;<br>+------+------------+<br>| f_id | f_name |<br>+------+------------+<br>| b1 | blackberry |<br>| b2 | berry |<br>| t1 | banana |<br>+------+------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="2-下划线（-通配符，一次只能匹配任意一个字符">&lt;2&gt;下划线（__)通配符，一次只能匹配任意一个字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_id,f_name<br>-&gt; from fruits<br>-&gt; where f_name like &#39;____y&#39;;<br>+------+--------+<br>| f_id | f_name |<br>+------+--------+<br>| b2 | berry |<br>+------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（8）查询空值">（8）查询空值</h3><p><strong>数据表创建的时候，设计者可以指定某列中是否可以包含空值（NULL)。空值不同于0，也不同于空字符串。空值一般表示数据未知、不适用或将在以后添加数据。在select语句中使用IS NULL子句，可以查询某字段内容为空的记录。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create table customers<br>-&gt; (<br>-&gt; c_id int not null auto_increment,<br>-&gt; c_name char(50) not null,<br>-&gt; c_address char(50) null,<br>-&gt; c_city char(50) null,<br>-&gt; c_zip char(50) null,<br>-&gt; c_contact char(50) null,<br>-&gt; c_email char(50) null,<br>-&gt; primary key(c_id)<br>-&gt; );<br>Query OK, 0 rows affected (0.02 sec)<br>mysql&gt; insert into customers(c_id,c_name,c_address,c_city,c_zip,c_contact,c_email)<br>-&gt; values(10001,&#39;RedHook&#39;,&#39;200<br>Street&#39;,&#39;Tianjin&#39;,&#39;300000&#39;,&#39;LiMing&#39;,&#39;LMing@163.com&#39;),<br>-&gt; (10002,&#39;Stars&#39;,&#39;333 Fromage<br>Lane&#39;,&#39;Dalian&#39;,&#39;116000&#39;,&#39;Zhangbo&#39;,&#39;Jerry@hotmail.com&#39;),<br>-&gt; (10003,&#39;Netbhood&#39;,&#39;1 Sunny Place&#39;,&#39;Qingdao&#39;,&#39;266000&#39;,&#39;LuoCong&#39;,NULL),<br>-&gt;(10004,&#39;JOTO&#39;,&#39;829 Riverside Drive&#39;, &#39;Haikou&#39;,&#39;570000&#39;,&#39;YangShan&#39;,<br>&#39;sam@hotmail.com&#39;);<br>Query OK, 4 rows affected (0.02 sec)<br>Records: 4 Duplicates: 0 Warnings: 0<br>mysql&gt; select c_id,c_name,c_email from customers where c_email IS NULL;<br>+-------+----------+---------+<br>| c_id | c_name | c_email |<br>+-------+----------+---------+<br>| 10003 | Netbhood | NULL |<br>+-------+----------+---------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><h3 id="（9）带and的多条件查询">（9）带and的多条件查询</h3><p><strong>使用select查询时，可以增加查询的限制条件，这样可以使查询的结果更加精确。MySQL在where子句中使用and操作符限定只有满足所有查询条件的记录才会被返回。可以使用and连接两个甚至多个查询条件，多个条件表达式之间用and分开。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_id,f_price,f_name<br>-&gt; from fruits<br>-&gt; where s_id &#x3D; &#39;101&#39; and f_price &gt;&#x3D;5;<br>+------+---------+------------+<br>| f_id | f_price | f_name |<br>+------+---------+------------+<br>| a1 | 5.20 | apple |<br>| b1 | 10.20 | blackberry |<br>+------+---------+------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（10）带or的多条件查询">（10）带or的多条件查询</h3><p><strong>与and相反，在where声明中使用or操作符，表示只需要满足其中一个条件的记录即可返回。or也可以连接两个甚至多个查询条件，多个条件表达式之间用or分开。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select s_id,f_name,f_price<br>-&gt; from fruits<br>-&gt; where s_id &#x3D; 101 or s_id &#x3D; 102;<br>+------+------------+---------+<br>| s_id | f_name | f_price |<br>+------+------------+---------+<br>| 101 | apple | 5.20 |<br>| 101 | blackberry | 10.20 |<br>| 102 | orange | 11.20 |<br>| 101 | cherry | 3.20 |<br>| 102 | banana | 10.30 |<br>| 102 | grape | 5.30 |<br>+------+------------+---------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（11）查询结果不重复">（11）查询结果不重复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询不重复<br># 创建表<br>create table &#96;fruit&#96;(<br>true&#96;sid&#96; int(3) PRIMARY KEY not null,<br>true&#96;sname&#96; VARCHAR(20) not NULL,<br>true&#96;sprice&#96; FLOAT not null<br>)CHARSET &#39;utf8mb4&#39;;<br><br># 表中添加数据<br>insert into &#96;fruit&#96;(sid,sname,sprice)<br>values(100,&#39;芒果&#39;,5.00),<br>(101,&#39;苹果&#39;,5.00),<br>(102,&#39;香蕉&#39;,7.00),<br>(103,&#39;梨&#39;,6.00),<br>(104,&#39;火龙果&#39;,10.00),<br>(105,&#39;榴莲&#39;,15.00);<br><br># 查看一下<br>select * from fruit;<br></code></pre></td></tr></table></figure><p>![image-20200613132514405](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200613132514405.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#去掉重复数据<br>select DISTINCT sprice from fruit;<br><br>select DISTINCT sex from student S join grade g<br>on s.gradeId &#x3D; g.gradeID；<br></code></pre></td></tr></table></figure><p>![image-20200613132441783](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200613132441783.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#聚合函数<br>select max(sprice) 最高价,min(sprice),sum(sprice),avg(sprice) <br>from fruit;<br></code></pre></td></tr></table></figure><p>![](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200613132535375.png)</p><h2 id="3、对查询结果排序">3、对查询结果排序</h2><h3 id="（1）单列排序">（1）单列排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_name from fruits;<br>+------------+<br>| f_name |<br>+------------+<br>| apple |<br>| apricot |<br>| blackberry |<br>| berry |<br>| xxxx |<br></code></pre></td></tr></table></figure><h3 id="（2）多列排序">（2）多列排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_name,f_price from fruits order by f_name,f_price;<br>+------------+---------+<br>| f_name | f_price |<br>+------------+---------+<br>| apple | 5.20 |<br>| apricot | 2.20 |<br>| banana | 10.30 |<br>| berry | 7.60 |<br>| blackberry | 10.20 |<br>| cherry | 3.20 |<br>| coconut | 9.20 |<br>| grape | 5.30 |<br>| lemon | 6.40 |<br>| mango | 15.70 |<br>| melon | 8.20 |<br>| orange | 11.20 |<br>| xbababa | 3.60 |<br>| xbabay | 2.60 |<br>| xxtt | 11.60 |<br>| xxxx | 3.60 |<br>+------------+---------+<br>16 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>在多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第一列数据中所有值都是唯一的，将不再对第二列进行排序。</strong></p><h3 id="（3）指定排序方向">（3）指定排序方向</h3><p><strong>默认情况下，查询数据按字母升序进行排序（从A~Z)，但数据的排序并不仅限于此，还可以使用order by对查询结果进行降序排序（从Z~A)，这可以通过关键字DESC实现。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f_name,f_price from fruits order by f_name,f_price DESC;<br>+------------+---------+<br>| f_name | f_price |<br>+------------+---------+<br>| apple | 5.20 |<br>| apricot | 2.20 |<br>| banana | 10.30 |<br>| berry | 7.60 |<br>| blackberry | 10.20 |<br>| cherry | 3.20 |<br>| coconut | 9.20 |<br>| grape | 5.30 |<br>| lemon | 6.40 |<br>| mango | 15.70 |<br>| melon | 8.20 |<br>| orange | 11.20 |<br>| xbababa | 3.60 |<br>| xbabay | 2.60 |<br>| xxtt | 11.60 |<br>| xxxx | 3.60 |<br>+------------+---------+<br>16 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p><strong>与DESC相反ASC是升序</strong></p><h2 id="4、分组查询">4、分组查询</h2><p><strong>分组插叙是对数据按照某个或多个字段进行分组，MySQL中使用group by关键字对数据进行分组，基本语法形式为：group by 字段 1、创建分组</strong></p><p><strong>Group by 关键字通常和集合函数一起使用，例如：MAX()、MIN()、COUNT()、SUM()、AVG()。 根据s_id对fruits表中的数据进行分组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select s_id,count(*) as total from fruits group by s_id;<br>+------+-------+<br>| s_id | total |<br>+------+-------+<br>| 101 | 3 |<br>| 102 | 3 |<br>| 103 | 2 |<br>| 104 | 2 |<br>| 105 | 3 |<br>| 106 | 1 |<br>| 107 | 2 |<br>+------+-------+<br>7 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（1）根据s-id对fruits表中的数据进行分组，将每个供应商的水果名称显示出来"><strong>（1）根据s_id对fruits表中的数据进行分组，将每个供应商的水果名称显示出来</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select s_id,group_concat(f_name) as name from fruits group by s_id;<br>+------+-------------------------+<br>| s_id | name |<br>+------+-------------------------+<br>| 101 | apple,blackberry,cherry |<br>| 102 | orange,banana,grape |<br>| 103 | apricot,coconut |<br>| 104 | berry,lemon |<br>| 105 | melon,xbabay,xxtt |<br>| 106 | mango |<br>| 107 | xxxx,xbababa |<br>+------+-------------------------+<br>7 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（2）使用having过滤分组-根据s-id对fruits表中的数据进行分组，并显示水果种类大于1的分组信息">（2）使用having过滤分组 根据s_id对fruits表中的数据进行分组，并显示水果种类大于1的分组信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select s_id,group_concat(f_name) as name from fruits group by s_id having<br>count(f_name) &gt; 1;<br>+------+-------------------------+<br>| s_id | name |<br>+------+-------------------------+<br>| 101 | apple,blackberry,cherry |<br>| 102 | orange,banana,grape |<br>| 103 | apricot,coconut |<br>| 104 | berry,lemon |<br>| 105 | melon,xbabay,xxtt |<br>| 107 | xxxx,xbababa |<br>+------+-------------------------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（3）在group-by-子句中使用with-rollup-使用with-rollup关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。">（3）在group by 子句中使用with rollup 使用with rollup关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select s_id,count(*) as total<br>-&gt; from fruits<br>-&gt; group by s_id with rollup;<br>+------+-------+<br>| s_id | total |<br>+------+-------+<br>| 101 | 3 |<br>| 102 | 3 |<br>| 103 | 2 |<br>| 104 | 2 |<br>| 105 | 3 |<br>| 106 | 1 |<br>| 107 | 2 |<br>| NULL | 16 |<br>+------+-------+<br>8 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（4）多字段分组-使用group-by可以对多个字段进行分组，group-by关键字后面跟需要分组的字段，MySQL根据多字段的值来进行层次分组，分组层次从左到右，即先按第1个字段分组，然后在第1个字段值相同的记录中，再根据第2个字段的值进行分组，以此类推">（4）多字段分组 使用group by可以对多个字段进行分组，group by关键字后面跟需要分组的字段，MySQL根据多字段的值来进行层次分组，分组层次从左到右，即先按第1个字段分组，然后在第1个字段值相同的记录中，再根据第2个字段的值进行分组，以此类推</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from fruits group by s_id,f_name;<br>+------+------+------------+---------+<br>| f_id | s_id | f_name | f_price |<br>+------+------+------------+---------+<br>| a1 | 101 | apple | 5.20 |<br>| b1 | 101 | blackberry | 10.20 |<br>| c0 | 101 | cherry | 3.20 |<br>| t1 | 102 | banana | 10.30 |<br>| t2 | 102 | grape | 5.30 |<br>| bs1 | 102 | orange | 11.20 |<br>| a2 | 103 | apricot | 2.20 |<br>| o2 | 103 | coconut | 9.20 |<br>| b2 | 104 | berry | 7.60 |<br>| l2 | 104 | lemon | 6.40 |<br>| bs2 | 105 | melon | 8.20 |<br>| m2 | 105 | xbabay | 2.60 |<br>| m3 | 105 | xxtt | 11.60 |<br>| m1 | 106 | mango | 15.70 |<br>| t4 | 107 | xbababa | 3.60 |<br>| b5 | 107 | xxxx | 3.60 |<br>+------+------+------------+---------+<br>16 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（5）group-by和order-by一起使用-某些情况下需要对分组进行排序">（5）group by和order by一起使用 某些情况下需要对分组进行排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create table orderitems<br>-&gt; (<br>-&gt; o_num int not null,<br>-&gt; o_item int not null,<br>-&gt; f_id char(10) not null,<br>-&gt; quantity int not null,<br>-&gt; item_price decimal(8,2) not null,<br>-&gt; primary key(o_num,o_item)<br>-&gt; );<br>Query OK, 0 rows affected (0.03 sec)<br><br>mysql&gt; insert into orderitems(o_num,o_item,f_id,quantity,item_price)<br>-&gt; values(30001,1,&#39;a1&#39;,10,&#39;5.2&#39;),<br>-&gt; (30001,2,&#39;b2&#39;,3,&#39;7.6&#39;),<br>-&gt; (30001,3,&#39;bs1&#39;,5,&#39;11.2&#39;),<br>-&gt; (30001,4,&#39;bs2&#39;,15,&#39;9.2&#39;),<br>-&gt; (30002,1,&#39;b3&#39;,2,&#39;20.0&#39;),<br>-&gt; (30003,1,&#39;c0&#39;,100,10),<br>-&gt; (30004,1,&#39;o2&#39;,50,&#39;2.50&#39;),<br>-&gt; (30005,1,&#39;c0&#39;,5,&#39;10&#39;),<br>-&gt; (30005,2,&#39;b1&#39;,10,&#39;8.99&#39;),<br>-&gt; (30005,3,&#39;a2&#39;,10,&#39;2.2&#39;),<br>-&gt; (30005,4,&#39;m1&#39;,5,&#39;14.99&#39;);<br>Query OK, 11 rows affected (0.00 sec)<br>Records: 11 Duplicates: 0 Warnings: 0<br></code></pre></td></tr></table></figure><p><strong>查询价格大于100的订单号和总价订单价格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select o_num,sum(quantity*item_price) as ordertotal<br>-&gt; from orderitems<br>-&gt; group by o_num<br>-&gt; having sum(quantity*item_price) &gt;&#x3D; 100;<br>+-------+------------+<br>| o_num | ordertotal |<br>+-------+------------+<br>| 30001 | 268.80 |<br>| 30003 | 1000.00 |<br>| 30004 | 125.00 |<br>| 30005 | 236.85 |<br>+-------+------------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="5、使用limit限制查询结果的数量-select返回所有匹配的行，有可能是表中所有的行，如仅仅需要返回第一行或者前几行，使用limit关键字，语法格式如下：limit-位置偏移量-行数">5、使用limit限制查询结果的数量 select返回所有匹配的行，有可能是表中所有的行，如仅仅需要返回第一行或者前几行，使用limit关键字，语法格式如下：limit [位置偏移量] 行数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from fruits limit 4;<br>+------+------+------------+---------+<br>| f_id | s_id | f_name | f_price |<br>+------+------+------------+---------+<br>| a1 | 101 | apple | 5.20 |<br>| a2 | 103 | apricot | 2.20 |<br>| b1 | 101 | blackberry | 10.20 |<br>| b2 | 104 | berry | 7.60 |<br>+------+------+------------+---------+<br>4 rows in set (0.02 sec)<br>mysql&gt; select * from fruits limit 4,3;<br>+------+------+--------+---------+<br>| f_id | s_id | f_name | f_price |<br>+------+------+--------+---------+<br>| b5 | 107 | xxxx | 3.60 |<br>| bs1 | 102 | orange | 11.20 |<br>| bs2 | 105 | melon | 8.20 |<br>+------+------+--------+---------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="6、使用聚合函数查询">6、使用聚合函数查询</h2><p>![image-20200613133729764](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200613133729764.png)</p><h3 id="（1）count-函数">（1）count()函数</h3><p><strong>Count()函数统计数据表中包含的记录行的总数，或者根据查询结果返回列中包含的数据行数。 Count(*)计算表中总的函数，不管某列有数列或者为空值 Count(字段名)计算指定列下总的行数，计算时将忽略空值的行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select count(*) as cust_num<br>-&gt; from customers;<br>+----------+<br>| cust_num |<br>+----------+<br>| 4 |<br>+----------+<br>1 row in set (0.00 sec)<br>mysql&gt; select count(c_email) as email_num<br>-&gt; from customers;<br>+-----------+<br>| email_num |<br>+-----------+<br>| 3 |<br>+-----------+<br>1 row in set (0.00 sec)<br>mysql&gt; select o_num,count(f_id)<br>-&gt; from orderitems<br>-&gt; group by o_num;<br>+-------+-------------+<br>| o_num | count(f_id) |<br>+-------+-------------+<br>| 30001 | 4 |<br>| 30002 | 1 |<br>| 30003 | 1 |<br>| 30004 | 1 |<br>| 30005 | 4 |<br>+-------+-------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（2）sum-函数">（2）sum()函数</h3><p><strong>sum()是一个求总和的函数，返回指定列值得总和。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select sum(quantity) as items_total<br>-&gt; from orderitems<br>-&gt; where o_num &#x3D; 30005;<br>+-------------+<br>| items_total |<br>+-------------+<br>| 30 |<br>+-------------+<br>1 row in set (0.01 sec)<br>mysql&gt; select o_num,sum(quantity) as items_total<br>-&gt; from orderitems<br>-&gt; group by o_num;<br>+-------+-------------+<br>| o_num | items_total |<br>+-------+-------------+<br>| 30001 | 33 |<br>| 30002 | 2 |<br>| 30003 | 100 |<br>| 30004 | 50 |<br>| 30005 | 30 |<br>+-------+-------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>注意：sum()函数在计算时，忽略列值为NULL的行。</strong></p><h3 id="（3）avg-函数">（3）avg()函数</h3><p><strong>avg()函数通过计算返回的行数和每一行数据的和，求得指定列数据的平均值。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select avg(f_price) as avg_price<br>-&gt; from fruits<br>-&gt; where s_id&#x3D;103;<br>+-----------+<br>| avg_price |<br>+-----------+<br>| 5.700000 |<br>+-----------+<br>1 row in set (0.00 sec)<br>mysql&gt; select avg(f_price) as avg_price<br>-&gt; from fruits<br>-&gt; where s_id&#x3D;103;<br>+-----------+<br>| avg_price |<br>+-----------+<br>| 5.700000 |<br>+-----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（4）max-函数">（4）max()函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select max(f_price) as max_price from fruits;<br>+-----------+<br>| max_price |<br>+-----------+<br>| 15.70 |<br>+-----------+<br>1 row in set (0.00 sec)<br>mysql&gt; select s_id,max(f_price) as max_price<br>-&gt; from fruits<br>-&gt; group by s_id;<br>+------+-----------+<br>| s_id | max_price |<br>+------+-----------+<br>| 101 | 10.20 |<br>| 102 | 11.20 |<br>| 103 | 9.20 |<br>| 104 | 7.60 |<br>| 105 | 11.60 |<br>| 106 | 15.70 |<br>| 107 | 3.60 |<br>+------+-----------+<br>7 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（5）min-函数">（5）min()函数</h3><p><strong>min()返回查询列中的最小值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select min(f_price) as min_price from fruits;<br>+-----------+<br>| min_price |<br>+-----------+<br>| 2.20 |<br>+-----------+<br>1 row in set (0.00 sec)<br>mysql&gt; select s_id,min(f_price) as max_price from fruits group by s_id;<br>+------+-----------+<br>| s_id | max_price |<br>+------+-----------+<br>| 101 | 3.20 |<br>| 102 | 5.30 |<br>| 103 | 2.20 |<br>| 104 | 6.40 |<br>| 105 | 2.60 |<br>| 106 | 15.70 |<br>| 107 | 3.60 |<br>+------+-----------+<br>7 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h1>连接查询</h1><p><strong>连接是关系数据库模型的主要特点。连接查询是关系数据库中最主要的查询，主要包括内连接、外连接。通过连接运算符可以实现多个表查询。在关系数据库管理系统中，表建立时各数据之间的关系不必确定，常把一个实体的所有信息存放在一个表中。当查询数据时，通过连接操作查询出存放在多个表中的不同实体的信息。当两个或多个表现中存在相同意义的字段时，便可以通过这些字段对不同的表进行连接查询。</strong></p><h2 id="1、内连接查询">1、内连接查询</h2><p><strong>内连接（inner join）使用比较运算符进行表间某些列数据的比较操作，并列出这些表中与连接条件相匹配的数据行，组合成新纪录，也就是说，在内连接查询中，只有满足条件的记录才能出现在结果关系中。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create table suppliers<br>-&gt; (<br>-&gt; s_id int not null auto_increment,<br>-&gt; s_name char(50) not null,<br>-&gt; s_city char(50) null,<br>-&gt; s_zip char(10) null,<br>-&gt; s_call char(50) not null,<br>-&gt; primary key(s_id)<br>-&gt; );<br>Query OK, 0 rows affected (0.02 sec)<br>mysql&gt; insert into suppliers(s_id,s_name,s_city,s_zip,s_call)<br>-&gt; values(101,&#39;FastFruit Inc.&#39;,&#39;tianjin&#39;,&#39;300000&#39;,&#39;48075&#39;),<br>-&gt; (102,&#39;LT Supplies&#39;,&#39;chongqing&#39;,&#39;400000&#39;,&#39;44333&#39;),<br>-&gt; (103,&#39;acme&#39;,&#39;shanghai&#39;,&#39;200000&#39;,&#39;90046&#39;),<br>-&gt; (104,&#39;fnk inc.&#39;,&#39;zhongshan&#39;,&#39;528437&#39;,&#39;11111&#39;),<br>-&gt; (105,&#39;good set&#39;,&#39;taiyuang&#39;,&#39;030000&#39;,&#39;22222&#39;),<br>-&gt; (106,&#39;just eat ours&#39;,&#39;beijing&#39;,&#39;010&#39;,&#39;45678&#39;),<br>-&gt; (107,&#39;dk inc.&#39;,&#39;zhengzhou&#39;,&#39;450000&#39;,&#39;33332&#39;);<br>Query OK, 7 rows affected (0.01 sec)<br>Records: 7 Duplicates: 0 Warnings: 0<br>mysql&gt; select suppliers.s_id,s_name,f_name,f_price<br>-&gt; from fruits ,suppliers<br>-&gt; where fruits.s_id &#x3D; suppliers.s_id;<br>+------+----------------+------------+---------+<br>| s_id | s_name | f_name | f_price |<br>+------+----------------+------------+---------+<br>| 101 | FastFruit Inc. | apple | 5.20 |<br>| 103 | acme | apricot | 2.20 |<br>| 101 | FastFruit Inc. | blackberry | 10.20 |<br>| 104 | fnk inc. | berry | 7.60 |<br>| 107 | dk inc. | xxxx | 3.60 |<br>| 102 | LT Supplies | orange | 11.20 |<br>| 105 | good set | melon | 8.20 |<br>| 101 | FastFruit Inc. | cherry | 3.20 |<br>| 104 | fnk inc. | lemon | 6.40 |<br>| 106 | just eat ours | mango | 15.70 |<br>| 105 | good set | xbabay | 2.60 |<br>| 105 | good set | xxtt | 11.60 |<br>| 103 | acme | coconut | 9.20 |<br>| 102 | LT Supplies | banana | 10.30 |<br>| 102 | LT Supplies | grape | 5.30 |<br>| 107 | dk inc. | xbababa | 3.60 |<br>+------+----------------+------------+---------+<br>16 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>如果在一个连接查询中，涉及的两个表都是同一个表，这种查询称为自连接查询。自连接是一种特殊的内连接，它是指相互连接的表在物理上为同一张表，但可以在逻辑上分为两张表</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select f1.f_id,f1.f_name<br>-&gt; from fruits as f1, fruits as f2<br>-&gt; where f1.s_id &#x3D; f2.s_id and f2.f_id &#x3D; &#39;a1&#39;;<br>+------+------------+<br>| f_id | f_name |<br>+------+------------+<br>| a1 | apple |<br>| b1 | blackberry |<br>| c0 | cherry |<br>+------+------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="2、外连接查询">2、外连接查询</h2><blockquote><p><strong>外连接查询将将查询多个表中相关联的行，内连接时，返回查询结果集合中的仅是符合查询条件和连接条件的行。但有时候需要包含没有关联的行中数据，即返回查询结果集合中的不仅包含符合连接条件的行，而且还包含左表（左外连接或左连接）、右表（右外连接或右连接）或两个连接表（全外连接）中的所有数据行。外连接分为左外连接或左连接和右外连接或右连接。</strong></p></blockquote><p><strong>Left join（左连接）：返回包括左表中的所有记录和右表中连接字段相等的记录。</strong></p><p><strong>Right join（右连接）：返回包括右表中的所有记录和左表中连接字段相等的记录。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 左连接<br>select * from student s<br>LEFT JOIN grade g<br>on s.gradeId &#x3D; g.gradeID;<br><br># 右连接<br>select * from student s<br>RIGHT JOIN grade g<br>on s.gradeId &#x3D; g.gradeID;<br></code></pre></td></tr></table></figure><p>![image-20200613134628052](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200613134628052.png)</p><h3 id="创建表">创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table orders(<br>  o_num int not null auto_increment,<br>  o_date datetime not null,<br>  c_id int not null,<br>  primary key(o_num)<br>);<br><br>insert into orders(o_num,o_date,c_id)<br>values(30001,&#39;2008-09-01&#39;,10001),<br>(30002,&#39;2008-09-12&#39;,10003),<br>(30003,&#39;2008-09-30&#39;,10004),<br>(30004,&#39;2008-10-03&#39;,10005),<br>(30005,&#39;2008-10-08&#39;,10001);<br><br>create table customers(<br>  c_id int not null auto_increment,<br>  c_name char(50) not null,<br>  c_address char(50) null,<br>  c_city char(50) null,<br>  c_zip char(50) null,<br>  c_contact char(50) null,<br>  c_email char(50) null,<br>  primary key(c_id)<br>);<br></code></pre></td></tr></table></figure><h3 id="插入数据">插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into customers(c_id,c_name,c_address,c_city,c_zip,c_contact,c_email)<br>values(10001,&#39;RedHook&#39;,&#39;200Street&#39;,&#39;Tianjin&#39;,&#39;300000&#39;,&#39;LiMing&#39;,&#39;LMing@163.com&#39;),<br>(10002,&#39;Stars&#39;,&#39;333 Fromage Lane&#39;,&#39;Dalian&#39;,&#39;116000&#39;,&#39;Zhangbo&#39;,&#39;Jerry@hotmail.com&#39;),<br>(10003,&#39;Netbhood&#39;,&#39;1 Sunny Place&#39;,&#39;Qingdao&#39;,&#39;266000&#39;,&#39;LuoCong&#39;,NULL),<br>(10004,&#39;JOTO&#39;,&#39;829 Riverside Drive&#39;, &#39;Haikou&#39;,&#39;570000&#39;,&#39;YangShan&#39;,&#39;sam@hotmail.com&#39;);<br><br><br>select * from customers;<br>select * from orders;<br></code></pre></td></tr></table></figure><p>![image-20200613135037758](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200613135037758.png)</p><p>![image-20200613135042714](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200613135042714.png)</p><h3 id="（1）左连接">（1）左连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 左外连接<br>select c.c_id,o.o_num from customers c<br>LEFT OUTER JOIN orders o<br>on c.c_id &#x3D; o.c_id;<br></code></pre></td></tr></table></figure><p>![image-20200610151134872](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610151134872.png)</p><h3 id="（2）右连接">（2）右连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 右外连接<br>select c.c_id,o.o_num from customers c<br>RIGHT  OUTER JOIN orders o<br>on c.c_id &#x3D; o.c_id;<br></code></pre></td></tr></table></figure><p>![image-20200610151240505](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610151240505.png)</p><h2 id="3、复合条件连接查询">3、复合条件连接查询</h2><p><strong>复合条件连接查询是在连接查询的过程中，通过添加过滤条件，限制查询的结果，使查询的结果更加准确。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select c.c_id,o.o_num from customers c<br>LEFT OUTER JOIN orders o<br>on c.c_id &#x3D; o.c_id<br>and c.c_id&#x3D;10001;<br></code></pre></td></tr></table></figure><p>![image-20200610152148735](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610152148735.png)</p><h2 id="4、编写SQL语句，查看年龄比“李斯文”小的学生，要求显示这些学生的信息">4、编写SQL语句，查看年龄比“李斯文”小的学生，要求显示这些学生的信息</h2><p>![image-20200610162453310](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610162453310.png)</p><blockquote><p><strong>第一步:查询得到“李斯文”的出生日期</strong></p><p><strong>第二步:利用WHERE语句，筛选出生日期比“李斯文”大的学生</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 请查找出年龄比李斯文小的学生<br>select bornDate from student<br>where studentName &#x3D; &#39;李斯文&#39;;<br></code></pre></td></tr></table></figure><p>![image-20200610163928028](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610163928028.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select studentName,bornDate from student<br>where bornDate&gt;&#39;1993-07-23&#39;;<br></code></pre></td></tr></table></figure><p>![image-20200610163937508](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610163937508.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select studentName,bornDate from student<br>where bornDate&gt;(<br>  select bornDate from student<br>    where studentName &#x3D; &#39;李斯文&#39;<br>);<br></code></pre></td></tr></table></figure><p>![image-20200610163937508](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610163937508.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE IF EXISTS 666;<br>create database &#96;666&#96;;<br>use &#96;666&#96;<br><br>drop table if exists &#96;t&#96;;<br>CREATE TABLE &#96;ttt&#96;(<br>true&#96;sid&#96; int (4) not null PRIMARY KEY,<br>  &#96;sname&#96; VARCHAR(20) not null<br>)CHARSET &#x3D; &#39;utf8mb4&#39;;<br><br>select * from ttt<br></code></pre></td></tr></table></figure><p>![image-20200610165549705](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200610165549705.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb1(<br>truenum1 int not null<br>);<br>insert into tb1 values(1),(5),(13),(27);<br>select * from tb1;<br></code></pre></td></tr></table></figure><p>![image-20200611161645057](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200611161645057.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb2(<br>truenum2 int not null<br>);<br>insert into tb2 values(6),(14),(11),(20);<br>select * from tb2;<br></code></pre></td></tr></table></figure><p>![image-20200611161650169](G:\四期\数据库\mysql文档\05 mysql高级查询.assets\image-20200611161650169.png)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;回想&quot;&gt;回想&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据插入和复制</title>
    <link href="https://wsdlxgp.top/posts/e5cc.html"/>
    <id>https://wsdlxgp.top/posts/e5cc.html</id>
    <published>2020-06-03T16:00:00.000Z</published>
    <updated>2020-06-19T05:14:40.049Z</updated>
    
    <content type="html"><![CDATA[<h1>一、DML语句(增删改)</h1><p><strong>插入数据的个数和类型要与表结构保持一致</strong></p><h2 id="1、插入单条数据记录">1、插入单条数据记录</h2><h3 id="语法：">语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 表名 [(字段名列表)] VALUES (值列表);<br></code></pre></td></tr></table></figure><h3 id="注意：">注意：</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">字段名是可选的，如省略则依次插入所有字段<br>多个列表和多个值之间使用逗号分隔<br>值列表和字段名列表一一对应<br>如插入的是表中部分数据，字段名列表必填<br></code></pre></td></tr></table></figure><h3 id="示例：">示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 插入单条数据<br>insert into student(sid,sname,gradeID)<br>VALUES(1002,&#39;徐淑丽&#39;,2);<br><br>insert into student<br>VALUES(1003,&#39;孙子涵&#39;,1);<br><br>insert into grade(gradeID,graedName)<br>values(4,&#39;云计算&#39;);<br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605142439474.png" alt="image-20200605142439474"></p><h2 id="2、插入多条数据记录">2、插入多条数据记录</h2><h4 id="语法：-2">语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 新表（字段名列表）<br>VALUES(值列表1),(值列表2),……,(值列表n);<br></code></pre></td></tr></table></figure><h3 id="示例：-2">示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 插入多条数据<br>insert into student(sid,sname,gradeID)<br>VALUES(1005,&#39;王永义&#39;,3),(1006,&#39;包晓艺&#39;,2),(1007,&#39;黑瓜子&#39;,1);<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605142445896.png" alt="image-20200605142445896"></p><h4 id="经验：">经验：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">为避免表结构发生变化引发的错误，建议插入数据时写明具体字段名！<br></code></pre></td></tr></table></figure><h2 id="3、将查询结果插入新表">3、将查询结果插入新表</h2><h3 id="（1）事先创建新表且与插入数据字段相符">（1）事先创建新表且与插入数据字段相符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 新表（字段1,字段2……） <br>SELECT字段1，字段2……<br>FROM 原表;<br></code></pre></td></tr></table></figure><h3 id="（2）无需事先创建新表">（2）无需事先创建新表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 新表（<br>SELECT 字段1，字段2……<br>FROM 原表）;<br></code></pre></td></tr></table></figure><h3 id="（3）练习">（3）练习</h3><p><strong>编写SQL语句实现从学生表提取姓名、手机号两列数据存储到通讯录表中。</strong></p><h4 id="1-不需要事先创建表">&lt;1&gt;不需要事先创建表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table copy_grade(<br>trueselect * from grade<br>);<br></code></pre></td></tr></table></figure><h4 id="2-事先创建表">&lt;2&gt;事先创建表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create TABLE c_grade(<br>true&#96;id&#96; int(4) not null,<br>true&#96;name&#96; VARCHAR(20) not null<br>);<br><br>insert into c_grade(id,name)<br>SELECT * from grade;<br></code></pre></td></tr></table></figure><h4 id="查看一下-2">查看一下</h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605143500761.png" alt="image-20200605143500761"></p><h2 id="4、更新数据记录">4、更新数据记录</h2><h3 id="语法：-3">语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE 表名 <br>SET 字段1&#x3D;值1,字段2&#x3D;值2,…,字段n&#x3D;值n <br>[WHERE 条件];<br></code></pre></td></tr></table></figure><h4 id="示例1">示例1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 更新数据<br>update c_grade<br>set name &#x3D; &#39;高级运维&#39;<br>where id &#x3D; 4<br># where条件一 定要设置，否则会修改所有的列<br><br>SELECT * from c_grade<br></code></pre></td></tr></table></figure><h4 id="查看一下-3">查看一下</h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605150412643.png" alt="image-20200605150412643"></p><h3 id="示例2">示例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE student<br>set gradeID&#x3D;2,sex&#x3D;&#39;女&#39;<br>where sid&#x3D;1002;<br><br>SELECT * from student<br></code></pre></td></tr></table></figure><h4 id="查看一下-4">查看一下</h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605150354067.png" alt="image-20200605150354067"></p><h3 id="分析一下">分析一下</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605145417460.png" alt="image-20200605145417460"></p><h2 id="5、删除数据记录">5、删除数据记录</h2><h3 id="语法：-4">语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM 表名 [WHERE条件];<br>TRUNCATE TABLE 表名;<br></code></pre></td></tr></table></figure><h3 id="注意：-2">注意：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">TRUNCATE语句删除后将重置自增列，表结构及其字段、约束、索引保持不变，执行速度比DELETE语句快<br></code></pre></td></tr></table></figure><h4 id="示例">示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># DELETE不能 重置自增列<br>DELETE from c_grade WHERE id&#x3D;1;<br>SELECT * from c_grade;<br><br># truncate能够 重置自增列<br>truncate table c_grade;<br>SELECT * from c_grade;<br></code></pre></td></tr></table></figure><h1>小结</h1><p><strong>MySQL中如何使用一条INSERT语句插入多条数据?</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">INSERT INTO 表名(字段一,字段二,)<br>VALUES(数据一,&#39;数据二&#39;);<br></code></pre></td></tr></table></figure><p><strong>MySQL中将查询结果集插入新表的两种方式是什么?两者的区别是什么?</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">不需要实现创建表,将查询结果插入新表<br>create table 新表名称(<br>  select * from 需要查询的表<br>);<br>  需要提前创建表<br>  INSERT into 提前创建好的表名称()<br>  select * from  需要查询的表；<br></code></pre></td></tr></table></figure><p><strong>删除数据时使用DEL ETE和TRUNCATE的区别是什么?</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">删除表内数据，不会重置自增列<br>删除表内出局，也会重置自增列<br></code></pre></td></tr></table></figure><h1>二、DQL语句（查询）</h1><h2 id="1、通用查询">1、通用查询</h2><h3 id="语法：-5">语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT  &lt;字段名列表&gt;<br>FROM  &lt;表名或视图&gt;<br>[WHERE  &lt;查询条件&gt;]<br>[GROUP BY &lt;分组的字段名&gt;]<br>[HAVING &lt;条件&gt;]<br>[ORDER BY &lt;排序的字段名&gt; [ASC 或 DESC]]<br></code></pre></td></tr></table></figure><h3 id="示例：-3">示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT &#96;studentNo&#96;,&#96;studentName&#96;,&#96;phone&#96;,&#96;address&#96;,&#96;bornDate&#96; <br>FROM &#96;student&#96;<br>WHERE &#96;gradeId&#96; &#x3D; 1<br>ORDER BY studentNo;<br></code></pre></td></tr></table></figure><h3 id="（1）把student中男和女的个数分别显示出来">（1）把student中男和女的个数分别显示出来</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT count(1) from student<br>#where sname&#x3D;&#39;黑瓜子&#39;;<br>GROUP BY sex<br>#HAVING sex&#x3D;&#39;男&#39; ;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200606153510215.png" alt="image-20200606153510215"></p><h3 id="（2）排序">（2）排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * from student<br>-- order by sid asc;<br>order by sid desc;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605154017144.png" alt="image-20200605154017144"></p><h2 id="2、LIMIT子句">2、LIMIT子句</h2><p><strong>MySQL查询语句中使用LIMIT子句限制结果集。</strong></p><h3 id="语法：-6">语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT  &lt;字段名列表&gt;<br>FROM  &lt;表名或视图&gt;<br>[WHERE  &lt;查询条件&gt;]<br>[GROUP BY &lt;分组的字段名&gt;]<br>[ORDER BY  &lt;排序的列名&gt; [ASC 或 DESC]]<br>[LIMIT [位置偏移量, ]行数];<br></code></pre></td></tr></table></figure><h3 id="示例：-4">示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * from student<br>limit 4,3;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605154710182.png" alt="image-20200605154710182"></p><p>注意：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">使用LIMIT子句时，注意第1条记录的位置是0！<br></code></pre></td></tr></table></figure><h2 id="3、常用函数">3、常用函数</h2><h3 id="（1）聚合函数">（1）聚合函数</h3><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>count()</td><td>返回某字段的行数</td></tr><tr><td>avg()</td><td>返回某字段的平均值</td></tr><tr><td>max()</td><td>返回某字段的最大值</td></tr><tr><td>min()</td><td>返回某字段的最小值</td></tr><tr><td>sum()</td><td>返回某字段的和</td></tr></tbody></table><h3 id="（2）字符串函数">（2）字符串函数</h3><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>LENGTH(str)</td><td>计算字符串长度</td><td>SELECT LENGTH(‘date’);</td></tr><tr><td>CONCAT(str1,str2,…)</td><td>字符串合并</td><td>select CONCAT(‘a’,‘b’,‘c’)</td></tr><tr><td>INSERT(str,pos,len,newstr)</td><td>字符串替换</td><td>select INSERT(‘old string’,1,3,‘letter’)</td></tr><tr><td>LOWER(str)</td><td>将字符串转换为小写</td><td>select LOWER(‘A’)</td></tr><tr><td>UPPER(str)</td><td>将字符串转换为大写</td><td>select UPPER(‘a’)</td></tr><tr><td>LEFT(s,n)</td><td>返回字符串 s 开始的最左边 n 个字符</td><td>SELECT LEFT(‘hello’,2);</td></tr><tr><td>RIGHT(s,n)</td><td>返回字符串 s 开始的最右边 n 个字符</td><td>SELECT RIGHT(‘hello word!’,5);</td></tr><tr><td>LPAD(s1,len,s2)</td><td>返回字符串 s1 ，其左边由字符串 s2填充到 len 字符长度，如果 s1 的长度大于 len ，则返回值被缩短至 len 长度</td><td>SELECT RPAD(‘hello’,4,’?’);</td></tr><tr><td>RPAD(s1,len,s2)</td><td>返回字符串 s1 ，其右边由字符串 s2 填充到 len 字符长度，如果 s1 的长度大于 len ，则返回值被缩短至 len 长度</td><td>SELECT RPAD(‘hello’,10,’?’);</td></tr><tr><td>LTRIM(s)</td><td>用于删除字符串 s 左侧的空格</td><td>SELECT LTRIM(’ book ');</td></tr><tr><td>RTRIM(s)</td><td>用于删除字符串 s 右侧的空格</td><td>SELECT RTRIM(’ book ');</td></tr><tr><td>TRIM(s)</td><td>用于删除字符串 s 两侧的空格</td><td>SELECT TRIM(’ book ');</td></tr><tr><td>TRIM(s1 FROM s)</td><td>删除指定字符串的函数</td><td>SELECT TRIM(‘xy’ FROM ‘xyxyabcxy’);</td></tr><tr><td>REPEAT(s,n)</td><td>用于重复字符串 s ，n 表示重复多少次</td><td>SELECT REPEAT(‘mysql’,3);</td></tr><tr><td>SPACE(n)</td><td>用于返回 n 个空格</td><td>SELECT SPACE(20);</td></tr><tr><td>REPLACE(s,s1,s2)</td><td>使用字符串 s2 替换字符串 s 中所有的字符串 s1</td><td>SELECT REPLACE(‘<a href="http://xxx.mysql.com" target="_blank" rel="noopener">xxx.mysql.com</a>’, ‘x’, ‘w’);</td></tr><tr><td>STRCMP(s1,s2)</td><td>用于比较字符串 s1 和 s2 的大小，若所有字符串相同则返回 0 ，若第一个字符串大于第二个字符串则返回 1 ，若第一个字符串小于第二个字符串则返回 -1</td><td>SELECT STRCMP(‘txt’, ‘txt2’), STRCMP(‘txt’, ‘txt’);</td></tr><tr><td>SUBSTRING(str,num,len)</td><td>获取指定位置的子字符串</td><td>select SUBSTRING(‘JavaMysqlOracle’,5,5);</td></tr><tr><td>MID(s,n,len)</td><td>用于获取指定位置的子字符串</td><td>SELECT MID(‘breakfast’,5);</td></tr><tr><td>LOCATE(str1,str)</td><td>返回字符串 str1 在字符串 str 中的开始位置</td><td>SELECT LOCATE(‘ball’, ‘football’);</td></tr><tr><td>POSITION(str1 IN str)</td><td>返回字符串 str1 在字符串 str 中的开始位置</td><td>SELECT POSITION(‘ball’ IN ‘football’);</td></tr><tr><td>INSTR(str, str1)</td><td>返回子字符串 str1 在字符串 str 中的开始位置</td><td>SELECT INSTR(‘football’, ‘ball’);</td></tr><tr><td>REVERSE(s)</td><td>将字符串 s 反转</td><td>SELECT REVERSE(‘abcd’);</td></tr><tr><td>ELT(n, s1, s2, s3, …)</td><td>返回第 n 个字符串，如果 n超出范围则返回 NULL</td><td>SELECT ELT(3, ‘a’, ‘b’, ‘c’, ‘d’);</td></tr><tr><td>FIELD(s, s1, s2, …)</td><td>返回字符串 s 在列表 s1, s2, … 中的位置，如果不存在字符串 s 则返回 0 ，如果字符串 s 是 NULL 也返回 0</td><td>SELECT FIELD(‘hi’, ‘hihi’, ‘hey’, ‘hi’, ‘bas’);</td></tr><tr><td>FIND_IN_SET(s1, s2)</td><td>返回字符串 s1 在字符串列表 s2中的位置</td><td>SELECT FIND_IN_SET(‘hi’, ‘hihi,hey,hi,bas’);</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 字符串连接<br>select CONCAT(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)<br></code></pre></td></tr></table></figure><p>![image-20200608142620041](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200608142620041.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 字符串替换<br>select INSERT(&#39;old string&#39;,1,3,&#39;letter&#39;)<br></code></pre></td></tr></table></figure><p>![image-20200608142655908](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200608142655908.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 字符串转小写<br>select LOWER(&#39;A&#39;)<br></code></pre></td></tr></table></figure><p>![image-20200608142815767](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200608142815767.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 字符串转大写<br>select LOWER(&#39;a&#39;)<br></code></pre></td></tr></table></figure><p>![image-20200608142830810](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200608142830810.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 字符串截取<br>select SUBSTRING(&#39;JavaMysqlOracle&#39;,5,5)<br></code></pre></td></tr></table></figure><p>![image-20200608142956979](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200608142956979.png)</p><h3 id="（3）时间日期函数">（3）时间日期函数</h3><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>CURDATE()</td><td>获取当前日期</td><td>select CURDATE();</td></tr><tr><td>CURTIME()</td><td>获取当前时间</td><td>select CURTIME();</td></tr><tr><td>CURRENT_TIMESTAMP() 、<br>.LOCALTIME() 、NOW() 、SYSDATE()<br>CURRENT_TIMESTAMP()</td><td>获取当前日期和时间</td><td>select NOW();</td></tr><tr><td>UNIX_TIMESTAMP()</td><td>获取 UNIX 格式的时间戳</td><td>SELECT UNIX_TIMESTAMP();</td></tr><tr><td>FROM_UNIXTIME()</td><td>将 UNIX 格式的时间戳转换为普通格式的时间</td><td>SELECT FROM_UNIXTIME(‘1495542689’);</td></tr><tr><td>UTC_DATE() UTC_DATE()</td><td>获取当前 UTC (世界标准时间) 日期值</td><td>SELECT UTC_DATE();</td></tr><tr><td>UTC_TIME() UTC_TIME()</td><td>获取当前 UTC (世界标准时间) 时间值</td><td>SELECT UTC_TIME();</td></tr><tr><td>YEAR(date)</td><td>返回日期date的年份</td><td>select YEAR(NOW());</td></tr><tr><td>QUARTER(date)</td><td>返回日期date为一年中第几季度</td><td>select QUARTER(NOW());</td></tr><tr><td>MONTH(date)</td><td>返回日期date的月份</td><td>select MONTH(NOW());</td></tr><tr><td>WEEK(date)</td><td>返回日期date为一年中第几周</td><td>select WEEK(NOW());</td></tr><tr><td>DAY(date)</td><td>返回日期date的日期</td><td>select DAY(NOW());</td></tr><tr><td>DAYOFYEAR(date)</td><td>返回 date 是一年中的第几天，一年有 365 天</td><td>SELECT DAYOFYEAR(‘2017-05-23’);</td></tr><tr><td>DAYOFMONTH(date)</td><td>计算 date 是一个月中的第几天</td><td>SELECT DAYOFMONTH(‘2017-05-23’);</td></tr><tr><td>HOUR(time)</td><td>返回日期date的小时</td><td>select HOUR(NOW());</td></tr><tr><td>MINUTE(time)</td><td>返回日期date的分钟</td><td>select MINUTE(NOW());</td></tr><tr><td>SECOND(time)</td><td>返回日期date的秒</td><td>select SECOND(NOW());</td></tr><tr><td>TIME_TO_SEC(time)</td><td>将 time 转换为秒钟，公式为 &quot; 小时3600 + 分钟60 + 秒 &quot;</td><td>SELECT TIME_TO_SEC(‘23:23:00’);</td></tr><tr><td>SEC_TO_TIME(time)</td><td>将秒值转换为时间格式</td><td>SELECT SEC_TO_TIME(‘84180’);</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回日期date的date1和date2间隔的天数</td><td>select DATEDIFF(NOW(),‘2020-06-07’);</td></tr><tr><td>ADDDATE(date,n)</td><td>计算日期date加上n天以后在日期</td><td>select ADDDATE(NOW(),3);</td></tr><tr><td>DATE_FORMAT(date, format)</td><td>格式化日期，即根据 format 指定的格式显示 date 值</td><td>SELECT DATE_FORMAT(‘1997-10-04 22:23:00’, ‘%W %M %Y’);</td></tr><tr><td>TIME_FORMAT(time, format)</td><td>格式化时间，即根据 format 指定的格式显示 time 值</td><td>SELECT TIME_FORMAT(‘16:00:00’, ‘%H %k %I’);</td></tr><tr><td>GET_FORMAT()</td><td>指定值类型和格式化类型，然后会显示成格式字符串</td><td>SELECT DATE_FORMAT(‘2000-10-05 22:23:00’, GET_FORMAT(DATE,‘USA’));</td></tr></tbody></table><h4 id="参考内容：">参考内容：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 当前的日期<br>select CURDATE();<br># 当前的时间<br>select CURTIME();<br># 当前的日期和时间<br>select NOW();<br><br># 年<br>select YEAR(NOW());<br># 月<br>select MONTH(NOW());<br># 日<br>select DAY(NOW());<br># 星期<br>select WEEK(NOW());<br><br># 时<br>select HOUR(NOW());<br># 分<br>select MINUTE(NOW());<br># 秒<br>select SECOND(NOW());<br><br># 计算从2020&#x2F;1&#x2F;&#x2F;1 到 2020&#x2F;6&#x2F;8 有多少天<br>select DATEDIFF(now(),&#39;2020-01-01&#39;)<br><br># 三天后的现在<br>select adddate(now(),3)<br></code></pre></td></tr></table></figure><h3 id="（4）数学函数">（4）数学函数</h3><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>ABS(x)</td><td>绝对值函数</td><td>SELECT ABS(-2);</td></tr><tr><td>PI()</td><td>返回圆周率的函数</td><td>SELECT PI();</td></tr><tr><td>SQRT(x)</td><td>平方根函数，返回非负数二次方根</td><td>SELECT SQRT(9);</td></tr><tr><td>CEIL(x)</td><td>向上取整</td><td>SELECT CEIL(2.1);</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td><td>SELECT FLOOR(2.5);</td></tr><tr><td>RAND(x)</td><td>返回一个随机浮点值，范围在 0 ~ 1 之间</td><td>SELECT RAND();</td></tr><tr><td>ROUND(x)</td><td>对x进行四舍五入</td><td>SELECT ROUND(-1.34);</td></tr><tr><td>ROUND(x,y)</td><td>对x进行四舍五入，并且保留小数点后y位</td><td>SELECT ROUND(1.37,1);</td></tr><tr><td>TRUNCATE(x,y)</td><td>对x进行截取，结果保留小数点后y位</td><td>SELECT TRUNCATE(1.31,1);</td></tr><tr><td>POW(x,y)</td><td>返回 x 的 y 次方的结果</td><td>SELECT POW(2,4);</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#  只要有小数就往整数进一位<br>select ceil(3.01)<br><br># 只要整数部位<br>select FLOOR(3.91);<br><br># 随机数<br>select rand();<br></code></pre></td></tr></table></figure><h3 id="（5）系统信息函数">（5）系统信息函数</h3><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>VERSION()</td><td>获取 MySQL 版本号</td><td>SELECT VERSION();</td></tr><tr><td>CHARSET(str)</td><td>查看字符串 str 的字符集</td><td>SELECT CHARSET(‘abc’);</td></tr><tr><td>COLLATION(str)</td><td>查看字符串 str 的字符排列方式</td><td>SELECT COLLATION(‘abc’);</td></tr><tr><td>LAST_INSERT_ID()</td><td>获取最后一个自动生成的ID 值</td><td>SELECT LAST_INSERT_ID();</td></tr><tr><td>USER() 、<br>CURRENT_USER() 、<br>SYSTEM_USER()</td><td>返回当前登录的用户及主机名</td><td>SELECT USER();<br>SELECT CURRENT_USER();<br>SELECT SYSTEM_USER();</td></tr><tr><td>CONNECTION_ID()</td><td>查看当前用户的连接数的ID</td><td>SELECT CONNECTION_ID();</td></tr><tr><td>DATABASE()、SCHEMA()</td><td>查看当前使用的数据库</td><td>SELECT DATABASE();<br>SELECT SCHEMA();</td></tr><tr><td>SHOW PROCESSLIST</td><td>查看当前用户的连接信息</td><td>SHOW PROCESSLIST;</td></tr></tbody></table><blockquote><p>CONNECTION_ID()函数的参数</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tex">1. Id ：用户登录 MySQL 时，系统分配的连接 id<br>2. User ：当前连接的用户<br>3. Host ：显示这个语句是从哪个 IP 的哪个端口上发出的，可以用来追踪出现问题语句的用户<br>4. db ：显示这个进程目前连接的是哪个数据库<br>5. Command ：显示当前连接执行的命令，一般取值为休眠(Sleep)、查询(Query)、连接(Connect)<br>6. Time ：显示这个状态持续的时间，单位是秒<br>7. State ：显示使用当前连接的 SQL 语句的状态<br>8. Info ：显示这个 SQL 语句<br></code></pre></td></tr></table></figure><h4 id="示例1：">示例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看MySQL版本<br>select VERSION();<br># 查看数据库连接的ID<br># 查看MySQL connection id连接id<br># 对于已经建立的连接的客户端，都有一个唯一的连接ID。<br>select CONNECTION_ID();<br># 查看MySQL接口<br>SHOW PROCESSLIST;<br><br>use mysql;<br># 查看当前数据库<br>select database();<br>SELECT SCHEMA();<br><br># 查看当前用户<br>select user();<br># 查看当前日期<br>select CURRENT_DATE();<br># 查看当前用户<br>select SYSTEM_USER();<br></code></pre></td></tr></table></figure><h4 id="示例2：">示例2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table worker(<br>trueid int auto_increment PRIMARY key,<br>truename VARCHAR(30)<br>)CHARSET&#x3D;utf8mb4;<br><br>insert into worker(name) VALUES(&#39;xxx&#39;);<br>insert into worker(name) VALUES(&#39;yyy&#39;);<br>select LAST_INSERT_ID();<br></code></pre></td></tr></table></figure><h3 id="（6）条件判断函数">（6）条件判断函数</h3><table><thead><tr><th>函数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>IF() IF(expr, v1, v2)</td><td>如果表达式 expr 为 TRUE ，则返回值为 v1 ，否则返回 v2</td><td>SELECT IF(1&gt;2, 2, 3);</td></tr><tr><td>IFNULL() IFNULL(v1, v2)</td><td>如果 v1 不为 NULL ，则返回值为 v1 ；如果 v1 为 NULL ，则返回值为 v2</td><td>SELECT IFNULL(1,2), IFNULL(NULL,10);</td></tr><tr><td>CASE expr WHEN v1 THEN r1 [WHEN v2 THEN r2] [ELSE rn] END</td><td>如果 expr 等于某个 vn，则返回对应位置 THEN 后面的结果，如果与所有值都不相等，则返回 ELSE 后面的 rn</td><td>SELECT CASE 2 WHEN 1 THEN ‘one’ WHEN 2 THEN ‘two’ ELSE ‘more’ END;</td></tr></tbody></table><h3 id="（7）加密-解密函数">（7）加密/解密函数</h3><table><thead><tr><th>函数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>PASSWORD(str)</td><td>从明文密码 str 计算并返回加密后的密码字符串，当参数为 NULL 时，返回 NULL</td><td>SELECT PASSWORD(‘newpwd’);</td></tr><tr><td>MD5(str)</td><td>为字符串 str 算出一个 MD5 128 比特校验值</td><td>SELECT MD5(‘newpwd’);</td></tr><tr><td>ENCODE(str, pswd_str)</td><td>使用 pswd_str 作为密码，加密 str</td><td>SELECT ENCODE(‘secret’, ‘newpwd’);</td></tr><tr><td>DECODE(crypt_str, pswd_str)</td><td>使用 pswd_str 作为密码，解密加密字符串 crypt_str</td><td>SELECT DECODE(ENCODE(‘secret’,‘cry’), ‘cry’);</td></tr></tbody></table><h4 id="加密">加密</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select PASSWORD(&#39;123456&#39;);<br>select MD5(&#39;123456&#39;);<br>select ENCODE(&#39;123456&#39;,&#39;abc&#39;)<br></code></pre></td></tr></table></figure><h4 id="解密">解密</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select DECODE(ENCODE(&#39;123456&#39;,&#39;abc&#39;),&#39;abc&#39;);<br></code></pre></td></tr></table></figure><h4 id="示例-2">示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select PASSWORD(&#39;123456&#39;);<br>select BENCHMARK(500000，PASSWORD(&#39;123456&#39;));<br></code></pre></td></tr></table></figure><h3 id="（8）其它函数">（8）其它函数</h3><table><thead><tr><th>函数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>FORMAT(x, n)</td><td>将数字 x 格式化，并以四舍五入的方式保留小数点后 n 位，结果以字符串的形式返回</td><td>SELECT FORMAT(1.23456, 4);</td></tr><tr><td>CONV()</td><td>不同进制数之间的转换</td><td>SELECT CONV(‘a’,16,2), # 将16进制的a转换为2进制<br>SELECT CONV(15,10,2), # 将10进制的15转换为2进制<br>SELECT CONV(15,10,8), # 将10进制的15转换为8进制<br>SELECT CONV(15,10,16); # 将10进制的15转换为16进制</td></tr><tr><td>INET_ATON(expr)</td><td>将网络地址转换为一个代表该地址数值的整数</td><td>SELECT INET_ATON(‘192.168.1.1’);</td></tr><tr><td>GET_LOCK(str, timeout)</td><td>使用字符串 str 来得到一个锁，持续时间 timeout 秒<br>1. 若成功得到锁，则返回 1<br>2. 若操作超时，则返回 0<br>3. 若发生错误，则返回 NULL</td><td>SELECT GET_LOCK(‘lock1’, 10);</td></tr><tr><td>RELEASE_LOCAK(str)</td><td>用于解开被 GET_LOCK() 获取的，用字符串 str 所命名的锁<br>1. 若锁被解开，则返回 1<br>2. 若该线程尚未创建锁，则返回 0<br>3. 若命名的锁不存在，则返回 NULL<br>4. 若该锁从未被 GET_LOCK() 的调用获取，或锁已经被提前解开，则该锁不存在</td><td>SELECT RELEASE_LOCK(‘lock1’);</td></tr><tr><td>IS_FREE_LOCK(str)</td><td>检查名为 str 的锁是否可以使用<br>1. 若锁可以使用，则返回 1<br>2. 若锁正在被使用，则返回 0<br>3. 若出现错误，则返回 NULL</td><td>SELECT IS_FREE_LOCK(‘lock1’);</td></tr><tr><td>IS_USED_LOCK(str)</td><td>检查名为 str 的锁是否正在被使用，若被封锁，则返回使用该锁的客户端的连接标识<br>符，否则返回 NULL</td><td>SELECT IS_USED_LOCK(‘lock1’);</td></tr><tr><td>BENCHMARK(count, expr)</td><td>用于重复 count 次执行表达式 expr<br>1. 可以用于计算 MySQL 处理表达式的速度<br>2. 可以在 MySQL 客户端内部报告语句执行的时间</td><td>SELECT PASSWORD(‘newpwd’);<br>SELECT BENCHMARK( 500000, PASSWORD(‘newpwd’) );</td></tr><tr><td>CONVERT(… USING …)</td><td>用于改变字符串的默认字符集<br>默认是utf8字符集</td><td>SELECT CHARSET(‘abc’);<br>SELECT CHARSET(CONVERT(‘abc’ USING latin1));</td></tr><tr><td>CONVERT(x, type)</td><td>将一个数据类型的值转换为另一个数据类型的值</td><td>SELECT CONVERT(100, CHAR(2));</td></tr></tbody></table><h4 id="示例1：-2">示例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select format(3.1415926,2);<br>select format(3.14,4);<br>select format(3.14,0);<br></code></pre></td></tr></table></figure><h4 id="示例2：-2">示例2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select CONV(&#39;a&#39;,16,2);<br>select CONV(15,10,2);<br>select CONV(15,10,8);<br>select CONV(15,10,16);<br></code></pre></td></tr></table></figure><h4 id="示例3：">示例3：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select INET_ATON(&#39;192.168.79.160&#39;);<br></code></pre></td></tr></table></figure><h3 id="（7）数据类型转换百数">（7）数据类型转换百数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select if(1&gt;2,&#39;true&#39;,&#39;false&#39;);<br><br>select IFNULL(null,2);<br>select IFNULL(1,2);<br><br>select case 2 <br>when 1 then &#39;one&#39; <br>when 2 then &#39;two&#39;<br>else &#39;more&#39;<br>end;<br></code></pre></td></tr></table></figure><p>![image-20200613115249566](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200613115249566.png)</p><h2 id="4、运算符">4、运算符</h2><h3 id="（1）算术运算符">（1）算术运算符</h3><table><thead><tr><th>运算符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>select 1+2;</td></tr><tr><td>-</td><td>减法</td><td>select 1-2;</td></tr><tr><td>*</td><td>乘法</td><td>select 2*5;</td></tr><tr><td>/或DIV</td><td>除法</td><td>select 9/3; 或 select 9 DIV 3;</td></tr><tr><td>%或MOD</td><td>取余</td><td>select 9%2; 或 select 9 MOD 2;</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 算数运算符<br>mysql&gt; select 1+2;<br>+-----+<br>| 1+2 |<br>+-----+<br>|   3 |<br>+-----+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select 3-5;<br>+-----+<br>| 3-5 |<br>+-----+<br>|  -2 |<br>+-----+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select 4*5;<br>+-----+<br>| 4*5 |<br>+-----+<br>|  20 |<br>+-----+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select 5&#x2F;3;<br>+--------+<br>| 5&#x2F;3    |<br>+--------+<br>| 1.6667 |<br>+--------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select 5 DIV 3;<br>+---------+<br>| 5 DIV 3 |<br>+---------+<br>|       1 |<br>+---------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select 6%8;<br>+------+<br>| 6%8  |<br>+------+<br>|    6 |<br>+------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="（2）比较运算符">（2）比较运算符</h3><p><strong>SELECT 语句中的条件语句经常要使用比较运算符。</strong></p><p><strong>通过这些比较运算符，可以判断表中的哪些记录是符合条件的。比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回 NULL。</strong></p><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:left">描述</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;&gt;, !=</td><td style="text-align:left">不等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">BETWEEN</td><td style="text-align:left">在两值之间</td><td style="text-align:left">&gt;=min&amp;&amp;&lt;=max</td></tr><tr><td style="text-align:left">NOT BETWEEN</td><td style="text-align:left">不在两值之间</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IN</td><td style="text-align:left">在集合中</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">NOT IN</td><td style="text-align:left">不在集合中</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;=&gt;</td><td style="text-align:left">严格比较两个NULL值是否相等</td><td style="text-align:left">两个操作码均为NULL时，其所得值为1；而当一个操作码为NULL时，其所得值为0</td></tr><tr><td style="text-align:left">LIKE</td><td style="text-align:left">模糊匹配</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">REGEXP 或 RLIKE</td><td style="text-align:left">正则式匹配</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IS NULL</td><td style="text-align:left">为空</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IS NOT NULL</td><td style="text-align:left">不为空</td><td style="text-align:left"></td></tr></tbody></table><h6 id="1）等于">1）等于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 2&#x3D;3;<br>+-----+<br>| 2&#x3D;3 |<br>+-----+<br>|   0 |<br>+-----+<br><br><br>mysql&gt; select NULL &#x3D; NULL;<br>+-------------+<br>| NULL &#x3D; NULL |<br>+-------------+<br>|        NULL |<br>+-------------+<br></code></pre></td></tr></table></figure><h6 id="2）不等于">2）不等于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 2&lt;&gt;3;<br>+------+<br>| 2&lt;&gt;3 |<br>+------+<br>|    1 |<br>+------+<br></code></pre></td></tr></table></figure><h6 id="3）安全等于">3）安全等于</h6><p>与 <strong>=</strong> 的区别在于当两个操作码均为 NULL 时，其所得值为 1 而不为 NULL，而当一个操作码为 NULL 时，其所得值为 0而不为 NULL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 2&lt;&#x3D;&gt;3;<br>+-------+<br>| 2&lt;&#x3D;&gt;3 |<br>+-------+<br>|     0 |<br>+-------+<br><br><br>mysql&gt; select null&#x3D;null;<br>+-----------+<br>| null&#x3D;null |<br>+-----------+<br>|      NULL |<br>+-----------+<br><br>        <br>mysql&gt; select null&lt;&#x3D;&gt;null;<br>+-------------+<br>| null&lt;&#x3D;&gt;null |<br>+-------------+<br>|           1 |<br>+-------------+<br></code></pre></td></tr></table></figure><h6 id="4）小于">4）小于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 2&lt;3;<br>+-----+<br>| 2&lt;3 |<br>+-----+<br>|   1 |<br>+-----+<br></code></pre></td></tr></table></figure><h6 id="5）小于等于">5）小于等于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 2&lt;&#x3D;3;<br>+------+<br>| 2&lt;&#x3D;3 |<br>+------+<br>|    1 |<br>+------+<br></code></pre></td></tr></table></figure><h6 id="6）大于">6）大于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 2&gt;3;<br>+-----+<br>| 2&gt;3 |<br>+-----+<br>|   0 |<br>+-----+<br></code></pre></td></tr></table></figure><h6 id="7）大于等于">7）大于等于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 2&gt;&#x3D;3;<br>+------+<br>| 2&gt;&#x3D;3 |<br>+------+<br>|    0 |<br>+------+<br></code></pre></td></tr></table></figure><h6 id="8）BETWEEN">8）BETWEEN</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 5 between 1 and 10;<br>+--------------------+<br>| 5 between 1 and 10 |<br>+--------------------+<br>|                  1 |<br>+--------------------+<br></code></pre></td></tr></table></figure><h6 id="9）IN">9）IN</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 5 in (1,2,3,4,5);<br>+------------------+<br>| 5 in (1,2,3,4,5) |<br>+------------------+<br>|                1 |<br>+------------------+<br></code></pre></td></tr></table></figure><h6 id="10）NOT-IN">10）NOT IN</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select 5 not in (1,2,3,4,5);<br>+----------------------+<br>| 5 not in (1,2,3,4,5) |<br>+----------------------+<br>|                    0 |<br>+----------------------+<br></code></pre></td></tr></table></figure><h6 id="11）IS-NULL">11）IS NULL</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select null is NULL;<br>+--------------+<br>| null is NULL |<br>+--------------+<br>|            1 |<br>+--------------+<br><br>mysql&gt; select &#39;a&#39; is NULL;<br>+-------------+<br>| &#39;a&#39; is NULL |<br>+-------------+<br>|           0 |<br>+-------------+<br></code></pre></td></tr></table></figure><h6 id="12）IS-NOT-NULL">12）IS NOT NULL</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select null IS NOT NULL;<br>+------------------+<br>| null IS NOT NULL |<br>+------------------+<br>|                0 |<br>+------------------+<br><br>        <br>mysql&gt; select &#39;a&#39; IS NOT NULL;<br>+-----------------+<br>| &#39;a&#39; IS NOT NULL |<br>+-----------------+<br>|               1 |<br>+-----------------+<br></code></pre></td></tr></table></figure><h6 id="13、LIKE">13、LIKE</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select &#39;12345&#39; like &#39;12%&#39;;<br>+--------------------+<br>| &#39;12345&#39; like &#39;12%&#39; |<br>+--------------------+<br>|                  1 |<br>+--------------------+<br><br>mysql&gt; select &#39;12345&#39; like &#39;12_&#39;;<br>+--------------------+<br>| &#39;12345&#39; like &#39;12_&#39; |<br>+--------------------+<br>|                  0 |<br>+--------------------+<br></code></pre></td></tr></table></figure><h6 id="14、REGEXP">14、REGEXP</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select &#39;beijing&#39; REGEXP &#39;jing&#39;;<br>+-------------------------+<br>| &#39;beijing&#39; REGEXP &#39;jing&#39; |<br>+-------------------------+<br>|                       1 |<br>+-------------------------+<br><br>mysql&gt; select &#39;beijing&#39; REGEXP &#39;xi&#39;;<br>+-----------------------+<br>| &#39;beijing&#39; REGEXP &#39;xi&#39; |<br>+-----------------------+<br>|                     0 |<br>+-----------------------+<br></code></pre></td></tr></table></figure><h3 id="（3）逻辑运算符">（3）逻辑运算符</h3><p><strong>逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 1。如果表达式是假，结果返回 0。</strong></p><table><thead><tr><th style="text-align:left">运算符号</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">NOT 或 !</td><td style="text-align:left">逻辑非</td></tr><tr><td style="text-align:left">AND</td><td style="text-align:left">逻辑与</td></tr><tr><td style="text-align:left">OR</td><td style="text-align:left">逻辑或</td></tr><tr><td style="text-align:left">XOR</td><td style="text-align:left">逻辑异或</td></tr></tbody></table><h6 id="1）与">1）与</h6><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select 2 and 0;<br><span class="hljs-code">+---------+</span><br>| 2 and 0 |<br><span class="hljs-code">+---------+</span><br>|       0 |<br><span class="hljs-code">+---------+</span><br><br><span class="hljs-code">        </span><br>mysql&gt; select 2 and 1;   <br><span class="hljs-code">+---------+</span>     <br>| 2 and 1 |      <br><span class="hljs-code">+---------+</span>      <br>|       1 |      <br><span class="hljs-code">+---------+</span><br></code></pre></td></tr></table></figure><h6 id="2）或">2）或</h6><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select 2 or 0;<br><span class="hljs-code">+--------+</span><br>| 2 or 0 |<br><span class="hljs-code">+--------+</span><br>|      1 |<br><span class="hljs-code">+--------+</span><br><br>mysql&gt; select 2 or 1;<br><span class="hljs-code">+--------+</span><br>| 2 or 1 |<br><span class="hljs-code">+--------+</span><br>|      1 |<br><span class="hljs-code">+--------+</span><br><br>mysql&gt; select 0 or 0;<br><span class="hljs-code">+--------+</span><br>| 0 or 0 |<br><span class="hljs-code">+--------+</span><br>|      0 |<br><span class="hljs-code">+--------+</span><br><br>mysql&gt; select 1 || 0;<br><span class="hljs-code">+--------+</span><br>| 1 || 0 |<br><span class="hljs-code">+--------+</span><br>|      1 |<br><span class="hljs-code">+--------+</span><br></code></pre></td></tr></table></figure><h6 id="3）非">3）非</h6><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select not 1;<br><span class="hljs-code">+-------+</span><br>| not 1 |<br><span class="hljs-code">+-------+</span><br>|     0 |<br><span class="hljs-code">+-------+</span><br><br>mysql&gt; select !0;<br><span class="hljs-code">+----+</span><br>| !0 |<br><span class="hljs-code">+----+</span><br>|  1 |<br><span class="hljs-code">+----+</span><br></code></pre></td></tr></table></figure><h6 id="4）异或（其他数字只能与0比较）">4）异或（其他数字只能与0比较）</h6><p>当任意一个操作数为NULL时,返回值为NULL，对于非NULL的操作数,如果两个的逻辑真假值相异，则返回结果为1，否则为0。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select 1 xor 1;<br><span class="hljs-code">+---------+</span><br>| 1 xor 1 |<br><span class="hljs-code">+---------+</span><br>|       0 |<br><span class="hljs-code">+---------+</span><br><br>mysql&gt; select 0 xor 0;<br><span class="hljs-code">+---------+</span><br>| 0 xor 0 |<br><span class="hljs-code">+---------+</span><br>|       0 |<br><span class="hljs-code">+---------+</span><br><br>mysql&gt; select 1 xor 0;<br><span class="hljs-code">+---------+</span><br>| 1 xor 0 |<br><span class="hljs-code">+---------+</span><br>|       1 |<br><span class="hljs-code">+---------+</span><br><br>mysql&gt; select null or 1;<br><span class="hljs-code">+-----------+</span><br>| null or 1 |<br><span class="hljs-code">+-----------+</span><br>|         1 |<br><span class="hljs-code">+-----------+</span><br><br>mysql&gt; select 1 ^ 0;<br><span class="hljs-code">+-------+</span><br>| 1 ^ 0 |<br><span class="hljs-code">+-------+</span><br>|     1 |<br><span class="hljs-code">+-------+</span><br></code></pre></td></tr></table></figure><h3 id="（4）位运算符">（4）位运算符</h3><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><table><thead><tr><th style="text-align:left">运算符号</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">按位或</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或</td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">取反</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移</td></tr></tbody></table><h6 id="1）按位与">1）按位与</h6><p>对应的二进制位都为 1 ，则该位的运算结果为 1 ，否则为 0。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select 3&amp;5;<br><span class="hljs-code">+-----+</span><br>| 3&amp;5 |<br><span class="hljs-code">+-----+</span><br>|   1 |<br><span class="hljs-code">+-----+</span><br></code></pre></td></tr></table></figure><h6 id="2）按位或">2）按位或</h6><p>对应的二进制位有一个或两个为 1 ，则该位的运算结果为 1 ，否则为 0。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">mysql&gt; SELECT <span class="hljs-number">10</span> | <span class="hljs-number">15</span> , <span class="hljs-number">9</span> | <span class="hljs-number">4</span> | <span class="hljs-number">2</span> ;<br>+---------+-----------+<br>| <span class="hljs-number">10</span> | <span class="hljs-number">15</span> | <span class="hljs-number">9</span> | <span class="hljs-number">4</span> | <span class="hljs-number">2</span> | # <span class="hljs-number">10</span>的二进制为<span class="hljs-number">1010</span>,<span class="hljs-number">15</span>的二进制为<span class="hljs-number">1111</span>，按位或运算之后结果为<br><span class="hljs-number">1111</span>，即<span class="hljs-number">15</span><br>+---------+-----------+ # <span class="hljs-number">9</span>的二进制为<span class="hljs-number">1001</span>,<span class="hljs-number">4</span>为<span class="hljs-number">0100</span>,<span class="hljs-number">2</span>的二进制为<span class="hljs-number">0010</span>，按位或运算之后<br><span class="hljs-number">1111</span><br>| <span class="hljs-number">15</span> | <span class="hljs-number">15</span> |<br>+---------+-----------+<br></code></pre></td></tr></table></figure><h6 id="3）按位异或">3）按位异或</h6><p>对应的二进制位不相同时，结果为 1，否则为 0。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select 3^5;<br><span class="hljs-code">+-----+</span><br>| 3^5 |<br><span class="hljs-code">+-----+</span><br>|   6 |<br><span class="hljs-code">+-----+</span><br></code></pre></td></tr></table></figure><h6 id="4）按位取反">4）按位取反</h6><p><strong>将对应的二进制数逐位反转，即 1 取反后变 0 ，0 取反后变 1。</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select ~18446744073709551612;<br><span class="hljs-code">+-----------------------+</span><br>| ~18446744073709551612 |<br><span class="hljs-code">+-----------------------+</span><br>|                     3 |<br><span class="hljs-code">+-----------------------+</span><br></code></pre></td></tr></table></figure><h6 id="5）按位右移">5）按位右移</h6><p><strong>使指定的二进制位都右移指定的位数，右移指定位之后，右边低位的数值将被移出并丢弃，左边高位空出的职位用 0 补齐。</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select 3&gt;&gt;1;<br><span class="hljs-code">+------+</span><br>| 3&gt;&gt;1 |<br><span class="hljs-code">+------+</span><br>|    1 |<br><span class="hljs-code">+------+</span><br></code></pre></td></tr></table></figure><h6 id="6）按位左移">6）按位左移</h6><p><strong>使指定的二进制位都左移指定的位数，左移指定位之后，左边高位的数值将被移出并丢弃，右边低位空出的位置用 0 补齐。</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select 3&lt;&lt;1;<br><span class="hljs-code">+------+</span><br>| 3&lt;&lt;1 |<br><span class="hljs-code">+------+</span><br>|    6 |<br><span class="hljs-code">+------+</span><br></code></pre></td></tr></table></figure><h3 id="（5）运算符优先级">（5）运算符优先级</h3><p><strong>最低优先级为： :=。</strong></p><p>![image-20200613115948741](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200613115948741.png)</p><p><strong>最高优先级为： !、BINARY、 COLLATE。</strong></p><h1>三、小练习</h1><h2 id="1、导入数据库">1、导入数据库</h2><p>![image-20200609171913909](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200609171913909.png)</p><p>![image-20200609171943656](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200609171943656.png)</p><p>![image-20200609172002895](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200609172002895.png)</p><h2 id="2、grade添加数据">2、grade添加数据</h2><p>![image-20200609172219791](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200609172219791.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from student;<br>select studentNo as 学号,studentName as 姓名,sex as 性别,<br>gradeId as 年级编号,bornDate as 出生日期<br>from student;<br></code></pre></td></tr></table></figure><p>![image-20200609172714342](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200609172714342.png)</p><p>![image-20200609172657559](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200609172657559.png)</p><p>![image-20200609172730224](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200609172730224.png)</p><h2 id="3、两表联查">3、两表联查</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 两表联查<br>select * from grade;<br>select * from student,grade;<br><br>select * from student,grade where grade.gradeID &#x3D; student.gradeId;<br></code></pre></td></tr></table></figure><p>![image-20200613123717083](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200613123717083.png)</p><h3 id="示例1：-3">示例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 逗号+WHERE<br>select <br>studentNo as 学号,<br>studentName as 姓名,<br>sex as 性别,<br>gradeName as 年级,<br>bornDate as 出生日期<br>from student as s,grade as g<br>where g.gradeID &#x3D; s.gradeId;<br></code></pre></td></tr></table></figure><p>![image-20200609173647871](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200609173647871.png)</p><h3 id="示例2：-3">示例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># join+on<br>select <br>studentNo as 学号,<br>studentName as 姓名,<br>sex as 性别,<br>gradeName as 年级,<br>bornDate as 出生日期<br>from student as s<br>join grade as g<br>on g.gradeID &#x3D; s.gradeId;<br></code></pre></td></tr></table></figure><p>![image-20200613123857349](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200613123857349.png)</p><h2 id="4、模糊查询某学生的信息">4、模糊查询某学生的信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询某学生的信息<br>select * from student where studentName &#x3D; &#39;郭靖&#39;;<br>select * from student where studentName like &#39;%郭%&#39;;<br>select * from student where studentName like &#39;%靖&#39;;<br>select * from student where studentName like &#39;郭%&#39;;<br></code></pre></td></tr></table></figure><p>![image-20200613124019868](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200613124019868.png)</p><h2 id="5、排序">5、排序</h2><h3 id="降序">降序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 降序<br>select * from student ORDER BY studentNo desc;<br></code></pre></td></tr></table></figure><p>![image-20200613124251255](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200613124251255.png)</p><h3 id="升序">升序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 升序<br>select * from student ORDER BY studentNo asc;<br></code></pre></td></tr></table></figure><p>![image-20200613124257120](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200613124257120.png)</p><h2 id="6、分组">6、分组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 分组: 只有聚会的数和参与了分组的字段能够出现在select语句后面<br>select sex,count(1) from student GROUP BY sex;<br></code></pre></td></tr></table></figure><p>![image-20200613124341995](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200613124341995.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 分组后再筛选数据<br>select count(1),sex<br>from student<br>GROUP BY sex<br>having sex&#x3D;&#39;男&#39;;<br></code></pre></td></tr></table></figure><p>![image-20200613124412250](G:\四期\数据库\mysql文档\04 MySQL数据插入和复制.assets\image-20200613124412250.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># AND<br>select * from student where sex&#x3D;&#39;男&#39; and studentName&#x3D;&#39;李文才&#39;;<br>+-----------+----------+-------------+-----+---------+-------------+----------+---------------------+-------+--------------+<br>| studentNo | loginPwd | studentName | sex | gradeId | phone       | address  | bornDate            | email | identityCard |<br>+-----------+----------+-------------+-----+---------+-------------+----------+---------------------+-------+--------------+<br>|     10001 | 123      | 李文才      | 男  |       1 | 13645667890 | 地址不详 | 1994-04-12 00:00:00 | NULL  | NULL         |<br>+-----------+----------+-------------+-----+---------+-------------+----------+---------------------+-------+--------------+<br>1 row in set (0.00 sec)<br># OR<br>select * from student where sex&#x3D;&#39;男&#39; or studentName&#x3D;&#39;李文才&#39;;<br>+-----------+----------+-------------+-----+---------+-------------+--------------+---------------------+-------+--------------+<br>| studentNo | loginPwd | studentName | sex | gradeId | phone       | address      | bornDate            | email | identityCard |<br>+-----------+----------+-------------+-----+---------+-------------+--------------+---------------------+-------+--------------+<br>|     10000 | 123      | 郭靖        | 男  |       1 | 13645667783 | 天津市河西区 | 1990-09-08 00:00:00 | NULL  | NULL         |<br>|     10001 | 123      | 李文才      | 男  |       1 | 13645667890 | 地址不详     | 1994-04-12 00:00:00 | NULL  | NULL         |<br>|     10002 | 123      | 李斯文      | 男  |       1 | 13645556793 | 河南洛阳     | 1993-07-23 00:00:00 | NULL  | NULL         |<br>|     10007 | 123      | 秦洋        | 男  |       1 | 13056434411 | 上海市卢湾区 | 1992-04-18 00:00:00 | NULL  | NULL         |<br>|     20000 | 123      | 王宝宝      | 男  |       2 | 15076552323 | 地址不详     | 1996-06-05 00:00:00 | NULL  | NULL         |<br>|     30011 | 123      | 陈志强      | 男  |       3 | 13689965430 | 地址不详     | 1994-09-27 00:00:00 | NULL  | NULL         |<br>+-----------+----------+-------------+-----+---------+-------------+--------------+---------------------+-------+--------------+<br># &#x3D;<br>select * from student where sex&lt;&gt;&#39;男&#39;;<br>+-----------+----------+-------------+-----+---------+-------------+----------------+---------------------+-------+--------------+<br>| studentNo | loginPwd | studentName | sex | gradeId | phone       | address        | bornDate            | email | identityCard |<br>+-----------+----------+-------------+-----+---------+-------------+----------------+---------------------+-------+--------------+<br>|     10003 | 123      | 张萍        | 女  |       1 | 13642345112 | 地址不详       | 1995-06-10 00:00:00 | NULL  | NULL         |<br>|     10004 | 123      | 韩秋洁      | 女  |       1 | 13812344566 | 北京市海淀区   | 1995-07-15 00:00:00 | NULL  | NULL         |<br>|     10005 | 123      | 张秋丽      | 女  |       1 | 13567893246 | 北京市东城区   | 1994-01-17 00:00:00 | NULL  | NULL         |<br>|     10006 | 123      | 肖梅        | 女  |       1 | 13563456721 | 河北省石家庄市 | 1991-02-17 00:00:00 | NULL  | NULL         |<br>|     10008 | 123      | 何睛睛      | 女  |       1 | 13053445221 | 广州市天河区   | 1997-07-23 00:00:00 | NULL  | NULL         |<br>|     20010 | 123      | 何小华      | 女  |       2 | 13318877954 | 地址不详       | 1995-09-10 00:00:00 | NULL  | NULL         |<br>|     30012 | 123      | 李露露      | 女  |       3 | 13685678854 | 地址不详       | 1992-09-27 00:00:00 | NULL  | NULL         |<br>+-----------+----------+-------------+-----+---------+-------------+----------------+---------------------+-------+--------------+<br>7 rows in set (0.00 sec)<br># &lt;&gt;<br>select * from student where bornDate&lt;&#39;1991&#39;;<br>+-----------+----------+-------------+-----+---------+-------------+--------------+---------------------+-------+--------------+<br>| studentNo | loginPwd | studentName | sex | gradeId | phone       | address      | bornDate            | email | identityCard |<br>+-----------+----------+-------------+-----+---------+-------------+--------------+---------------------+-------+--------------+<br>|     10000 | 123      | 郭靖        | 男  |       1 | 13645667783 | 天津市河西区 | 1990-09-08 00:00:00 | NULL  | NULL         |<br>+-----------+----------+-------------+-----+---------+-------------+--------------+---------------------+-------+--------------+<br>1 row in set, 1 warning (0.00 sec)<br><br>select * from student;<br>where  select DATEDIFF(NOW(),&#39;1991-1-1&#39;)&#x2F;365;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、DML语句(增删改)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;插入数据的个数和类型要与表结构保持一致&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、插入单条数据记录&quot;&gt;1、插入单条数据记录&lt;/h2&gt;
&lt;h3 id=&quot;语法：&quot;&gt;语法：&lt;/h3&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>mysql的增删改查</title>
    <link href="https://wsdlxgp.top/posts/edab.html"/>
    <id>https://wsdlxgp.top/posts/edab.html</id>
    <published>2020-06-02T16:00:00.000Z</published>
    <updated>2020-06-19T05:14:32.667Z</updated>
    
    <content type="html"><![CDATA[<h1>MySQL高级查询</h1><h3 id="学习目的">学习目的</h3><ul><li><strong>使用SQL语句为成绩表添加主、外键</strong></li><li><strong>使用SQL语句实现数据添加、修改、查询</strong></li><li><strong>查询指定学生考试成绩</strong></li><li><strong>查询某学期开设的课程</strong></li><li><strong>查询某课程最近一次考试缺考的学生名单</strong></li></ul><h1>一、RDBMS 术语</h1><ul><li><p><strong>数据库: 数据库是一些关联表的集合。</strong></p></li><li><p><strong>数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</strong></p></li><li><p><strong>列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</strong></p></li><li><p><strong>行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</strong></p></li><li><p><strong>冗余：存储两倍数据，冗余可以使系统速度更快。</strong></p></li><li><p><strong>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</strong></p></li><li><p><strong>外键：外键用于关联两个表。</strong></p></li><li><p><strong>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</strong></p></li><li><p><strong>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</strong></p></li><li><p><strong>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</strong></p></li></ul><blockquote><p><strong>数据库的主键代表了唯一标示一条数据，所以主键是唯一的，比如学号，卡号之类的；<br>数据库的外键是为了保证数据库的一致性，假设表1中的一个外键是表2的主键，此时要在表2中插入一条数据时就必须查看（这条数据，也就是表2的那个主键的信息在表1中是否存在，如果不存在则无法插入），而当你需要在表1中删除一条信息是，如果在表2中还存在这个数据的话也是无法直接删除的。</strong></p></blockquote><h1>二、增删改查操作</h1><h2 id="1、创建一个操作表">1、创建一个操作表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#创建数据库<br>cerate database test_mysql;<br><br>#进入数据库<br>use test_mysql;<br><br>#创建表<br>CREATE TABLE &#96;ttt&#96;(<br>true&#96;sid&#96; int(4) not null key auto_increment,<br>true&#96;sname&#96; varchar(20) default&#39;姓名不详&#39; not null<br>)<br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc ttt;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605101421451.png" alt="image-20200605101421451"></p><h2 id="2、修改表名">2、修改表名</h2><h4 id="语法：">语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 旧表名 rename 新表名;<br></code></pre></td></tr></table></figure><h3 id="操作">操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 修改表名<br>alter table ttt rename teacher;<br></code></pre></td></tr></table></figure><h4 id="查看一下-2">查看一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看表<br>show tables;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605101627941.png" alt="image-20200605101627941"></p><h2 id="3、添加列">3、添加列</h2><h4 id="语法">语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 添加字段<br>alter table 表名 add 字段名 数据类型[属性];<br></code></pre></td></tr></table></figure><h3 id="操作-2">操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#添加列<br>alter table teacher add &#96;sex&#96; char(2);<br></code></pre></td></tr></table></figure><h4 id="查看一下-3">查看一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc teacher;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605101745339.png" alt="image-20200605101745339"></p><h2 id="4、修改列">4、修改列</h2><h4 id="语法-2">语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 修改字段<br>alter table 表名 CHANGE 原字段名 新字段名 数据类型[属性];<br></code></pre></td></tr></table></figure><h3 id="操作-3">操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改列中 sex修改为gender 类型改为char(2)<br>alter table teacher CHANGE &#96;sex&#96; &#96;gender&#96; char(2);<br></code></pre></td></tr></table></figure><h4 id="查看一下-4">查看一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看表内容<br>desc teacher;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605102039580.png" alt="image-20200605102039580"></p><h2 id="4、删除字段">4、删除字段</h2><h4 id="语法-3">语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 删除字段<br>alter table 表名 drop 字段名;<br></code></pre></td></tr></table></figure><h3 id="操作-4">操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table teacher drop gender;<br></code></pre></td></tr></table></figure><h4 id="查看一下-5">查看一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看表内容<br>desc teacher;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605102507400.png" alt="image-20200605102507400"></p><h1>三、主键和外键</h1><h2 id="1、SQL-的主键和外键的作用：">1、SQL 的主键和外键的作用：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">外键取值规则：空值或参照的主键值<br>(1)插入非空值时，如果主键值中没有这个值，则不能插入。<br>(2)更新时，不能改为主键表中没有的值。<br>(3)删除主键表记录时，可以在建外键时选定外键记录一起联删除还是拒绝删除。<br>(4)更新主键记录时，同样有级联更新和拒绝执行的选择。<br></code></pre></td></tr></table></figure><h2 id="2、创建一个表">2、创建一个表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table grade(<br>true&#96;gradeID&#96; int(4) not null,<br>true&#96;gredName&#96; varchar(20) not null<br>);<br></code></pre></td></tr></table></figure><h3 id="查看一下-6">查看一下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc grade;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605103033488.png" alt="image-20200605103033488"></p><h2 id="3、创建主键">3、创建主键</h2><h3 id="（1）语法">（1）语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 ADD CONSTRAINT主键名<br>PRIMARY KEY 表名(主键字段);<br></code></pre></td></tr></table></figure><h3 id="（2）创建">（2）创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table grade add CONSTRAINT pk_grade<br>PRIMARY key grage(&#96;gradeID&#96;);<br></code></pre></td></tr></table></figure><h4 id="查看一下-7">查看一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc grade;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605103511778.png" alt="image-20200605103511778"></p><h2 id="4、添加外键">4、添加外键</h2><p><strong>外键（从表）：可以增加数据的完整性与准确性</strong></p><h3 id="（1）语法-2">（1）语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 ADD CONSTRAINT 外键名<br>FOREIGN KEY (外键字段)<br>REFERENCES 关联表名 (关联字段) ;<br></code></pre></td></tr></table></figure><h3 id="（2）创建一个表">（2）创建一个表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student(<br>true&#96;sid&#96; int(4) not null PRIMARY KEY,<br>true&#96;sname&#96; VARCHAR(50) not null,<br>true&#96;gradeID&#96; int(4) not null,<br>    &#96;sex&#96; char(2) comment &#39;性别&#39;,<br>);<br></code></pre></td></tr></table></figure><h4 id="查看一下-8">查看一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc student;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605104455408.png" alt="image-20200605104455408"></p><h3 id="（3）创建外键">（3）创建外键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table student add CONSTRAINT fk_student_grade<br>FOREIGN KEY (&#96;gradeID&#96;)<br>REFERENCES &#96;grade&#96;(&#96;gradeID&#96;);<br></code></pre></td></tr></table></figure><h4 id="查看一下-9">查看一下</h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605110110783.png" alt="image-20200605110110783"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605110133352.png" alt="image-20200605110133352"></p><h2 id="5、测试">5、测试</h2><h3 id="（1）grade表添加内容">（1）grade表添加内容</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605110608079.png" alt="image-20200605110608079"></p><h3 id="（2）student表添加内容">（2）student表添加内容</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605110914599.png" alt="image-20200605110914599"></p><p><strong>所以我们添加数值不要超过主表设置的默认值。</strong></p><h1>四、练习</h1><h2 id="1、需求说明">1、需求说明</h2><p><strong>在test数据库中创建person表</strong></p><table><thead><tr><th>字段名称</th><th>字段说明</th><th>数据类型</th><th>长度</th><th>属性</th></tr></thead><tbody><tr><td>number</td><td>序号</td><td>INT</td><td>4</td><td>自增列</td></tr><tr><td>name</td><td>姓名</td><td>VARCHAR</td><td>50</td><td>非空</td></tr><tr><td>sex</td><td>性别</td><td>CHAR</td><td>2</td><td></td></tr><tr><td>bornDate</td><td>出生日期</td><td>DATETIME</td><td></td><td></td></tr></tbody></table><ul><li><strong>将表名修改为tb_person</strong></li><li><strong>删除出生日期字段</strong></li><li><strong>添加出生日期字段, 数据类型为DATE类型</strong></li><li><strong>修改序号字段名(number) 为id,类型为BIGINT类型</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table person(<br>true&#96;number&#96; int(4) comment &#39;序号&#39; key auto_increment,<br>    &#96;name&#96; varchar(50) comment &#39;姓名&#39; not null,<br>    &#96;sex&#96; char(2) comment &#39;性别&#39;,<br>    &#96;bornDarte&#96; datetime(0) comment &#39;出生日期&#39;<br>);<br><br># 修改表名<br>alter table person rename tb_person;<br># 删除字段<br>alter table tb_person drop &#96;bornDarte&#96;;<br># 添加列<br>alter table tb_person add &#96;bornDarte&#96; date;<br># 修改表中字段名<br>alter table tb_person change number id bigint;<br><br># 查看表结构<br>desc tb_person;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605111552071.png" alt="image-20200605111552071"></p><h2 id="2、需求说明-result表需要添加的内容">2、需求说明 result表需要添加的内容</h2><ul><li><strong>主键约束:学号、课程编号和日期构成组合主键.</strong></li><li><strong>外键约束:主表student和从表result通过studentNo字段建立主外键关联</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 主键<br>create table result(<br>true&#96;studentNo&#96; int(4) comment &#39;学号&#39;,<br>true&#96;subjedctNo&#96; int(4) comment &#39;课程编号&#39;,<br>true&#96;examDate&#96; datetime comment &#39; 日期&#39;<br>)charset&#x3D;&#39;utf8&#39;;<br><br>alter table result add CONSTRAINT PK_result<br>PRIMARY key result(&#96;studentNo&#96;,&#96;subjedctNo&#96;,&#96;examDate&#96;);<br><br>desc result;<br><br># 外键<br>create table student(<br>true&#96;sid&#96; int(4) not null PRIMARY KEY,<br>true&#96;sname&#96; VARCHAR(50) not null,<br>true&#96;studentNo&#96; int(4) not null<br>);<br><br>alter table student add CONSTRAINT fk_student_result<br>FOREIGN key (&#96;studentNo&#96;)<br>REFERENCES &#96;result&#96;(&#96;studentNo&#96;);<br>desc student;<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605111909945.png" alt="image-20200605111909945"></p><h3 id="查看一下外键">查看一下外键</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605110110783.png" alt="image-20200605110110783"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200605111958631.png" alt="image-20200605111958631"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;MySQL高级查询&lt;/h1&gt;
&lt;h3 id=&quot;学习目的&quot;&gt;学习目的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用SQL语句为成绩表添加主、外键&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用SQL语句实现数据添加、修改、查询&lt;/strong&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wsdlxgp.top/categories/mysql/"/>
    
    
      <category term="sql结构化查询语句" scheme="https://wsdlxgp.top/tags/sql%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="数值类型" scheme="https://wsdlxgp.top/tags/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>
