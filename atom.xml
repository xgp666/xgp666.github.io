<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xgp &amp; Blog</title>
  
  <subtitle>Today is still beautiful</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsdlxgp.top/"/>
  <updated>2020-06-06T15:29:28.632Z</updated>
  <id>https://wsdlxgp.top/</id>
  
  <author>
    <name>Wu Shao Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>企业级私有仓库镜像仓库Harbor</title>
    <link href="https://wsdlxgp.top/posts/7597.html"/>
    <id>https://wsdlxgp.top/posts/7597.html</id>
    <published>2020-06-06T15:29:15.700Z</published>
    <updated>2020-06-06T15:29:28.632Z</updated>
    
    <content type="html"><![CDATA[<h1>企业级私有仓库镜像仓库Harbor</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose<br>chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>在网上下载docker-compose工具。**</p><p><a href="https://github.com/docker/compose/releases/tag/1.25.1-rc1" target="_blank" rel="noopener">https://github.com/docker/compose/releases/tag/1.25.1-rc1</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# tar -zxf docker-compose.tar.gz  -C /usr/local/bin/<br>//解压到命令目录<br>[root@docker02 ~]# chmod  +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# yum -y install yum-utils device-mapper-persistent-data lvm2<br>//安装依赖包<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker-compose -v<br>//查看版本信息<br>docker-compose version 1.24.0, build 0aa59064<br></code></pre></td></tr></table></figure><p><strong>在网上下载harbor并安装。</strong></p><p><a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# tar -zxf harbor-offline-installer-v1.7.4.tgz  -C /usr/local/<br>//导入harbor离线安装包，解压到/usr/<br></code></pre></td></tr></table></figure><p><strong>修改harbor配置文件，并执行自带的安装脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# cd  /usr/local/harbor/<br>[root@docker02 harbor]#ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219112515851.png" alt="image-20191219112515851"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 harbor]# vim harbor.cfg <br>hostname = 192.168.1.13    #13 改为本机IP地址<br>harbor_admin_password = Harbor12345   #harbor密码<br>[root@docker02 harbor]# ./install.sh<br>//执行一下自带的安装脚本<br></code></pre></td></tr></table></figure><p><strong>在浏览器登陆一下harbor</strong></p><p><a href="http://192.168.1.13:80" target="_blank" rel="noopener">http://192.168.1.13:80</a> 用户名：admin，密码：Harbor12345</p><p>创建一个项目</p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219114104966.png" alt="image-20191219114104966"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219114109278.png" alt="image-20191219114109278"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219114127806.png" alt="image-20191219114127806"></p><p><strong>修改docker配置文件，连接私有仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 harbor]# vim /usr/lib/systemd/system/docker.service <br><br>ExecStart=/usr/bin/dockerd --insecure-registry 192.168.1.<br>13  #13行添加<br><br>[root@docker02 harbor]# systemctl  daemon-reload <br>[root@docker02 harbor]# systemctl restart docker<br>//重启docker<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 harbor]# docker ps<br>//发现运行的容器少了很多<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219114511909.png" alt="image-20191219114511909"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 harbor]# docker-compose start<br>//启动harker的文件中的容器<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219115045451.png" alt="image-20191219115045451"></p><p><strong>登陆harbor</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 harbor]# docker login -u admin -p Harbor12345 192.168.1.13<br>//登陆harbor<br></code></pre></td></tr></table></figure><p><strong>上传镜像到仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 harbor]# docker tag centos:7  192.168.1.13/xgp/centos:7<br>//修改标签<br>[root@docker02 harbor]# docker push 192.168.1.13/xgp/centos:7 <br>//上传镜像<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219115614192.png" alt="image-20191219115614192"></p><p><strong>第二台加入仓库，测试下载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 harbor]# vim /usr/lib/systemd/system/docker.service <br><br>ExecStart=/usr/bin/dockerd --insecure-registry 192.168.1.<br>13  #13行添加<br><br>[root@docker02 harbor]# systemctl  daemon-reload <br>[root@docker02 harbor]# systemctl restart docker<br>//重启docker<br></code></pre></td></tr></table></figure><p><strong>登陆harbor</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 harbor]# docker login -u admin -p Harbor12345 192.168.1.13<br>//登陆harbor<br></code></pre></td></tr></table></figure><p><strong>下载刚刚上传的镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 xxx]# docker pull  192.168.1.13/xgp/centos:7<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 xxx]# docker images<br>//查看本地镜像<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219120319663.png" alt="image-20191219120319663"></p><p><em><strong>下载成功</strong></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;企业级私有仓库镜像仓库Harbor&lt;/h1&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>prometheus监控</title>
    <link href="https://wsdlxgp.top/posts/fe12.html"/>
    <id>https://wsdlxgp.top/posts/fe12.html</id>
    <published>2020-06-06T15:29:15.698Z</published>
    <updated>2020-06-06T15:29:28.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置AlertManager">配置AlertManager</h2><p><strong>AlertManager：用来接收prometheus发送来的报警信息，并且执行设置好的报警方式、报警内容。</strong></p><h3 id="下载镜像"><strong>下载镜像</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker pull alertmanager<br>//下载alertmanager镜像<br></code></pre></td></tr></table></figure><h3 id="基于alertmanager运行一台容器"><strong>基于alertmanager运行一台容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -d --name alertmanager -p 9093:9093 prom/alertmanager:latest<br></code></pre></td></tr></table></figure><h3 id="配置路由转发"><strong>配置路由转发</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# echo net.ipv4.ip_forward = 1 &gt;&gt; /etc/sysctl.conf <br>[root@docker01 ~]# sysctl -p<br></code></pre></td></tr></table></figure><h3 id="在部署alertmanager之前，我们需要对它的配置文件进行修改-所以我们先运行一个容器，先将其配置文件拷贝出来。"><strong>在部署alertmanager之前，我们需要对它的配置文件进行修改,所以我们先运行一个容器，先将其配置文件拷贝出来。</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker cp alertmanager:/etc/alertmanager/alertmanager.yml ./<br>//拷贝alertmanager的配置文件到本地<br></code></pre></td></tr></table></figure><h3 id="修改alertmanager的配置文件"><strong>修改alertmanager的配置文件</strong></h3><h4 id="配置文件简单介绍"><strong>配置文件简单介绍</strong></h4><blockquote><p><strong>AlertManager：用来接收Prometheus发送的报警信息，并且执行设置好的报警方式，报警内容。</strong></p><p><strong>AlertManager.yml配置文件：</strong></p><blockquote><p><strong>global：全局配置，包括报警解决后的超时时间、SMTP相关配置、各种渠道通知的API地址等消息。</strong></p><p><strong>route：用来设置报警的分发策略。</strong></p><p><strong>receivers：配置报警信息接收者信息。</strong></p><p><strong>inhibit_rules：抑制规则配置，当存在与另一个匹配的报警时，抑制规则将禁用用于有匹配的警报。</strong></p></blockquote></blockquote><h4 id="修改配置文件"><strong>修改配置文件</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# vim alertmanager.yml <br>//修改alertmanager配置文件<br>global:<br>  resolve_timeout: 5m<br>  smtp_from: '2877364346@qq.com'   #自己邮箱地址<br>  smtp_smarthost: 'smtp.qq.com:465'  #qq的邮箱地址及端口<br>  smtp_auth_username: '2877364346@qq.com'  <br>  smtp_auth_password: 'osjppnjkbuhcdfff' #需要在qq邮箱获取授权码<br>  smtp_require_tls: false<br>  smtp_hello: 'qq.com'<br>route:<br>  group_by: ['alertname']<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval: 5m<br>  receiver: 'email'           #接收者改为邮箱<br>receivers:<br>- name: 'email'<br>  email_configs:<br>  - to: '2877364346@qq.com'<br>    send_resolved: true<br>    inhibit_rules:<br>  - source_match:<br>    severity: 'critical'<br>    target_match:<br>      severity: 'warning'<br>    equal: ['alertname', 'dev', 'instance']<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">global:<br>  resolve_timeout: 5m<br>  smtp_from: '2877364346@qq.com'<br>  smtp_smarthost: 'smtp.qq.com:465'<br>  smtp_auth_username: '2877364346@qq.com'<br>  smtp_auth_password: 'osjppnjkbuhcdfff'<br>  smtp_require_tls: false<br>  smtp_hello: 'qq.com'<br>route:<br>  group_by: ['alertname']<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval: 5m<br>  receiver: 'email'<br>receivers:<br>- name: 'email'<br>  email_configs:<br>  - to: '2877364346@qq.com'<br>    send_resolved: true<br>inhibit_rules:<br>  - source_match:<br>      severity: 'critical'<br>    target_match:<br>      severity: 'warning'<br>    equal: ['alertname', 'dev', 'instance']<br></code></pre></td></tr></table></figure><h3 id="重新运行-alertmanager-容器"><strong>重新运行 alertmanager 容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker rm -f alertmanager<br>//删除alertmanager容器<br>[root@docker01 ~]# docker run -d --name alertmanager -v /root/alertmanager.yml:/etc/alertmanager/alertmanager.yml -p 9093:9093 prom/alertmanager:latest <br>//运行一台新的alertmanager容器，记得挂载配置文件<br></code></pre></td></tr></table></figure><h2 id="Prometheus配置和alertmanager报警规则"><strong>Prometheus配置和alertmanager报警规则</strong></h2><h3 id="创建存放规则的目录"><strong>创建存放规则的目录</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# mkdir -p prometheus/rules<br>//创建规则目录<br>[root@docker01 ~]# cd prometheus/rules/<br></code></pre></td></tr></table></figure><h3 id="编写规则"><strong>编写规则</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 rules]# vim node-up.rules <br>groups:<br>- name: node-up<br>  rules:<br>  - alert: node-up<br>    expr: up&#123;job="prometheus"&#125; == 0    #&#123;job="prometheus"&#125;中的prometheus需要和prometheus配置文件23行的相同<br>    for: 15s<br>    labels:<br>      severity: 1<br>      team: node<br>    annotations:<br>      summary: "&#123;&#123; $labels.instance &#125;&#125; 已停止运行超过 15s！"<br></code></pre></td></tr></table></figure><h3 id="修改-prometheus配置文件"><strong>修改 prometheus配置文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# vim prometheus.yml <br><br><span class="hljs-meta">#</span><span class="bash"> Alertmanager configuration  <span class="hljs-comment">#7</span></span><br>alerting:<br>  alertmanagers:<br>  - static_configs:<br>    - targets:<br>       - 192.168.1.11:9093  #去注释修改<br><br><span class="hljs-meta">#</span><span class="bash"> Load rules once and periodically evaluate them according to the global <span class="hljs-string">'evaluation_interval'</span>.   <span class="hljs-comment">#14行</span></span><br>rule_files:<br>  - "/usr/local/prometheus/rules/*.rules"  #添加（这个路径是prometheus容器内的路径）<br></code></pre></td></tr></table></figure><h3 id="重新运行prometheus-容器"><strong>重新运行prometheus 容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker rm -f prometheus <br>//删除prometheus容器<br>[root@docker01 ~]# docker run -d -p 9090:9090 --name prometheus --net=host -v /root/prometheus.yml:/etc/prometheus/prometheus.yml -v /root/prometheus/rules/node-up.rules:/usr/local/prometheus/rules/node-up.rules   prom/prometheus<br>//运行一台新的alertmanager容器，记得挂载规则文件<br></code></pre></td></tr></table></figure><h3 id="浏览器验证一下http-192-168-1-11-9090-rules"><strong>浏览器验证一下http://192.168.1.11:9090/rules</strong></h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191225101246355.png" alt="image-20191225101246355"></p><p>挂起docker02</p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191225101629745.png" alt="image-20191225101629745"></p><p>会收到邮件</p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191225104344774.png" alt="image-20191225104344774"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置AlertManager&quot;&gt;配置AlertManager&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;AlertManager：用来接收prometheus发送来的报警信息，并且执行设置好的报警方式、报警内容。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;下载镜像&quot;&gt;&lt;st
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>prometheus</title>
    <link href="https://wsdlxgp.top/posts/d356.html"/>
    <id>https://wsdlxgp.top/posts/d356.html</id>
    <published>2020-06-06T15:29:15.696Z</published>
    <updated>2020-06-06T15:29:28.631Z</updated>
    
    <content type="html"><![CDATA[<h1><strong>Prometheus（普罗米修斯）</strong></h1><h2 id="实验环境"><strong>实验环境</strong></h2><table><thead><tr><th style="text-align:left">docker01</th><th>docker02</th><th>docker03</th></tr></thead><tbody><tr><td style="text-align:left">192.168.1.11</td><td>192.168.1.13</td><td>192.168.1.20</td></tr><tr><td style="text-align:left">NodeEXporter</td><td>NodeEXporter</td><td>NodeEXporter</td></tr><tr><td style="text-align:left">cAdvisor</td><td>cAdvisor</td><td>cAdvisor</td></tr><tr><td style="text-align:left">Prometheus Server</td><td>空</td><td>空</td></tr><tr><td style="text-align:left">Grafana</td><td>空</td><td>空</td></tr></tbody></table><p><em><strong>全部关闭防火墙，禁用selinux</strong></em></p><p><strong>需要部署的组件：</strong></p><blockquote><p><strong>Prometheus Server:普罗米修斯的主服务器。</strong></p><p>Prometheus是一个开源的服务监控系统，它通过HTTP协议从远程的机器收集数据并存储在本地的时序数据库上。</p><ul><li>多维数据模型（时序列数据由metric名和一组key/value组成）</li><li>在多维度上灵活的查询语言(PromQl)</li><li>不依赖分布式存储，单主节点工作.</li><li>通过基于HTTP的pull方式采集时序数据</li><li>可以通过push gateway进行时序列数据推送(pushing)</li><li>可以通过服务发现或者静态配置去获取要采集的目标服务器</li><li>多种可视化图表及仪表盘支持</li><li>Prometheus通过安装在远程机器上的exporter来收集监控数据，后面我们将使用到node_exporter收集系统数据。</li></ul><p><strong><a href>NodeEXporter</a>:负责收集Host硬件信息和操作系统信息。</strong></p><p><strong><a href>cAdvisor</a>:负责收集Host.上运行的容器信息。</strong></p><p><strong>Grafana:负责展示普罗米修斯监控界面。</strong></p><p>Grafana 是一个开箱即用的可视化工具，具有功能齐全的度量仪表盘和图形编辑器，有灵活丰富的图形化选项，可以混合多种风格，支持多个数据源特点。</p></blockquote><p><em><strong>这些可以直接docker pull下载镜像（现在是本地导入镜像）</strong></em></p><p><strong>本地上传镜像</strong></p><p>docker01</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[09:05:42][docker01$  docker load -i node-exporter.tar &amp;&amp; docker load -i  mycadvisor.tar &amp;&amp; docker load -i prometheus.tar  &amp;&amp; docker load -i grafana.tar<br></code></pre></td></tr></table></figure><p>docker02和docker03</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[09:05:22]docker03]$ docker load -i node-exporter.tar &amp;&amp; docker load -i  mycadvisor.tar<br></code></pre></td></tr></table></figure><h2 id="各主机部署">各主机部署</h2><h3 id="1-3个节点，全部部署node-EXporter-和cAdvisor"><strong>1) 3个节点，全部部署node-EXporter,和cAdvisor.</strong></h3><h4 id="部署安装node-EXporter收集节点硬件和操作系统信息。"><strong>部署安装node-EXporter收集节点硬件和操作系统信息。</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[09:21:03[docker01]$  docker run -d -p 9100:9100 -v /proc:/host/proc -v /sys:/host/sys -v /:/rootfs --net=host prom/node-exporter --path.procfs /host/proc --path.sysfs /host/sys --collector.filesystem.ignored-mount-points "^/(sys|proc|dev|host|etc)($|/)"<br>//部署node-EXporter,收集硬件和系统信息。<br></code></pre></td></tr></table></figure><p><em><strong>PS: 注意，这里使用了–net=host， 这样Prometheus Server可以直接与Node-</strong></em><br><em><strong>EXporter通信。</strong></em></p><p><strong>验证</strong>:打开浏览器验证结果。<a href="http://192.168.1.11:9100/%EF%BC%8Chttp://192.168.1.13:9100/%EF%BC%8Chttp://192.168.1.20:9100/" target="_blank" rel="noopener">http://192.168.1.11:9100/，http://192.168.1.13:9100/，http://192.168.1.20:9100/</a></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224092308045.png" alt="image-20191224092308045"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224092328151.png" alt="image-20191224092328151"></p><h4 id="部署安装cAdvisor-收集节点容器信息。"><strong>部署安装cAdvisor,收集节点容器信息。</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[09:39:10[docker01]$ docker run -v /:/rootfs:ro -v /var/run:/var/run/:rw -v /sys:/sys:ro -v /var/lib/docker:/var/lib/docker:ro --detach=true --name=cadvisor --net=host google/cadvisor<br></code></pre></td></tr></table></figure><p><strong>验证</strong>:打开浏览器验证结果。<a href="http://192.168.1.11:8080" target="_blank" rel="noopener">http://192.168.1.11:8080</a>，<a href="http://192.168.1.13:8080" target="_blank" rel="noopener">http://192.168.1.13:8080</a>，<a href="http://192.168.1.20:8080" target="_blank" rel="noopener">http://192.168.1.20:8080</a></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224094211151.png" alt="image-20191224094211151"></p><h3 id="2-在docker01上部署Prometheus-Server服务。"><strong>2)在docker01上部署Prometheus Server服务。</strong></h3><p><em><strong>在部署prometheus之前，我们需要对它的配置文件进行修改,所以我们先运行一个容器，先将其配置文件拷贝出来。</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">09:51:22][docker01]$ docker run -d -p 9090:9090 --name prometheus --net=host prom/prometheus<br>//打开一台Prometheus<br>[09:51:00[docker01]$ docker cp prometheus:/etc/prometheus/prometheus.yml ./<br>//拷贝Prometheus的配置文件到本地<br></code></pre></td></tr></table></figure><h4 id="修改Prometheus的配置文件，添加监听端口（29行）"><strong>修改Prometheus的配置文件，添加监听端口（29行）</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[09:55:53][docker01][~]$ vim prometheus.yml <br>//修改配置文件这里指定了prometheus的监控项，包括它也会监控自己手机到的数据。<br>- targets: ['localhost:9090','localhost:8080','localhost:9100','192.168.1.13:8080','192.168.1.13:9100','192.168.1.20:8080','192.168.1.20:9100']<br></code></pre></td></tr></table></figure><h4 id="重新运行prometheus容器">重新运行prometheus容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[10:00:27][docker01][~]$ docker rm -f prometheus <br>//删除 prometheus容器<br>[10:02:45][docker01][~]$ docker run -d -p 9090:9090 --name prometheus --net=host  -v /root/prometheus.yml:/etc/prometheus/prometheus.yml   prom/prometheus<br>//运行一台新的 prometheus容器<br></code></pre></td></tr></table></figure><h4 id="浏览器访问，验证：http-192-168-1-11-9090-graph">浏览器访问，验证：<a href="http://192.168.1.11:9090/graph" target="_blank" rel="noopener">http://192.168.1.11:9090/graph</a></h4><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224100745680.png" alt="image-20191224100745680"></p><p><em><strong>ps：这里能够查看到我们各个监控项。</strong></em></p><p>如果现在挂起一台虚拟机（测试完之后继续运行）</p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224101214064.png" alt="image-20191224101214064"></p><h3 id="3-在docker01-上-部署grafana服务-用来展示prometheus收集到的数据。"><strong>3)在docker01.上,部署grafana服务,用来展示prometheus收集到的数据。</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# mkdir grafana-storage<br>//创建收集信息的目录<br>[root@docker01 ~]# chmod 777 grafana-storage/<br>//给予777权限<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -d -p 3000:3000 --name grafana -v /root/grafana-storage:/var/lib/grafana -e "GF_SECURITY_ADMIN_PASSWORD=123.com" grafana/grafana<br></code></pre></td></tr></table></figure><h4 id="浏览器访问验证：-http-192-168-1-11-3000-login">**浏览器访问验证：**<a href="http://192.168.1.11:3000/login" target="_blank" rel="noopener">http://192.168.1.11:3000/login</a></h4><p><strong>（&lt;默认&gt;用户名：admin，密码：<a href="http://123.com" target="_blank" rel="noopener">123.com</a>）</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224102458225.png" alt="image-20191224102458225"></p><h4 id="添加数据源"><strong>添加数据源</strong></h4><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224104423328.png" alt="image-20191224104423328"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224104456642.png" alt="image-20191224104456642"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224104700442.png" alt="image-20191224104700442"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224105029089.png" alt="image-20191224105029089"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224105050798.png" alt="image-20191224105050798"></p><p><em><strong>PS:看到这个提示， 说明prometheus和grafana服务的是 正常连接的。</strong></em></p><blockquote><p><strong>此时，虽然grafana收集到了数据，但怎么显示它,仍然是个问题，grafana支持自定 义显示信息,不过要自定义起来非常麻烦，不过好在，grafana官方为我们提供了- -些模板，来供我们使用。</strong></p><p>**grafana官网:**<a href="https://grafana.com/docs/grafana/latest/" target="_blank" rel="noopener">https://grafana.com/docs/grafana/latest/</a></p></blockquote><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191224105657726.png" alt="image-20191224105657726"></p><p><img src="https://s1.51cto.com/images/blog/201912/24/4b062ba0ae732e66178334cb87eb7ee8.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><p><img src="https://s1.51cto.com/images/blog/201912/24/608fa3739e797bda40b4eb84b68af25b.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><p><img src="https://s1.51cto.com/images/blog/201912/24/f6e457dfef636c0fd406eb215ff824bc.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><h4 id="选中一款模板，然后，我们有2种方式可以套用这个模板。"><strong>选中一款模板，然后，我们有2种方式可以套用这个模板。</strong></h4><h5 id="第一种方式：通过JSON文件使用模板。"><strong>第一种方式：通过JSON文件使用模板。</strong></h5><p><img src="https://s1.51cto.com/images/blog/201912/24/545fab9136f340564d29233515fb5703.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><p><strong>下载完成之后，来到grafana控制台</strong></p><p><img src="https://s1.51cto.com/images/blog/201912/24/0265cc6e5015e1f4f41258e8d16962f8.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><p><img src="https://s1.51cto.com/images/blog/201912/24/0e8af545036ec8d7e69d61df3d7cf058.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><p><img src="https://s1.51cto.com/images/blog/201912/24/69763107eb04aa718249d19836443115.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><p><img src="https://s1.51cto.com/images/blog/201912/24/b1c3db375ebfa0b01159aa40be60d1a8.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><h5 id="第二种导入模板的方式">第二种导入模板的方式:**</h5><p><strong>可以直接通过模板的ID号。</strong></p><p><img src="https://s1.51cto.com/images/blog/201912/24/97392974a42d1c28a50e4df2aad426e9.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><p><strong>//这个id不好用换成8321了</strong></p><p><img src="https://s1.51cto.com/images/blog/201912/24/a445f9e04729c87a0b91f5f52f9024bd.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><p><strong>复制模板id之后，来到grafana控制台</strong></p><p><img src="https://s1.51cto.com/images/blog/201912/24/dfaa08945b13ba1f1dad9aaa5ea9ecd5.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="基于docker 搭建Prometheus+Grafana"></p><h1>排错思路</h1><p>防火墙是否关闭，selinux是否禁用<br>主机名称是否更改<br>镜像是否正常<br>各服务启动时挂载目录是否正确<br>grafana服务，是否创建所需目录，目录是否有权限<br>Prometheus服务是否修改配置文件</p><h1>总结</h1><p>恭喜！您已经设置了Prometheus服务器，Node Exporter和Grafana 等所有这些都可以使用的Docker。尽管这些目前都在同一台机器上运行，但这仅用于演示目的。在生产设置中，通常会在每台受监控的计算机上运行节点导出器，多个Prometheus服务器（根据组织的需要），以及单个Grafana服务器来绘制来自这些服务器的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;strong&gt;Prometheus（普罗米修斯）&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;实验环境&quot;&gt;&lt;strong&gt;实验环境&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;docker
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>nginx+docker+nfs部署</title>
    <link href="https://wsdlxgp.top/posts/24f3.html"/>
    <id>https://wsdlxgp.top/posts/24f3.html</id>
    <published>2020-06-06T15:29:15.694Z</published>
    <updated>2020-06-06T15:29:28.629Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191221085649190.png" alt="image-20191221085649190"></p><h1>nginx（两台都是）</h1><p><strong>安装nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nginx01 ~]# tar zxf nginx-1.14.0.tar.gz <br>//解压nginx安装包<br>[root@nginx01 ~]# cd nginx-1.14.0/<br>[root@nginx01 nginx-1.14.0]# yum -y install openssl-devel pcre-devel zlib-devel<br>//安装nginx依赖包<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nginx01 nginx-1.14.0]# ./configure --prefix=/usr/local/nginx1.14 --with-http_dav_module --with-http_stub_status_module --with-http_addition_module  --with-http_sub_module --with-http_flv_module --with-http_mp4_module --with-pcre --with-http_ssl_module --with-http_gzip_static_module --user=nginx --group=nginx &amp;&amp; make  &amp;&amp;  make install<br>//编译安装nginx<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nginx01 nginx-1.14.0]# useradd nginx -s /sbin/nologin -M<br>//创建所需用户<br>[root@nginx01 nginx-1.14.0]# ln -s /usr/local/nginx1.14/sbin/nginx /usr/local/sbin/<br>//链接命令<br>[root@nginx01 nginx-1.14.0]# nginx <br>//开启nginx<br>[root@nginx01 nginx-1.14.0]# netstat -anpt | grep nginx<br>//查看nginx是否开启<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191221090519105.png" alt="image-20191221090519105"></p><p><strong>部署nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nginx01 ~]# cd /usr/local/nginx1.14/conf/<br>[root@nginx01 conf]# vim nginx.conf<br></code></pre></td></tr></table></figure><p>​        http模块加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream backend &#123;<br>server 192.168.1.11:90 weight=1 max_fails=2 fail_timeout=10s;<br>server 192.168.1.13:90 weight=1 max_fails=2 fail_timeout=10s;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>    location / {       # root   html;       # index  index.html index.htm;       proxy_pass http://backend;  #添加    }</code></pre><h2 id="高可用环境">高可用环境</h2><p><strong>安装keepalived</strong></p><p>[root@nginx02 nginx-1.14.0]# yum -y install keepalived</p><p><strong>配置keepalived</strong></p><p>修改主和备nginx服务器上的keepalived 配置文件 /etc/keepalived/keepalived.conf 文件</p><p><strong>主nginx</strong></p><p>修改主nginx下/etc/keepalived/keepalived.conf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">! Configuration File for keepalived<br>global_defs &#123;<br>   router_id LVS_DEVEL<br>&#125;   <br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    interface ens33<br>    virtual_router_id 51<br>    priority 100<br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;   <br>    virtual_ipaddress &#123;<br>        192.168.1.40<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>备nginx</strong></p><p>修改备nginx下 /etc/keepalived /keepalived.conf文件</p><p>配置备nginx时需要注意：需要修改state为BACKUP , priority比MASTER低，virtual_router_id和master的值一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">! Configuration File for keepalived<br>global_defs &#123;<br>   router_id TWO<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state BACKUP<br>    interface ens33<br>    virtual_router_id 1<br>    priority 99<br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.1.40<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试（在做完docker的时候）</strong></p><p>主备nginx都启动keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl  start  keepalived<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nginx01 conf]# curl 192.168.1.40<br>wsd666<br></code></pre></td></tr></table></figure><h1>nfs（两台都是)</h1><p>nfs操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum -y install nfs-utils<br>//下载nfs服务<br><br>[root@nfs ~]# mkdir /database<br>//创建共享目录<br>[root@nfs02 ~]# chmod 777 /database/<br>//设置权限<br>[root@nfs ~]# vim /etc/exports<br>//设置权限如下<br>/database *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><p>开启各项服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs ~]# systemctl start rpcbind<br>[root@nfs ~]# systemctl enable rpcbind<br>[root@nfs ~]# systemctl start nfs-server<br>[root@nfs ~]# systemctl enable nfs-server<br></code></pre></td></tr></table></figure><p>docker01和docker02测试nfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs01 ~]# vim /etc/rsyncd.conf <br>//建立rsync配置文件<br>uid = nobody<br>gid = nobody<br>use chroot = yes<br>address = 192.168.1.30<br>port 873<br>log file = /var/log/rsyncd.log<br>pid file = /var/run/rsyncd.pid<br>hosts allow = 192.168.1.0/24<br>[wwwroot]<br>path = /database<br>read only = no<br>dont compress = *.gz *.bz2 *.rar *.zip<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs01 ~]# mkdir /database<br>//创建共享目录<br>[root@nfs01 ~]# rsync --daemon<br>//启动rsync<br>[root@nfs01 ~]# netstat -anpt | grep rsync<br>//查看端口<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191221094558212.png" alt="image-20191221094558212"></p><p><strong>如果需要重启rsync服务，需要：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# kill  $(cat /var/run/rsyncd.pid)<br>//停止服务<br>[root@localhost ~]# rsync --daemon<br>//启动服务<br>[root@localhost ~]# kill -9 $(cat /var/run/rsyncd.pid)<br></code></pre></td></tr></table></figure><p>或者直接使用“netstat -anpt | grep rsync”命令查出进程号，使用“kill 进程号”一样。<br>使用第一种方法停止rsync服务必须删除存放rsync服务进程的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# rm -rf /var/run/rsyncd.pid<br></code></pre></td></tr></table></figure><h3 id="使用rsync备份工具">使用rsync备份工具</h3><p>配置好rsync同步源服务器之后，客户端就可以使用rsync工具来执行远程同步了。</p><h5 id="与rsync主机同步">与rsync主机同步</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">rsync命令的选项：<br>-r：递归模式，包含目录及子目录中所有文件<br>-l：对于符号链接文件仍然复制为符号链接文件<br>-p：保留文件的权限标记<br>-t：保留文件的时间标记<br>-g：保留文件的属组标记（仅超级用户使用）<br>-o：保留文件的属主标记（仅超级用户使用）<br>-D：保留设备文件及其他特殊文件<br>-a：归档模式，递归并保留对象属性，等同于 -rlptgoD<br>-v：显示同步过程的详细（verbose）信息<br>-z：在传输文件时进行压缩（compress）<br>-H：保留硬连接文件<br>-A：保留ACL属性信息<br>--delete：删除目标位置有而原始位置没有的文件<br>--checksum：根据对象的校验和来决定是否跳过文件<br></code></pre></td></tr></table></figure><p><strong>rsync是一款快速增量备份工具，支持：<br>（1）本地复制；<br>（2）与其他SSH同步；<br>（3）与rsync主机同步。</strong></p><h5 id="手动与rsync主机同步">手动与rsync主机同步</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# rsync -avz 192.168.1.1::wwwroot /root<br>或者<br>[root@localhost ~]# rsync -avz rsync://192.168.1.1/wwwroot /root<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs01 database]# vim index.html<br>xgp666<br>//创建测试目录<br></code></pre></td></tr></table></figure><h2 id="配置inotify-rsync实时同步（两台都是）">配置inotify+rsync实时同步（两台都是）</h2><p><strong>(1)、软件安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -q rsync //查询rsync是否安装，一般为系统自带安装<br>yum install rsync -y //若没有安装，使用yum安装<br></code></pre></td></tr></table></figure><p><strong>安装inotify软件包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs02 ~]# tar zxf inotify-tools-3.14.tar.gz <br>[root@nfs02 ~]# cd inotify-tools-3.14/<br>[root@nfs02 inotify-tools-3.14]#  ./configure &amp;&amp; make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p><strong>（2）调整inotify内核参数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs02 ~]# vim /etc/sysctl.conf<br>fs.inotify.max_queued_events = 16384<br>fs.inotify.max_user_instances = 1024<br>fs.inotify.max_user_watches = 1048576<br><br>[root@nfs02 ~]# sysctl -p<br>//生效<br></code></pre></td></tr></table></figure><p><strong>(3)  编写触发式同步脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>A="inotifywait -mrq -e modify,move,create,delete /database/"<br>B="rsync -avz  /database/ 192.168.1.40::wwwroot"<br><span class="hljs-meta">$</span><span class="bash">A | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> DIRECTORY EVENT FILE</span><br>do<br>    if [ $(pgrep rsync | wc -l) -gt 0 ] ; then<br>        $B<br>    fi<br>done<br></code></pre></td></tr></table></figure><p><em><strong>此处需要注意，在两台服务器需要同步的目录之间，也需要将目录权限放到最大，避免因目录本身权限报错。</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs01 inotify-tools-3.14]# chmod  +x /opt/ino.sh<br></code></pre></td></tr></table></figure><p><strong>设置脚本开机自启</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs01 database]# vim /etc/rc.d/rc.local <br>/opt/ino.sh &amp;<br>/usr/bin/rsync --daemon<br></code></pre></td></tr></table></figure><p><strong>源服务器端测试</strong></p><ul><li>执行脚本后，当前终端会变成实时监控界面，需要重新打开终端操作。</li><li>在源服务器端共享模块目录下进行文件操作，然后去备份服务器下，可观察到文件已经被实时同步。</li></ul><h1>docker(两台都是)</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker pull nginx<br>[root@docker01 ~]# mkdir -p  /www  <br>//创建挂载目录<br></code></pre></td></tr></table></figure><p><strong>nfs创建好之后docker上挂载目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]#  mount  -t nfs 192.168.1.30:/database /www<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -itd --name nginx -p 90:80 -v /www/index.html:/usr/share/nginx/html/index.html nginx:latest<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xgp-cunchu.test.upcdn.net//k8s/image-20191221085649190.png&quot; alt=&quot;image-20191221085649190&quot;&gt;&lt;/p&gt;
&lt;h1&gt;nginx（两台都是）&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker数据持久化</title>
    <link href="https://wsdlxgp.top/posts/f8c7.html"/>
    <id>https://wsdlxgp.top/posts/f8c7.html</id>
    <published>2020-06-06T15:29:15.692Z</published>
    <updated>2020-06-06T15:29:28.627Z</updated>
    
    <content type="html"><![CDATA[<h1><strong>数据持久化</strong></h1><h2 id="Storage-Driver"><strong>Storage Driver</strong></h2><h3 id="数据存储方式"><strong>数据存储方式</strong></h3><p><strong>Centos7版本的docker，Storage Driver（数据存储方式）为：overlay2 ，Backing Filesystem（文件系统类型）: xfs</strong></p><h2 id="Data-Volume"><strong>Data Volume</strong></h2><p><strong>持久化存储：本质上是DockerHost文件系统中的目录或文件，能够直接被Mount到容器的文件系统中。在运行容器时，可通过-v实现。</strong></p><h3 id="特点："><strong>特点：</strong></h3><p><strong>1.</strong>   <strong>Data Volume是目录或文件，不能是没有格式化的磁盘（块设备）。</strong></p><p><strong>2.</strong>   <strong>容器可以读写volume中的数据。</strong></p><p><strong>3.</strong>   <strong>Volume数据可以永久保存，即使使用它的容器已经被销毁。</strong></p><p><strong>4.默认挂载到容器内的文件，容器是有读写权限。可以在运行容器是-v 后边加“:ro”限制容器的写入权限</strong></p><p><strong>5并且还可以挂载单独的文件到容器内部，一般他的使用场景是：如果不想对整个目录进行覆盖，而只希望添加某个文件，就可以使用挂载单个文件。</strong></p><p><strong>6.删除容器的操作，默认不会对dockerhost上的源文件操作，如果想要在删除容器时把源文件也删除，可以在删除容器时添加-v选项（一般不推荐使用这种方式，因为文件有可能被其他容器使用）&quot;Data Volume不支持&quot;</strong></p><p><strong>注意：dockerhost上需要被挂载的源文件或目录，必须是已经存在，否则，会被当作一个目录挂载到容器中。</strong></p><h2 id="Docker-Manager-Volume"><strong>Docker Manager Volume</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -itd --name t1 -P -v /usr/share/nginx/html nginx:latest<br><br>[root@docker01 ~]# docker ps<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191218190043268.png" alt="image-20191218190043268"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker inspect t1<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191218190105103.png" alt="image-20191218190105103"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@docker01_data]#</span><span class="bash"><span class="hljs-built_in">cd</span> /var/lib/docker/volumes/17c50a065a6b10ccd01ca1ce8091fdf6282dc9dcb77a0f6695906257ecc03a63/_data</span><br><br>[root@docker01 _data]# echo "this is a testfile" &gt; index.html<br><br>[root@docker01 _data]# docker ps<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191218190137634.png" alt="image-20191218190137634"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 _data]# curl 127.0.0.1:32777<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191218190201473.png" alt="image-20191218190201473"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 _data]# docker volume ls<br></code></pre></td></tr></table></figure><h2 id="容器与容器的数据共享"><strong>容器与容器的数据共享</strong></h2><p><strong>Volume container：给其他容器提供volume存储卷的容器。并且它可以提供bind mount，也可以提供docker manager volume。</strong></p><p><strong>Volume container：给其他容器提供volume存储卷的容器。并且它可以提供bind mount，也可以提供docker manager volume。</strong></p><p><strong>创建一个vc_data容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker create --name vc_data -v ~/html:/usr/share/nginx/html -v /other/useful/tools busybox<br><br>[root@docker01 ~]# docker inspect vc_data<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219085456488.png" alt="image-20191219085456488"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -itd --name t3 -P --volumes-from vc_data nginx:latest<br><br>[root@docker01 ~]# docker ps<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219085509662.png" alt="image-20191219085509662"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# curl 127.0.0.1:32779<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219085526906.png" alt="image-20191219085526906"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# mkdir htdocs<br>//创建测试目录<br>[root@docker01 ~]# cd htdocs/<br>[root@docker01 htdocs]# echo The version one &gt; index.html<br>[root@docker01 htdocs]# docker run -itd --name web1 -P -v  ~/htdocs:/usr/local/apache2/htdocs httpd:latest <br>[root@docker01 htdocs]# docker ps<br></code></pre></td></tr></table></figure><p>![img](file:///C:\Users\huawei\AppData\Roaming\Tencent\Users\2877364346\QQ\WinTemp\RichOle\26LA}X1ZTD<code>80SPWLY_</code>TNF.png)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 htdocs]# curl 127.0.0.1:32768<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219090346253.png" alt="image-20191219090346253"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 htdocs]# echo The version TWO &gt; index.html <br>[root@docker01 htdocs]# curl 127.0.0.1:32768<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219090432507.png" alt="image-20191219090432507"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 htdocs]# rm -f index.html <br>[root@docker01 htdocs]# curl 127.0.0.1:32768<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219090526949.png" alt="image-20191219090526949"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# mkdir htdocs/<br>//创建一个测试目录<br><br>[root@docker01 htdocs]# vim index.html<br>//创建测试网页<br>&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<br><br>[root@docker01 ~]# docker create --name vc_data -v ~/html:/usr/share/nginx/html -v /other/useful/tools busybox<br>//创建一个共享容器<br><br>[root@docker01 htdocs]# vim Dockerfile<br>//编写Dockerfile<br>FROM busybox<br>ADD index.html /usr/local/apache2/htdocs/index.html<br>VOLUME /usr/local/apache/htdocs<br><br>[root@docker01 htdocs]# docker build -t databack .<br>//通过当前Dockfile创建一个镜像<br>[root@docker01 htdocs]# docker create --name vc-new databack:latest<br>//通过databack创建一个容器<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 htdocs]# docker inspect vc-new<br>//查看vc-new的详细信息<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219093523695.png" alt="image-20191219093523695"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"> [root@docker01 htdocs]# docker run -itd --name new-web1 -P  --volumes-from vc-new httpd:latest <br>//通过volume卷和httpd运行一个容器<br>[root@docker01 htdocs]# docker ps<br>//查看容器信息<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219093622640.png" alt="image-20191219093622640"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 htdocs]# curl 127.0.0.1:32773<br>//测试访问一下网页<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219093643077.png" alt="image-20191219093643077"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 htdocs]# echo 12345 &gt;index.html <br>//更改网页内容<br>[root@docker01 htdocs]# curl 127.0.0.1:32773<br>//测试访问网页还是原来的内容<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219093714215.png" alt="image-20191219093714215"></p><h2 id="容器的跨主机数据共享">容器的跨主机数据共享</h2><p><strong>实验环境</strong></p><p><strong>docker01            docker02        docker03</strong></p><p><strong>httpd                    httpd               nfs</strong></p><p><strong>要求：docker01和docker02的主目录，是一样的。</strong></p><p>准备工作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# hostnamectl set-hostname nfs<br>[root@localhost ~]# hostnamectl set-hostname docker01<br>[root@localhost ~]# hostnamectl set-hostname docker02<br></code></pre></td></tr></table></figure><p>nfs操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum -y install nfs-utils<br>//下载nfs服务<br><br>[root@nfs ~]# mkdir /datashare<br>//创建共享目录<br><br>[root@nfs ~]# vim /etc/exports<br>//设置权限如下<br>/datashare *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><p>开启各项服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs ~]# systemctl start rpcbind<br>[root@nfs ~]# systemctl enable rpcbind<br>[root@nfs ~]# systemctl start nfs-server<br>[root@nfs ~]# systemctl enable nfs-server<br></code></pre></td></tr></table></figure><p>docker01和docker02测试nfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 htdocs]# showmount -e 192.168.1.20<br>[root@docker02 htdocs]# showmount -e 192.168.1.20<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219095843491.png" alt="image-20191219095843491"><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219095904920.png" alt="image-20191219095904920"></p><p>docker01的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# mkdir /xxx<br>[root@docker01 ~]# mount  -t nfs 192.168.1.10:/datashare /xxx<br>//挂载nfs上的共享目录<br>[root@docker01 ~]# mount | tail -1<br>//查看是否挂载<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219100246559.png" alt="image-20191219100246559"></p><p>nfs创建测试文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs ~]# cd datashare/<br>[root@nfs datashare]# vim index.html<br>&lt;div id="datetime"&gt;<br>    &lt;script&gt;<br>        setInterval("document.getElementById('datetime').innerHTML=new Date().toLocaleString();", 1000);<br>    &lt;/script&gt;<br>&lt;/div&gt;<br>xgp666<br></code></pre></td></tr></table></figure><p>docker01查看一下</p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219102514366.png" alt="image-20191219102514366"></p><p><strong>docker02的操作与docker01上一样</strong><br>这里先不考虑将代码写入镜像，先以这种方式，分别在docker01和docker02部署httpd服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -itd --name bdqn-web1 -P -v /xxx/:/usr/local/apache2/htdocs httpd:latest <br>[root@docker02 ~]# docker run -itd --name bdqn-web2 -P -v /xxx/:/usr/local/apache2/htdocs httpd:latest<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker ps <br>//查看端口<br>0.0.0.0:32775-&gt;80/tcp   bdqn-web<br>[root@docker02 ~]# docker ps<br>//查看端口<br>0.0.0.0:32769-&gt;80/tcp   bdqn-web2<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219103304742.png" alt="image-20191219103304742"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219103355640.png" alt="image-20191219103355640"></p><p><strong>此时，用浏览器访问,两个WEB服务的主界面是一样。但如果，NFS服务器上的源文件丢失,</strong><br><strong>则两个web服务都会异常。</strong></p><p><strong>想办法将元数据写入镜像内，在基于镜像创建一个vc_data容器，这里因为没有接触到docker-compose和docker-swarm等docker编排工具，所以需手动创建镜像！</strong></p><p>nfs操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs datashare]# echo xgp666 &gt; index.html <br>//更改测试文件<br></code></pre></td></tr></table></figure><p>docker02操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# cd /xxx/<br>[root@docker02 xxx]# vim Dockerfile<br>//编写Dockerfile<br>[root@docker02 xxx]# cat Dockerfile <br>FROM busybox<br>ADD index.html /usr/local/apache2/htdocs/index.html<br>VOLUME /usr/local/apache2/htdocs<br></code></pre></td></tr></table></figure><p>创建镜像并运行一个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 xxx]# docker build -t back_data .<br>//基于Dockerfile创建镜像<br>[root@docker02 xxx]# docker create --name back_container1  back_data:latest <br>//基于刚刚创建的镜像创建容器<br></code></pre></td></tr></table></figure><p>运行容器，并导出镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 xxx]# docker run -itd --name bdqn-web3 -P  --volumes-from  back_container1 httpd:latest <br>//运行一台容器<br>[root@docker02 xxx]# docker save &gt; back_data.tar back_data:latest<br>//导出镜像，因为是在共享目录所以docker01也可以看到<br></code></pre></td></tr></table></figure><p>docker01</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 xxx]# docker load -i back_data.tar <br>//去共享目录，导入镜像<br>[root@docker01 xxx]# docker  create --name back_container2  back_data:latest<br>//基于刚刚创建的镜像运行容器<br>[root@docker01 xxx]# docker run  -itd --name bdqn-web4 -P  --volumes-from  back_container2 httpd:latest<br>//运行一台容器<br></code></pre></td></tr></table></figure><p>浏览器访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker ps <br>//查看端口<br> 0.0.0.0:32776-&gt;80/tcp   bdqn-web4<br>[root@docker02 ~]# docker ps<br>//查看端口<br>0.0.0.0:32770-&gt;80/tcp   bdqn-web3<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219105726940.png" alt="image-20191219105726940"></p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191219105748539.png" alt="image-20191219105748539">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;strong&gt;数据持久化&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;Storage-Driver&quot;&gt;&lt;strong&gt;Storage Driver&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;数据存储方式&quot;&gt;&lt;strong&gt;数据存储方式&lt;/strong&gt;&lt;/h3&gt;
&lt;p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker实现服务发现</title>
    <link href="https://wsdlxgp.top/posts/b5a0.html"/>
    <id>https://wsdlxgp.top/posts/b5a0.html</id>
    <published>2020-06-06T15:29:15.690Z</published>
    <updated>2020-06-06T15:29:28.623Z</updated>
    
    <content type="html"><![CDATA[<p>更改时间</p><p>mv /etc/localtime/etc/localtime. bk<br>cp /usr/share/zoneinfo/Asia/Shanghai/etc/localtime</p><p>查看端口</p><p>[root@docker01 consul]# ss -lnt</p><p><strong>Consul:分布式、高可用的，服务发现和配置服务的工具。数据中心</strong><br><strong>Rigistrator:负责收集dockerhost_上,容器服务的信息，并且发送给consul</strong></p><p><strong>Consul-tpmplate:根据编辑好的模板，生产新的nginx配置文件，并负责重新加载nginx配置文件</strong></p><h1><strong>Docker + Consul + registrator实现服务发现</strong></h1><h2 id="1-实验环境">1.实验环境</h2><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226120640567.png" alt="image-20191226120640567"></p><blockquote><p><strong>上面示意图的大概流程如下：</strong><br>1、docker01主机上以二进制包的方式部署consul服务并后台运行，其身份为leader；<br>2、docker02、docker03以容器的方式运行consul服务，并加入到docker01的consul群集中；<br>3、在主机docker02、docker03上后台运行registrator容器，使其自动发现docker容器提供的服务；<br>4、在docker01上部署Nginx，提供反向代理服务，docker02、docker03主机上基于Nginx镜像，各运行两个web容器，提供不同的网页文件，以便测试效果；<br>5、在docker01上安装consul-template命令，将收集到的信息（registrator收集到容器的信息）写入template模板中，并且最终写入Nginx的配置文件中。<br>6、至此，实现客户端通过访问Nginx反向代理服务器（docker01），获得docker02、docker03服务器上运行的Nginx容器提供的网页文件。<br>注：registrator是一个自动发现docker container提供的服务，并且在后端服务注册中心（数据中心）注册服务。主要用来收集容器运行服务的信息，并且发送给consul。数据中心除了consul外，还有etcd、zookeeper等。</p></blockquote><table><thead><tr><th>主机</th><th>iP地址</th><th>服务</th></tr></thead><tbody><tr><td>docker01</td><td>192.168.1.11</td><td>consul+consul-template+nginx</td></tr><tr><td>docker02</td><td>192.168.1.13</td><td>consul+registrator</td></tr><tr><td>docker03</td><td>192.168.1.20</td><td>consul+registrator</td></tr></tbody></table><p><em><strong>三台主机关闭防火墙，禁用selinux，更改主机名如上所述。</strong></em></p><h3 id="（1）docker01去官网https-www-consul-io-downloads-html下载consul服务"><strong>（1）docker01去官网https://www.consul.io/downloads.html下载consul服务</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# unzip consul_1.5.1_linux_amd64.zip <br>//现在是本地导入压缩包，需要解压              <br>[root@docker01 ~]# mv consul /usr/local/bin/<br>//移动服务到bin目录<br>[root@docker01 ~]# chmod +x /usr/local/bin/consul<br>//给予一个可执行权限<br></code></pre></td></tr></table></figure><h3 id="（2）启动consul"><strong>（2）启动consul</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# consul agent -server -bootstrap -ui -data-dir=/var/lib/consul-data -bind=192.168.1.11 -client=0.0.0.0 -node=master<br></code></pre></td></tr></table></figure><p><strong>PS: //-bootstrap: 加入这个选项时，一般都在server单节点的时候用，自选举为leader。</strong></p><blockquote><p><strong>参数解释：</strong><br><strong>-server：添加一个服务</strong><br><strong>-bootstrap：一般在server单节点的时候使用，自选举为leader。</strong><br><strong>-data-dir：key/volume指定数据存放的目录</strong><br><strong>-ui：开启内部的web界面</strong><br><strong>-bind：指定开启服务的ip</strong><br><strong>-client：指定访问的客户端</strong><br><strong>-node：在集群内部通信使用的名称，默认是主机名。</strong></p></blockquote><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226093552465.png" alt="image-20191226093552465"></p><p><em><strong>现在这个ip是外部使用</strong></em></p><blockquote><p><strong>PS:开启的端口</strong><br>8300     集群节点<br>8301     集群内部的访问<br>8302     跨数据中心的通信<br>8500     web ui界面<br>8600     使用dns协议查看节点信息的端口</p></blockquote><p><em><strong>这时，这条命令会占用终端，可以使用nohup命令让它保持后台运行。</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# nohup consul agent -server -bootstrap -ui -data-dir=/var/lib/consule-data -bind=192.168.1.11  -client=0.0.0.0 -node=master &amp;<br></code></pre></td></tr></table></figure><h3 id="（3）查看consul端口的信息">（3）查看consul端口的信息**</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# consul info<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226093818580.png" alt="image-20191226093818580"></p><h3 id="（4）查看consul集群成员的信息"><strong>（4）查看consul集群成员的信息</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# consul members<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226094012082.png" alt="image-20191226094012082"></p><p><em><strong>现在这个ip是内部使用</strong></em></p><h2 id="2-docker02，docker03，加入consul集群">2. docker02，docker03，加入consul集群</h2><blockquote><p><strong>这里我们采用容器的方式去运行consul服务。</strong></p></blockquote><h3 id="（1）下载consu所需的l镜像"><strong>（1）下载consu所需的l镜像</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker pull consul<br></code></pre></td></tr></table></figure><h3 id="（2）基于consul镜像开启一台容器">（2）基于consul镜像开启一台容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker run -d --name consul -p 8301:8301 -p 8301:8301/udp -p 8500:8500 -p 8600:8600 -p 8600:8600/udp --restart always progrium/consul -join 192.168.1.11 -advertise 192.168.1.13 -client 0.0.0.0 -node=node01<br></code></pre></td></tr></table></figure><blockquote><p><strong>参数解释：</strong></p><p>-d：守护进程</p><p>–name：容器名称</p><p>–restart：容器随着docker服务一直运行</p><p>-advertise:声明本机地址</p><p>-join:声明服务端地址</p><p>-node:consul集群中的名称</p></blockquote><h3 id="（3）docker查看consul集群成员的信息">（3）docker查看consul集群成员的信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# consul members<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226121636780.png" alt="image-20191226121636780"></p><h3 id="（4）两台docker开启容器后，docker01查看">（4）两台docker开启容器后，docker01查看</h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226095528177.png" alt="image-20191226095528177"></p><h3 id="（5）浏览器访问http-192-168-1-11-8500">（5）浏览器访问http://192.168.1.11:8500</h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226095736827.png" alt="image-20191226095736827"></p><h2 id="3-docker01下载部署consul-template">3. docker01下载部署consul-template</h2><p>在<a href>https://github.com/hashicorp/consul-template</a>上，下载consul-template</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# unzip consul-template_0.19.5_linux_amd64.zip<br>//解压安装好的consul-template包<br>[root@docker01 ~]# mv consul-template /usr/local/bin/<br>//移动到命令目录<br>[root@docker01 ~]# chmod +x /usr/local/bin/consul-template <br>//给予一个可执行权限<br>​```shell <br><br><br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 4. docker02、docker03_ 上部署registrator服务</span></span><br><br><span class="hljs-meta">&gt;</span><span class="bash"> **registrator是一个能自动发现docker container提供的服务,并在后端服务注册中心注册服务或取消服务的工具，后端注册中心支持conusl、etcd、 skydns2、zookeeper等。**</span><br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## （1）下载registrator镜像</span></span><br><br>​```shell <br>[root@docker02 ~]# docker pull registrator<br>//下载registrator镜像<br></code></pre></td></tr></table></figure><h3 id="（2）基于registrator镜像，开启一台容器">（2）基于registrator镜像，开启一台容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker run -d  --name registrator -v /var/run/docker.sock:/tmp/docker.sock  --restart always gliderlabs/registrator consul://192.168.1.13:8500<br></code></pre></td></tr></table></figure><h3 id="（3）开启一台nginx容器">（3）开启一台nginx容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker run -d —P --name nginx nginx:latest<br></code></pre></td></tr></table></figure><h3 id="（4）浏览器查看一下http-192-168-1-11-8500-ui-dc1-nodes">（4）浏览器查看一下http://192.168.1.11:8500/ui/dc1/nodes</h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226105329200.png" alt="image-20191226105329200"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226122052852.png" alt="image-20191226122052852"></p><h2 id="5-docker01部署一个nginx服务">5.docker01部署一个nginx服务</h2><h3 id="（1）安装开启nginx服务">（1）安装开启nginx服务</h3><p>安装nginx依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]#  yum -y install pcre pcre-devel openssl openssl-devel zlib zlib-devel<br></code></pre></td></tr></table></figure><p>编译安装nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# cd nginx-1.14.0/<br>[root@docker01 nginx-1.14.0]# ./configure --user=nginx --group=nginx  --with-http_stub_status_module --with-http_realip_module --with-pcre --with-http_ssl_module &amp;&amp; make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>创建所需用户和链接命令目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 nginx-1.14.0]# useradd -M -s /sbin/nologin nginx<br>[root@docker01 nginx-1.14.0]# ln -s /usr/local/nginx/sbin/* /usr/local/bin/<br></code></pre></td></tr></table></figure><p>检查nginx是否有问题，并开启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 nginx-1.14.0]# nginx -t<br>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful<br>[root@docker01 nginx-1.14.0]# nginx<br></code></pre></td></tr></table></figure><p><em><strong>PS:这里nginx作为反向代理，代理后端docker02、 docker03 上nginx的容器服务,所以我们先去docker02、docker03. 上部署一些服务， 为了方便等会看到负载的效果，所以，我们运行完成容器之后，做一个主界面内容的区分。</strong></em></p><h3 id="（2）安装完成之后，本机测试访问">（2）安装完成之后，本机测试访问</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 nginx-1.14.0]# curl 127.0.0.1<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226105739604.png" alt="image-20191226105739604"></p><h3 id="（3）docker02和docker03部署环境">（3）docker02和docker03部署环境</h3><table><thead><tr><th>主机</th><th>服务</th><th></th></tr></thead><tbody><tr><td>docker02</td><td>nginx</td><td>web01，web02</td></tr><tr><td>docker03</td><td>nginx</td><td>web03，web04</td></tr></tbody></table><h4 id="1-下载nginx镜像（docker02，docker03都要）"><strong>&lt;1&gt;下载nginx镜像（docker02，docker03都要）</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker pull nginx<br>//下载nginx镜像<br></code></pre></td></tr></table></figure><h4 id="2-docker01操作">&lt;2&gt;docker01操作</h4><p><em><strong>基于nginx镜像运行上述所说的容器并设置测试页面</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">web01<br>[root@docker02 ~]# docker run  -itd --name web01 -P nginx:latest<br>[root@docker02 ~]# docker exec -it web01 /bin/bash<br>root@44b59d07202f:/# cd /usr/share/nginx/html/<br>root@44b59d07202f:/usr/share/nginx/html# echo web01 &gt; index.html<br><br>web02<br>[root@docker02 ~]# docker run  -itd --name web02 -P nginx:latest<br>[root@docker02 ~]# docker exec -it web02 /bin/bash<br>root@44b59d07202f:/# cd /usr/share/nginx/html/<br>root@44b59d07202f:/usr/share/nginx/html# echo web02 &gt; index.html<br></code></pre></td></tr></table></figure><h4 id="3-docker02操作">&lt;3&gt;docker02操作</h4><p><em><strong>基于nginx镜像运行上述所说的容器并设置测试页面</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">web03<br>[root@docker03 ~]#  docker run  -itd --name web03 -P nginx:latest<br>[root@docker03 ~]#  docker exec -it web03 /bin/bash<br>root@fd8e8b2df136:/# cd /usr/share/nginx/html/<br>root@fd8e8b2df136:/usr/share/nginx/html#  echo web03 &gt; index.html<br>root@fd8e8b2df136:/usr/share/nginx/html# exit<br>true<br>web04<br>[root@docker03 ~]#  docker run  -itd --name web04 -P nginx:latest<br>[root@docker03 ~]#  docker exec -it web04 /bin/bash<br>root@fd8e8b2df136:/# cd /usr/share/nginx/html/<br>root@fd8e8b2df136:/usr/share/nginx/html#  echo web04 &gt; index.html<br>root@fd8e8b2df136:/usr/share/nginx/html# exit<br></code></pre></td></tr></table></figure><h3 id="（4）docker01更改nginx配置文件">（4）docker01更改nginx配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# cd /usr/local/nginx/<br>//进入nginx配置文件目录<br>[root@docker01 nginx]# mkdir consul<br>//创建consul目录<br>[root@docker01 nginx]# cd consul/<br>//进入consul目录<br></code></pre></td></tr></table></figure><h4 id="1-创建nginx-ctmpl模板">&lt;1&gt;创建nginx.ctmpl模板</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# vim nginx.ctmpl<br>upstream http_backend &#123;<br>        &#123;&#123;range service "nginx"&#125;&#125;<br>        server &#123;&#123; .Address &#125;&#125;:&#123;&#123; .Port &#125;&#125;;<br>        &#123;&#123; end &#125;&#125;<br>&#125;<br><br>server &#123;<br>        listen 8000;<br>        server_name localhost;<br>        location / &#123;<br>                proxy_pass http://http_backend;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-修改nginx配置文件，通过-include-参数包含刚刚创建的文件">&lt;2&gt;修改nginx配置文件，通过 include 参数包含刚刚创建的文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# cd /usr/local/nginx/conf/<br>[root@docker01 conf]# vim nginx.conf<br>  include /usr/local/nginx/consul/*.conf;  #文件最后添加（要在大括号里面）<br></code></pre></td></tr></table></figure><h4 id="3-生成一个vhost-conf配置文件，并重启nginx（会占用终端">&lt;3&gt; 生成一个vhost.conf配置文件，并重启nginx（会占用终端)</h4><p>使用consul-template命令，根据模板生产新的配置文件，并重新加载nginx的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 conf]# consul-template -consul-addr 192.168.1.11:8500 -template "/usr/local/nginx/consul/nginx.ctmpl:/usr/local/nginx/consul/vhost.conf:/usr/local/bin/nginx -s reload"<br></code></pre></td></tr></table></figure><p><em><strong>这时，这条命令会占用终端，可以使用nohup命令让它保持后台运行,并重启nginx服务。</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 conf]# nohup consul-template -consul-addr 192.168.1.11:8500 -template   "/usr/local/nginx/consul/nginx.ctmpl:/usr/local/nginx/consul/vhost.conf:/usr/local/sbin/nginx -s reload"  &amp;<br></code></pre></td></tr></table></figure><p>查看一下文件是否生成，里面是否有内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# cd /usr/local/nginx/consul/<br>[root@docker01 consul]# ls<br>nginx.ctmpl  vhost.conf<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226113614544.png" alt="image-20191226113614544"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# cat vhost.conf<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226113633731.png" alt="image-20191226113633731"></p><p><strong>此时，应该能够看到，新生产的vhost.conf配置文件已经生效，访问本机8000端口可以得到不同容器提供的服务。</strong></p><h4 id="4-测试访问">&lt;4&gt;测试访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# curl 127.0.0.1:8000<br>web01<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226115250121.png" alt="image-20191226115250121"></p><p><strong>此时可以看到负载均衡的效果！</strong></p><h4 id="5-如果访问不成功">&lt;5&gt;如果访问不成功</h4><p>查看端口8000是否开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# ss -lnt<br></code></pre></td></tr></table></figure><p>检查nginx配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# nginx -t<br>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful<br></code></pre></td></tr></table></figure><p>检查自己编写的nginx配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# cd /usr/local/nginx/consul/<br>[root@docker01 consul]# cat nginx.ctmpl <br>upstream http_backend &#123;<br>true&#123;&#123;range service "nginx"&#125;&#125;<br>trueserver &#123;&#123; .Address &#125;&#125;:&#123;&#123; .Port &#125;&#125;;<br>true&#123;&#123; end &#125;&#125;<br>&#125;<br><br>server &#123;<br>truelisten 8000;<br>trueserver_name localhost;<br>truelocation / &#123;<br>truetrueproxy_pass http://http_backend;<br>true&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果nginx配置文件没问题，重启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# nginx -s reload<br></code></pre></td></tr></table></figure><h4 id="6-测试自动发现">&lt;6&gt;测试自动发现</h4><p><strong>docker02 创建测试容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker run  -itd --name web05 -P nginx:latest<br>[root@docker02 ~]# docker exec -it web05 /bin/bash<br>root@44b59d07202f:/# cd /usr/share/nginx/html/<br>root@44b59d07202f:/usr/share/nginx/html# echo web02 &gt; index.html<br>[root@docker02 ~]# docker ps<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226115332704.png" alt="image-20191226115332704"></p><p><strong>docker01查看</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# cd /usr/local/nginx/consul/<br>[root@docker01 consul]# cat vhost.conf<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226115444855.png" alt="image-20191226115444855"></p><p><strong>docker01测试访问</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 consul]# curl 127.0.0.1:8000<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191226115752718.png" alt="image-20191226115752718"></p><p><strong>//同上</strong></p><p><strong>此时可以看到负载均衡的效果！</strong></p><p><strong>这时不需要考虑后端的web服务器添加还是删除都会自动更新的，这是因为在运行consul-template这条命令后添加的/usr/local/sbin/nginx -s reload的作用！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更改时间&lt;/p&gt;
&lt;p&gt;mv /etc/localtime/etc/localtime. bk&lt;br&gt;
cp /usr/share/zoneinfo/Asia/Shanghai/etc/localtime&lt;/p&gt;
&lt;p&gt;查看端口&lt;/p&gt;
&lt;p&gt;[root@docker01 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker的监控</title>
    <link href="https://wsdlxgp.top/posts/bdbf.html"/>
    <id>https://wsdlxgp.top/posts/bdbf.html</id>
    <published>2020-06-06T15:29:15.688Z</published>
    <updated>2020-06-06T15:29:28.626Z</updated>
    
    <content type="html"><![CDATA[<h1><strong>Docker的监控</strong></h1><h2 id="Docker自带的监控命令">Docker自带的监控命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker ps<br>//查看容器信息<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223110050156.png" alt="image-20191223110050156"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker top 容器名称<br>[root@docker01 ~]# docker top wordpress_wordpress_1 <br>//查看容器中运行的进程信息，支持 ps 命令参数。<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker stats wordpress_wordpress_1 <br>//实时查看容器统计信息，查看容器的CPU利用率、内存的使用量以及可用内存总量。<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker logs 容器名称<br>[root@docker01 ~]# docker logs wordpress_wordpress_1 <br>//查看容器的日志<br></code></pre></td></tr></table></figure><h1><strong>用 Sysdig 监控服务器和 Docker 容器</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker pull sysdig<br>//下载sysdig镜像<br></code></pre></td></tr></table></figure><h3 id="通过sysdig运行容器">通过sysdig运行容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -it --rm --name sysdig --privileged=true --volume=/var/run/docker.sock:/host/var/run/docker.sock  --volume=/dev:/host/dev --volume=/proc:/host/proc:ro  --volume=/boot:/host/boot:ro  --volume=/lib/modules:/host/lib/modules:ro --volume=/usr:/host/usr:ro  sysdig/sysdig<br></code></pre></td></tr></table></figure><h3 id="下载插件失败后可以运行下边命令，重新下载">下载插件失败后可以运行下边命令，重新下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@10ccab83a512:/# system-sysdig-loader<br>//下载插件失败后可以运行下边命令，重新下载<br></code></pre></td></tr></table></figure><h3 id="下载成功后，可以运行sysdig命令，查看监控项">下载成功后，可以运行sysdig命令，查看监控项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@10ccab83a512:/# sysdig<br>//运行sysdig命令，查看监控项，它会动态查看<br></code></pre></td></tr></table></figure><h3 id="使用-csysdig"><strong>使用 csysdig</strong></h3><p>csysdig 就是运 ncurses 库的用户界面的 sysdig 软件包，Ncurses 是一个能提供功能键定义 ( 快捷键 ), 屏幕绘制以及基于文本终端的图形互动功能的动态库。在 sysdig 软件包里还提供了一个工具 csysdig，该工具执行后，运行界面和 top 命令类似。csysdig 工作界面如图 5。</p><p><img src="https://www.ibm.com/developerworks/cn/linux/1607_caoyq_sysdig/image005.jpg" alt="csysdig 工作界面"></p><h4 id="运行csysdig命令，查看监控项">运行csysdig命令，查看监控项</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@10ccab83a512:/# csysdig<br>//运行csysdig命令，图形化界面查看监控项，它会动态查看<br></code></pre></td></tr></table></figure><h4 id="csysdig-使用如下快捷键：">csysdig 使用如下快捷键：</h4><p><strong>P：暂停屏幕输出信息</strong></p><p><strong>Enter：进入当前突出显示的条目。</strong></p><p><strong>Ctrl+F：列表搜索。</strong></p><p><strong>F1- 帮助信息</strong></p><p><strong>F2- 显示视图选择器。这将让你切换到另一个视图。</strong></p><p><strong>F4- 使用过滤器</strong></p><p><strong>F5- 查看 IO 输出信息</strong></p><p><strong>F7 显示帮助页面当前显示的视图。</strong></p><p><strong>F8 打开视图的操作面板。</strong></p><p><strong>F9，打开列排序面板。</strong></p><p><strong>Q 放弃退出。</strong></p><p><strong>Arrows, PgUP, PgDn, Home, End：图标上下左右的移动控制。</strong></p><h1>Docker监控方案之Weave Scope</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker pull scope<br>//下载scope镜像<br></code></pre></td></tr></table></figure><h3 id="执行如下脚本安装运行Weave-Scope"><strong>执行如下脚本安装运行Weave Scope</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# curl -L git.io/scope -o /usr/local/bin/scope<br>[root@docker01 ~]# chmod +x /usr/local/bin/scope<br>[root@docker01 ~]# scope launch<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223115631976.png" alt="image-20191223115631976"></p><h3 id="浏览器访问http-192-168-1-11-4040"><strong>浏览器访问http://192.168.1.11:4040/</strong></h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223115825581.png" alt="image-20191223115825581"></p><p><strong>然后就可以更好的监控，管理docker中的容器了</strong></p><h3 id="开启第docker02，加入docker01监控项"><strong>开启第docker02，加入docker01监控项</strong></h3><p><strong>docker01</strong></p><p><strong>删除weavescope容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker stop weavescope <br>weavescope<br>[root@docker01 ~]# docker rm weavescope <br>weavescope<br></code></pre></td></tr></table></figure><p><strong>docker02</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker pull scope<br>//下载scope镜像<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# curl -L git.io/scope -o /usr/local/bin/scope<br>[root@docker01 ~]# chmod +x /usr/local/bin/scope<br>[root@docker01 ~]# scope launch<br></code></pre></td></tr></table></figure><p><strong>docker01</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# scope launch 192.168.1.11 192.168.1.13<br></code></pre></td></tr></table></figure><p><strong>docker02</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# scope launch 192.168.1.13 192.168.1.11<br></code></pre></td></tr></table></figure><h3 id="浏览器访问http-192-168-1-11-4040-2"><strong>浏览器访问http://192.168.1.11:4040/</strong></h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223121541560.png" alt="image-20191223121541560"></p><p><strong>浏览器访问http://192.168.1.13:4040/也是可以的</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223121621404.png" alt="image-20191223121621404"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;strong&gt;Docker的监控&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;Docker自带的监控命令&quot;&gt;Docker自带的监控命令&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker部署LNMP环境</title>
    <link href="https://wsdlxgp.top/posts/32f5.html"/>
    <id>https://wsdlxgp.top/posts/32f5.html</id>
    <published>2020-06-06T15:29:15.686Z</published>
    <updated>2020-06-06T15:29:28.634Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ifdown ens33;ifup ens33<br>//重启网卡<br></code></pre></td></tr></table></figure><p><strong>首先要有确认环境中有需要的tar包，可以使用<a href>docker pull</a>来下载这些镜像</strong></p><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5CUntitled.assets%5Cimage-20191220084542746.png" alt="image-20191220084542746"></p><p><strong>现在我们是使用已经下载好的镜像，所以需要导入一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker load -i nginx.tar  &amp;&amp; docker load -i wordpress.tar  &amp;&amp; docker load -i mysql-5.7.tar &amp;&amp; docker load -i php.7.2-fpm.tar<br>//导入nginx,wordpress,mysql,php镜像<br></code></pre></td></tr></table></figure><h1>部署LNMP</h1><p><a href><strong>172.16.10.0/24</strong></a></p><p><a href><strong>Nginx：172.16.10.10</strong></a></p><p><a href><strong>Mysql：172.16.10.20</strong></a></p><p><a href><strong>Php    ：172.16.10.30</strong></a></p><p><em><strong>网站的访问主目录：/wwwroot</strong></em></p><p><em><strong>Nginx的配置文件：/docker</strong></em></p><p><em><strong>/etc/nginx/conf.d   #nginx配置文件</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -itd --name test nginx:latest <br>//先启动一台nginx，用来拷贝配置文件和访问主目录<br>[root@docker01 ~]# mkdir  -p /wwwroot /docker<br>//创建挂载目录<br>[root@docker01 ~]# docker cp test:/etc/nginx /docker/<br>//拷贝配置文件到挂载目录<br>[root@docker01 ~]# ls /docker/<br>nginx<br></code></pre></td></tr></table></figure><p><em><strong>/usr/share/nginx/html  #nginx主目录</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker cp test:/usr/share/nginx/html /wwwroot/<br>//拷贝访问目录到挂载目录<br>[root@docker01 ~]# ls /wwwroot/<br>html<br></code></pre></td></tr></table></figure><h2 id="1）创建一个自定义网络">1）创建一个自定义网络</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker network create -d bridge --subnet 172.16.10.0/24 --gateway 172.16.10.1 lnmp<br></code></pre></td></tr></table></figure><h2 id="2-运行nginx容器">2)运行nginx容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# netstat -anpt | grep 80<br>//查看80端口是否被占用<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -itd --name nginx -v /docker/nginx:/etc/nginx -v /wwwroot/html:/usr/share/nginx/html   -p 80:80 --network lnmp --ip 172.16.10.10 nginx<br>//运行一台nginx服务，并指明ip，映射端口，挂载目录<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker ps<br>//查看容器是否存在<br></code></pre></td></tr></table></figure><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5CUntitled.assets%5Cimage-20191220091933217.png" alt="image-20191220091933217"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# cd /wwwroot/html<br>[root@docker01 wwwroot]# vim index.html<br>hello lnmp!<br>//创建测试网页<br><br>[root@docker01 wwwroot]# curl 127.0.0.1<br>hello lnmp!<br>//测试访问<br></code></pre></td></tr></table></figure><h2 id="3-运行mysql容器">3)运行mysql容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 html]# docker run --name mysql -e MYSQL_ROOT_PASSWORD=123.com -d -p 3306:3306 --network lnmp --ip 172.16.10.20 mysql:5.7<br>//运行一台nginx服务，并指明ip，映射端口<br></code></pre></td></tr></table></figure><p><em><strong>-e：设置环境变量</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker ps<br></code></pre></td></tr></table></figure><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220120001710.png" alt="image-20191220120001710"></p><p><strong>安装mysql，并设置密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 html]# yum -y install mysql<br>//安装mysql<br>[root@docker01 ~]# mysql -u root -p123.com -h 127.0.0.1 -P 3306<br></code></pre></td></tr></table></figure><p><strong>随便新建一个库做验证：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">MySQL [(none)]&gt; create database name;<br></code></pre></td></tr></table></figure><p><strong>再查看有没有刚创建的库：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">MySQL [(none)]&gt; show databases;<br></code></pre></td></tr></table></figure><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220140326212.png" alt="image-20191220140326212"></p><h2 id="4-运行php容器，并创建php页面">4)运行php容器，并创建php页面</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 html]# docker run -itd --name phpfpm -p 9000:9000 -v /wwwroot/html:/usr/share/nginx/html --network lnmp --ip 172.16.10.30 php:7.2-fpm<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# cd /wwwroot/html<br>[root@docker01 wwwroot]# vim test.php<br>&lt;?php<br>phpinfo();<br>?&gt;<br>//添加php测试界面<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker ps<br></code></pre></td></tr></table></figure><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220120518271.png" alt="image-20191220120518271"></p><h2 id="5-修改nginx配置文件，nginx和php连接">5)修改nginx配置文件，nginx和php连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 html]# cd /docker/nginx/conf.d/<br>[root@docker01 conf.d]# vim default.conf<br></code></pre></td></tr></table></figure><pre><code>location / {    root   /usr/share/nginx/html;    index  index.html index.htm index.php; #10添加index.php}</code></pre><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220094715896.png" alt="image-20191220094715896"></p><pre><code>location ~ \.php$ {             root    /usr/share/nginx/html;            fastcgi_pass   172.16.10.30:9000;    fastcgi_index  index.php;    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;        include        fastcgi_params;    }</code></pre><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220095010644.png" alt="image-20191220095010644"></p><p><strong>设置完毕后重启nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 conf.d]# docker restart nginx<br>//重启nginx<br>[root@docker01 conf.d]# docker ps<br></code></pre></td></tr></table></figure><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220140527498.png" alt="image-20191220140527498"></p><p><strong>浏览器测试访问nginx和php</strong></p><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5CWC%7D%7B4@W%5DSXSI8PHBJM%7BM4S.png" alt="img"></p><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220101602664.png" alt="image-20191220101602664"></p><p><strong>说明是nginx和php的连接，没有问题，接下来是php和MySQL的连接。这里我们使用一个phpmyadmin的数据库管理工具</strong></p><h2 id="6-修改nginx配置文件，php和mysql连接">6)修改nginx配置文件，php和mysql连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 html]# cd /wwwroot/html<br></code></pre></td></tr></table></figure><p><strong>上传phpMyAdmin包如果没有请在https://github.com/phpmyadmin/phpmyadmin/releases下载</strong></p><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220113901886.png" alt="image-20191220113901886"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 html]# unzip phpMyAdmin-4.9.1-all-languages.zip <br>//解压phpmyadmin包<br>[root@docker01 html]# mv phpMyAdmin-4.9.1-all-languages phpmyadmin<br>//更改刚刚解压文件的名称<br>[root@docker01 html]#  cd  /docker/nginx/conf.d/<br>[root@docker01 conf.d]#  vim default.conf <br>//修改nginx配置文件<br>[root@docker01 conf.d]#  docker restart nginx <br>//重启nginx<br></code></pre></td></tr></table></figure><pre><code>        location /phpmyadmin {                root   /usr/share/nginx/html;                index   index.html index.htm index.php;    }</code></pre><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220121324472.png" alt="image-20191220121324472"></p><pre><code>    location ~ /phpmyadmin/(?&lt;after_ali&gt;(.*)\.(php|php5)?$) {        root           /usr/share/nginx/html;        fastcgi_pass   172.16.10.30:9000;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;        include        fastcgi_params;    }</code></pre><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220101300471.png" alt="image-20191220101300471"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 conf.d]# docker restart nginx <br>[root@docker01 conf.d]# docker ps<br></code></pre></td></tr></table></figure><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220105419384.png" alt="image-20191220105419384"></p><p><strong>浏览器访问 <a href="http://192.168.1.11/phpmyadmin/index.php" target="_blank" rel="noopener">http://192.168.1.11/phpmyadmin/index.php</a></strong></p><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220134345698.png" alt="image-20191220134345698"></p><p><em>报红框属于正常现象，不要惊慌，接下来就解决它</em></p><p><strong>需要我们对php镜像做出更改，添加php和MySQL连接模块</strong></p><p><strong>编写一个Dockerfile</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 conf.d]# cd <br>[root@docker01 ~]# vim Dockerfile<br>FROM php:7.2-fpm<br>RUN apt-get update &amp;&amp; apt-get install -y \<br>        libfreetype6-dev \<br>        libjpeg62-turbo-dev \<br>        libpng-dev \<br>    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \<br>    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \<br>    &amp;&amp; docker-php-ext-install -j$(nproc) gd \<br>        &amp;&amp; docker-php-ext-install mysqli pdo pdo_mysql<br></code></pre></td></tr></table></figure><p><strong>基于dockerfile创建php镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker build -t phpmysql .<br>//基于Dockerfiler创建一个镜像<br></code></pre></td></tr></table></figure><p><strong>删除之前的php容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker stop phpfpm<br>[root@docker01 ~]# docker rm phpfpm <br>//关闭并删除php容器<br></code></pre></td></tr></table></figure><p><strong>用新的php镜像运行容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -itd --name phpfpm -p 9000:9000 -v /wwwroot/html:/usr/share/nginx/html --network lnmp --ip 172.16.10.30 phpmysql<br>//用新做的php镜像重新运行<br></code></pre></td></tr></table></figure><p><strong>//修改phpmyadmin的配置文件，指定连接的数据库的IP，然后重启php容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 html]# cd /wwwroot/html/phpmyadmin/<br>[root@docker01 phpmyadmin]# cp config.sample.inc.php  config.inc.php<br>[root@docker01 phpmyadmin]# vim config.inc.php<br><span class="hljs-meta">$</span><span class="bash">cfg[<span class="hljs-string">'Servers'</span>][<span class="hljs-variable">$i</span>][<span class="hljs-string">'auth_type'</span>] = <span class="hljs-string">'cookie'</span>;</span><br>/* Server parameters */<br><span class="hljs-meta">$</span><span class="bash">cfg[<span class="hljs-string">'Servers'</span>][<span class="hljs-variable">$i</span>][<span class="hljs-string">'host'</span>] = <span class="hljs-string">'172.16.10.20'</span>;   <span class="hljs-comment">#31写mysql数据库的IP地址</span></span><br><span class="hljs-meta">$</span><span class="bash">cfg[<span class="hljs-string">'Servers'</span>][<span class="hljs-variable">$i</span>][<span class="hljs-string">'compress'</span>] = <span class="hljs-literal">false</span>;</span><br><span class="hljs-meta">$</span><span class="bash">cfg[<span class="hljs-string">'Servers'</span>][<span class="hljs-variable">$i</span>][<span class="hljs-string">'AllowNoPassword'</span>] = <span class="hljs-literal">false</span>;</span><br></code></pre></td></tr></table></figure><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220104852352.png" alt="image-20191220104852352"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 phpmyadmin]# docker restart phpfpm <br>//重启phpfpm容器<br></code></pre></td></tr></table></figure><p>浏览器测试访问http://192.168.1.11/phpmyadmin/index.php</p><p>用户名：root 密码：<a href="http://123.com" target="_blank" rel="noopener">123.com</a></p><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220135242858.png" alt="image-20191220135242858"></p><p><img src="/posts/E:%5C%E8%BD%AF%E4%BB%B6%5Ctypora%5C%E6%96%87%E6%A1%A3%5Cdocker%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83.assets%5Cimage-20191220135332412.png" alt="image-20191220135332412"></p><p>登陆成功之后可以看到之前mysql创建的数据库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker-compose</title>
    <link href="https://wsdlxgp.top/posts/713b.html"/>
    <id>https://wsdlxgp.top/posts/713b.html</id>
    <published>2020-06-06T15:29:15.684Z</published>
    <updated>2020-06-06T15:29:28.624Z</updated>
    
    <content type="html"><![CDATA[<h1><strong>docker三剑客之docker-compose</strong></h1><p><em><strong>docker容器的编排工具: 解决相互有依赖关系的多个容器的管理。</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker-compose -v<br>//验证已有docker-compose命令<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223084424676.png" alt="image-20191223084424676"></p><h2 id="docker-compose的配置文件实例"><strong>docker-compose的配置文件实例</strong></h2><p><em><strong>通过识别一个docker-compose.yml的配置文件，去管理容器。</strong></em></p><h3 id="设置tab键的空格数量"><strong>设置tab键的空格数量</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# vim .vimrc<br>set tabstop=2<br>//设置tab键的空格数量<br>[root@docker01 ~]# source .vimrc <br>//刷新一下<br></code></pre></td></tr></table></figure><h3 id="创建一个docker-compose-yml测试文件"><strong>创建一个docker-compose.yml测试文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# mkdir compose_test<br>//创建测试目录<br>[root@docker01 ~]# cd compose_test/<br>[root@docker01 compose_test]# vim docker-compose.yml<br>//创建测试文件docker-compose.yml<br>version: "3"<br>services:<br>  nginx:<br>    container_name: web-nginx<br>    image: nginx<br>    restart: always<br>    ports:<br>      - 90:80<br>    volumes:<br>      - ./webserver:/usr/share/nginx/html<br></code></pre></td></tr></table></figure><h4 id="docker-compose-yml文件的解释"><strong>docker-compose.yml文件的解释</strong></h4><p><strong>第一部分: version: 指定语法格式的版本。</strong></p><p><strong>第二部分: service: 定义服务,(想要运行什么样的容器)</strong></p><h3 id="通过docker-compose-yml文件运行容器"><strong>通过docker-compose.yml文件<a href>运行</a>容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# docker-compose up -d<br>//后台运行docker-compose规定的容器。（在执行这条命令的当前目录下，也需要一个docker-compose.yml的配置文件，并且通常只有一个。）<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223091336129.png" alt="image-20191223091336129"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# docker ps<br>//查看容器信息<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223091432734.png" alt="image-20191223091432734"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# curl 127.0.0.1:90<br>//访问nginx会失败，因为挂载目录没有页面内容<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223091542832.png" alt="image-20191223091542832"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# vim webserver/index.html<br>//创建测试网页<br>xgp666<br>[root@docker01 compose_test]# curl 127.0.0.1:90<br>//再次访问，是成功的<br>xgp666<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223091825697.png" alt="image-20191223091825697"></p><h3 id="通过docker-compose-yml文件停止运行容器"><strong>通过docker-compose.yml文件<a href>停止运行</a>容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# docker-compose stop<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223092133334.png" alt="image-20191223092133334"></p><h3 id="通过docker-compose-yml文件重启容器"><strong>通过docker-compose.yml文件<a href>重启</a>容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# docker-compose restart<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223092201539.png" alt="image-20191223092201539"></p><h3 id="不在docker-compose-yml文件所在目录，要使用-f指定目录"><strong>不在docker-compose.yml文件所在目录，要使用<a href>-f</a>指定目录</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker-compose -f compose_test/docker-compose.yml  stop<br></code></pre></td></tr></table></figure><h3 id="并且，在运行container（docker-compose-yml）的过程中，还支持Dockerfile"><strong>并且，在运行container（docker-compose.yml）的过程中，还支持Dockerfile</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# vim Dockerfile<br>//编写dockerfile<br>FROM nginx<br>ADD webserver /usr/share/nginx/html<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# vim docker-compose.yml <br>//修改docker-compose.yml文件<br>version: "3"<br>services:<br>  nginx:<br>    build: .     #添加<br>    container_name: web-nginx<br>    image: new-nginx:v1.0   #修改镜像名称<br>    restart: always<br>    ports:<br>      - 90:80<br></code></pre></td></tr></table></figure><h4 id="通过docker-compose-yml文件停止并删除容器"><strong>通过docker-compose.yml文件<a href>停止并删除</a>容器</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# docker-compose stop<br>Stopping web-nginx ... done<br>[root@docker01 compose_test]# docker-compose rm<br></code></pre></td></tr></table></figure><h4 id="通过docker-compose-yml文件运行容器-2"><strong>通过docker-compose.yml文件<a href>运行</a>容器</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# docker-compose up -d<br>//通过docker-compose.yml文件[运行]()容器<br>[root@docker01 compose_test]# docker ps<br>//查看容器信息<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223094155625.png" alt="image-20191223094155625"></p><h4 id="测试nginx访问页面">测试nginx访问页面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 compose_test]# curl 127.0.0.1:90<br>//测试访问nginx页面，成功<br>xgp666<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223094318146.png" alt="image-20191223094318146"></p><h1><strong>搭建wordpress的博客</strong></h1><h2 id="下载wordpress和mysql-5-7容器"><strong>下载wordpress和mysql:5.7容器</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker pull wordpress<br>//下载wordpress容器<br>[root@docker01 ~]# docker pull mysql：5.7<br>//下载mysql：5.7容器<br></code></pre></td></tr></table></figure><h2 id="编写一个docker-ccompose-yml">编写一个docker-ccompose.yml</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# mkdir wordpress<br>//创建wordpress测试文件<br>[root@docker01 ~]# cd wordpress/<br><br>[root@docker01 wordpress]# vim docker-compose.yml<br>//编写docker-compose.yml<br>version: "3.1"<br>services:<br>  wordpress:<br>    image: wordpress<br>    restart: always<br>    ports:<br>      - 8080:80<br>    environment:<br>      WORDPRESS_DB_HOST: db<br>      WORDPRESS_DB_USER: wordpress<br>      WORDPRESS_DB_PASSWORD: 123.com<br>      WORDPRESS_DB_NAME: wordpress<br>  db:<br>    image: mysql:5.7<br>    restart: always<br>    environment:<br>      MYSQL_DATABASE: wordpress<br>      MYSQL_USER: wordpress<br>      MYSQL_PASSWORD: 123.com<br>      MYSQL_ROOT_PASSWORD: 123.com<br></code></pre></td></tr></table></figure><h3 id="通过docker-compose-yml文件运行容器-3"><strong>通过docker-compose.yml文件<a href>运行</a>容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 wordpress]# docker-compose up -d<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223100139125.png" alt="image-20191223100139125"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 wordpress]# docker ps<br>//查看容器信息<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223100236380.png" alt="image-20191223100236380"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 wordpress]# docker logs  容器名称<br>//查看容器日志<br></code></pre></td></tr></table></figure><h3 id="浏览器访问一下-http-192-168-1-11-8080"><strong>浏览器访问一下</strong> <a href="http://192.168.1.11:8080/" target="_blank" rel="noopener">http://192.168.1.11:8080/</a></h3><p><strong>选择语言</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223104436304.png" alt="image-20191223104436304"></p><p><strong>安装wordpress</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223104604591.png" alt="image-20191223104604591"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223104630540.png" alt="image-20191223104630540"></p><p><strong>登陆wordpress</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223104649709.png" alt="image-20191223104649709"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191223105646408.png" alt="image-20191223105646408"></p><p><strong>登陆成功后，自己就可以进行设置了</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;strong&gt;docker三剑客之docker-compose&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;docker容器的编排工具: 解决相互有依赖关系的多个容器的管理。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker swarm集群</title>
    <link href="https://wsdlxgp.top/posts/ca45.html"/>
    <id>https://wsdlxgp.top/posts/ca45.html</id>
    <published>2020-06-06T15:29:15.682Z</published>
    <updated>2020-06-06T15:29:28.622Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker swarm</h1><blockquote><p><strong>docker swarm集群：三剑客之一</strong></p></blockquote><h2 id="一-实验环境">一. 实验环境</h2><table><thead><tr><th>主机</th><th>IP地址</th><th>服务</th></tr></thead><tbody><tr><td>docker01</td><td>192.168.1.11</td><td>swarm+overlay+webUI</td></tr><tr><td>docker02</td><td>192.168.1.13</td><td>docker</td></tr><tr><td>docker03</td><td>192.168.1.20</td><td>docker</td></tr></tbody></table><p><em><strong>三台主机都关闭防火墙，禁用selinux，修改主机名，时间同步，并添加域名解析。</strong></em></p><p><em><strong>docker版本必须是：v1.12版本开始（可使用docker version查看版本）</strong></em></p><h3 id="1-关闭防火墙，禁用selinux"><strong>1.关闭防火墙，禁用selinux</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# systemctl stop firewalld<br>[root@localhost ~]# hostnamectl set-hostname docker03<br>[root@localhost ~]# su -<br></code></pre></td></tr></table></figure><h3 id="2-时间同步"><strong>2.时间同步</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/localtime /etc/localtime.bk<br>cp /usr/share/zoneinfo/Asia/Shanghai/etc/localtime<br></code></pre></td></tr></table></figure><h2 id="3-修改主机名（三台都要）">3.修改主机名（三台都要）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# hostnamectl set-hostname docker01<br>[root@localhost ~]# su -<br></code></pre></td></tr></table></figure><h3 id="4-添加域名解析"><strong>4.添加域名解析</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# vim  /etc/hosts<br><br>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<br>192.168.1.11 docker01<br>192.168.1.13 docker02<br>192.168.1.20 docker03<br></code></pre></td></tr></table></figure><h2 id="二-swarm原理">二. swarm原理</h2><blockquote><p>**swarm：**作用运行docker engin的多个主机组成的集群</p><p>**node：**每一个docker engin都是一个node（节点），分为manager和worker。</p><p>**manager node：**负责执行容器的编排和集群的管理工作，保持并维护swarm处于期望的状态。swarm可以有多个manager node，他们会自动协调并选举一个leader执行编排任务。但相反，不能没有manager node。</p><p>**worker node：**接受并执行由manager node派发的任务，并且默认manager node也是一个worker node，不过可以将它设置为manager-only node，让他只负责编排和管理工作。</p><p>**service：**用来定义worker上执行的命令。</p></blockquote><h3 id="基本命令操作">基本命令操作</h3><blockquote><p>**docker swarm leave：**申请离开一个集群，之后查看节点状态会变成down，然后可通过manager node 将其删除<br>**docker node rm xxx：**删除某个节点</p><p><strong>docker swarm join-token [manager|worker]</strong>：生成令牌，可以是manager或worker身份。</p><p><strong>docker node demote（降级）</strong>：将swarm节点的为manager降级为worker</p><p><strong>docker node  promote（升级）</strong>：将swarm节点的work升级为manager</p><p>**docker node ls:**查看群集的信息（只可以在manager角色的主机上查看）</p><p><strong>docker service scale web05=6</strong>:容器的动态扩容及缩容</p><p><strong>docker service ps web01</strong>: 查看创建的容器运行在哪些节点</p><p><strong>docker service ls</strong>: 查看创建的服务</p><p><strong>docker swarm leave</strong>: 脱离这个群集</p><p><strong>docker node rm docker03</strong>: 在manager角色的服务器上移除docker03</p><p><strong>docker node update --availability drain docker01</strong>: 设置主机docker01以后不运行容器，但已经运行的容器并不会停止</p><p><strong>docker node update --label-add mem=max docker03</strong>: 更改docker03主机的标签为mem=max</p><p><strong>docker service update --replicas 8 --image 192.168.20.6:5000/lvjianzhao:v2.0 --container-label-add ‘node.labels.mem==max’ lvjianzhao05</strong>: 将服务升级为8个容器，并且指定在mem=max标签的主机上运行</p></blockquote><h2 id="三-docker01-初始化集群">三. docker01 初始化集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker swarm init --advertise-addr 192.168.1.11<br></code></pre></td></tr></table></figure><blockquote><p>**–advertise-addr：**指定与其它docker通信的地址。</p></blockquote><p><strong>上边返回的结果告诉我们：初始化成功，并且，如果想要添加work节点运行下面的命令：</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227100031387.png" alt="image-20191227100031387"></p><p><em><strong>注意：token令牌只有24小时的有效期</strong></em></p><p><strong>如果想要添加manager节点：运行下面命令</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227100101785.png" alt="image-20191227100101785"></p><h2 id="四-swarm集群的简单操作">四.swarm集群的简单操作</h2><h3 id="1-docker02和docker03以worker加入集群">1.docker02和docker03以worker加入集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker03 ~]# docker swarm join --token SWMTKN-1-5kxn9wloh7npnytklwbfciesr9di7uvu521gwnqm9h1n0pbokj-1e60wt0yr5583e4mzwbxnn3a8 192.168.1.11:2377<br></code></pre></td></tr></table></figure><h4 id="docker01查看集群">docker01查看集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227095739033.png" alt="image-20191227095739033"></p><p><em>注意：这里的”*****“代表的是当前所属的节点</em></p><h3 id="2-删除集群中节点">2.删除集群中节点</h3><h5 id="docker02和docker03申请离开一个集群"><strong>docker02和docker03申请离开一个集群</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker swarm leave<br></code></pre></td></tr></table></figure><h5 id="docker删除docker02和docker03节点"><strong>docker删除docker02和docker03节点</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node rm docker02 <br>[root@docker01 ~]# docker node rm docker03<br></code></pre></td></tr></table></figure><h5 id="docker01查看集群-2">docker01查看集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227101116537.png" alt="image-20191227101116537"></p><h3 id="3-docker02和docker03以manager加入集群">3.docker02和docker03以manager加入集群</h3><h4 id="docker01生成manager令牌">docker01生成manager令牌</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker swarm join-token manager<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227101524317.png" alt="image-20191227101524317"></p><h4 id="docker02和docker03加入集群">docker02和docker03加入集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker swarm join --token SWMTKN-1-5kxn9wloh7npnytklwbfciesr9di7uvu521gwnqm9h1n0pbokj-cz6hbyv9r5htyqwj5tfol65aa 192.168.1.11:2377<br></code></pre></td></tr></table></figure><h4 id="docker01查看集群-3">docker01查看集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227101645916.png" alt="image-20191227101645916"></p><h3 id="4-docker02和docker03降级">4.docker02和docker03降级</h3><h4 id="docker01（manager）把docker02和docker03降级成worker">docker01（manager）把docker02和docker03降级成worker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node  demote docker02<br>[root@docker01 ~]# docker node  demote docker03<br></code></pre></td></tr></table></figure><h4 id="查看集群">查看集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227102107194.png" alt="image-20191227102107194"></p><h2 id="五-部署docker-swarm集群网络">五.部署docker swarm集群网络</h2><h4 id="overlay-覆盖型网络">overlay:覆盖型网络</h4><p>overlay networks 管理Swarm中docker守护进程间的通信。可以将容器附加到一个或多个已存在的overlay网络上，使容器与容器之间能够通信；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker network create -d overlay --attachable docker<br>//attachable：这个参数必须要加，否则不能用于容器。<br></code></pre></td></tr></table></figure><p><strong>在创建网络的时候，我们并没有部署一个存储服务，比如consul，那是因为docker swarm自带存储。</strong></p><h5 id="docker01查看网络">docker01查看网络</h5><p><em><strong>但是会发现其他两台并不会发现此网络，需等基于此网络创建service服务就可以看到了</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker network ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227105017950.png" alt="image-20191227105017950"></p><h2 id="六-docker01部署一个图形化webUI界面">六. docker01部署一个图形化webUI界面</h2><h3 id="1-docker01-导入镜像">1.docker01 导入镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01~]# docker pull dockersamples/visualizer<br></code></pre></td></tr></table></figure><h3 id="2-基于镜像启动一台容器">2.基于镜像启动一台容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -d -p 8080:8080 -e HOST=192.168.1.100 -e PORT=8080 -v /var/run/docker.sock:/var/run/docker.sock --name visualiaer  dockersamples/visualizer<br></code></pre></td></tr></table></figure><h3 id="3-通过浏览器访问验证http-192-168-1-11-8080">3.通过浏览器访问验证http://192.168.1.11:8080/</h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227105857150.png" alt="image-20191227105857150"></p><p><em><strong>如果访问不到网页，需开启路由转发</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# echo net.ipv4.ip_forward = 1 &gt;&gt; /etc/sysctl.conf <br>[root@docker01 ~]# sysctl -p<br></code></pre></td></tr></table></figure><h2 id="七-创建service（服务）">七. 创建service（服务）</h2><h4 id="1-基于nginx容器创建一个service服务">1. 基于nginx容器创建一个service服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]#docker pull nginx<br>//下载nginx镜像（三台都要）<br>[root@docker01 ~]# docker service create --replicas 1 --network  docker --name web1 -p 80:80 nginx:latest <br>[root@docker01 ~]# docker service create --replicas 1 --network  docker --name web2 -p 80 nginx:latest<br></code></pre></td></tr></table></figure><p>//–replicas：副本数量</p><p>大概可以理解为一个副本等于一个容器</p><h4 id="2-查看创建的service服务">2. 查看创建的service服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227110938144.png" alt="image-20191227110938144"></p><h5 id="单独查看一个servicefuw">单独查看一个servicefuw</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service  ps web1<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227111603547.png" alt="image-20191227111603547"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service  ps web2<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227111617335.png" alt="image-20191227111617335"></p><h4 id="3-web界面查看">3. web界面查看</h4><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227111400323.png" alt="image-20191227111400323"></p><h4 id="4-基于nginx容器创建五个service服务">4. 基于nginx容器创建五个service服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service create --replicas 5 --network  docker --name web -p 80 nginx:latest<br></code></pre></td></tr></table></figure><h5 id="web界面查看">web界面查看</h5><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227111721046.png" alt="image-20191227111721046"></p><h4 id="5-挂起docker02">5. 挂起docker02</h4><h5 id="web查看（发现服务都分配到其他服务器了）">web查看（发现服务都分配到其他服务器了）</h5><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227112406099.png" alt="image-20191227112406099"></p><h4 id="6-恢复docker02">6. 恢复docker02</h4><h5 id="web查看（发现服务没有回到docker02）">web查看（发现服务没有回到docker02）</h5><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227112714567.png" alt="image-20191227112714567"></p><h2 id="八、实现docker容器的扩容及缩容">八、实现docker容器的扩容及缩容</h2><h3 id="1-删除web1和web2服务">1. 删除web1和web2服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service rm web1 web2<br></code></pre></td></tr></table></figure><h3 id="2-容器的扩容和缩减">2. 容器的扩容和缩减</h3><p>（1）扩容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service scale web=8<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227114842044.png" alt="image-20191227114842044"></p><p>（2）缩减</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service scale web=3<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227114821286.png" alt="image-20191227114821286"></p><h3 id="3-设置manager-node不参加工作">3.设置manager node不参加工作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node update docker01 --availability drain<br></code></pre></td></tr></table></figure><blockquote><p>设置主机docker01以后不运行容器，但已经运行的容器并不会停止<br>“–availability”选项后面共有三个选项可配置，如下：<br>“active”：工作；“pause”：暂时不工作；“drain”：永久性的不工作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227115018372.png" alt="image-20191227115018372"></p><h4 id="web界面查看-2">web界面查看</h4><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227115142868.png" alt="image-20191227115142868"></p><h2 id="九、docker-Swarm总结">九、docker Swarm总结</h2><blockquote><p>在我对docker Swarm群集进行一定了解后，得出的结论如下：</p><ul><li>参与群集的主机名一定不能冲突，并且可以互相解析对方的主机名；</li><li>集群内的所有节点可以都是manager角色，但是不可以都是worker角色；</li><li>当指定运行的镜像时，如果群集中的节点本地没有该镜像，那么它将会自动下载对应的镜像；</li><li>当群集正常工作时，若一个运行着容器的docker服务器发生宕机，那么，其所运行的所有容器，都将转移到其他正常运行的节点之上，而且，就算发生宕机的服务器恢复正常运行，也不会再接管之前运行的容器；</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Docker swarm&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;docker swarm集群：三剑客之一&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一-实验环境&quot;&gt;一. 实验环境&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker swarm版本回滚</title>
    <link href="https://wsdlxgp.top/posts/4890.html"/>
    <id>https://wsdlxgp.top/posts/4890.html</id>
    <published>2020-06-06T15:29:15.680Z</published>
    <updated>2020-06-06T15:29:28.628Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker swarm</h1><blockquote><p><strong>docker swarm集群：三剑客之一</strong></p></blockquote><h2 id="一-实验环境">一. 实验环境</h2><table><thead><tr><th>主机</th><th>IP地址</th><th>服务</th></tr></thead><tbody><tr><td>docker01</td><td>192.168.1.11</td><td>swarm+service+webUI+registry</td></tr><tr><td>docker02</td><td>192.168.1.13</td><td>docker</td></tr><tr><td>docker03</td><td>192.168.1.20</td><td>docker</td></tr></tbody></table><p><em><strong>三台主机都关闭防火墙，禁用selinux，修改主机名，时间同步，并添加域名解析。</strong></em></p><p><em><strong>docker版本必须是：v1.12版本开始（可使用docker version查看版本）</strong></em></p><h3 id="1-关闭防火墙，禁用selinux"><strong>1.关闭防火墙，禁用selinux</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# systemctl stop firewalld<br>[root@localhost ~]# hostnamectl set-hostname docker03<br>[root@localhost ~]# su -<br></code></pre></td></tr></table></figure><h3 id="2-时间同步"><strong>2.时间同步</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/localtime /etc/localtime.bk<br>cp /usr/share/zoneinfo/Asia/Shanghai/etc/localtime<br></code></pre></td></tr></table></figure><h2 id="3-修改主机名（三台都要）">3.修改主机名（三台都要）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# hostnamectl set-hostname docker01<br>[root@localhost ~]# su -<br></code></pre></td></tr></table></figure><h3 id="4-添加域名解析"><strong>4.添加域名解析</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# echo 192.168.1.11 docker01 &gt;&gt; /etc/hosts<br>[root@docker01 ~]# echo 192.168.1.13 docker02 &gt;&gt; /etc/hosts<br>[root@docker01 ~]# echo 192.168.1.20 docker03 &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><h2 id="三-docker01-初始化集群">三. docker01 初始化集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker swarm init --advertise-addr 192.168.1.11<br></code></pre></td></tr></table></figure><blockquote><p>**–advertise-addr：**指定与其它docker通信的地址。</p></blockquote><p><strong>上边返回的结果告诉我们：初始化成功，并且，如果想要添加work节点运行下面的命令：</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227100031387.png" alt="image-20191227100031387"></p><p><em><strong>注意：token令牌只有24小时的有效期</strong></em></p><p><strong>如果想要添加manager节点：运行下面命令</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227100101785.png" alt="image-20191227100101785"></p><h2 id="四，docker02和docker03以worker加入集群">四，docker02和docker03以worker加入集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker03 ~]# docker swarm join --token SWMTKN-1-5kxn9wloh7npnytklwbfciesr9di7uvu521gwnqm9h1n0pbokj-1e60wt0yr5583e4mzwbxnn3a8 192.168.1.11:2377<br></code></pre></td></tr></table></figure><h4 id="docker01查看集群">docker01查看集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227095739033.png" alt="image-20191227095739033"></p><p><em>注意：这里的”*****“代表的是当前所属的节点</em></p><h2 id="五-设置manager-node（docker01）不参加工作">五.设置manager node（docker01）不参加工作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node update docker01 --availability drain<br></code></pre></td></tr></table></figure><blockquote><p>设置主机docker01以后不运行容器，但已经运行的容器并不会停止<br>“–availability”选项后面共有三个选项可配置，如下：<br>“active”：工作；“pause”：暂时不工作；“drain”：永久性的不工作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker node ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227115018372.png" alt="image-20191227115018372"></p><h2 id="六-docker01部署一个图形化webUI界面">六. docker01部署一个图形化webUI界面</h2><h3 id="1-docker01-导入镜像">1.docker01 导入镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01~]# docker pull dockersamples/visualizer<br></code></pre></td></tr></table></figure><h3 id="2-基于镜像启动一台容器">2.基于镜像启动一台容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker run -d -p 8080:8080 -e HOST=192.168.1.100 -e PORT=8080 -v /var/run/docker.sock:/var/run/docker.sock --name visualiaer  dockersamples/visualizer<br></code></pre></td></tr></table></figure><h3 id="3-通过浏览器访问验证http-192-168-1-11-8080">3.通过浏览器访问验证http://192.168.1.11:8080/</h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191227105857150.png" alt="image-20191227105857150"></p><p><em><strong>如果访问不到网页，需开启路由转发</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# echo net.ipv4.ip_forward = 1 &gt;&gt; /etc/sysctl.conf <br>[root@docker01 ~]# sysctl -p<br></code></pre></td></tr></table></figure><h2 id="一-Docker01部署一个私有仓库">一. Docker01部署一个私有仓库</h2><h3 id="Docker01部署"><strong>Docker01部署</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">72 docker pull registry<br>//下载registry镜像<br><br>73 docker run -itd --name registry -p 5000:5000 --restart=always registry:latest<br>//基于registry镜像，启动一台容器<br><br>78 vim /usr/lib/systemd/system/docker.service #13行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry 192.168.1.11:5000 <br><br>80 systemctl daemon-reload<br>81 systemctl restart docker.service<br>//重启docker<br><br>76 docker tag busybox:latest 192.168.1.11:5000/busybox:v1 <br>//把容器重命名一个标签<br><br>77 docker ps<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/clip_image002.jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">78 vim /usr/lib/systemd/system/docker.service #13行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry 192.168.1.11:5000 <br><br><br>80 systemctl daemon-reload<br>81 systemctl restart docker.service<br>//重启docker<br><br>100 docker push 192.168.1.11:5000/busybox:v1<br>//上传容器到私有仓库<br></code></pre></td></tr></table></figure><h3 id="Docker02和docker03加入私有仓库"><strong>Docker02和docker03加入私有仓库</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">78 vim /usr/lib/systemd/system/docker.service #13行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry 192.168.1.11:5000  <br><br>80 systemctl daemon-reload<br>81 systemctl restart docker.service<br>//重启docker<br><br>99 docker pull 192.168.1.11/busybox:v1<br>//测试下载<br></code></pre></td></tr></table></figure><h2 id="2-自定义镜像">2. 自定义镜像</h2><h3 id="要求：基于httpd镜像，更改访问界面内容。镜像tag版本为v1，v2，v3，对应主机面内容为v1，xgp666、v2，xgp666、v2，xgp666">要求：基于httpd镜像，更改访问界面内容。镜像tag版本为v1，v2，v3，对应主机面内容为v1，xgp666、v2，xgp666、v2，xgp666</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker pull httpd<br>//下载httpd镜像<br></code></pre></td></tr></table></figure><p><strong>创建三个测试目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# mkdir &#123;v1,v2,v3&#125;<br>//创建测试目录<br></code></pre></td></tr></table></figure><p><strong>docker01，v1目录操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# cd v1<br>[root@docker01 v1]# echo v1,xgp666 &gt; index.html<br>//创建测试网页<br><br>[root@docker01 v1]# vim Dockerfile<br>//编写Dockerfile<br>FROM httpd<br>ADD index.html /c<br><br>[root@docker01 v1]# docker build -t 192.168.1.11:5000/httpd:v1 .<br>//基于dockerfile创建镜像<br><br>[root@docker01 v1]# docker push  192.168.1.11:5000/httpd:v1<br>//上传刚刚创建镜像到私有仓库<br></code></pre></td></tr></table></figure><p><strong>docker01，v2目录操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 v1]# cd ../v2<br>[root@docker01 v2]# echo v2,xgp666 &gt; index.html<br><br>[root@docker01 v2]# vim Dockerfile <br>//编写Dockerfile<br>FROM httpd<br>ADD index.html /usr/local/apache2/htdocs/index.html<br><br>[root@docker01 v2]# docker build -t 192.168.1.11:5000/httpd:v2 .<br>//基于dockerfile创建镜像<br><br>[root@docker01 v2]# docker push  192.168.1.11:5000/httpd:v2<br>//上传刚刚创建镜像到私有仓库<br></code></pre></td></tr></table></figure><p><strong>docker01，v3目录操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 v1]# cd ../v3<br>[root@docker01 v2]# echo v3,xgp666 &gt; index.html<br><br>[root@docker01 v2]# vim Dockerfile <br>//编写Dockerfile<br>FROM httpd<br>ADD index.html /usr/local/apache2/htdocs/index.html<br><br>[root@docker01 v2]# docker build -t 192.168.1.11:5000/httpd:v3 .<br>//基于dockerfile创建镜像<br><br>[root@docker01 v2]# docker push  192.168.1.11:5000/httpd:v3<br>//上传刚刚创建镜像到私有仓库<br></code></pre></td></tr></table></figure><h2 id="3-发布一个服务，基于上述镜像">3. 发布一个服务，基于上述镜像</h2><h3 id="要求-副本数量为3个。服务的名称为-bdqn">要求:副本数量为3个。服务的名称为: bdqn</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 v3]# docker service create --replicas 3 --name bdqn  -p 80:80 192.168.1.11:5000/httpd:v1<br></code></pre></td></tr></table></figure><p><strong>查看一下网络</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker03 ~]# docker network ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228101822794.png" alt="image-20191228101822794"></p><p><strong>默认的Ingress网络，包括创建的自定义overlay网络, 为后端真正为用户提供服务的container,提供了一个统一的入口。</strong></p><h3 id="查看一下创建的副本">查看一下创建的副本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 v3]# docker service ps bdqn<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228095854330.png" alt="image-20191228095854330"></p><h3 id="浏览器测试访问http-192-168-1-11-80-http-192-168-1-13-80-http-192-168-1-20-80">浏览器测试访问http://192.168.1.11:80,<a href="http://192.168.1.13:80" target="_blank" rel="noopener">http://192.168.1.13:80</a>,<a href="http://192.168.1.20:80" target="_blank" rel="noopener">http://192.168.1.20:80</a></h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228100217751.png" alt="image-20191228100217751"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228100237712.png" alt="image-20191228100237712"></p><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228100254812.png" alt="image-20191228100254812"></p><h3 id="修改docker02和docker03测试网页内容">修改docker02和docker03测试网页内容</h3><h3 id="docker02">docker02</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker02 ~]# docker exec -it 388f3bd9dd33 /bin/bash<br>root@388f3bd9dd33:/usr/local/apache2# cd htdocs/<br>root@388f3bd9dd33:/usr/local/apache2/htdocs# echo 123 &gt; index.html<br></code></pre></td></tr></table></figure><h3 id="docker03">docker03</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker03 ~]# docker exec -it 281454867fac /bin/bash<br>root@281454867fac:/usr/local/apache2# echo 321 &gt; htdocs/index.html<br></code></pre></td></tr></table></figure><h3 id="测试访问（每一台都会显示，会负载均衡）">测试访问（每一台都会显示，会负载均衡）</h3><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228101141172.png" alt="image-20191228101141172"></p><h2 id="要求-副本数量为3个。服务的名称为-test">要求:副本数量为3个。服务的名称为:test</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 v3]# docker service create --replicas 3 --name test  -p 80  192.168.1.11:5000/httpd:v1<br></code></pre></td></tr></table></figure><h3 id="查看创建的服务映射端口">查看创建的服务映射端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 v3]# docker service ls<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228102155589.png" alt></p><p><strong>默认映射端口30000-32767</strong></p><h2 id="4-服务的扩容与缩容">4. 服务的扩容与缩容</h2><h3 id="扩容">扩容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 v3]# docker service scale bdqn=6<br></code></pre></td></tr></table></figure><h3 id="缩容">缩容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 v3]# docker service scale bdqn=4<br></code></pre></td></tr></table></figure><p><em><strong>扩容与缩容直接直接通过scale进行设置副本数量。</strong></em></p><h2 id="5-服务的升级与回滚">5.服务的升级与回滚</h2><h3 id="（1）升级">（1）升级</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service update --image 192.168.1.11:5000/httpd:v2 bdqn<br>//把bdqn服务升级成v2的版本<br></code></pre></td></tr></table></figure><h4 id="测试访问一下">测试访问一下</h4><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228105637593.png" alt="image-20191228105637593"></p><h3 id="（2）平滑的更新">（2）平滑的更新</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service update --image 192.168.1.11:5000/httpd:v3  --update-parallelism 2 --update-delay 1m bdqn <br>//两个服务一起更新，然后，隔一分钟，继续更新<br></code></pre></td></tr></table></figure><blockquote><p>默认情况下, swarm-次只更新-个副本,并且两个副本之间没有等待时间，我们可以通过<br>–update-parallelism;设置并行更新的副本数量。<br>–update-delay：指定滚动更新的时间间隔。</p></blockquote><h4 id="测试访问一下-2">测试访问一下</h4><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228110448144.png" alt="image-20191228110448144"></p><h3 id="3-回滚操作">(3) 回滚操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker service  rollback bdqn<br></code></pre></td></tr></table></figure><p><strong>注意，docker swarm的回滚操作，默认只能回滚到上一-次操作的状态，并不能连续回滚到指定操作。</strong></p><h4 id="测试访问一下-3">测试访问一下</h4><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191228110849914.png" alt="image-20191228110849914"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Docker swarm&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;docker swarm集群：三剑客之一&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一-实验环境&quot;&gt;一. 实验环境&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AlertManager自定义邮件模板</title>
    <link href="https://wsdlxgp.top/posts/e914.html"/>
    <id>https://wsdlxgp.top/posts/e914.html</id>
    <published>2020-06-06T15:29:15.677Z</published>
    <updated>2020-06-06T15:29:28.620Z</updated>
    
    <content type="html"><![CDATA[<h1><strong>AlertManager自定义邮件模板</strong></h1><h2 id="创建模板目录"><strong>创建模板目录</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# cd prometheus<br>//进入之前创建的prometheus目录<br>[root@docker01 prometheus]# mkdir alertmanager-tmpl<br>//创建AlertManager模板目录<br></code></pre></td></tr></table></figure><h2 id="编写模板规则">编写模板规则</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 prometheus]# vim email.tmpl <br>&#123;&#123; define "email.from" &#125;&#125;2877364346@qq.com&#123;&#123; end &#125;&#125;<br>&#123;&#123; define "email.to" &#125;&#125;2877364346@qq.com&#123;&#123; end &#125;&#125;<br>&#123;&#123; define "email.to.html" &#125;&#125;<br>&#123;&#123; range .Alerts &#125;&#125;<br>=========start==========&lt;br&gt;<br>告警程序: prometheus_alert&lt;br&gt;<br>告警级别: &#123;&#123; .Labels.severity &#125;&#125; 级&lt;br&gt;<br>告警类型: &#123;&#123; .Labels.alertname &#125;&#125;&lt;br&gt;<br>故障主机: &#123;&#123; .Labels.instance &#125;&#125;&lt;br&gt;<br>告警主题: &#123;&#123; .Annotations.summary &#125;&#125;&lt;br&gt;<br>触发时间: &#123;&#123; .StartsAt.Format "2019-08-04 16:58:15" &#125;&#125; &lt;br&gt;<br>=========end==========&lt;br&gt;<br>&#123;&#123; end &#125;&#125;<br>&#123;&#123; end &#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="修改alertmanager的配置文件"><strong>修改alertmanager的配置文件</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# vim alertmanager.yml <br>global:<br>  resolve_timeout: 5m<br>  smtp_from: '2877364346@qq.com'<br>  smtp_smarthost: 'smtp.qq.com:465'<br>  smtp_auth_username: '2877364346@qq.com'<br>  smtp_auth_password: 'evjmqipqezlbdfij'<br>  smtp_require_tls: false<br>  smtp_hello: 'qq.com'<br>templates:                        #添加模板<br>  - '/etc/alertmanager-tmpl/*.tmpl'   #添加路径<br>    route:<br>      group_by: ['alertname']<br>      group_wait: 5s<br>      group_interval: 5s<br>      repeat_interval: 5m<br>      receiver: 'email'<br>    receivers:<br>- name: 'email'<br>  email_configs: <br>  - to: '&#123;&#123; template "email to" &#125;&#125;'   #修改<br>    html: '&#123;&#123; template "email.to.html" .&#125;&#125;'  #添加<br>    send_resolved: true  #删除<br>    inhibit_rules:<br>  - source_match:<br>    severity: 'critical'<br>    target_match:<br>      severity: 'warning'<br>    equal: ['alertname', 'dev', 'instance']<br></code></pre></td></tr></table></figure><h3 id="重新运行-alertmanager-容器"><strong>重新运行 alertmanager 容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker01 ~]# docker rm -f alertmanager<br>//删除alertmanager容器<br>[root@docker01 ~]# docker run -itd  --name alertmanager  -p 9093:9093 -v /root/alertmanager.yml:/etc/alertmanager/alertmanager.yml -v /root/prometheus/alertmanager-tmpl:/etc/alertmanager-tmpl  prom/alertmanager:latest<br>//运行一台新的alertmanager容器，记得挂载配置文件<br></code></pre></td></tr></table></figure><h4 id="挂起docker02">挂起docker02</h4><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191225110848591.png" alt="image-20191225110848591"></p><h4 id="收到邮件">收到邮件</h4><p><img src="http://xgp-cunchu.test.upcdn.net//k8s/image-20191225114011561.png" alt="image-20191225114011561"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;strong&gt;AlertManager自定义邮件模板&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;创建模板目录&quot;&gt;&lt;strong&gt;创建模板目录&lt;/strong&gt;&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>22 考试</title>
    <link href="https://wsdlxgp.top/posts/gssl.html"/>
    <id>https://wsdlxgp.top/posts/gssl.html</id>
    <published>2020-05-01T13:20:01.113Z</published>
    <updated>2020-06-06T14:58:44.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建镜像的方法">创建镜像的方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master xgp]# vim Dockerfile<br>FROM nginx<br>ADD index.htm /usr/share/nginx/html/<br>//创建Dockerfile<br><br>[root@master test]# echo "&lt;h1&gt;version 01 wsd&lt;/h1&gt;" &gt; index.html<br>[root@master test]# docker build -t 192.168.1.1:5000/nginx .<br>[root@master test]# echo "&lt;h1&gt;version 02 wsd&lt;/h1&gt;" &gt; index.html <br>[root@master test]# docker build -t 192.168.1.1:5000/nginx:v1.14 <br>[root@master test]# echo "&lt;h1&gt;version 03 wsd&lt;/h1&gt;" &gt; index.html .<br>[root@master test]# docker build -t 192.168.1.1:5000/nginx:v1.15 .<br>//创建不同index.html文件，生成测试镜像<br><br>[root@master test]# docker push 192.168.1.1:5000/nginx<br>[root@master test]# docker push 192.168.1.1:5000/nginx:v1.14<br>[root@master test]# docker push 192.168.1.1:5000/nginx:v1.15<br>//上传镜像<br></code></pre></td></tr></table></figure><h1>2) deployment名字为:nginx,保证运行3个Pod.service名字为：nginx-svc。映射到主机端口：31234.（10分）</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">docker</span> <span class="hljs-string">pull</span> <span class="hljs-string">nginx</span><br><span class="hljs-string">//下载nginx镜像</span><br><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deployment.yaml</span> <br><span class="hljs-string">//编写deployment和service的yaml文件</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31234</span><br></code></pre></td></tr></table></figure><h2 id="执行一下">执行一下</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f deployment.yaml</span><br></code></pre></td></tr></table></figure><h2 id="查看一下">查看一下</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p><img src="http://q9npprkue.bkt.clouddn.com/image-20200315100201329.png" alt="image-20200315100201329"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315100228967.png" alt="image-20200315100228967"></p><h2 id="访问一下http-192-168-1-21-31234">访问一下http://192.168.1.21:31234/</h2><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200315100419217.png" alt="image-20200315100419217"></p><h1>3) 共有3个版本，版本1对应image镜像为：nginx，版本2对应的image为：nginx:1.14.版本3对应的版本为:nginx:1.15.分别运行各版本，每个版本要有在浏览器的访问验证。（10分）</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># docker pull nginx</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># docker pull nginx:1.14</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># docker pull nginx:1.15</span><br>//下载所需镜像<br></code></pre></td></tr></table></figure><h2 id="编写deployment的yaml文件">编写deployment的yaml文件</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim banben1.yaml</span><br><span class="hljs-comment">//编写deployment和service的yaml文件</span><br><br><span class="hljs-symbol">apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> nginx-svc        <br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: nginx         <br><span class="hljs-symbol">        image:</span> nginx         <span class="hljs-meta">#更改一下镜像（1.14和1.15的）</span><br>[root@master yaml]<span class="hljs-meta"># vim banben2.yaml</span><br><span class="hljs-comment">//编写deployment和service的yaml文件</span><br><br><span class="hljs-symbol">apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx2<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> nginx-svc        <br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: nginx         <br><span class="hljs-symbol">        image:</span> nginx:<span class="hljs-number">1.14</span>        <span class="hljs-meta">#更改一下镜像（1.14和1.15的）</span><br>[root@master yaml]<span class="hljs-meta"># vim banben3.yaml</span><br><span class="hljs-comment">//编写deployment和service的yaml文件</span><br><br><span class="hljs-symbol">apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx3<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> nginx-svc        <br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: nginx         <br><span class="hljs-symbol">        image:</span> nginx:<span class="hljs-number">1.15</span>         <span class="hljs-meta">#更改一下镜像（1.14和1.15的）</span><br></code></pre></td></tr></table></figure><h2 id="编写service的yaml文件">编写service的yaml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">ngnix-svc.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-svc</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31235</span><br></code></pre></td></tr></table></figure><h3 id="执行一下（记录版本信息）">执行一下（记录版本信息）</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f banben1.yaml --record </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f banben2.yaml --record </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f banben3.yaml --record </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f ngnix-svc.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-2">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p>![image-20200315145551904](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315145551904.png)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure><p>![image-20200315142530998](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315142530998.png)</p><h3 id="访问一下-http-192-168-1-21-31235">访问一下 <a href="http://192.168.1.21:31235/" target="_blank" rel="noopener">http://192.168.1.21:31235/</a></h3><p>![image-20200315143242088](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315143242088.png)</p><h1>4)运行到版本3之后，进行回滚操作回滚到版本4.（5分）</h1><h2 id="查看记录的版本信息">查看记录的版本信息</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment">#  kubectl rollout history deployment nginx</span><br></code></pre></td></tr></table></figure><p>![image-20200315142738558](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315142738558.png)</p><h3 id="回滚到指定版本">回滚到指定版本</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl rollout undo deployment nginx --to-revision=<span class="hljs-number">4</span><br><span class="hljs-comment">//这里指定的是版本信息的编号</span><br></code></pre></td></tr></table></figure><h3 id="访问一下">访问一下</h3><p>![image-20200315143715792](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315143715792.png)</p><h1>5) 此时更改默认的3个Pod的访问界面,.版本1的访问界面内容为：考生名称+version:No1.版本2的访问界面:考生名称+version:No2,以此类推。（5分）</h1><h3 id="修改POD页面内容（三台不一样）">修改POD页面内容（三台不一样）</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl exec -it xgp-web<span class="hljs-number">-8</span>d5f9656f<span class="hljs-number">-8</span>z7d9 /bin/bash<br><span class="hljs-comment">//根据pod名称进入pod之中</span><br></code></pre></td></tr></table></figure><h3 id="进入容器后修改页面内容">进入容器后修改页面内容</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1</span><br>[root<span class="hljs-symbol">@master</span> yaml]<span class="hljs-meta"># kubectl exec -it nginx-d6c5c85cb-8vcvt /bin/bash</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb<span class="hljs-number">-8</span>vcvt:/<span class="hljs-meta"># echo <span class="hljs-string">"&lt;h1&gt;version 01 wushaodong&lt;/h1&gt;"</span>   &gt; /usr/share/nginx/html/index.html </span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb<span class="hljs-number">-8</span>vcvt:/<span class="hljs-meta"># exit</span><br><br><span class="hljs-number">2</span><br>[root<span class="hljs-symbol">@master</span> yaml]<span class="hljs-meta"># kubectl exec -it nginx-d6c5c85cb-bxvvt /bin/bash</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb-bxvvt:/<span class="hljs-meta"># echo <span class="hljs-string">"&lt;h1&gt;version 02 wushaodong&lt;/h1&gt;"</span>   &gt; /usr/share/nginx/html/index.html</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb-bxvvt:/<span class="hljs-meta"># exit</span><br><br><span class="hljs-number">3</span><br>[root<span class="hljs-symbol">@master</span> yaml]<span class="hljs-meta"># kubectl exec -it nginx-d6c5c85cb-lhlz9 /bin/bash</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb-lhlz9:/<span class="hljs-meta"># echo <span class="hljs-string">"&lt;h1&gt;version 03 wushaodong&lt;/h1&gt;"</span>   &gt; /usr/share/nginx/html/index.html</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb-lhlz9:/<span class="hljs-meta"># exit</span><br></code></pre></td></tr></table></figure><h1>6) 验证界面是否会会有轮训效果，并加以分析论述。（5分）</h1><p><em><strong>不要在浏览器里测试轮询，有缓存</strong></em></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">31235</span><br></code></pre></td></tr></table></figure><p>![image-20200315150130146](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315150130146.png)</p><p><strong>答：会有轮询的效果，kubernetes 内部的负载均衡是通过 iptables 的 probability 特性来做到的，kube-proxy通过iptables 将访问 Service 的流量转发到后端 Pod，而且使用类似轮询的负载均衡策略。</strong></p><h1>7) 创建一个NFS PV，NFS共享目录为：考生名称。PV名称为：new-pv。创建一个PVC，名称为new-pvc。单独创建一个pod，使用new-pv，运行之后，验证nfs是否使用成功。（10分）</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# yum</span> -y install nfs-utils rpcbind<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># mkdir /wushaodong</span><br>//创建指定名称的共享目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># echo "/wushaodong *(rw,sync,no_root_squash)" &gt; /etc/exports</span><br>//编写共享目录的权限<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  systemctl</span> <span class="hljs-literal">start</span> nfs-server<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  systemctl</span> <span class="hljs-literal">start</span> rpcbind<br>//启动服务<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># showmount -e</span><br>//测试一下<br></code></pre></td></tr></table></figure><p>![image-20200315152012176](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315152012176.png)</p><h2 id="1、创建一个NFS-PV的yaml文件">1、创建一个NFS PV的yaml文件</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim new-pv.yaml</span><br><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> new-xgp<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Recycle<br><span class="hljs-symbol">  storageClassName:</span> nfs<br><span class="hljs-symbol">  nfs:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/wushaodong/</span>new-pv<br><span class="hljs-symbol">    server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br><br>[root@master yaml]<span class="hljs-meta"># mkdir /wushaodong/new-pv</span><br><span class="hljs-comment">//创建指定目录</span><br></code></pre></td></tr></table></figure><h3 id="执行一下-2">执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply  -f  new-pv.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-3">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure><p>![image-20200315152639218](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315152639218.png)</p><h2 id="2、创建一个PVC的yaml文件">2、创建一个PVC的yaml文件</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim new-pvc.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> new-pvc<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  accessModes:</span>            <span class="hljs-meta">#要和pv的一直否则关联不成功</span><br>  - ReadWriteOnce<br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">  storageClassName:</span> nfs   <span class="hljs-meta">#要和pv的一直否则关联不成功</span><br></code></pre></td></tr></table></figure><h3 id="执行一下-3">执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply  -f  new-pvc.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-4">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pvc</span><br></code></pre></td></tr></table></figure><p>![image-20200315153049267](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315153049267.png)</p><h2 id="3、单独创建一个pod，使用new-pv">3、单独创建一个pod，使用new-pv</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-pod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/wushaodong</span>  <span class="hljs-comment">#容器的被挂载目录</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">volumedata</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volumedata</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">new-pvc</span><br></code></pre></td></tr></table></figure><h3 id="执行一下-4">执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f pod.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-5">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p>![image-20200315153837882](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315153837882.png)</p><h2 id="4、测试一下">4、测试一下</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[root@master yaml]<span class="hljs-meta"># kubectl exec -it xgp-pod /bin/sh</span><br><span class="hljs-comment">//进入pod</span><br><span class="hljs-meta">#  echo <span class="hljs-meta-string">"xgpIwsd"</span> &gt; /wushaodong/xgp.txt</span><br><span class="hljs-comment">//添加内容到挂载目录</span><br><span class="hljs-meta"># exit</span><br></code></pre></td></tr></table></figure><h3 id="查看一下，挂载目录是否有添加内容">查看一下，挂载目录是否有添加内容</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cat /wushaodong/new-pv/xgp.txt</span><br></code></pre></td></tr></table></figure><p>![image-20200315154239587](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315154239587.png)</p><h1>8）请简述k8s集群中，master节点有哪些组件，node节点有哪些组件，作用分别有什么作用，各组件又是怎么交互的。（5分）</h1><h2 id="master节点">master节点</h2><p><strong>1. API server[资源操作入口]</strong>：是k8s集群的前端接口，各种各样客户端工具以及k8s的其他组件可以通过它管理k8s集群的各种资源。它提供了HTTP/HTTPS RESTful API,即K8S API。</p><blockquote><ul><li>提供了资源对象的唯一操作入口，其他所有组件都必须通过它提供的API来操作资源数据，只有API Server与存储通信，其他模块通过API Server访问集群状态。</li></ul><p>第一，是为了保证集群状态访问的安全。</p><p>第二，是为了隔离集群状态访问的方式和后端存储实现的方式：API Server是状态访问的方式，不会因为后端存储技术etcd的改变而改变。</p><ul><li>作为kubernetes系统的入口，封装了核心对象的增删改查操作，以<a href="https://www.centos.bz/tag/restful/" target="_blank" rel="noopener">RESTFul</a>接口方式提供给外部客户和内部组件调用。对相关的资源数据“全量查询”+“变化监听”，实时完成相关的业务功能。</li></ul></blockquote><p><strong>2. Scheduler[集群分发调度器]</strong>：负责决定将Pod放在哪个Node上运行。在调度时，会充分考虑集群的拓扑结构，当前各个节点的负载情况，以及应对高可用、性能、数据亲和性和需求。</p><blockquote><p>1.Scheduler收集和分析当前Kubernetes集群中所有Minion节点的资源(内存、CPU)负载情况，然后依此分发新建的Pod到Kubernetes集群中可用的节点。</p><p>2.实时监测Kubernetes集群中未分发和已分发的所有运行的Pod。</p><p>3.Scheduler也监测Minion节点信息，由于会频繁查找Minion节点，Scheduler会缓存一份最新的信息在本地。</p><p>4.最后，Scheduler在分发Pod到指定的Minion节点后，会把Pod相关的信息Binding写回API Server。</p></blockquote><p><strong>4. Controller Manager[内部管理控制中心]</strong>：负责管理集群的各种资源，保证资源处于预期的状态。它由多种Controller组成，包括Replication Controller、Endpoints Controller、Namespace Controller、Serviceaccounts Controller等。</p><blockquote><p>实现集群故障检测和恢复的自动化工作，负责执行各种控制器，主要有：</p><p>1.endpoint-controller：定期关联<a href="https://www.centos.bz/tag/service/" target="_blank" rel="noopener">service</a>和pod(关联信息由endpoint对象维护)，保证service到pod的映射总是最新的。</p><p>2.replication-controller：定期关联replicationController和pod，保证replicationController定义的复制数量与实际运行pod的数量总是一致的。</p></blockquote><p>**5. Etcd：**负责保存k8s集群的配置信息和各种资源的状态信息。当数据发生变化时，etcd会快速的通知k8s相关组件。<a href>（第三方组件）它有可替换方案。Consul、zookeeper</a></p><p><strong>6. Pod:</strong> k8s集群的最小组成单位。一个Pod内，可以运行一个或多个容器。大多数情况下，一个Pod内只有一个Container容器。</p><p>**7. Flanner：**是k8s集群网络，可以保证Pod的跨主机通信。也有替换方案。</p><h2 id="Node节点">Node节点</h2><p><strong>Kubelet[节点上的Pod管家]</strong>：它是Node的agent(代理)，当Scheduler确定某 个Node上运行Pod之后，会将Pod的具体配置信息发送给该节点的kubelet,kubelet会根据这些信息创建和运行容器，并向Master报告运行状态。</p><blockquote><ul><li>负责Node节点上pod的创建、修改、监控、删除等全生命周期的管理</li><li>定时上报本Node的状态信息给API Server。</li><li>kubelet是Master API Server和Minion之间的桥梁，接收Master API Server分配给它的commands和work，与持久性键值存储etcd、file、server和http进行交互，读取配置信息。</li><li>具体的工作如下：</li></ul><p>设置容器的环境变量、给容器绑定<a href="https://www.centos.bz/tag/volume/" target="_blank" rel="noopener">Volume</a>、给容器绑定Port、根据指定的Pod运行一个单一容器、给指定的Pod创建network 容器。</p><p>同步Pod的状态、同步Pod的状态、从<a href="https://www.centos.bz/tag/cadvisor/" target="_blank" rel="noopener">cAdvisor</a>获取<a href="https://www.centos.bz/tag/container/" target="_blank" rel="noopener">Container</a> info、 pod info、 root info、 <a href="https://www.centos.bz/tag/machine/" target="_blank" rel="noopener">machine</a> info。</p><p>在容器中运行命令、杀死容器、删除Pod的所有容器。</p></blockquote><p>**kube-proxy[负载均衡、路由转发]:**负责将访问service的TCP/UDP数据流转发到后端的容器。如果有多个<br>副本，kube-proxy会实现负载均衡。</p><blockquote><ul><li>Proxy是为了解决外部网络能够访问跨机器集群中容器提供的应用服务而设计的，运行在每个Node上。Proxy提供TCP/UDP sockets的proxy，每创建一种Service，Proxy主要从etcd获取Services和Endpoints的配置信息（也可以从file获取），然后根据配置信息在Minion上启动一个Proxy的进程并监听相应的服务端口，当外部请求发生时，Proxy会根据Load Balancer将请求分发到后端正确的容器处理。</li><li>Proxy不但解决了同一主宿机相同服务端口冲突的问题，还提供了Service转发服务端口对外提供服务的能力，Proxy后端使用了随机、轮循负载均衡算法。</li></ul></blockquote><h2 id="各个组件的作用以及架构工作流程">各个组件的作用以及架构工作流程:</h2><p><strong>1) kubectl发送部署 请求到API server</strong><br><strong>2) APIserver通知Controller Manager创建一个Deployment资源。</strong><br><strong>3) Scheduler执行调度任务,将两个副本Pod分发到node01和node02. 上。</strong><br><strong>4) node01和node02, 上的kubelet在各自节点上创建并运行Pod。</strong></p><h3 id="补充">补充</h3><p><strong>1.应用的配置和当前的状态信息保存在etcd中，执行kubectl get pod时API server会从etcd中读取这些数据。</strong></p><p><strong>2.flannel会为每个Pod分配一个IP。 但此时没有创建Service资源，目前kube-proxy还没有参与进来。</strong></p><h1>9）部署一个dashboard。（5分）</h1><h2 id="1、下载所需yaml文件和镜像">1、下载所需yaml文件和镜像</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># docker pull kubernetesui/dashboard:v2.0.0-rc5</span><br></code></pre></td></tr></table></figure><h2 id="2、修改-recommended-yaml">2、修改 recommended.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">https]#vim</span> <span class="hljs-string">recommended.yaml</span> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>            <span class="hljs-comment">#添加40</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><h3 id="执行一下-5">执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f recommended.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-6">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc -n kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><p>![image-20200315154708443](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315154708443.png)</p><h2 id="3、浏览器访问https-192-168-1-21-30949">3、浏览器访问https://192.168.1.21:30949/</h2><p><strong>PS:如果是使用的旧版本的dashboard, 使用Google浏览器登录，可能是不成功的，需要换成其他的浏览器，比如:火狐。</strong></p><p>![image-20200315154859800](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315154859800.png)</p><p>![image-20200315154929279](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315154929279.png)</p><h2 id="4、基于token的方法登录dashboard">4、基于token的方法登录dashboard</h2><h3 id="1-创建一个dashboard的管理用户">&lt;1&gt;创建一个dashboard的管理用户</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl create serviceaccount dashboard-admin -n kube-system</span><br></code></pre></td></tr></table></figure><h3 id="2-绑定用户为集群管理用户">&lt;2&gt;绑定用户为集群管理用户</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br></code></pre></td></tr></table></figure><h3 id="3-获取Token">&lt;3&gt;获取Token</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get secrets -n kube-system | grep dashboard-admin</span><br>//先得到Token的名称<br></code></pre></td></tr></table></figure><p>![image-20200315155029875](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315155029875.png)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl describe secrets -n kube-system  dashboard-admin-token-j874n</span><br>//查看上述得到的secret资源的详细信息，会得到token<br></code></pre></td></tr></table></figure><p>![image-20200315155147297](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315155147297.png)</p><h3 id="4-在浏览器上使用token登录。">&lt;4&gt;在浏览器上使用token登录。</h3><p>![image-20200315155307433](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315155307433.png)</p><p>![image-20200315155326746](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315155326746.png)</p><p><strong>成功界面</strong></p><h1>10）使用helm的方式，部署mysql服务，要求使用storageclass作为持久化存储，服务运行之后，进入数据库，创建一个test库，库中一张test表，内容为： 9527.</h1><h1>然后模拟数据库Pod失败，待Pod重启后，查看对应数据是否还存在？（10分）</h1><h2 id="1、安装部署helm工具">1、安装部署helm工具</h2><h3 id="（1）下载helm的包">（1）下载helm的包</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#docker</span> pull gcr.io/kubernetes-helm/tiller:v2.<span class="hljs-number">14.3</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# wget</span> https://get.helm.sh/helm-v2.<span class="hljs-number">14.3</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="（2）把helm包的命令，复制到本地">（2）把helm包的命令，复制到本地</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># mv linux-amd64/helm /usr/local/bin/</span><br>//移动命令目录到/usr/local/bin/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># chmod +x /usr/local/bin/helm </span><br>//给予执行权限<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm help</span><br>//验证是否安装成功<br></code></pre></td></tr></table></figure><h3 id="（3）设置命令自动补全">（3）设置命令自动补全</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment">#  echo 'source &lt;(helm completion bash)' &gt;&gt; /etc/profile</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># . /etc/profile</span><br>//刷新一下<br></code></pre></td></tr></table></figure><h2 id="2、安装Tiller-server（服务端，需要创建授权用户）">2、安装Tiller server（服务端，需要创建授权用户）</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">tiller-rbac.yaml</span>   <span class="hljs-comment">#创建授权用户</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><h4 id="执行一下-6">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f tiller-rbac.yaml<br></code></pre></td></tr></table></figure><h3 id="（1）Tiller-server的环境初始化">（1）Tiller server的环境初始化</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm init  --service-account=tiller</span><br>//helm的服务端就是Tiller（因为是访问外国的网站，可能需要多次执行）<br></code></pre></td></tr></table></figure><h4 id="查看一下-7">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># kubectl get deployment. -n kube-system</span><br></code></pre></td></tr></table></figure><p>![image-20200315163043816](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315163043816.png)</p><p><strong>现在发现没有开启，那是因为默认下载的Google的镜像，下载不下来</strong></p><h3 id="（2）设置镜像源改为阿里云的">（2）设置镜像源改为阿里云的</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-8">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm version</span><br></code></pre></td></tr></table></figure><p>![image-20200315163313031](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315163313031.png)</p><h2 id="3、基于NFS服务，创建共享。">3、基于NFS服务，创建共享。</h2><p><strong>因为上面已经做过了，所以现在只需创建目录和设置权限即可</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># mkdir /xgpwsd</span><br>//创建目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># echo '/xgpwsd *(rw,sync,no_root_squash)' &gt;&gt; /etc/exports</span><br>//设置共享目录权限<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># systemctl restart nfs-server</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># systemctl restart rpcbind</span><br>//重启nfs服务<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># showmount -e</span><br>//测试一下<br></code></pre></td></tr></table></figure><p>![image-20200315164157425](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315164157425.png)</p><h2 id="4、创建pv">4、创建pv</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master xgp]<span class="hljs-meta"># vim nfs-pv1.yml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mysqlpv<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">8</span>Gi<br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Recycle<br><span class="hljs-symbol">  nfs:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/xgpwsd/</span>xgp<br><span class="hljs-symbol">    server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>[root@master xgp]<span class="hljs-meta"># mkdir /xgpwsd/xgp</span><br><span class="hljs-comment">//创建所需目录</span><br></code></pre></td></tr></table></figure><h4 id="执行一下-7">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl apply -f nfs-pv1.yml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-9">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure><p>![image-20200315182950429](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315182950429.png)</p><h2 id="5、创建StorageClass资源对象。">5、创建StorageClass资源对象。</h2><h3 id="（1）创建rbac权限。">（1）创建rbac权限。</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim rbac.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner<br><span class="hljs-symbol">  namespace:</span> default<br>---<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">rules:</span><br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumes"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"delete"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumeclaims"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"storage.k8s.io"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"storageclasses"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"events"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"update"</span>, <span class="hljs-string">"patch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"services"</span>, <span class="hljs-string">"endpoints"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>,<span class="hljs-string">"create"</span>,<span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>,<span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"extensions"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"podsecuritypolicies"</span>]<br><span class="hljs-symbol">      resourceNames:</span> [<span class="hljs-string">"nfs-provisioner"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"use"</span>]<br>---<br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> run-nfs-provisioner<br><span class="hljs-symbol">subjects:</span><br>  - kind: ServiceAccount<br><span class="hljs-symbol">    name:</span> nfs-provisioner<br><span class="hljs-symbol">    namespace:</span> default        <span class="hljs-meta">#必写字段</span><br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h4 id="执行一下-8">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f rbac.yaml</span><br></code></pre></td></tr></table></figure><h3 id="（2）创建Deployment资源对象，用Pod代替-真正的NFS服务。">（2）创建Deployment资源对象，用Pod代替 真正的NFS服务。</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nfs-deployment.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">nfs-provisioner</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span>  <span class="hljs-string">/persistentvolumes</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">xgp</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/xgpwsd/wsd</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/xgpwsd/wsd</span><br>            <br><span class="hljs-string">[root@master</span> <span class="hljs-string">heml]#</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">/xgpwsd/wsd</span><br><span class="hljs-string">//创建指定目录</span><br></code></pre></td></tr></table></figure><h4 id="执行一下-9">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-deployment.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-10">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p>![image-20200315164706266](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315164706266.png)</p><h3 id="（3）创建storageclass的yaml文件">（3）创建storageclass的yaml文件</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim xgp-storageclass.yaml </span><br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> xgp-nfs<br><span class="hljs-symbol">provisioner:</span> xgp  <span class="hljs-meta">#通过provisioner字段关联到上述Deploy</span><br><span class="hljs-symbol">reclaimPolicy:</span> Retain<br></code></pre></td></tr></table></figure><h4 id="执行一下-10">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f xgp-storageclass.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-11">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get sc</span><br></code></pre></td></tr></table></figure><p>![image-20200315164758857](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315164758857.png)</p><h2 id="6、创建一个mysql服务">6、创建一个mysql服务</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">14</span><br>//下载所需镜像<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># helm fetch stable/mysql</span><br>//直接下载stable/mysql的chart包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># tar -zxf mysql-0.3.5.tgz </span><br>//解压mysql包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cd mysql/</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># vim values.yaml </span><br>//修改values.yaml文件，添加storageClass存储卷<br></code></pre></td></tr></table></figure><p>![image-20200315173613775](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315173613775.png)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@master mysql]# helm install stable/mysql -n xgp-mysql --<span class="hljs-keyword">set</span> mysqlRootPassword=<span class="hljs-number">123</span>.<span class="hljs-keyword">com</span> -<span class="hljs-keyword">f</span> <span class="hljs-built_in">values</span>.yaml <br>//基于<span class="hljs-built_in">values</span>.yaml和stable/mysql开启一个密码为<span class="hljs-number">123</span>.<span class="hljs-keyword">com</span>的mysqlpod<br></code></pre></td></tr></table></figure><h3 id="查看一下-12">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure><p>![image-20200315173526818](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315173526818.png)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get pod -o wide</span><br></code></pre></td></tr></table></figure><p>![image-20200315173702896](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315173702896.png)</p><h2 id="7、进入mysql数据库，创建一个test库，库中一张test表，内容为：-9527。">7、进入mysql数据库，创建一个test库，库中一张test表，内容为： 9527。</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl exec -it bdqn-mysql-mysql-7b89c7b99-8ff2r -- mysql -u root -p123.com</span><br></code></pre></td></tr></table></figure><h3 id="创建数据库">创建数据库</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> test;<br></code></pre></td></tr></table></figure><h3 id="切换数据库">切换数据库</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">mysql&gt; <span class="hljs-keyword">use</span> <span class="hljs-title">test</span>;<br></code></pre></td></tr></table></figure><h3 id="创建表">创建表</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">mysql&gt; create <span class="hljs-keyword">table</span> test( id <span class="hljs-comment">int(4))</span>；<br></code></pre></td></tr></table></figure><h3 id="在表中插入数据">在表中插入数据</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">insert</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">9527</span>);<br></code></pre></td></tr></table></figure><h3 id="查看表">查看表</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test;<br></code></pre></td></tr></table></figure><p>![image-20200315181155502](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315181155502.png)</p><h2 id="8、模拟数据库Pod失败，待Pod重启后，查看对应数据是否还存在？">8、模拟数据库Pod失败，待Pod重启后，查看对应数据是否还存在？</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master mysql]# kubectl delete pod xgp-mysql-mysql<span class="hljs-number">-67</span>c6fb5f9<span class="hljs-number">-4</span>h4kz<br><span class="hljs-comment">//删除这个pod让他重新生成</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p>![image-20200315181626553](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315181626553.png)</p><h3 id="进入新的pod查看">进入新的pod查看</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl exec -it xgp-mysql-mysql-67c6fb5f9-k4c29 -- mysql -u root -p123.com</span><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; use test;<br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>mysql&gt; select * from test;<br><span class="hljs-code">+------+</span><br>| id   |<br><span class="hljs-code">+------+</span><br>| 9527 |<br><span class="hljs-code">+------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>![image-20200315181720939](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315181720939.png)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建镜像的方法&quot;&gt;创建镜像的方法&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>21 k8s的持续集成</title>
    <link href="https://wsdlxgp.top/posts/c0fd.html"/>
    <id>https://wsdlxgp.top/posts/c0fd.html</id>
    <published>2020-05-01T13:20:01.104Z</published>
    <updated>2020-06-06T14:58:16.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境">实验环境</h2><table><thead><tr><th>IP</th><th>主机名称</th><th>服务</th></tr></thead><tbody><tr><td><strong>192.168.1.21</strong></td><td><strong>master</strong></td><td><strong>k8s</strong></td></tr><tr><td><strong>192.168.1.22</strong></td><td><strong>node01</strong></td><td><strong>k8s</strong></td></tr><tr><td><strong>192.168.1.10</strong></td><td><strong>git</strong></td><td><strong>gitlab</strong></td></tr><tr><td><strong>192.168.1.13</strong></td><td><strong>jenkins</strong></td><td><strong>jenkins</strong></td></tr></tbody></table><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309134708695.png" alt="image-20200309134708695"></p><p><strong>总体流程：</strong></p><ul><li><strong>在开发机开发代码后提交到gitlab</strong></li><li><strong>之后通过webhook插件触发jenkins进行构建，jenkins将代码打成docker镜像，push到docker-registry</strong></li><li><strong>之后将在k8s-master上执行rc、service的创建，进而创建Pod，从私服拉取镜像，根据该镜像启动容器</strong></li></ul><p><strong>应用构建和发布流程说明。</strong></p><ol><li><strong>用户向Gitlab提交代码，代码中必须包含<code>Dockerfile</code></strong></li><li><strong>将代码提交到远程仓库</strong></li><li><strong>用户在发布应用时需要填写git仓库地址和分支、服务类型、服务名称、资源数量、实例个数，确定后触发Jenkins自动构建</strong></li><li><strong>Jenkins的CI流水线自动编译代码并打包成docker镜像推送到Harbor镜像仓库</strong></li><li><strong>Jenkins的CI流水线中包括了自定义脚本，根据我们已准备好的kubernetes的YAML模板，将其中的变量替换成用户输入的选项</strong></li><li><strong>生成应用的kubernetes YAML配置文件</strong></li><li><strong>更新Ingress的配置，根据新部署的应用的名称，在ingress的配置文件中增加一条路由信息</strong></li><li><strong>更新PowerDNS，向其中插入一条DNS记录，IP地址是边缘节点的IP地址。关于边缘节点，请查看<a href="https://jimmysong.io/kubernetes-handbook/practice/edge-node-configuration.html" target="_blank" rel="noopener">边缘节点配置</a></strong></li><li><strong>Jenkins调用kubernetes的API，部署应用</strong></li></ol><h1>一、前期工作</h1><h2 id="1、先验证k8s集群（1-21和1-22）">1、先验证k8s集群（1.21和1.22）</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get nodes<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306083959440.png" alt="image-20200306083959440"></p><h2 id="2、master部署私有仓库">2、master部署私有仓库</h2><h3 id="Docker01部署"><strong>Docker01部署</strong></h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">72</span> docker pull registry<br><span class="hljs-comment">//下载registry镜像</span><br><br><span class="hljs-number">73</span> docker run -itd --name registry -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> --restart=always registry:latest<br><span class="hljs-comment">//基于registry镜像，启动一台容器</span><br><br><span class="hljs-number">78</span> vim /usr/lib/systemd/system/docker.service #<span class="hljs-number">13</span>行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span> <br><br><span class="hljs-number">80</span> systemctl daemon-reload<br><span class="hljs-number">81</span> systemctl restart docker.service<br><span class="hljs-comment">//重启docker</span><br><br><span class="hljs-number">76</span> docker tag httpd:latest <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>/web:v1 <br><span class="hljs-number">76</span> docker tag httpd:latest <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>/web:v2<br><span class="hljs-comment">//把容器重命名一个标签</span><br><br><span class="hljs-number">77</span> docker ps<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309101144205.png" alt="image-20200309101144205"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">78</span> vim /usr/lib/systemd/system/docker.service #<span class="hljs-number">13</span>行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span> <br><br><br><span class="hljs-number">80</span> systemctl daemon-reload<br><span class="hljs-number">81</span> systemctl restart docker.service<br><span class="hljs-comment">//重启docker</span><br><br><span class="hljs-number">100</span> docker push <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>/web:v1<br><span class="hljs-number">100</span> docker push <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>/web:v2<br><span class="hljs-comment">//上传容器到私有仓库</span><br></code></pre></td></tr></table></figure><h3 id="Docker02和docker03加入私有仓库"><strong>Docker02和docker03加入私有仓库</strong></h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">78</span> vim /usr/lib/systemd/system/docker.service #<span class="hljs-number">13</span>行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>  <br><br><span class="hljs-number">80</span> systemctl daemon-reload<br><span class="hljs-number">81</span> systemctl restart docker.service<br><span class="hljs-comment">//重启docker</span><br><br><span class="hljs-number">99</span> docker pull <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web:v1<br><span class="hljs-comment">//测试下载</span><br></code></pre></td></tr></table></figure><h2 id="3、然后重要的地方到了，建立-yaml配置文件让kubernetes自己控制容器集群。"><strong>3、然后重要的地方到了，建立 yaml配置文件让kubernetes自己控制容器集群。</strong></h2><p><em><strong>用来模拟我们部署的服务</strong></em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">app]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span>     <span class="hljs-comment">#改为本地仓库下载</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>执行一下</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl apply -f deploy.yaml</span><br></code></pre></td></tr></table></figure><p>查看一下</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306085507559.png" alt="image-20200306085507559"></p><h3 id="可是容器的ip只能在容器本机上访问，集群内的其他主机和集群外的主机都没办法访问，这个时候就需要将容器的端口映射到服务器上的端口了，所以需要做一个service的模板。service-模板可以将容器的端口映射到服务器的端口上，并且可以固定映射在服务器上的端口。"><strong>可是容器的ip只能在容器本机上访问，集群内的其他主机和集群外的主机都没办法访问，这个时候就需要将容器的端口映射到服务器上的端口了，所以需要做一个service的模板。service 模板可以将容器的端口映射到服务器的端口上，并且可以固定映射在服务器上的端口。</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">app]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy-svc.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31234</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br></code></pre></td></tr></table></figure><p><strong>执行一下</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl apply -f deploy-svc.yaml</span><br></code></pre></td></tr></table></figure><p><strong>查看一下</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306085725863.png" alt="image-20200306085725863"></p><p><strong>访问一下http://192.168.1.21:31234/</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306085846077.png" alt="image-20200306085846077"></p><h3 id="《ok-kubernetes-完毕，-开始配置-jenkins-gitlab联动》"><strong>《ok kubernetes</strong> <strong>完毕， 开始配置 jenkins+gitlab联动》</strong></h3><h3 id="4、git和jenkins加入私有仓库">4、git和jenkins加入私有仓库</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-number">78</span> vim /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">systemd</span>/<span class="hljs-title">system</span>/<span class="hljs-title">docker</span>.<span class="hljs-title">service</span> <span class="hljs-comment">#13行修改</span></span><br>ExecStart=<span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/dockerd --insecure-registry 192.168.1.11:5000  </span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">80 systemctl daemon-reload</span><br><span class="hljs-regexp">81 systemctl restart docker.service</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/重启docker</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">99 docker pull 192.168.1.11/busybox</span>:v1<br>/<span class="hljs-regexp">/测试下载</span><br></code></pre></td></tr></table></figure><h3 id="5、jenkins服务器向k8smaster做免密登录">5、jenkins服务器向k8smaster做免密登录</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">100 </span>ssh-copy-id <span class="hljs-number">192.168.1.21</span><br></code></pre></td></tr></table></figure><h1>二、安装jenkins（1.13）</h1><h3 id="安装java环境">安装java环境</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root@jenkins ~]<span class="hljs-comment"># tar -zxf jdk-8u231-linux-x64.tar.gz</span><br><br>[root@jenkins ~]<span class="hljs-comment"># mv jdk1.8.0_131 /usr/java</span><br><span class="hljs-comment">#注意 这里有位置敏感，不要多一个“/”</span><br>[root@jenkins ~]<span class="hljs-comment"># vim /etc/profile #在最下面写</span><br><br>export JAVA_HOME=<span class="hljs-regexp">/usr/java</span><br>export JRE_HOME=<span class="hljs-regexp">/usr/java</span><span class="hljs-regexp">/jre</span><br><span class="hljs-regexp">export PATH=$JAVA_HOME/bin</span>:$JRE_HOME/<span class="hljs-symbol">bin:</span>$PATH<br>export CLASSPATH=$JAVA_HOME/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">tools</span>.<span class="hljs-title">jar</span>:$<span class="hljs-title">JAVA_HOME</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">dt</span>.<span class="hljs-title">jar</span></span><br><br>[root@jenkins ~]<span class="hljs-comment">#  source /etc/profile</span><br>/<span class="hljs-regexp">/环境变量生效</span><br><span class="hljs-regexp">[root@jenkins ~]#  java -version</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/验证环境变量</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306091443071.png" alt="image-20200306091443071"></p><h3 id="安装tomcat">安装tomcat</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># tar -zxf apache-tomcat-7.0.54.tar.gz </span><br>[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># mv apache-tomcat-7.0.54 /usr/tomcat7</span><br>[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># cd /usr/tomcat7/webapps/</span><br>[<span class="hljs-meta">root@jenkins webapps</span>]<span class="hljs-meta"># rm -rf *</span><br>[<span class="hljs-meta">root@jenkins webapps</span>]<span class="hljs-meta"># cp /root/jenkins.war . #这几步是jenkins的包放进了tomcat里</span><br>[<span class="hljs-meta">root@jenkins webapps</span>]<span class="hljs-meta"># vim /usr/tomcat7/conf/server.xml </span><br><span class="hljs-comment">//修改tomcat的字符集</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306092022390.png" alt="image-20200306092022390"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@jenkins webapps]<span class="hljs-comment"># cd /usr/tomcat7/bin/</span><br><br>[root@jenkins bin]<span class="hljs-comment"># vim catalina.sh </span><br><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">export</span> CATALINA_OPTS=<span class="hljs-string">"-DJENKINS_HOME=/data/jenkins"</span><br><span class="hljs-built_in">export</span> JENKINS_JAVA_OPTIONS=<span class="hljs-string">"-Djava.awt.headless=true -Dhudson.ClassicPluginStrategy.noBytecodeTransformer=true"</span><br>//这两行添加的是jenkins的家目录位置，这个很重要<br><br>[root@jenkins bin]<span class="hljs-comment"># ./catalina.sh start </span><br>//启动tomcat<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306092523262.png" alt="image-20200306092523262"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>jenkins bin]# netstat -anput | grep <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306110511541.png" alt="image-20200306110511541"></p><h3 id="浏览器安装jenkins">浏览器安装jenkins</h3><p><a href="http://192.168.1.11:8080/jenkins" target="_blank" rel="noopener">http://192.168.1.11:8080/jenkins</a></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306110627790.png" alt="image-20200306110627790"></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@jenkins bin</span>]<span class="hljs-meta"># cat /data/jenkins/secrets/initialAdminPassword</span><br>c577cbf75d934878a94b0f9e00ada328   <span class="hljs-comment">//复制密码</span><br></code></pre></td></tr></table></figure><h3 id="（1）推荐安装">（1）推荐安装</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200308124155279.png" alt="image-20200308124155279"></p><p><strong>#左边是自动安装， 右边是自定义安装，我们选左边的，如果不是这个画面则说明网络很卡或者没有网(推荐使用右边的，然后选择不安装插件，之后可以自定义安装）</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151852889.png" alt="image-20200306151852889"></p><h3 id="（2）这个是自定义安装（自己上传的包）">（2）这个是自定义安装（自己上传的包）</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web bin]# ./catalina.sh stop<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web ~]# cd /data/jenkins/plugins/<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web jenkins]# mv plugins plugins/.bk<br>然后上传plugins.tar.gz包：<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web jenkins]# tar -zxf plugins.tar.gz <br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web ~]# cd /usr/tomcat7/bin/<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web bin]# ./catalina.sh stop<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web bin]# ./catalina.sh start<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306110627790.png" alt="image-20200306110627790"></p><p><strong>输入密码后断网</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200308124449039.png" alt="image-20200308124449039"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200308123936170.png" alt="image-20200308123936170"></p><h3 id="（3）两个剩下的方法一样">（3）两个剩下的方法一样</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151900827.png" alt="image-20200306151900827"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151905668.png" alt="image-20200306151905668"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306151911675.png" alt="image-20200306151911675"></p><h4 id="下载中文插件"><strong>下载中文插件</strong></h4><p><strong>系统管理-----&gt;插件管理-----&gt;avalilable(可选)然后搜索localization-zh-cn</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306152834083.png" alt="image-20200306152834083"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306152957419.png" alt="image-20200306152957419"></p><p><strong>然后还需要3个插件</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306153713286.png" alt="image-20200306153713286"></p><h1>三、安装gitlab（1.10）</h1><p><strong>GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 .gitlab-ci.yaml 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机(vmware、virtualbox)进行 build等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309140112958.png" alt="image-20200309140112958"></p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># yum -y install curl policycoreutils openssh-server openssh-clients postfix git</span><br><span class="hljs-meta"># systemctl enable sshd</span><br><span class="hljs-meta"># systemctl start sshd</span><br><span class="hljs-meta"># systemctl enable postfix</span><br><span class="hljs-meta"># systemctl start postfix</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306112315163.png" alt="image-20200306112315163"></p><h3 id="安装gitlab-ce"><strong>安装gitlab-ce</strong></h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@git ~]# curl -sS http<span class="hljs-variable">s:</span>//packages.gitlab.<span class="hljs-keyword">com</span>/install/repositories/gitlab/gitlab-<span class="hljs-keyword">ce</span>/script.rpm.<span class="hljs-keyword">sh</span> | sudo bash<br></code></pre></td></tr></table></figure><p><strong>注：由于网络问题，国内用户，使用清华大学的镜像源进行安装：</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># vim /etc/yum.repos.d/gitlab-ce.repo</span><br>[<span class="hljs-meta">gitlab-ce</span>]<br>name=gitlab-ce<br>baseurl=http:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br>repo_gpgcheck=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">0</span><br>enabled=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-comment">//packages.gitlab.com/gpg.key</span><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># yum makecache</span><br><span class="hljs-comment">//保存到本地</span><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># yum -y install gitlab-ce </span><br><span class="hljs-meta">#这两条命令是把gitlab源先加入了yum，然后yum下载gitlab</span><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># vim /etc/gitlab/gitlab.rb </span><br><span class="hljs-comment">//修改端口是为了防止端口冲突，因为80默认是http服务的 </span><br><br>external_url <span class="hljs-string">'http://192.168.1.21:90'</span>  <span class="hljs-meta">#端口， unicorn默认是8080 也是tomcat的端口 </span><br>unicorn[<span class="hljs-string">'listen'</span>] = <span class="hljs-string">'127.0.0.1'</span><br>unicorn[<span class="hljs-string">'port'</span>] = <span class="hljs-number">3000</span> <br><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># gitlab-ctl reconfigure </span><br><span class="hljs-comment">//启动gitlab，这个过程可能会有点慢</span><br><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># ls /etc/yum.repos.d/</span><br><span class="hljs-comment">//查看一下</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306141100803.png" alt="image-20200306141100803"></p><h3 id="访问192-168-1-10-90">访问192.168.1.10:90</h3><p><strong>在网页配置用户密码后则安装完毕。用户默认root，这里让设置一个密码再登录，<a href="http://xn--12345-of3np30ehqhlqe.com" target="_blank" rel="noopener">这里设置12345.com</a>（相对较短的密码不让设置）</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306141728312.png" alt="image-20200306141728312"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306142041682.png" alt="image-20200306142041682"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306142219600.png" alt="image-20200306142219600"></p><h1>四、jenkins和gitlab相互关联</h1><p><strong>jenkins：工具集成平台</strong></p><p><strong>gitlab: 软件托管平台</strong></p><p><strong>部署这两个服务的联动，需要经过ssh验证。</strong></p><h2 id="1、首先我们需要在gitlab上绑定jenkins服务器的ssh公钥，这里我们使用的是root用户的公私钥，切记生产环境是不允许随便用root的">1、<strong>首先我们需要在gitlab上绑定jenkins服务器的ssh公钥，这里我们使用的是root用户的公私钥，切记生产环境是不允许随便用root的</strong></h2><h3 id="（1）jenkins"><strong>（1）jenkins</strong></h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># ssh-keygen -t rsa </span><br><span class="hljs-comment">//然后不输入只回车会生成一对公私钥</span><br></code></pre></td></tr></table></figure><h4 id="默认在-root-ssh-目录里"><strong>默认在/root/.ssh/目录里</strong></h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@jenkins ~]<span class="hljs-comment"># cat /root/.ssh/id_rsa.pub </span><br><span class="hljs-regexp">//</span>查看公钥并复制<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMA4+je3NsxZrF2v8TPLXJp1ejwy1YokXipEFyGVNo5IbtkiBDwBLOAl5i7yromY8YGgoNNriE2g89IM<span class="hljs-regexp">/44BGC5UDCokQ69Ze9Ta9Kynv3/</span><span class="hljs-number">1</span>PDFXIABJJG0f6LsUqt0nKFaFoGz3ZuYAnl6AzLpXEic8DBDrsFk+UGrxvMfSEqHlYO2b7jRXE1HGRnqI<span class="hljs-regexp">/IcVB190cLT1kmBKi7hSqUNBc1cY6t3a6gGiBpp9tc8PW4r/</span>RcLblhAL1LKx8x37NOZkqox8IMh3eM<span class="hljs-regexp">/wtWwAVFlI8XU+sz9akzJOVmd1ArT5Q4w8WA/u</span>VHCDUGVI<span class="hljs-regexp">/fli/</span>ZRv+mNZyF3EH26runctb5LkCT root@jenkins<br></code></pre></td></tr></table></figure><h3 id="（2）gitlab">（2）gitlab</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306195836403.png" alt="image-20200306195836403"></p><h4 id="在这里放刚才拷贝的公钥保存就行了。"><strong>在这里放刚才拷贝的公钥保存就行了。</strong></h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200026493.png" alt="image-20200306200026493"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200103458.png" alt="image-20200306200103458"></p><h4 id="我们先在gitlab上创建一个代码仓库-点击-new-project"><strong>我们先在gitlab上创建一个代码仓库 点击 new project</strong></h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200156932.png" alt="image-20200306200156932"></p><p><strong>输入一个仓库的名字，权限选择公共的（public）然后直接点击创建</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306200431858.png" alt="image-20200306200431858"></p><h4 id="点击新建一个new-file"><strong>点击新建一个new.file</strong></h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306201437862.png" alt="image-20200306201437862"></p><h4 id="写入代码，起一个名字然后保存"><strong>写入代码，起一个名字然后保存</strong></h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306201558158.png" alt="image-20200306201558158"></p><h4 id="创建好了，然后在本地测试一下是否可用"><strong>创建好了，然后在本地测试一下是否可用</strong></h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306201744679.png" alt="image-20200306201744679"></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># mkdir xgp</span><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># cd xgp/</span><br>[<span class="hljs-meta">root@git xgp</span>]<span class="hljs-meta"># git clone git@192.168.1.10:root/xgp-demo.git</span><br><span class="hljs-comment">//克隆xgp-demo仓库到本地</span><br><br>[<span class="hljs-meta">root@git xgp</span>]<span class="hljs-meta"># ls xgp-demo/</span><br>index.html<br>[<span class="hljs-meta">root@git xgp</span>]<span class="hljs-meta"># cat xgp-demo/index.html </span><br>print: <span class="hljs-string">"hello word!!!"</span><br><span class="hljs-comment">//查看一下</span><br></code></pre></td></tr></table></figure><h3 id="（3）自动构建">（3）自动构建</h3><p><strong>安装插件</strong></p><p><strong>先进入到之前查看插件的地方</strong></p><p><strong>系统设置----插件管理----高级_—上传插件gitlab-oauth、gitlab-plugin、 windows-slaves、ruby-runt ime、gitlab-hook</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306212734302.png" alt="image-20200306212734302"></p><h3 id="（4）如果可以用，则打开jenkins-点击新建">（4）如果可以用，则打开jenkins 点击新建</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306202647670.png" alt="image-20200306202647670"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306202724313.png" alt="image-20200306202724313"></p><h4 id="地址粘贴进去以后没有报错则没错"><strong>地址粘贴进去以后没有报错则没错</strong></h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306203441474.png" alt="image-20200306203441474"></p><p><strong>但是很伤心它报错了，那是因为jenkins和git没有关联上</strong></p><h3 id="解决">解决</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306203407502.png" alt="image-20200306203407502"></p><h4 id="git主机生成ssh密钥">git主机生成ssh密钥</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># ssh-keygen -t rsa </span><br><span class="hljs-comment">//然后不输入只回车会生成一对公私钥</span><br>[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># cat /root/.ssh/id_rsa   </span><br><span class="hljs-comment">//查看密钥并复制</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306203947496.png" alt="image-20200306203947496"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306204232588.png" alt="image-20200306204232588"></p><p><strong>下面的这个插件很重要，就是他实现自动化更新的webhook插件，安装过了就会有这条，然后点击这条下面出来的这些东西保持默认就行。同时注意复制</strong></p><p><strong>这个里面写的是jenkins构建时候会执行的shell脚本，这个是最重要的，就是他实现了下端kubernetes自动更新容器的操作。</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306204512237.png" alt="image-20200306204512237"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306204948462.png" alt="image-20200306204948462"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>backupcode=<span class="hljs-string">"/data/backcode/<span class="hljs-variable">$JOB_NAME</span>/<span class="hljs-variable">$BUILD_NUMBER</span>"</span>  <br>mkdir -p <span class="hljs-variable">$backupcode</span>     <span class="hljs-comment">#jenkins创建上述目录</span><br>chmod 644 <span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/<span class="hljs-string">"<span class="hljs-variable">$JOB_NAME</span>"</span>/*<br>rsync -acP   <span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/<span class="hljs-string">"<span class="hljs-variable">$JOB_NAME</span>"</span>/*  <span class="hljs-variable">$backupcode</span> <span class="hljs-comment">#$JENKINS_HOME和$JOB_NAME同步最新消息</span><br><span class="hljs-comment">#ssh root@192.168.1.21 sed -i 's/v1/v2/g' /root/app/deploy.yaml #更改镜像版本</span><br><span class="hljs-built_in">echo</span> From  192.168.1.21:5000/web:v1 &gt; <span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/Dockerfile<br><span class="hljs-built_in">echo</span> COPY ./<span class="hljs-string">"<span class="hljs-variable">$JOB_NAME</span>"</span>/* /usr/<span class="hljs-built_in">local</span>/apache2/htdocs/ &gt;&gt; <span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/Dockerfile<br>docker rmi 192.168.1.21:5000/web:v1<br>docker build -t 192.168.1.21:5000/web:v1 /<span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/.<br>docker push 192.168.1.21:5000/web:v1<br>ssh root@192.168.1.21 kubectl delete deployment web<br>ssh root@192.168.1.21 kubectl apply -f /root/app/deploy.yaml<br></code></pre></td></tr></table></figure><blockquote><p><strong>$JOB_NAME：项目名称</strong></p><p><strong>$BUILD_NUMBER：第几次构建</strong></p><p><strong>$JENKINS_HOME：jenkins的家目录</strong></p></blockquote><p><strong>完事以后先别保存，首先复制一下上面的jenkins地址，然后去gitlab上绑定webhook</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306213050759.png" alt="image-20200306213050759"></p><p><strong>保存，登陆gitlab，点击下图这个设置</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306213514819.png" alt="image-20200306213514819"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306213829519.png" alt="image-20200306213829519"></p><p><strong>测试显示下图 的蓝条说明jenkins 已经连通了gitlab</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306214117715.png" alt="image-20200306214117715"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215322180.png" alt="image-20200306215322180"></p><h4 id="回到Jenkins开启匿名访问权限"><strong>回到Jenkins开启匿名访问权限</strong></h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215429619.png" alt="image-20200306215429619"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215504413.png" alt="image-20200306215504413"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215539717.png" alt=""></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306215611348.png" alt="image-20200306215611348"></p><p><strong>测试显示下图 的蓝条说明jenkins 已经连通了gitlab</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200306214126410.png" alt="image-20200306214126410"></p><p><strong>好了，jenkins和gitlab 都已经互相的ssh通过了，然后我们最后需要做的一个ssh是关于jenkins</strong></p><p><strong>///注意，这里是从git和jenkins向master节点做免密登录。</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>git ~]# ssh-copy-id <span class="hljs-symbol">root@</span><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>[<span class="hljs-symbol">root@</span>jenkins ~]# ssh-copy-id <span class="hljs-symbol">root@</span><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure><p><strong>好了，环境全部部署完毕！！！。开始测试</strong></p><h1>五、测试</h1><p><strong>测试的方法很简单，就是在gitlab上新建代码，删除代码，修改代码，都会触发webhook进行自动部署。最终会作用在所有的nginx容器中，也就是我们的web服务器。</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100434912.png" alt="image-20200309100434912"></p><p><strong>这里我修改了之前建立的 index.html文件 保存以后，就打开浏览器 一直访问kubernetes-node 里面的容器了</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100445830.png" alt="image-20200309100445830"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100530210.png" alt="image-20200309100530210"></p><h2 id="访问一下http-192-168-1-21-31234">访问一下http://192.168.1.21:31234/</h2><p><em><strong>如果没有变，应该注意查看是否在jenkins上构建完成，等以小会就可以了。</strong></em></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200309100557309.png" alt="image-20200309100557309"></p><p><strong>构建成功</strong></p><h1>六、GitLab CI 总结</h1><p><strong>CS 架构</strong><br>GitLab 作为 Server 端，控制 Runner 端执行一系列的 CI 任务；代码 clone 等无需关心，GitLab 会自动处理好一切；Runner 每次都会启动新的容器执行 CI 任务</p><p><strong>容器即环境</strong><br>在 Runner 使用 Docker build 的前提下；所有依赖切换、环境切换应当由切换不同镜像实现，即 build 那就使用 build 的镜像，deploy 就用带有 deploy 功能的镜像；通过不同镜像容器实现完整的环境隔离</p><p><strong>CI即脚本</strong><br>不同的 CI 任务实际上就是在使用不同镜像的容器中执行 <a href="https://www.centos.bz/tag/shell/" target="_blank" rel="noopener">SHELL</a> 命令，自动化 CI 就是执行预先写好的一些小脚本</p><p><strong>敏感信息走环境变量</strong><br>一切重要的敏感信息，如账户密码等，不要写到 CI 配置中，直接放到 GitLab 的环境变量中；GitLab 会保证将其推送到远端 Runner 的 SHELL 变量中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验环境&quot;&gt;实验环境&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;主机名称&lt;/th&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;192.168.1.21&lt;/str
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>20 k8s的helm模板</title>
    <link href="https://wsdlxgp.top/posts/c224.html"/>
    <id>https://wsdlxgp.top/posts/c224.html</id>
    <published>2020-05-01T13:20:01.093Z</published>
    <updated>2020-06-06T14:58:05.812Z</updated>
    
    <content type="html"><![CDATA[<h1>自定义helm模板</h1><p><a href="https://hub.helm.sh/" target="_blank" rel="noopener">https://hub.helm.sh/</a></p><h2 id="1、开发自己的chare包">1、开发自己的chare包</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># helm create mychare<br><span class="hljs-comment">//创建一个名为mychare的chare包</span><br><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># tree -C mychare/<br><span class="hljs-comment">//以树状图查看一下chare包</span><br>mychare/<br>├── charts<br>├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Chart</span>.</span></span>yaml<br>├── templates<br>│   ├── deployment.yaml<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_helpers</span>.</span></span>tpl<br>│   ├── ingress.yaml<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NOTES</span>.</span></span>txt<br>│   ├── service.yaml<br>│   └── tests<br>│       └── test-connection.yaml<br>└── values.yaml<br></code></pre></td></tr></table></figure><h2 id="2、调试chart">2、调试chart</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># cd</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install --dry-run --debug mychare<br>//检查这个mychare是否有问题<br></code></pre></td></tr></table></figure><h2 id="3、安装chart">3、安装chart</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node02</span> ~]<span class="hljs-meta"># docker pull nginx:stable</span><br></code></pre></td></tr></table></figure><h3 id="（1）通过仓库安装">（1）通过仓库安装</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># helm search redis</span><br>//搜索chare包<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># helm repo list</span><br>//查看是否有能访问仓库<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># helm install stable/redis</span><br>//安装<br></code></pre></td></tr></table></figure><h3 id="（2）通过tar包安装">（2）通过tar包安装</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># helm fetch stable/redis<br><span class="hljs-comment">//直接下载chare包</span><br><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># tar -zxf redis-<span class="hljs-number">1.1</span>.<span class="hljs-number">15.</span>tgz<br><span class="hljs-comment">//解压下载的chare包</span><br><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># tree -C redis<br>redis<br>├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Chart</span>.</span></span>yaml<br>├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">README</span>.</span></span>md<br>├── templates<br>│   ├── deployment.yaml<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_helpers</span>.</span></span>tpl<br>│   ├── networkpolicy.yaml<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NOTES</span>.</span></span>txt<br>│   ├── pvc.yaml<br>│   ├── secrets.yaml<br>│   └── svc.yaml<br>└── values.yaml<br></code></pre></td></tr></table></figure><h3 id="（3）通过chare本地目录安装">（3）通过chare本地目录安装</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> fetch stable/redis<br>//直接下载chare包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# tar</span> -zxf redis-<span class="hljs-number">1.1</span>.<span class="hljs-number">15</span>.tgz<br>//解压下载的chare包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install redis<br></code></pre></td></tr></table></figure><h3 id="（4）通过URL安装">（4）通过URL安装</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install https://example.com/charts/foo-<span class="hljs-number">1.2</span>.<span class="hljs-number">3</span>.tgz<br></code></pre></td></tr></table></figure><p>使用本地目录安装：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# cd</span> mychare/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># vim values.yaml</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304094840738.png" alt="image-20200304094840738"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># cd templates/</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">templates</span>]<span class="hljs-comment"># vim service.yaml</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304095647172.png" alt="image-20200304095647172"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master templates]# cd <span class="hljs-built_in">..</span><br>[root@master mychare]# helm install -n test <span class="hljs-built_in">..</span>/mychare/<br>[root@master ~]# helm<span class="hljs-built_in"> upgrade </span>test mychare/ -f  mychare/values.yaml<br></code></pre></td></tr></table></figure><h2 id="4、例子">4、例子</h2><p><strong>使用mychart部署一个实例: xgp。使用镜像为私有镜像v1 版本。</strong></p><p><strong>完成之后，镜像版本。</strong></p><p><strong>全部成功之后，将实例做一个升级，将镜像改为v2版本。</strong></p><h3 id="更改镜像为私有镜像">更改镜像为私有镜像</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> mychare/values.yaml<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304104416415.png" alt="image-20200304104416415"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  helm</span> install -n xgp mychare/ -f mychare/values.yaml<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304104645260.png" alt="image-20200304104645260"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> mychare/values.yaml<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105120894.png" alt="image-20200304105120894"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master ~]# helm<span class="hljs-built_in"> upgrade </span> xgp mychare/  -f mychare/values.yaml <br>[root@master ~]# kubectl <span class="hljs-builtin-name">get</span> deployments. -o wide<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105211506.png" alt="image-20200304105211506"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> edit deployments. xgp-mychare<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105334541.png" alt="image-20200304105334541"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304105359184.png" alt="image-20200304105359184"></p><h1>创建自己的Repo仓库</h1><h2 id="1、node01启动一个httpd的容器">1、node01启动一个httpd的容器</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@node01 ~</span>]<span class="hljs-meta"># mkdir /var/xgp</span><br><span class="hljs-comment">//创建一个目录</span><br>[<span class="hljs-meta">root@node01 ~</span>]<span class="hljs-meta"># docker pull httpd</span><br><span class="hljs-comment">//下载httpd镜像</span><br>[<span class="hljs-meta">root@node02 ~</span>]<span class="hljs-meta"># docker run -d -p 8080:80 -v /var/xgp:/usr/local/apache2/htdocs httpd</span><br><span class="hljs-comment">//启动一个httpd的容器</span><br></code></pre></td></tr></table></figure><h2 id="2、master节点上，将mychart目录打包。">2、master节点上，将mychart目录打包。</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# helm package mychare/<br>Successfully packaged chart <span class="hljs-keyword">and</span> saved it to: /root/mychare<span class="hljs-number">-0.1</span><span class="hljs-number">.0</span>.tgz<br></code></pre></td></tr></table></figure><h2 id="3、生成仓库的index文件。">3、生成仓库的index文件。</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# mkdir myrepo<br><span class="hljs-comment">//创建一个目录存放打包的chare</span><br>[<span class="hljs-symbol">root@</span>master ~]# mv mychare<span class="hljs-number">-0.1</span><span class="hljs-number">.0</span>.tgz myrepo/<br><span class="hljs-comment">//移动打包好的文件</span><br>[<span class="hljs-symbol">root@</span>master ~]# helm repo index myrepo/ --url http:<span class="hljs-comment">//192.168.1.22:8080/charts</span><br><span class="hljs-comment">//生成仓库的index文件</span><br>[<span class="hljs-symbol">root@</span>master ~]# ls myrepo/<br>index.yaml  mychare<span class="hljs-number">-0.1</span><span class="hljs-number">.0</span>.tgz<br></code></pre></td></tr></table></figure><h2 id="4、将生成的tar包和index-yaml上传到node01的-var-www-charts目录下">4、将生成的tar包和index.yaml上传到node01的/var/www/charts目录下.</h2><h3 id="node01创建目录">node01创建目录</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node01</span> ~]<span class="hljs-meta"># mkdir /var/xgp/charts</span><br></code></pre></td></tr></table></figure><h3 id="master移动动到">master移动动到</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# scp</span> myrepo/* node01:/var/xgp/charts/<br></code></pre></td></tr></table></figure><h3 id="node01查看一下">node01查看一下</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>node01 ~]# ls /var/xgp/charts/<br>index.yaml  mychare<span class="hljs-number">-0.1</span><span class="hljs-number">.0</span>.tgz<br></code></pre></td></tr></table></figure><h2 id="5、添加新的repo仓库。">5、添加新的repo仓库。</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo add newrepo http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo list<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304112410286.png" alt="image-20200304112410286"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> search mychare<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304112443931.png" alt="image-20200304112443931"></p><h2 id="6、我们就可以直接使用新的repo仓库部署实例了。">6、我们就可以直接使用新的repo仓库部署实例了。</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install newrepo/mychare -n wsd<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> list<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304112515084.png" alt="image-20200304112515084"></p><h2 id="7-如果以后仓库中新添加了chart包-需要用helm-repo-update命玲更新本地的index文件。">7.如果以后仓库中新添加了chart包,需要用helm repo update命玲更新本地的index文件。</h2><p>练习：<br>新创建一个bdqn.的chart包。然后将chart包上传到上述repo源中。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> create bdqn<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> package bdqn/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mv</span> bdqn-<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>.tgz myrepo/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  helm</span> repo index myrepo/ --url http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">myrepo</span>]<span class="hljs-comment"># scp bdqn-0.1.0.tgz index.yaml  node01:/var/xgp/charts</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">myrepo</span>]<span class="hljs-comment"># helm repo update</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">myrepo</span>]<span class="hljs-comment"># helm search bdqn</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">myrepo</span>]<span class="hljs-comment"># helm install http://192.168.1.22:8080/charts/bdqn-0.1.0.tgz</span><br></code></pre></td></tr></table></figure><h2 id="1）创建helm的私有仓库，以自己的名字命名。">1）创建helm的私有仓库，以自己的名字命名。</h2><h3 id="1、node01启动一个httpd的容器-2">1、node01启动一个httpd的容器</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@node01 ~</span>]<span class="hljs-meta"># mkdir /var/xgp</span><br><span class="hljs-comment">//创建一个目录</span><br>[<span class="hljs-meta">root@node01 ~</span>]<span class="hljs-meta"># docker pull httpd</span><br><span class="hljs-comment">//下载httpd镜像</span><br>[<span class="hljs-meta">root@node02 ~</span>]<span class="hljs-meta"># docker run -d -p 8080:80 -v /var/xgp:/usr/local/apache2/htdocs httpd</span><br><span class="hljs-comment">//启动一个httpd的容器</span><br></code></pre></td></tr></table></figure><h3 id="3、生成仓库的index文件。-2">3、生成仓库的index文件。</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> xgprepo<br>//创建一个目录存放打包的chare<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo index xgprepo/ --url http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br>//生成仓库的index文件<br></code></pre></td></tr></table></figure><h3 id="4、将生成的index-yaml上传到node01的-var-www-charts目录下">4、将生成的index.yaml上传到node01的/var/www/charts目录下.</h3><h4 id="node01创建目录-2">node01创建目录</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node01</span> ~]<span class="hljs-meta"># mkdir /var/xgp/charts</span><br></code></pre></td></tr></table></figure><h4 id="master移动动到-2">master移动动到</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# scp</span> xgprepo/* node01:/var/xgp/charts/<br></code></pre></td></tr></table></figure><h4 id="node01查看一下-2">node01查看一下</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node01</span> ~]<span class="hljs-meta"># ls /var/xgp/charts/</span><br>index.yaml<br></code></pre></td></tr></table></figure><h3 id="5、添加新的repo仓库">5、添加新的repo仓库</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo add xgp http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo list<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304132528938.png" alt="image-20200304132528938"></p><h2 id="2）-自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为-30000">2） 自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为:30000</h2><h4 id="自定义一个chart包">自定义一个chart包</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> create wsd<br>//创建一个名为wsd的chares包<br></code></pre></td></tr></table></figure><h4 id="按照要求修改配置文件">按照要求修改配置文件</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master ~]<span class="hljs-meta"># cd wsd/</span><br><span class="hljs-comment">//进入这个chart包</span><br>[root@master wsd]<span class="hljs-meta"># vim values.yaml</span><br><span class="hljs-comment">//修改wsd的配置文件</span><br><span class="hljs-symbol">replicaCount:</span> <span class="hljs-number">3</span>                         <span class="hljs-meta">#三个副本</span><br><br><span class="hljs-symbol">image:</span><br><span class="hljs-symbol">  repository:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web      <span class="hljs-meta">#更改镜像为私有镜像</span><br><span class="hljs-symbol">  tag:</span> v1                                <span class="hljs-meta">#镜像标签v1</span><br><span class="hljs-symbol">  pullPolicy:</span> IfNotPresent              <br><br><span class="hljs-symbol">imagePullSecrets:</span> []<br><span class="hljs-symbol">nameOverride:</span> <span class="hljs-string">""</span><br><span class="hljs-symbol">fullnameOverride:</span> <span class="hljs-string">""</span><br><br><span class="hljs-symbol">service:</span><br><span class="hljs-symbol">  type:</span> NodePort              <span class="hljs-meta">#修改模式为映射端口</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">  nodePort:</span> <span class="hljs-number">30000</span>             <span class="hljs-meta">#添加端口</span><br><br>[root@master wsd]<span class="hljs-meta"># vim templates/service.yaml </span><br><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Service<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> &#123;&#123; include <span class="hljs-string">"wsd.fullname"</span> . &#125;&#125;<br><span class="hljs-symbol">  labels:</span><br>&#123;&#123; include <span class="hljs-string">"wsd.labels"</span> . | indent <span class="hljs-number">4</span> &#125;&#125;<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  type:</span> &#123;&#123; .Values.service.type &#125;&#125;<br><span class="hljs-symbol">  ports:</span><br>    - port: &#123;&#123; .Values.service.port &#125;&#125;<br><span class="hljs-symbol">      targetPort:</span> http<br><span class="hljs-symbol">      protocol:</span> TCP<br><span class="hljs-symbol">      name:</span> http<br><span class="hljs-symbol">      nodePort:</span> &#123;&#123; .Values.service.nodePort &#125;&#125;    <span class="hljs-meta">#“添加”能让服务识别到nodePort的端口</span><br><span class="hljs-symbol">  selector:</span><br>    app.kubernetes.io/name: &#123;&#123; include <span class="hljs-string">"wsd.name"</span> . &#125;&#125;<br>    app.kubernetes.io/instance: &#123;&#123; .Release.Name &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="测试一下">测试一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install -n wsd  wsd/ -f wsd/values.yaml<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304134959273.png" alt="image-20200304134959273"></p><h4 id="查看一下镜像版本">查看一下镜像版本</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304135106081.png" alt="image-20200304135106081"></p><h4 id="访问一下">访问一下</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304150609552.png" alt="image-20200304150609552"></p><h2 id="3-将实例进行更新，要求镜像生产v2版本。">3)  将实例进行更新，要求镜像生产v2版本。</h2><p><strong>私有镜像和官方镜像升级有所不同，官方的只需通过 （helm upgrade --set imageTag=“标签” 服务名称 charts包名 ）进行更改标签即可，而私有镜像需通过更改values.yaml中的标签才行比较麻烦一点。</strong></p><h3 id="1、修改values-yaml">1、修改values.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">wsd/values.yaml</span> <br><br><span class="hljs-comment"># Default values for wsd.</span><br><span class="hljs-comment"># This is a YAML-formatted file.</span><br><span class="hljs-comment"># Declare variables to be passed into your templates.</span><br><br><span class="hljs-attr">replicaCount:</span> <span class="hljs-number">3</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">v2</span>                            <span class="hljs-comment">#修改标签为v2</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">helm</span> <span class="hljs-string">upgrade</span> <span class="hljs-string">wsd</span> <span class="hljs-string">wsd/</span> <span class="hljs-string">-f</span> <span class="hljs-string">wsd/values.yaml</span><br><span class="hljs-string">//基于配置文件刷新一下wsd服务</span><br></code></pre></td></tr></table></figure><h4 id="查看一下">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304140054269.png" alt="image-20200304140054269"></p><h4 id="访问一下-2">访问一下</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304150742815.png" alt="image-20200304150742815"></p><h3 id="2、使用edit进行版本更新">2、使用edit进行版本更新</h3><p><em><strong>确定wsd这个服务开启</strong></em></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> edit deployments. wsd<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304140425336.png" alt></p><h4 id="查看一下-2">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304140520342.png" alt="image-20200304140520342"></p><h4 id="访问一下-3">访问一下</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304150839440.png" alt="image-20200304150839440"></p><h2 id="4）重新定义一个chart包，名称为-new-test-将这个包上传到上述私有仓库中。">4）重新定义一个chart包，名称为: new-test,将这个包上传到上述私有仓库中。</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo list<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304142059023.png" alt="image-20200304142059023"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> create xgp-wsd<br>//创建一个名为xgp-wsd的charts包<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> package xgp-wsd/<br>//将xgp-wsd打包在当前目录<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mv</span> xgp-wsd-<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>.tgz xgprepo/<br>//把打包文件放到仓库目录<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo index xgprepo/ --url http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br>//把仓库目录新加入的charts包信息记录在index.yaml中，使得其他加入的主机可以识别到，仓库的charts包<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# scp</span> xgprepo/* node01:/var/xgp/charts<br>//将仓库目录的文件移动到httpd服务上，使各个主机可以访问，下载仓库的charts包<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo update <br>//更新一下chart存储库<br></code></pre></td></tr></table></figure><h3 id="查看一下-3">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> search xgp-wsd<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200304142009776.png" alt="image-20200304142009776"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;自定义helm模板&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hub.helm.sh/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、开发自己的chare包&quot;&gt;1、开发
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>19 k8s的helm入门</title>
    <link href="https://wsdlxgp.top/posts/wqrw.html"/>
    <id>https://wsdlxgp.top/posts/wqrw.html</id>
    <published>2020-05-01T13:20:01.085Z</published>
    <updated>2020-06-06T14:55:49.281Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Helm介绍</h1><p><strong><code>helm</code>是基于<code>kubernetes</code> 的包管理器。它之于 <code>kubernetes</code> 就如 <code>yum</code> 之于 <code>centos</code>，<code>pip</code> 之于 <code>python，npm</code> 之于 <code>javascript</code></strong></p><p><strong>那 <code>helm</code> 的引入对于管理集群有哪些帮助呢？</strong></p><ul><li><strong>更方便地部署基础设施，如 <code>gitlab</code>，<code>postgres</code>，<code>prometheus</code>，<code>grafana</code> 等</strong></li><li><strong>更方便地部署自己的应用，为公司内部的项目配置 Chart，使用 <code>helm</code> 结合 CI，在 k8s 中部署应用一行命令般简单</strong></li></ul><h2 id="1、Helm用途">1、Helm用途</h2><p><strong>Helm把Kubernetes资源(比如deployments、services或 ingress等) 打包到一个chart中，而chart被保存到chart仓库。通过chart仓库可用来存储和分享chart。Helm使发布可配置，支持发布应用配置的版本管理，简化了Kubernetes部署应用的版本控制、打包、发布、删除、更新等操作。</strong></p><p><strong>做为Kubernetes的一个包管理工具，用来管理charts——预先配置好的安装包资源，有点类似于Ubuntu的APT和CentOS中的yum。</strong></p><h4 id="Helm具有如下功能：">Helm具有如下功能：</h4><ul><li><strong>创建新的chart</strong></li><li><strong>chart打包成tgz格式</strong></li><li><strong>上传chart到chart仓库或从仓库中下载chart</strong></li><li><strong>在Kubernetes集群中安装或卸载chart</strong></li><li><strong>管理用Helm安装的chart的发布周期</strong></li></ul><h4 id="使用Helm可以完成以下事情：">使用Helm可以完成以下事情：</h4><ul><li><strong>管理Kubernetes manifest files</strong></li><li><strong>管理Helm安装包charts</strong></li><li><strong>基于chart的Kubernetes应用分发</strong></li></ul><h2 id="2、Helm组件及相关术语">2、Helm组件及相关术语</h2><p><strong>开始接触Helm时遇到的一个常见问题就是Helm中的一些概念和术语非常让人迷惑，我开始学习Helm就遇到这个问题。</strong></p><p><strong>因此我们先了解一下Helm的这些相关概念和术语。</strong></p><h3 id="包管理工具"><strong>包管理工具:</strong></h3><ul><li><p><strong>Helm: Kubernetes的应用打包工具，也是命令行工具的名称。</strong></p></li><li><p><strong>Helm CLI：是 Helm 客户端，可以在本地执行</strong></p></li><li><p><strong>Tiller: Helm的服务端，部署在Kubernetes集群中，用于处理Helm的相关命令。</strong></p><blockquote><p><strong>helm的作用：像centos7中的yum命令一样，管理软件包，只不过helm这儿管理的是在k8s上安装的各种容器。</strong></p><p><strong>tiller的作用：像centos7的软件仓库一样，简单说类似于/etc/yum.repos.d目录下的xxx.repo。</strong></p></blockquote></li><li><p><strong>Repoistory: Helm的软件仓库，repository本质上是一个web服务器，该服务器保存了chart软件包以供下载，并有提供一个该repository的chart包的清单文件以供查询。在使用时，Helm可以对接多个不同的Repository。</strong></p></li><li><p><strong>Charts：是一个Helm的程序包，它包含了运行一个kubernetes应用程序所需要的镜像、依赖关系和资源定义等。</strong></p></li><li><p><strong>Release：应用程序运行Charts之后，得到的一个实例。</strong></p><blockquote><p><strong>需要特别注意的是， Helm中提到的Release和我们通常概念中的版本有所不同，这里的Release可以理解为Helm使用Chart包部署的一个应用实例。</strong></p><p><strong>其实Helm中的Release叫做Deployment更合适。估计因为Deployment这个概念已经被Kubernetes使用了，因此Helm才采用了Release这个术语。</strong></p></blockquote></li></ul><h3 id="命令介绍">命令介绍</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> search<br>//查看可用的Charts包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> inspect  stable/redis<br>//查看stable/redis包的详细信息<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm fetch stable/mysql</span><br>//直接下载stable/mysql的chart包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install stable/redis -n redis --dry-run <br>//基于stable/redis包运行一个名为redis的服务（把--dry-run去掉之后相当于安装了一个服务）<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> list<br>//查看安装的服务<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> delete redis<br>//删除这个服务<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm upgrade --set imageTag=5.7.15 xgp-mysql stable/mysql -f values.yaml </span><br>//mysql服务的升级<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment">#  helm history xgp-mysql</span><br>//查看历史版本<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm rollback xgp-mysql 1  </span><br>//回滚到版本一<br></code></pre></td></tr></table></figure><h2 id="3、组件架构">3、组件架构</h2><p>![](E:\软件\博客\Blog\blog\source_posts\19 k8s的helm入门.assets\image-20200302214010170.png)</p><p><strong><code>Helm Client</code> 是用户命令行工具，其主要负责如下：</strong></p><ul><li><strong>本地 chart 开发</strong></li><li><strong>仓库管理</strong></li><li><strong>与 Tiller sever 交互</strong></li><li><strong>发送预安装的 chart</strong></li><li><strong>查询 release 信息</strong></li><li><strong>要求升级或卸载已存在的 release</strong></li></ul><p><strong><code>Tiller Server</code>是一个部署在<code>Kubernetes</code>集群内部的 server，其与 Helm client、Kubernetes API server 进行交互。Tiller server 主要负责如下：</strong></p><ul><li><strong>监听来自 Helm client 的请求</strong></li><li><strong>通过 chart 及其配置构建一次发布</strong></li><li><strong>安装 chart 到<code>Kubernetes</code>集群，并跟踪随后的发布</strong></li><li><strong>通过与<code>Kubernetes</code>交互升级或卸载 chart</strong></li><li><strong>简单的说，client 管理 charts，而 server 管理发布 release</strong></li></ul><h3 id="helm客户端">helm客户端</h3><p><strong>helm客户端是一个命令行工具，负责管理charts、reprepository和release。它通过gPRC API（使用kubectl port-forward将tiller的端口映射到本地，然后再通过映射后的端口跟tiller通信）向tiller发送请求，并由tiller来管理对应的Kubernetes资源。</strong></p><h3 id="tiller服务端">tiller服务端</h3><p><strong>tiller接收来自helm客户端的请求，并把相关资源的操作发送到Kubernetes，负责管理（安装、查询、升级或删除等）和跟踪Kubernetes资源。为了方便管理，tiller把release的相关信息保存在kubernetes的ConfigMap中。</strong><br><strong>tiller对外暴露gRPC API，供helm客户端调用。</strong></p><h2 id="4、工作原理">4、工作原理</h2><h4 id="Chart-Install-过程："><strong>Chart Install 过程：</strong></h4><ul><li><strong>Helm从指定的目录或者tgz文件中解析出Chart结构信息</strong></li><li><strong>Helm将指定的Chart结构和Values信息通过gRPC传递给Tiller</strong></li><li><strong>Tiller根据Chart和Values生成一个Release</strong></li><li><strong>Tiller将Release发送给Kubernetes运行。</strong></li></ul><h4 id="Chart-Update过程："><strong>Chart Update过程：</strong></h4><ul><li><strong>Helm从指定的目录或者tgz文件中解析出Chart结构信息</strong></li><li><strong>Helm将要更新的Release的名称和Chart结构，Values信息传递给Tiller</strong></li><li><strong>Tiller生成Release并更新指定名称的Release的History</strong></li><li><strong>Tiller将Release发送给Kubernetes运行</strong></li></ul><h4 id="Chart-Rollback">Chart Rollback</h4><ul><li><strong>helm将会滚的release名称传递给tiller</strong></li><li><strong>tiller根据release名称查找history</strong></li><li><strong>tiller从history中获取到上一个release</strong></li><li><strong>tiller将上一个release发送给kubernetes用于替换当前release</strong></li></ul><h4 id="Chart处理依赖">Chart处理依赖</h4><p><strong>Tiller 在处理 Chart 时，直接将 Chart 以及其依赖的所有 Charts 合并为一个 Release，同时传递给 Kubernetes。因此 Tiller 并不负责管理依赖之间的启动顺序。Chart 中的应用需要能够自行处理依赖关系。</strong></p><h1>二、安装部署helm工具（客户端）</h1><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302084446678.png" alt="image-20200302084446678"></p><h4 id="前提要求"><strong>前提要求</strong></h4><ul><li><strong>Kubernetes1.5以上版本</strong></li><li><strong>集群可访问到的镜像仓库</strong></li><li><strong>执行helm命令的主机可以访问到kubernetes集群</strong></li></ul><h3 id="（1）下载helm的包">（1）下载helm的包</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#docker</span> pull gcr.io/kubernetes-helm/tiller:v2.<span class="hljs-number">14.3</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# wget</span> https://get.helm.sh/helm-v2.<span class="hljs-number">14.3</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="（2）把helm包的命令，复制到本地">（2）把helm包的命令，复制到本地</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># mv linux-amd64/helm /usr/local/bin/</span><br>//移动命令目录到/usr/local/bin/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># chmod +x /usr/local/bin/helm </span><br>//给予执行权限<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm help</span><br>//验证是否安装成功<br></code></pre></td></tr></table></figure><h3 id="（3）设置命令自动补全">（3）设置命令自动补全</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment">#  echo 'source &lt;(helm completion bash)' &gt;&gt; /etc/profile</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># . /etc/profile</span><br>//刷新一下<br></code></pre></td></tr></table></figure><h2 id="2、安装Tiller-server（服务端，需要创建授权用户）">2、安装Tiller server（服务端，需要创建授权用户）</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">tiller-rbac.yaml</span>   <span class="hljs-comment">#创建授权用户</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><h4 id="执行一下">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f tiller-rbac.yaml<br></code></pre></td></tr></table></figure><h3 id="（1）Tiller-server的环境初始化">（1）Tiller server的环境初始化</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm init  --service-account=tiller</span><br>//helm的服务端就是Tiller（因为是访问外国的网站，可能需要多次执行）<br></code></pre></td></tr></table></figure><h4 id="查看一下">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># kubectl get deployment. -n kube-system</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228120107088.png" alt="image-20200228120107088"></p><p><strong>现在发现没有开启，那是因为默认下载的Google的镜像，下载不下来</strong></p><h3 id="（2）设置镜像源改为阿里云的">（2）设置镜像源改为阿里云的</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-2">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm version</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228120548734.png" alt="image-20200228120548734"></p><h2 id="3、部署一个实例helm-install-charts-n-Release名称。">3、部署一个实例helm install + charts -n   Release名称。</h2><blockquote><p><strong>1、关于这个Release的描述。</strong></p><p><strong>2、关于这个Release资源的描述。</strong></p><p><strong>3、怎么使用这个Release。</strong></p></blockquote><h3 id="（1）Helm部署安装一个Mysql服务。">（1）Helm部署安装一个Mysql服务。</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> search mysql<br>//查看关于mysqk的Charts包<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302091903599.png" alt="image-20200302091903599"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install stable/mysql -n mysql <br>//基于stable/mysql包安装一个名为MySQL的服务<br></code></pre></td></tr></table></figure><h3 id="查看一下-3">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> list<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302092055970.png" alt="image-20200302092055970"></p><h3 id="（2）Charts包解压过后的目录">（2）Charts包解压过后的目录:</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# cd</span> .helm/cache/archive<br>//查看helm缓存<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">archive</span>]<span class="hljs-comment"># ls</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302093625736.png" alt="image-20200302093625736"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm fetch stable/mysql</span><br>//直接下载stable/mysql的chart包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">archive</span>]<span class="hljs-comment"># tar -zxf mysql-0.3.5.tgz </span><br>//解压一下MySQL包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">archive</span>]<span class="hljs-comment"># tree -C mysql </span><br>//树状图查看解压出来的mysql目录，-C:显示颜色<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302093816396.png" alt="image-20200302093816396"></p><blockquote><p><strong>Chart.yaml：这个chart包的概要信息。（name和version 这两是必填项，其他可选。）</strong></p><p><strong>README md：是这个chart包的一个使用帮助文档。</strong></p><p><strong>templates：chart包内各种资源对象的模板。</strong></p><blockquote><p><strong>deployment.yaml：deployment 控制器的 Go 模板文件</strong></p><p><strong>_helpers.tpl：以 _ 开头的文件不会部署到 k8s 上，可用于定制通用信息</strong></p><p><strong>NOTES.txt：Chart 部署到集群后的一些信息</strong></p><p><strong>service.yaml：service 的 Go 模板文件</strong></p></blockquote><p><strong>values.yaml：是这个chart包的默认的值，可以被templet内的yaml文件使用。</strong></p></blockquote><h3 id="（3）Helm部署安装-个Mysql服务。">（3）Helm部署安装-个Mysql服务。</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">14</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">15</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull busybox:<span class="hljs-number">1.25</span>.<span class="hljs-number">0</span><br>下载所需的mysql镜像<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> delete mysql --purge <br>//删除之前的MySQL服务并清除缓存<br></code></pre></td></tr></table></figure><h3 id="（4）设置共享目录">（4）设置共享目录</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# yum</span> -y install rpcbind nfs-utils<br>//安装nfs<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> /data<br>//创建共享目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> /etc/exports<br>/data *(rw,sync,no_root_squash)<br>//设置共享目录权限<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> restart rpcbind<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> restart nfs-server<br>//重启nfs服务<br><br>测试一下<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# showmount</span> -e<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302105307662.png" alt="image-20200302105307662"></p><h3 id="（5）创建pv">（5）创建pv</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master xgp]<span class="hljs-meta"># vim nfs-pv1.yml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mysqlpv<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">8</span>Gi<br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Recycle<br><span class="hljs-symbol">  nfs:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/data/</span>mysqlpv<br><span class="hljs-symbol">    server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>[root@master xgp]<span class="hljs-meta"># mkdir /data/mysqlpv</span><br><span class="hljs-comment">//创建所需目录</span><br></code></pre></td></tr></table></figure><h4 id="执行一下-2">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl apply -f nfs-pv1.yml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-4">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302110137247.png" alt="image-20200302110137247"></p><h3 id="（6）创建一个mysql服务">（6）创建一个mysql服务</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># helm install stable/mysql -n bdqn-mysql --set mysqlRootPassword=123.com</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-5">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302111518710.png" alt="image-20200302111518710"></p><h3 id="（7）进入pod并查看一下">（7）进入pod并查看一下</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[root@master xgp]# kubectl exec -it bdqn-mysql-mysql-7b89c7b99-8ff2r -- mysql -u root -p123.com<br>mysql&gt; show databases;<br><span class="hljs-code">+--------------------+</span><br>| Database           |<br><span class="hljs-code">+--------------------+</span><br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br>| sys                |<br><span class="hljs-code">+--------------------+</span><br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="4、mysql服务的升级与回滚">4、mysql服务的升级与回滚</h2><h3 id="（1）mysql服务的升级">（1）mysql服务的升级</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master mysql]# helm<span class="hljs-built_in"> upgrade </span>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">imageTag</span>=5.7.15 bdqn-mysql stable/mysql -f values.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-6">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115511986.png" alt="image-20200302115511986"></p><h3 id="（2）mysql服务的回滚">（2）mysql服务的回滚</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment">#  helm history bdqn-mysql</span><br>//查看历史版本<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115645118.png" alt="image-20200302115645118"></p><h4 id="回滚到版本一">回滚到版本一</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm rollback bdqn-mysql 1</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-7">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115823991.png" alt="image-20200302115823991"></p><h1>三、小实验</h1><p><strong>在部署mysql的时候，如何开启storageclass，以及如何将service资源对象的类型更改为NodePort, 如何使用?</strong></p><p><strong>将上述部署的实例进行升级回滚操作。升级的时候镜像改为： mysql:5.7.15版本。回滚到最初的版本。</strong></p><h2 id="1、基于NFS服务，创建NFS服务。">1、基于NFS服务，创建NFS服务。</h2><p><strong>下载nfs所需安装包</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node02</span> ~]<span class="hljs-meta"># yum -y install nfs-utils  rpcbind</span><br></code></pre></td></tr></table></figure><p><strong>创建共享目录</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> -p /xgp/wsd<br></code></pre></td></tr></table></figure><p><strong>创建共享目录的权限</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> /etc/exports<br>/xgp *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><p><strong>开启nfs和rpcbind（三台都要）</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> nfs-server.service <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> rpcbind<br></code></pre></td></tr></table></figure><p><strong>测试一下</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# showmount</span> -e<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302143413268.png" alt="image-20200302143413268"></p><h2 id="2、创建StorageClass资源对象。">2、创建StorageClass资源对象。</h2><h3 id="（1）创建rbac权限。">（1）创建rbac权限。</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim rbac.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner<br><span class="hljs-symbol">  namespace:</span> default<br>---<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">rules:</span><br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumes"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"delete"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumeclaims"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"storage.k8s.io"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"storageclasses"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"events"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"update"</span>, <span class="hljs-string">"patch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"services"</span>, <span class="hljs-string">"endpoints"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>,<span class="hljs-string">"create"</span>,<span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>,<span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"extensions"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"podsecuritypolicies"</span>]<br><span class="hljs-symbol">      resourceNames:</span> [<span class="hljs-string">"nfs-provisioner"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"use"</span>]<br>---<br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> run-nfs-provisioner<br><span class="hljs-symbol">subjects:</span><br>  - kind: ServiceAccount<br><span class="hljs-symbol">    name:</span> nfs-provisioner<br><span class="hljs-symbol">    namespace:</span> default        <span class="hljs-meta">#必写字段</span><br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h4 id="执行一下-3">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f rbac.yaml</span><br></code></pre></td></tr></table></figure><h3 id="（2）创建Deployment资源对象，用Pod代替-真正的NFS服务。">（2）创建Deployment资源对象，用Pod代替 真正的NFS服务。</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nfs-deployment.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">nfs-provisioner</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span>  <span class="hljs-string">/persistentvolumes</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">xgp</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/xgp/wsd</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/xgp/wsd</span><br></code></pre></td></tr></table></figure><h4 id="执行一下-4">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-deployment.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-8">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200212104037272.png" alt="image-20200212104037272"></p><h3 id="（3）创建storageclass的yaml文件">（3）创建storageclass的yaml文件</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim xgp-storageclass.yaml </span><br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> xgp-nfs<br><span class="hljs-symbol">provisioner:</span> xgp  <span class="hljs-meta">#通过provisioner字段关联到上述Deploy</span><br><span class="hljs-symbol">reclaimPolicy:</span> Retain<br></code></pre></td></tr></table></figure><h4 id="执行一下-5">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f test-storageclass.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-9">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get sc</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302163422262.png" alt="image-20200302163422262"></p><h2 id="3、创建一个mysql服务">3、创建一个mysql服务</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">14</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">15</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull busybox:<span class="hljs-number">1.25</span>.<span class="hljs-number">0</span><br>//下载所需镜像<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># helm fetch stable/mysql</span><br>//直接下载stable/mysql的chart包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># tar -zxf mysql-0.3.5.tgz </span><br>//解压mysql包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cd mysql/</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># vim values.yaml </span><br>//修改values.yaml文件，添加storageClass存储卷和更改svc的模式为NodePort<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302164514380.png" alt="image-20200302164514380"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302164620871.png" alt="image-20200302164620871"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@master mysql]# helm install stable/mysql -n xgp-mysql --<span class="hljs-keyword">set</span> mysqlRootPassword=<span class="hljs-number">123</span>.<span class="hljs-keyword">com</span> -<span class="hljs-keyword">f</span> <span class="hljs-built_in">values</span>.yaml <br>//基于<span class="hljs-built_in">values</span>.yaml和stable/mysql开启一个密码为<span class="hljs-number">123</span>.<span class="hljs-keyword">com</span>的mysqlpod<br></code></pre></td></tr></table></figure><h3 id="查看一下-10">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302174753877.png" alt="image-20200302174753877"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get pod -o wide</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302170330864.png" alt="image-20200302170330864"></p><h2 id="4、进入pod并查看一下">4、进入pod并查看一下</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[root@master mysql]#  kubectl exec -it xgp-mysql-mysql-67c6fb5f9-dn7s2 -- mysql -u root -p123.com<br>mysql&gt; show databases;<br><span class="hljs-code">+--------------------+</span><br>| Database           |<br><span class="hljs-code">+--------------------+</span><br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br>| sys                |<br><span class="hljs-code">+--------------------+</span><br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="5、mysql服务的升级与回滚">5、mysql服务的升级与回滚</h2><h3 id="（1）mysql服务的升级-2">（1）mysql服务的升级</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master mysql]# helm<span class="hljs-built_in"> upgrade </span>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">imageTag</span>=5.7.15 xgp-mysql stable/mysql -f values.yaml<br></code></pre></td></tr></table></figure><h4 id="查看一下-11">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115511986.png" alt="image-20200302115511986"></p><h3 id="（2）服务的回滚">（2）服务的回滚</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment">#  helm history xgp-mysql</span><br>//查看历史版本<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302175135110.png" alt="image-20200302175135110"></p><h4 id="回滚到版本一-2">回滚到版本一</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm rollback xgp-mysql 1</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-12">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200302115823991.png" alt="image-20200302115823991"></p><h2 id="6、进入pod并查看一下">6、进入pod并查看一下</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[root@master mysql]#  kubectl exec -it xgp-mysql-mysql-67c6fb5f9-dn7s2 -- mysql -u root -p123.com<br>mysql&gt; show databases;<br><span class="hljs-code">+--------------------+</span><br>| Database           |<br><span class="hljs-code">+--------------------+</span><br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br>| sys                |<br><span class="hljs-code">+--------------------+</span><br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h1>四、总结</h1><p><strong>Helm作为kubernetes应用的包管理以及部署工具，提供了应用打包，发布，版本管理以及部署，升级，回退等功能。Helm以Chart软件包的形式简化Kubernetes的应用管理，提高了对用户的友好性。</strong></p><h2 id="使用心得">使用心得</h2><p><strong>helm 客户端的功能非常简单，直接参考官网文档即可。</strong></p><p><strong>列一下相关使用心得：</strong></p><ul><li><strong>Helm 的所有功能都是围绕着 chart、release 和 repository 的；</strong></li><li><strong>仅初始化客户端相关配置且仅建立本地仓库，可执行 <code>helm init --client-only --skip-refresh</code>；</strong></li><li><strong>查找 chart 的方式是通过 HELM_HOME（默认是 ~/.helm 目录）下的 repositories 目录进行的，几个重要文件或目录为 cache、repositories/cache；</strong></li><li><strong>修改 chart index.yaml 的 url，可执行 <code>helm serve --url http://demo.com</code> 来重新 reindex；</strong></li><li><strong>依赖关系管理，requirements定义，子 chart 值定义；</strong></li><li><strong>install 、 update 的方式管理不方便，这样需要维护 chart 的版本关系，集成 install 和 update ，组成类似 k8s 中的 apply 命令；</strong></li><li><strong>package 命令 -u 可以更新依赖，建议推到 repositiories 前先 package ，否则后期可能出现依赖检测不全的错误；</strong></li><li><strong>release 相关的信息存储在 k8s 的 configmap 中，命名形式为 release_name.v1 的格式。 rollback 相关功能就是通过存储在 configmap 中的信息进行回滚的；</strong></li><li><strong>Helm 客户端与 k8s 中的 TillerServer 是通过 k8s 提供的 port-forward 来实现的，而 port-forward 需要在指定节点上部署 socat；</strong></li><li><strong>TillerServer 可以不部署在 k8s 中， 此时 Helm 客户端需要通过 HELM_HOST 环境变量来指定 TillerServer 的地址和端口；</strong></li><li><strong>建议 TillerServer 部署在 k8s 中，既然 Helm 为 CNCF 的一员，那么就尽量把云原生做到极致吧；</strong></li><li><strong>写 chart 时多参考官方最佳实践，<a href="https://docs.helm.sh/chart_best_practices/" target="_blank" rel="noopener">The Chart Best Practices Guide</a>；</strong></li></ul><h2 id="不足">不足</h2><p><strong>Helm 虽然提供了 install、update 命令来安装或更新对应的 release，但这给使用者带来了需要维护 release 状态的压力。举个例子，在还没安装 release 之前，release 是不存在的，update 操作是会失败的。反之已经存在的 release，install 操作也会失败。其实大部分情况下我是不需要知道 release 的状态的，不管它存在还是不存在，我执行的命令就是我希望的意图，我希望 release 能成为我执行命令后的状态。这一点上 k8s 的 apply 命令就非常好，不需要用户来维护资源的状态。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、Helm介绍&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;helm&lt;/code&gt;是基于&lt;code&gt;kubernetes&lt;/code&gt; 的包管理器。它之于 &lt;code&gt;kubernetes&lt;/code&gt; 就如 &lt;code&gt;yum&lt;/code&gt; 之于 &lt;code&gt;cent
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>18 k8s的HPA自动扩容与缩容</title>
    <link href="https://wsdlxgp.top/posts/2643.html"/>
    <id>https://wsdlxgp.top/posts/2643.html</id>
    <published>2020-05-01T13:20:01.070Z</published>
    <updated>2020-06-06T14:55:35.528Z</updated>
    
    <content type="html"><![CDATA[<h1>HPA</h1><p><strong>可以根据当前Pod资源的使用率，比如说CPU、磁盘、内存等进行副本Pod的动态的扩容与缩容。</strong></p><p><strong>前提条件:系统应该能否获取到当前Pod的资源使用情况 (意思是可以执行kubectl top pod命令,并且能够得到反馈信息)。</strong></p><p><strong>heapster：这个组件之前是集成在k8s集群的,不过在1.12版本之后被移除了。如果还想使用此功能，应该部署metricServer, 这个k8s集群资源使用情况的聚合器。</strong></p><p><strong>这里，我们使用一个测试镜像， 这个镜像基于php-apache制作的docker镜像，包含了一些可以运行cpu密集计算任务的代码。</strong></p><h2 id="1、创建一个deployment控制器">1、创建一个deployment控制器</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]#docker pull mirrorgooglecontainers/hpa-example:latest<br><span class="hljs-comment">//下载hpa-example镜像</span><br><br>[<span class="hljs-symbol">root@</span>master ~]# kubectl run php-apache --image=mirrorgooglecontainers/hpa-example --requests=cpu=<span class="hljs-number">200</span>m --expose  --port=<span class="hljs-number">80</span><br><span class="hljs-comment">//基于hpa-example镜像，运行一个deployment控制器，请求CPU的资源为200m，暴露一个80端口</span><br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments.<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228102643352.png" alt="image-20200228102643352"></p><h2 id="2、创建HPA控制器">2、创建HPA控制器</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl <span class="hljs-built_in">auto</span>scale deployment php-apache --cpu-percent=<span class="hljs-number">50</span> --min=<span class="hljs-number">1</span> --max=<span class="hljs-number">10</span><br><span class="hljs-comment">//当deployment资源对象的CPU使用率达到50%时，就进行扩容，最多可以扩容到10个</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-2">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get hpa<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228101908398.png" alt="image-20200228101908398"></p><h2 id="3、测试（master开启三个端口）">3、测试（master开启三个端口）</h2><p><strong>新开启多个终端，对pod进行死循环请求php-apache的pod</strong></p><h3 id="端口一">端口一</h3><h4 id="（1）创建一个应用，用来不停的访问我们刚刚创建的php-apache的svc资源。">（1）创建一个应用，用来不停的访问我们刚刚创建的php-apache的svc资源。</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master ~]# kubectl <span class="hljs-builtin-name">run</span> -i --tty load-generator <span class="hljs-attribute">--image</span>=busybox /bin/sh<br></code></pre></td></tr></table></figure><h4 id="（2）进入Pod内，执行以下这条命令-用来模拟访问php-apache的svc资源。">（2）进入Pod内，执行以下这条命令.用来模拟访问php-apache的svc资源。</h4><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs d">[root<span class="hljs-keyword">@master</span> ~]# <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span> wget -q -O- http:<span class="hljs-comment">//php-apache.default.svc.cluster.local ; done</span><br><span class="hljs-comment">//不停地向php-apache的svc资源，发送ok</span><br></code></pre></td></tr></table></figure><h3 id="端口二">端口二</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get hpa -w<br>//实时查看pod的cpu状态<br></code></pre></td></tr></table></figure><p>![image-20200228133816724](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228133816724.png)</p><p><strong>可以看到php-apache的cpu使用情况已经超过了50%</strong></p><h3 id="端口三">端口三</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">images</span>]<span class="hljs-comment"># kubectl get pod -w</span><br>//实时查看pod的状态<br></code></pre></td></tr></table></figure><p>![image-20200228134105507](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228134105507.png)</p><p><strong>可以看到当php-apache的cpu使用情况超过50%后，就会不断生成新的php-apache来进行负载均衡（目前设置的上线时10个），当然，如果cpu使用情况下降到50%，master就会陆续地删除php-apache，这样的使用可以减少不必要的资源浪费、资源分配不均等情况。</strong></p><h1>二、资源限制</h1><h2 id="1、基于Pod">1、基于Pod</h2><p><strong>Kubernetes对资源的限制实际上是通过cgroup来控制的，cgroup 是容器的一组用来控制内核如何运行进程的相关属性集合。针对内存、CPU 和各种设备都有对应的cgroup</strong></p><p><strong>默认情况下，Pod运行没有CPU和内存的限额。这意味着系统中的任何 Pod将能够像执行该Pod所在的节点一样，消耗足够多的CPU和内存。一般会针对某些应用的pod资源进行资源限制，这个资源限制是通过</strong></p><p><strong>resources的requests和limits来实现</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> cgroup-pod.yaml<br></code></pre></td></tr></table></figure><p>![image-20200228153809932](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228153809932.png)</p><p><strong>requests: 要分配的资源，limits为最高请求的资源值。可以简单的理解为初始值和最大值。</strong></p><h2 id="2、基于名称空间"><strong>2、基于名称空间</strong></h2><h3 id="1）-计算资源配额">1） 计算资源配额</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> compute-resources.yaml<br></code></pre></td></tr></table></figure><p>![image-20200228153818288](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228153818288.png)</p><h3 id="2）配置对象数量配额限制">2）配置对象数量配额限制</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> object-counts.yaml<br></code></pre></td></tr></table></figure><p>![image-20200228153828002](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228153828002.png)</p><h3 id="3）-配置CPU和内存的LimitRange">3） 配置CPU和内存的LimitRange</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> limitRange.yaml<br></code></pre></td></tr></table></figure><p>![image-20200228153834705](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228153834705.png)</p><p><strong>default 即 limit的值。</strong></p><p><strong>defaultRequest 即 request的值。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;HPA&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;可以根据当前Pod资源的使用率，比如说CPU、磁盘、内存等进行副本Pod的动态的扩容与缩容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前提条件:系统应该能否获取到当前Pod的资源使用情况 (意思是可以执行kubectl to
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>17 k8s的监控</title>
    <link href="https://wsdlxgp.top/posts/ewrt.html"/>
    <id>https://wsdlxgp.top/posts/ewrt.html</id>
    <published>2020-05-01T13:20:01.054Z</published>
    <updated>2020-06-06T14:55:25.404Z</updated>
    
    <content type="html"><![CDATA[<h1>一、k8s的UI访问界面-dashboard</h1><p><strong>在dashboard中，虽然可以做到创建、删除、修改资源等操作，但通常情况下，我们会把它当做健康k8s集群的软件。</strong></p><p><strong>作为Kubernetes的Web用户界面，用户可以通过Dashboard在Kubernetes集群中部署容器化的应用，对应用进行问题处理和管理，并对集群本身进行管理。通过Dashboard，用户可以查看集群中应用的运行情况，同时也能够基于Dashboard创建或修改部署、任务、服务等Kubernetes的资源。通过部署向导，用户能够对部署进行扩缩容，进行滚动更新、重启Pod和部署新应用。当然，通过Dashboard也能够查看Kubernetes资源的状态。</strong></p><h2 id="1、Dashboard提供的功能">1、Dashboard提供的功能</h2><p><strong>在默认情况下，Dashboard显示默认(default)命名空间下的对象，也可以通过命名空间选择器选择其他的命名空间。在Dashboard用户界面中能够显示集群大部分的对象类型。</strong></p><h3 id="1）集群管理"><strong>1）集群管理</strong></h3><p><strong>集群管理视图用于对节点、命名空间、持久化存储卷、角色和存储类进行管理。 节点视图显示CPU和内存的使用情况，以及此节点的创建时间和运行状态。 命名空间视图会显示集群中存在哪些命名空间，以及这些命名空间的运行状态。角色视图以列表形式展示集群中存在哪些角色，这些角色的类型和所在的命名空间。 持久化存储卷以列表的方式进行展示，可以看到每一个持久化存储卷的存储总量、访问模式、使用状态等信息；管理员也能够删除和编辑持久化存储卷的YAML文件。</strong></p><h3 id="2）-工作负载"><strong>2）</strong> <strong>工作负载</strong></h3><p><strong>工作负载视图显示部署、副本集、有状态副本集等所有的工作负载类型。在此视图中，各种工作负载会按照各自的类型进行组织。 工作负载的详细信息视图能够显示应用的详细信息和状态信息，以及对象之间的关系。</strong></p><h3 id="3）-服务发现和负载均衡"><strong>3）</strong> <strong>服务发现和负载均衡</strong></h3><p><strong>服务发现视图能够将集群内容的服务暴露给集群外的应用，集群内外的应用可以通过暴露的服务调用应用，外部的应用使用外部的端点，内部的应用使用内部端点</strong>。</p><h3 id="4）-存储"><strong>4）</strong> <strong>存储</strong></h3><p><strong>存储视图显示被应用用来存储数据的持久化存储卷申明资源。</strong></p><h3 id="5）-配置"><strong>5）</strong> <strong>配置</strong></h3><p><strong>配置视图显示集群中应用运行时所使用配置信息，Kubernetes提供了配置字典（ConfigMaps）和秘密字典（Secrets），通过配置视图，能够编辑和管理配置对象，以及查看隐藏的敏感信息。</strong></p><h3 id="6）-日志视图"><strong>6）</strong> <strong>日志视图</strong></h3><p><strong>Pod列表和详细信息页面提供了查看日志视图的链接，通过日志视图不但能够查看Pod的日志信息，也能够查看Pod容器的日志信息。通过Dashboard能够根据向导创建和部署一个容器化的应用，当然也可以通过手工的方式输入指定应用信息，或者通过上传YAML和JSON文件来创建和不受应用。</strong></p><h2 id="2、下载所需yaml文件和镜像">2、下载所需yaml文件和镜像</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># docker pull kubernetesui/dashboard:v2.0.0-rc5</span><br></code></pre></td></tr></table></figure><h2 id="3、修改-recommended-yaml">3、修改 recommended.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">https]#vim</span> <span class="hljs-string">recommended.yaml</span> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>            <span class="hljs-comment">#添加40</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><h3 id="执行一下">执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f recommended.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc -n kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226085710776.png" alt="image-20200226085710776"></p><h2 id="3、浏览器访问https-192-168-1-21-32306">3、浏览器访问https://192.168.1.21:32306</h2><p><strong>PS:如果是使用的旧版本的dashboard, 使用谷歌浏览器登录，可能是不成功的，需要换成其他的浏览器，比如:火狐。</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226110629545.png" alt="image-20200226110629545"></p><h2 id="4、基于token的方法登录dashboard">4、基于token的方法登录dashboard</h2><h3 id="1-创建一个dashboard的管理用户">&lt;1&gt;创建一个dashboard的管理用户</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl create serviceaccount dashboard-admin -n kube-system</span><br></code></pre></td></tr></table></figure><h3 id="2-绑定用户为集群管理用户">&lt;2&gt;绑定用户为集群管理用户</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br></code></pre></td></tr></table></figure><h3 id="3-获取Token">&lt;3&gt;获取Token</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get secrets -n kube-system | grep dashboard-admin</span><br>//先得到Token的名称<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090141138.png" alt="image-20200226090141138"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl describe secrets -n kube-system  dashboard-admin-token-62bh9</span><br>//查看上述得到的secret资源的详细信息，会得到token<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090425136.png" alt="image-20200226090425136"></p><h3 id="4-在浏览器上使用token登录。">&lt;4&gt;在浏览器上使用token登录。</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090838680.png" alt="image-20200226090838680"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226091007042.png" alt="image-20200226091007042"></p><p><strong>创建一个资源</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094008072.png" alt="image-20200226094008072"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094127460.png" alt="image-20200226094127460"></p><p><strong>查看是否创建成功</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094149479.png" alt="image-20200226094149479"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226094209114.png" alt="image-20200226094209114"></p><h2 id="5、基于kubeconfig配置文件的方法登录dashboard">5、基于kubeconfig配置文件的方法登录dashboard</h2><h3 id="1-获取Token">&lt;1&gt;获取Token</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get secrets -n kube-system | grep dashboard-admin</span><br>//先得到Token的名称<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090141138.png" alt="image-20200226090141138"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl describe secrets -n kube-system  dashboard-admin-token-62bh9</span><br>//查看上述得到的secret资源的详细信息，会得到token<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226090425136.png" alt="image-20200226090425136"></p><h3 id="2-生成kubeconfig配置文件。">&lt;2&gt;生成kubeconfig配置文件。</h3><p><strong>设置一个环境变量代表获取的token</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> <span class="hljs-identifier">https</span>]</span># DASH_TOKEN=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">secrets</span> -<span class="hljs-params">n</span> <span class="hljs-params">kube</span>-<span class="hljs-params">system</span> <span class="hljs-params">dashboard</span>-<span class="hljs-params">admin</span>-<span class="hljs-params">token</span>-62bh9  -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=&#123;.<span class="hljs-params">data</span>.<span class="hljs-params">token</span>&#125; | <span class="hljs-params">base64</span> -<span class="hljs-params">d</span>)</span><br></code></pre></td></tr></table></figure><p><strong>将k8s集群的配置信息写入kubeconfig配置文件中。</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl<span class="hljs-built_in"> config </span>set-cluster kubernetes <span class="hljs-attribute">--server</span>=192.168.1.21:6443 <span class="hljs-attribute">--kubeconfig</span>=/root/.dashboard-admin.conf<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl<span class="hljs-built_in"> config </span>set-credentials dashboard-admin <span class="hljs-attribute">--token</span>=<span class="hljs-variable">$DASH_TOKEN</span> <span class="hljs-attribute">--kubeconfig</span>=/root/.dashboard-admin.conf<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl<span class="hljs-built_in"> config </span>set-context dashboard-admin@kubernetes <span class="hljs-attribute">--cluster</span>=kubernetes <span class="hljs-attribute">--user</span>=dashboard-admin <span class="hljs-attribute">--kubeconfig</span>=/root/.dashboard-admin.conf<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl<span class="hljs-built_in"> config </span>use-context dashboard-admin@kubernetes <span class="hljs-attribute">--kubeconfig</span>=/root/.dashboard-admin.conf<br></code></pre></td></tr></table></figure><h3 id="3-将生成的-root-dashboard-admin-conf的配置文件，导出并做保存。">&lt;3&gt;将生成的/root/.dashboard-admin.conf的配置文件，导出并做保存。</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># sz /root/.dashboard-admin.conf </span><br>//导出到自己习惯的位置即可<br></code></pre></td></tr></table></figure><h3 id="4-从浏览器选择kubeconfig的登录方式，然后导入配置文件即可。">&lt;4&gt;从浏览器选择kubeconfig的登录方式，然后导入配置文件即可。</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226100349876.png" alt="image-20200226100349876"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226100424656.png" alt="image-20200226100424656"></p><h1>二、部署weave-scope监控k8s集群</h1><h2 id="1、在github上查找scope的yaml文件">1、在github上查找scope的yaml文件</h2><h3 id="（1）github上搜索scope"><strong>（1）github上搜索scope</strong></h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104345720.png" alt="image-20200226104345720"></p><h3 id="（2）进入k8s的部署scope的说明"><strong>（2）进入k8s的部署scope的说明</strong></h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104445086.png" alt="image-20200226104445086"></p><h3 id="（3）选择k8s的部署"><strong>（3）选择k8s的部署</strong></h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104603800.png" alt="image-20200226104603800"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226104711134.png" alt="image-20200226104711134"></p><h3 id="（4）复制上面的链接，并下载yaml文件">（4）复制上面的链接，并下载yaml文件</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># wget https://cloud.weave.works/k8s/scope.yaml</span><br></code></pre></td></tr></table></figure><h2 id="2、修改下载的yaml文件并运行">2、修改下载的yaml文件并运行</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">scope.yaml</span>  <span class="hljs-comment">#编辑yaml文件</span><br><span class="hljs-comment">#跳转至213行，修改其service的端口类型</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>         <span class="hljs-comment">#修改类型为NodePort</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br>          <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">targetPort:</span> <span class="hljs-number">4040</span><br></code></pre></td></tr></table></figure><h3 id="（1）执行一下">（1）执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f scope.yaml</span><br></code></pre></td></tr></table></figure><h3 id="（2）查看容器的运行情况，确定处于正常运行">（2）查看容器的运行情况，确定处于正常运行</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get  pod -o wide -n weave</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226105456676.png" alt="image-20200226105456676"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc -n weave</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226105545660.png" alt="image-20200226105545660"></p><blockquote><p><strong>#DaemonSet资源对象：weave-scope-agent（代理）：负责收集节点的信息；</strong><br><strong>#deployment资源对象:weave-scope-app(应用)：从agent获取数据，通过web UI展示并与用户交互；</strong><br><strong>#DaemonSet资源对象的特性和deployment相比，就是DaemonSet资源对象会在每个节点上都运行且只能运行一个pod。</strong><br><strong>#由于每个节点都需要监控，所以用到了DaemonSet这种资源对象</strong></p></blockquote><h2 id="3、浏览器访问一下http-192-168-1-21-31841">3、浏览器访问一下http://192.168.1.21:31841/</h2><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226105729990.png" alt="image-20200226105729990"></p><p><strong>在scope的web界面中，可以查看很多的东西，pod、node节点等详细信息，包括打开容器的终端，查看其日志信息等等</strong></p><h1>三、部署Prometheus服务</h1><p><em><strong>PS:在这里部署的prometheus,并不是Prometheus官网提供的，而是使用的coreos提供的prometheus项目。</strong></em></p><h3 id="在部署之前，先来了解一下Prometheus各个组件的作用吧！"><strong>在部署之前，先来了解一下Prometheus各个组件的作用吧！</strong></h3><ul><li><strong>MetricsServer:</strong>  是k8s集群资源使用情况的聚合器，收集数据给k8s集群内使用，如kubectl,hpa,scheduler等。</li><li><strong>Prometheus Operator</strong> : 是一个系统检测和警报工具箱，用来存储监控数据。</li><li><strong>Prometheus node-exporter</strong> ：收集k8s集群资源的数据，指定告警规则。</li><li><strong>Prometheus</strong> ：收集apiserver，scheduler，controller-manager，kubelet组件的数据，通过http协议传输。</li><li><strong>Grafana:</strong> 可视化数据统计和监控平台。</li></ul><h2 id="1、在github上搜索coreos-prometheus">1、在github上搜索coreos/prometheus</h2><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226111843047.png" alt="image-20200226111843047"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226112039813.png" alt></p><p><strong>复制链接</strong></p><h2 id="2、克隆github上的promethes项目">2、克隆github上的promethes项目</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">promethes</span>]<span class="hljs-comment"># yum -y install git</span><br>//下载git命令<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">promethes</span>]<span class="hljs-comment"># git clone  https://github.com/coreos/kube-prometheus.git</span><br>//克隆github上的项目<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226114748815.png" alt="image-20200226114748815"></p><h2 id="3、修改grafapa-service-yaml文件-更改为nodePort的暴露方式，暴露端口为31001-。">3、修改grafapa-service.yaml文件, 更改为nodePort的暴露方式，暴露端口为31001.。</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">promethes]#</span> <span class="hljs-string">cd</span> <span class="hljs-string">kube-prometheus/manifests/</span><br><span class="hljs-string">//进入kube-prometheus的manifests目录</span><br><span class="hljs-string">[root@master</span> <span class="hljs-string">manifests]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">grafana-service.yaml</span>    <span class="hljs-comment">#修改grafana的yaml文件</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">grafana</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">grafana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>       <span class="hljs-comment">#改为NodePort类型</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31001</span>    <span class="hljs-comment">#映射到宿主机31001端口</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">grafana</span><br></code></pre></td></tr></table></figure><h2 id="3-修改prometheus-service-yaml文件，-更改为nodePort的暴露方式，暴露端口为31002">3.修改prometheus-service.yaml文件， 更改为nodePort的暴露方式，暴露端口为31002.</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">manifests]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">prometheus-service.yaml</span>    <span class="hljs-comment">#修改prometheus的yaml文件</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">prometheus:</span> <span class="hljs-string">k8s</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>      <span class="hljs-comment">#改为NodePort类型</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31002</span>    <span class="hljs-comment">#映射到宿主机31002端口</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">prometheus:</span> <span class="hljs-string">k8s</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br></code></pre></td></tr></table></figure><h2 id="4、修改alertmanager-service-yaml文件，-更改为nodePort的暴露方式，暴露端口为31003">4、修改alertmanager-service.yaml文件， 更改为nodePort的暴露方式，暴露端口为31003</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">manifests]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">alertmanager-service.yaml</span>    <span class="hljs-comment">#修改alertmanager的yaml文件</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">alertmanager:</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">alertmanager-main</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>             <span class="hljs-comment">#改为NodePort类型</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9093</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31003</span>         <span class="hljs-comment">#映射到宿主机31003端口</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">alertmanager:</span> <span class="hljs-string">main</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br></code></pre></td></tr></table></figure><h2 id="5、将setup目录中所有的yaml文件-全部运行。是运行以上yaml文件的基础环境配置。">5、将setup目录中所有的yaml文件,全部运行。是运行以上yaml文件的基础环境配置。</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># cd setup/</span><br>//进入setup/目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># kubectl apply -f setup/</span><br>//运行setup目录中所有的yaml文件<br></code></pre></td></tr></table></figure><h2 id="6、将主目录-kube-prometheus-中所有的yaml文件-全部运行。">6、将主目录(kube-prometheus)中所有的yaml文件,全部运行。</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># cd ..</span><br>//返回上一级目录（kube-prometheus）<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">kube-prometheus</span>]<span class="hljs-comment"># kubectl apply -f manifests/</span><br>//运行kube-prometheus目录中所有的yaml文件<br></code></pre></td></tr></table></figure><h3 id="查看一下-2">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -n monitoring<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203237647.png" alt="image-20200226203237647"></p><p><strong>部署成功之后，可以运行一条命令， 查看资源使用情况(MetricsServer必须部署成功)</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">images</span>]<span class="hljs-comment"># kubectl top node</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228085819377.png" alt="image-20200228085819377"></p><h2 id="7、浏览器访问一下http-192-168-1-21-31001">7、浏览器访问一下http://192.168.1.21:31001</h2><p><strong>客户端访问群集中任意节点的IP+30100端口，即可看到以下界面（默认用户名和密码都是admin）</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203416325.png" alt="image-20200226203416325"></p><p><strong>根据提示更改密码：</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203613578.png" alt="image-20200226203613578"></p><h3 id="（1）添加模板">（1）添加模板</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226203911457.png" alt="image-20200226203911457"></p><p><strong>依次点击“import”进行导入下面三个模板：</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204011409.png" alt="image-20200226204011409"></p><h3 id="（2）进行以下点击，即可查看群集内的监控状态">（2）进行以下点击，即可查看群集内的监控状态</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204247627.png" alt="image-20200226204247627"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204306014.png" alt="image-20200226204306014"></p><p><strong>以下可看到监控状态</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204632455.png" alt="image-20200226204632455"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200226204638784.png" alt="image-20200226204638784"></p><h2 id="8、导入监控模板">8、导入监控模板</h2><p><strong>从grafana的官网搜索</strong><a href="https://grafana.com/" target="_blank" rel="noopener">https://grafana.com/</a></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228093639900.png" alt="image-20200228093639900"></p><p><strong>复制以下这个模板的id</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228093854640.png" alt></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094048611.png" alt="image-20200228094048611"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094320274.png" alt="image-20200228094320274"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094224276.png" alt="image-20200228094224276"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200228094348407.png" alt="image-20200228094348407"></p><p><strong>现在可以看到监控画面了</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;一、k8s的UI访问界面-dashboard&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;在dashboard中，虽然可以做到创建、删除、修改资源等操作，但通常情况下，我们会把它当做健康k8s集群的软件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作为Kubernetes的We
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>16 ingress资源的应用 </title>
    <link href="https://wsdlxgp.top/posts/qwen.html"/>
    <id>https://wsdlxgp.top/posts/qwen.html</id>
    <published>2020-05-01T13:20:01.033Z</published>
    <updated>2020-06-06T14:55:12.438Z</updated>
    
    <content type="html"><![CDATA[<h1>Ingress实现虚拟主机的方案</h1><h2 id="1、首先确定要运行ingress-nginx-controller服务。"><strong>1、首先确定要运行ingress-nginx-controller服务。</strong></h2><h3 id="在gitbub上找到所需的ingress的yaml文件">在gitbub上找到所需的ingress的yaml文件</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103818065.png" alt="image-20200219103818065"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103248246.png" alt="image-20200219103248246"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103252620.png" alt="image-20200219103252620"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103537536.png" alt="image-20200219103537536"></p><h3 id="4-master下载">4. master下载</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml</span><br></code></pre></td></tr></table></figure><h3 id="5-修改-mandatory-yaml-文件">5. 修改 mandatory.yaml 文件</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># vim mandatory.yaml</span><br>      hostNetwork: <span class="hljs-literal">true</span>   <span class="hljs-comment">#213</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219104346146.png" alt="image-20200219104346146"></p><h4 id="（1）执行一下">（1）执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f mandatory.yaml</span><br></code></pre></td></tr></table></figure><h4 id="（2）查看一下">（2）查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get pod -n ingress-nginx</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224123916253.png" alt="image-20200224123916253"></p><h2 id="2、将ingress-nginx-controller暴露为一个Service资源对象。"><strong>2、将ingress-nginx-controller暴露为一个Service资源对象。</strong></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">service-nodeport.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">ingress-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">ingress-nginx</span><br><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h4 id="（1）执行一下-2"><strong>（1）执行一下</strong></h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f service-nodeport.yaml</span><br></code></pre></td></tr></table></figure><h4 id="（2）查看一下-2"><strong>（2）查看一下</strong></h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get svc -n ingress-nginx</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219111029408.png" alt="image-20200219111029408"></p><h2 id="3、创建一个deployment资源，和一个service资源，-并相互关联。">3、创建一个deployment资源，和一个service资源， 并相互关联。</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy1.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deploy1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx1</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx1</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h4 id="执行一下">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f deploy1.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224091013907.png" alt="image-20200224091013907"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224091036678.png" alt="image-20200224091036678"></p><h3 id="然后复制deploy1-yaml资源工创建另外”一对“服务。">然后复制deploy1.yaml资源工创建另外”一对“服务。</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy2.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deploy2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx2</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx2</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx2</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h4 id="执行一下-2">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f deploy2.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-2">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get deployments.</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224091747509.png" alt="image-20200224091747509"></p><h2 id="4-创建ingress的yaml文件，关联是svc1和svc2">4. 创建ingress的yaml文件，关联是svc1和svc2</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">ingress.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">www1.bdqn.com</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>          <span class="hljs-attr">backend:</span><br>            <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc-1</span><br>            <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">www2.bdqn.com</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>          <span class="hljs-attr">backend:</span><br>            <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc-2</span><br>            <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h4 id="执行一下-3">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f ingress.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-3">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get ingresses.</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092438021.png" alt="image-20200224092438021"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe ingresses. ingress-1</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092823654.png" alt="image-20200224092823654"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe ingresses. ingress-2</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092846086.png" alt="image-20200224092846086"></p><h2 id="5、由于实验环境限制，所以自己用来模拟-一个域名。">5、由于实验环境限制，所以自己用来模拟-一个域名。</h2><h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。">进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224092744445.png" alt="image-20200224092744445"></p><h4 id="访问一下">访问一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get svc -n ingress-nginx </span><br>//查看映射的端口<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224093328158.png" alt="image-20200224093328158"></p><p><a href="http://www1.bdqn.com:30817/" target="_blank" rel="noopener">http://www1.bdqn.com:30817/</a></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224094944536.png" alt="image-20200224094944536"></p><p><a href="http://www2.bdqn.com:30817/" target="_blank" rel="noopener">http://www2.bdqn.com:30817/</a></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224095008674.png" alt="image-20200224095008674"></p><h4 id="总结上述示例的pod是如何一步一步可以使client访问到的，总结如下：">总结上述示例的pod是如何一步一步可以使client访问到的，总结如下：</h4><p><strong>后端pod===》service====》ingress规则====》写入Ingress-nginx-controller配置文件并自动重载使更改生效===》对本机进行域名解析====》实现client通过域名的IP+端口都可以访问到后端pod</strong></p><h1>Ingress资源实现https代理安全访问。</h1><p><strong>在上面的操作中，实现了使用ingress-nginx为后端所有pod提供一个统一的入口，那么，有一个非常严肃的问题需要考虑，就是如何为我们的pod配置CA证书来实现HTTPS访问？在pod中直接配置CA么？那需要进行多少重复性的操作？而且，pod是随时可能被kubelet杀死再创建的。当然这些问题有很多解决方法，比如直接将CA配置到镜像中，但是这样又需要很多个CA证书。</strong></p><p><strong>这里有更简便的一种方法，就拿上面的情况来说，后端有多个pod，pod与service进行关联，service又被ingress规则发现并动态写入到ingress-nginx-controller容器中，然后又为ingress-nginx-controller创建了一个Service映射到群集节点上的端口，来供client来访问。</strong></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224143045045.png" alt="image-20200224143045045"></p><p><strong>在上面的一系列流程中，关键的点就在于ingress规则，我们只需要在ingress的yaml文件中，为域名配置CA证书即可，只要可以通过HTTPS访问到域名，至于这个域名是怎么关联到后端提供服务的pod，这就是属于k8s群集内部的通信了，即便是使用http来通信，也无伤大雅。</strong></p><h2 id="1-生成证书">1. 生成证书</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># mkdir https</span><br>//创建一个放置证书的目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cd https/</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=testsvc /O=testsvc"</span><br>//生成证书<br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224100716121.png" alt="image-20200224100716121"></p><h2 id="2-创建secret资源，-保存证书。">2. 创建secret资源， 保存证书。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl create<span class="hljs-built_in"> secret </span>tls tls-secret <span class="hljs-attribute">--key</span>=tls.key --cert tls.crt<br></code></pre></td></tr></table></figure><h2 id="3、创建一个deploy3-yaml文件，模拟一个web服务。">3、创建一个deploy3.yaml文件，模拟一个web服务。</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy3.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deploy3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx3</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx3</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx3</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h4 id="执行一下-4">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f deploy3.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-4">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224104212886.png" alt="image-20200224104212886"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224104240133.png" alt="image-20200224104240133"></p><h2 id="4、创建对应的ingress规则。">4、创建对应的ingress规则。</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">https]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">ingress.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">tls:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">www3.bdqn.com</span>           <span class="hljs-comment">#域名</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">tls-secret</span>    <span class="hljs-comment">#保存的证书</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">www3.bdqn.com</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>          <span class="hljs-attr">backend:</span><br>            <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc-3</span><br>            <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h3 id="执行一下-5">执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f ingress.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-5">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get ingresses.</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105525215.png" alt="image-20200224105525215"></p><h2 id="5-查找对应service-nodePort的443端口映射的端口，直接用浏览器访问即可。">5.查找对应service nodePort的443端口映射的端口，直接用浏览器访问即可。</h2><h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。-2">进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</h4><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105118183.png" alt="image-20200224105118183"></p><h4 id="查看映射端口">查看映射端口</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc -n ingress-nginx</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105347424.png" alt="image-20200224105347424"></p><p><a href="https://www3.bdqn.com:31372/" target="_blank" rel="noopener">https://www3.bdqn.com:31372/</a></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200224105409448.png" alt="image-20200224105409448"></p><p><strong>k8s集群利用了“一切皆为资源”的原理，把生成的ca证书当成一个公共的资源来使用，使用时只需绑定保存的ca证书即可，不像之前一样，需要一个一个的创建ca证书，然后在关联起来，方便好用又快捷。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Ingress实现虚拟主机的方案&lt;/h1&gt;
&lt;h2 id=&quot;1、首先确定要运行ingress-nginx-controller服务。&quot;&gt;&lt;strong&gt;1、首先确定要运行ingress-nginx-controller服务。&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>15 Ingress-nginx</title>
    <link href="https://wsdlxgp.top/posts/dsfj.html"/>
    <id>https://wsdlxgp.top/posts/dsfj.html</id>
    <published>2020-05-01T13:20:01.018Z</published>
    <updated>2020-06-06T14:54:47.898Z</updated>
    
    <content type="html"><![CDATA[<h1>Ingress-nginx</h1><p><strong>简单的理解:  原先暴露的service,现在给定个统一的访问入口。</strong></p><h2 id="1-创建一个web服务，用deployment资源，-用httpd镜像，然后创建一个service资源与之关联。">1) 创建一个web服务，用deployment资源， 用httpd镜像，然后创建一个service资源与之关联。</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">ingress]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy_1.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bdqn-ns</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpd-deploy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">bdqn-ns</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">httpd</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpd-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">bdqn-ns</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-port</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31033</span><br></code></pre></td></tr></table></figure><h3 id="执行一下">执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f deploy_1.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get svc -n bdqn-ns</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219093450798.png" alt="image-20200219093450798"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get pod -n bdqn-ns</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219093511785.png" alt="image-20200219093511785"></p><h3 id="访问一下">访问一下</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219093653692.png" alt="image-20200219093653692"></p><h2 id="2-创建一个web服务，用deployment-资源，用tomcat-8-5-45镜像。">2) 创建一个web服务，用deployment 资源，用tomcat:8.5.45镜像。</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">ingress]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy_2.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-deploy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">bdqn-tomcat</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat:8.5.45</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">bdqn-tomcat</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-port</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32033</span><br></code></pre></td></tr></table></figure><h3 id="执行一下-2">执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f deploy_2.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-2">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get pod -n bdqn-ns</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219094056123.png" alt="image-20200219094056123"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get svc -n bdqn-ns</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219094146341.png" alt="image-20200219094146341"></p><h3 id="访问一下-2">访问一下</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219100037136.png" alt="image-20200219100037136"></p><h2 id="3-在k8s集群前边部署一个反向代理服务器，这个服务器代理这k8s集群内部的service资源。">3) 在k8s集群前边部署一个反向代理服务器，这个服务器代理这k8s集群内部的service资源。</h2><h3 id="1-Ingress"><strong>1. Ingress:</strong></h3><p><strong>（1）Ingresscontroller:</strong></p><p><strong>将新加入的Ingress转化为反向代理服务器的配置文件，并使之生效。(动态的感知k8s集群内Ingress资源的变化。）</strong></p><p><strong>（2）Ingress :</strong></p><p><strong>Ingress:将反向代理服务器的配置抽象成一个Ingress对象，每添加一个新的服务，只需要写一个新的Ingress的yaml文件即可。</strong></p><h3 id="2-Nginx-反向代理服务器。">2. Nginx :反向代理服务器。</h3><p>​<strong>需要解决了两个问题:</strong></p><p>​<strong>1、动态的配置服务。</strong></p><p>​<strong>2、减少不必要的端口暴露。</strong></p><p>​<strong>基于nginx的ingress controller根据不同的开发公司，又分为两种:<br>​1、k8s社区版的: Ingerss - nginx.<br>​2、nginx公司自己开发的: nginx- ingress .</strong></p><h3 id="3-在gitbub上找到所需的ingress的yaml文件">3. 在gitbub上找到所需的ingress的yaml文件</h3><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103818065.png" alt="image-20200219103818065"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103248246.png" alt="image-20200219103248246"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103252620.png" alt="image-20200219103252620"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103537536.png" alt="image-20200219103537536"></p><h3 id="4-master下载">4. master下载</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml</span><br></code></pre></td></tr></table></figure><h3 id="5-修改-mandatory-yaml-文件">5. 修改 mandatory.yaml 文件</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># vim mandatory.yaml</span><br>      hostNetwork: <span class="hljs-literal">true</span>   <span class="hljs-comment">#213</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219104346146.png" alt="image-20200219104346146"></p><p><strong>---------如果ingress-controller镜像下载不成功，可以直接使用下边的镜像。</strong><br><strong>docker pull <a href="http://registry.cn-hangzhou.aliyuncs.com/ilanni/nginx-ingress-controller:0.22.0" target="_blank" rel="noopener">registry.cn-hangzhou.aliyuncs.com/ilanni/nginx-ingress-controller:0.22.0</a></strong></p><p><strong>需要注意的是，如果使用上述镜像，需要将deployment资源指定的镜像名称进行修改。</strong></p><p><strong>修改的是madatory.yaml文件里的deployment资源。</strong></p><p><strong>在deployment资源中，如果添加了此字段，意味着Pod中运行的应用可以直接使用node节点的端口，这样node节 点主机所在网络的其他主机，就可以通过访问该端口访问此应用。(类似于docker映射到宿主机 上的端口。)</strong></p><h4 id="（1）执行一下">（1）执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f mandatory.yaml</span><br></code></pre></td></tr></table></figure><h4 id="（2）查看一下">（2）查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get pod -n ingress-nginx</span><br></code></pre></td></tr></table></figure><h3 id="6-创建一个service的yaml文件">6. 创建一个service的yaml文件</h3><h4 id="（1）执行一下-2">（1）执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f mandatory.yaml</span><br></code></pre></td></tr></table></figure><h4 id="（2）查看一下-2">（2）查看一下</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">ingress]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">mandatory-svc.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ingress-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">ingress-nginx</span><br></code></pre></td></tr></table></figure><p><strong>（1）执行一下</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f mandatory-svc.yaml</span><br></code></pre></td></tr></table></figure><p><strong>（2）查看一下</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get svc -n ingress-nginx</span><br></code></pre></td></tr></table></figure><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219111029408.png" alt="image-20200219111029408"></p><h2 id="4）创建Ingress资源。">4）创建Ingress资源。</h2><p><strong>ingress ：</strong><br><strong>ingress-nginx-controller: 动态感知ingress 资源的变化</strong><br><strong>ingress: 创建svc与ingress-nginx-controller 关联的规则</strong></p><h3 id="（1）编写ingress的yaml文件">（1）编写ingress的yaml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">ingress.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bdqn-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span>             <span class="hljs-comment">#规则 </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">ingress.bdqn.com</span>   <span class="hljs-comment">#域名</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">httpd-svc</span>       <span class="hljs-comment">#关联service</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span>              <span class="hljs-comment">#关联service的映射端口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/tomcat</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">tomcat-svc</span>      <span class="hljs-comment">#关联service</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span>           <span class="hljs-comment">#关联service的映射端口</span><br></code></pre></td></tr></table></figure><h4 id="执行一下-3">执行一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f ingress.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看一下-3">查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -n ingress-nginx -o wide</span><br></code></pre></td></tr></table></figure><p>![image-20200221094602218](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221094602218.png)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get ingresses. -n bdqn-ns</span><br></code></pre></td></tr></table></figure><p>![image-20200221092912191](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221092912191.png)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe ingresses. -n bdqn-ns</span><br></code></pre></td></tr></table></figure><p>![image-20200221093013134](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221093013134.png)</p><h4 id="进入pod查看一下">进入pod查看一下</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl exec -it -n ingress-nginx nginx-ingress-controller-5954d475b6-24k92 /bin/sh</span><br>/etc/nginx $ cat nginx.conf<br></code></pre></td></tr></table></figure><p>![image-20200221094404491](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221094404491.png)</p><p>![image-20200221094408211](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221094408211.png)</p><h3 id="（2）访问一下">（2）访问一下</h3><h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。"><strong>进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</strong></h4><p>![image-20200221103807318](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103807318.png)</p><h4 id="访问http-ingress-bdqn-com">访问http://ingress.bdqn.com/</h4><p>![image-20200221095323635](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221095323635.png)</p><h4 id="访问http-ingress-bdqn-com-tomcat">访问http://ingress.bdqn.com/tomcat</h4><p>![image-20200221102354657](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221102354657.png)</p><h2 id="5）为ingress-nginx创建一个service（使用官网的service文件就可以）">5）为ingress-nginx创建一个service（使用官网的service文件就可以）</h2><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103818065.png" alt="image-20200219103818065"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103248246.png" alt="image-20200219103248246"></p><p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200219103252620.png" alt="image-20200219103252620"></p><p>![image-20200221103351973](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103351973.png)</p><p><em><strong>复制上面的网址</strong></em></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># wget  https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/provider/baremetal/service-nodeport.yaml</span><br>//下载文件到<span class="hljs-literal">master</span>节点<br></code></pre></td></tr></table></figure><h3 id="执行一下，下载的service文件">执行一下，下载的service文件</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f service-nodeport.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-4">查看一下</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master yaml]# kubectl <span class="hljs-builtin-name">get</span><span class="hljs-built_in"> service </span>-n ingress-nginx<br></code></pre></td></tr></table></figure><p>![image-20200221103644779](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103644779.png)</p><h3 id="访问一下-3">访问一下</h3><h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。-2">进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</h4><p>![image-20200221103835847](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103835847.png)</p><h3 id="访问http-ingress-bdqn-com-30817">访问http://ingress.bdqn.com:30817/</h3><p>![image-20200221103927247](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103927247.png)</p><h3 id="访问http-ingress-bdqn-com-30817-tomcat">访问http://ingress.bdqn.com:30817/tomcat</h3><p>![image-20200221103950477](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103950477.png)</p><p><strong>Service -Nodeport:因为ingress - nginx - controller运行在了集群内的其中一个节点，为了保证即使这个节点宕机，我们对应的域名仍然能够正常访问服务，所以我们将ingress -nginx- controller也暴露为一个service资源。</strong></p><h2 id="练习">练习:</h2><p>​    <strong>创建一个deploymen资源，基于nginx镜像，repolicas：2个.然后创建一个service资源关联这个deployment资源。最后创建一个ingress资源，<a href="http://xn--svcingress-ui2pp14ahmcbv2dk27ivg4b.bdqn.com/nginx" target="_blank" rel="noopener">将上述svc关联到ingress.bdqn.com/nginx</a> 目录下。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">lianxi.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-666</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-666</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-666</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-nginx</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-666</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-nginx</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-port</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30000</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-666</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">ingress.xgp.com</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">xgp-svc</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h3 id="执行一下-4">执行一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f lianxi.yaml</span><br></code></pre></td></tr></table></figure><h3 id="查看一下-5">查看一下</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe ingresses. -n xgp-666</span><br></code></pre></td></tr></table></figure><p>![image-20200221112302483](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221112302483.png)</p><h3 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。-3"><strong>进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</strong></h3><h3 id="添加完之后访问一下http-ingress-xgp-com">添加完之后访问一下http://ingress.xgp.com/</h3><p>![image-20200221112416946](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221112416946.png)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Ingress-nginx&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;简单的理解:  原先暴露的service,现在给定个统一的访问入口。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-创建一个web服务，用deployment资源，-用httpd镜像，然后创建一个service资
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
