<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xgp &amp; Blog</title>
  
  <subtitle>Today is still beautiful</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-21T11:30:22.668Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wu Shao Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx优化与防盗链</title>
    <link href="http://yoursite.com/posts/cfe.html"/>
    <id>http://yoursite.com/posts/cfe.html</id>
    <published>2020-04-20T16:00:00.000Z</published>
    <updated>2020-04-21T11:30:22.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx优化与防盗链"><a href="#Nginx优化与防盗链" class="headerlink" title="Nginx优化与防盗链"></a>Nginx优化与防盗链</h1><p>Nginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器,Nginx， 它的发音为“engine X”， 是一个高<br>性能的 HTTP 和反向代理服务器，同时也是一个 IMAP/POP3/SMTP 代理服务器． Nginx 是由<br>俄罗斯人 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发.<br>Nginx 以事件驱动（epoll） 的方式编写，所以有非常好的性能，同时也是一个非常高效的反<br>向代理、负载平衡。 但是 Nginx 并不支持 cgi 方式运行，原因是可以减少因此带来的一些程<br>序上的漏洞。所以必须使用 FastCGI 方式来执行 PHP 程序。<br>由于 Nginx 本身的一些优点， 轻量，开源，易用，越来越多的公司使用 nginx 作为自己公司<br>的 web 应用服务器，本文详细介绍 nginx 源码安装的同时并对 nginx 进行优化配置。<br>一、 Nginx 的优化<br>1、 编译安装前优化<br>编译前的优化主要是用来修改程序名等等， 目的更改源码隐藏软件名称和版本号<br>安装 zlib-devel、 pcre-devel 等依赖包</p><pre><code>[root@bogon ~]# [root@bogon ~]# tar zxf nginx-1.14.0.tar.gz [root@bogon ~]# cd nginx-1.14.0/[root@bogon nginx-1.14.0]# yum -y install openssl-devel pcre-devel</code></pre><p>2.编译安装nginx</p><pre><code>./configure --prefix=/usr/local/nginx1.14 --with-http_dav_module --with-http_stub_status_module --with-http_addition_module  --with-http_sub_module --with-http_flv_module --with-http_mp4_module --with-pcre --with-http_ssl_module --with-http_gzip_static_module --user=nginx --group=nginxmake  &amp;&amp;  make install</code></pre><p>3.创建所需的用户<br>[root@bogon nginx-1.14.0]# useradd nginx -s /sbin/nologin -M<br>4.链接命令目录<br>[root@bogon nginx-1.14.0]#ln -s /usr/local/nginx1.14/sbin/nginx /usr/local/sbin/<br>5.开启nginx，查看端口<br>nginx<br>[root@bogon nginx-1.14.0]# netstat -anpt | grep 80<br>tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 5671/nginx: master<br>6.修改/usr/local/nginx1.14/conf/nginx.conf<br><img src="https://s1.51cto.com/images/blog/201910/24/1aaadc6aa6cc737acd8a424b97504f4a.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>7.修改/etc/security/limits.conf<br><img src="https://s1.51cto.com/images/blog/201910/24/a508ad0b699d78707ff1ad65efbb0697.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>8.查看现在是否没变<br><img src="https://s1.51cto.com/images/blog/201910/24/648c8e34c917753ba68c9bc52f9bca4b.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>9.注销一下，重新查看一下，是否变化<br><img src="https://s1.51cto.com/images/blog/201910/24/13371a17405ce555d9c2e7b69c5f8a73.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>10.开启nginx，查看nginx变化<br><img src="https://s1.51cto.com/images/blog/201910/24/f2ad409eac8bec625c5f0e6e4242a203.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p><img src="https://s1.51cto.com/images/blog/201910/24/460c4a55096b042947f2c144b0d2d403.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br><img src="https://s1.51cto.com/images/blog/201910/24/ec3da9517fee664957794f6508a714dd.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>11.页面访问一下nginx<br><img src="https://s1.51cto.com/images/blog/201910/24/b044fd450fbb18a8ed1b24e5e6954dee.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>二、部署 LNMP （部署环境需求：nginx和php在一台，再开启一台apache做防盗链）<br>1.安装php<br>首先安装libmcrypt 和依赖包<br><img src="https://s1.51cto.com/images/blog/201910/24/7c1b0b01f6ee1ef3b6c5ff4242ce6ba3.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br><img src="https://s1.51cto.com/images/blog/201910/24/7de79265df81e71f3639ea6bc663bb82.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>编译安装php</p><pre><code>./configure  --prefix=/usr/local/php5.6  --with-mysql=mysqlnd   --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd   --with-openssl --enable-fpm --enable-sockets  --enable-sysvshm  --enable-mbstring --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib  --with-libxml-dir=/usr --enable-xml  --with-mhash  --with-mcrypt=/usr/local/libmcrypt  --with-config-file-path=/etc --with-config-file-scan-dir=/etc/php.d --with-bz2 --enable-maintainer-ztsmake &amp;&amp; make intall</code></pre><p>提供 php 配置文件<br>[root@bogon php-5.6.27]# cp php.ini-production /etc/php.ini</p><p>为 php-fpm 提供脚本<br><img src="https://s1.51cto.com/images/blog/201910/24/d397ef1d67c0b73e88fdd43f75c04250.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>提供 php-fpm 配置文件并编辑<br><img src="https://s1.51cto.com/images/blog/201910/24/55501fc53895eb8988bb32024b97b79b.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>修改/usr/local/php5.6/etc/php-fpm.conf</p><p>启动php 查看9000端口</p><pre><code>/etc/init.d/php-fpm  start[root@bogon etc]# netstat -anpt | grep 9000tcp        0      0 0.0.0.0:9000            0.0.0.0:*               LISTEN</code></pre><p>修改/usr/local/nginx1.14/conf/nginx.conf<br><img src="https://s1.51cto.com/images/blog/201910/24/69dc6a47aebff7e1aba5d77f36661635.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br><img src="https://s1.51cto.com/images/blog/201910/24/a93aec7853a978374ff02d8e6858dfe8.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>创建/usr/local/nginx1.14/html/index.php<br><img src="https://s1.51cto.com/images/blog/201910/24/89c17abe068b68a6ee991a6ab6348b03.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br><img src="https://s1.51cto.com/images/blog/201910/24/a02e66d9f5d5cc8695781c6b93bf2ac7.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>测试<br><img src="https://s1.51cto.com/images/blog/201910/24/d8afb06d3b51ff455eeebacc37ca5282.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><pre><code>内核参数优化 添加 /etc//sysctl.conffs.file-max = 999999net.ipv4.ip_forward = 0net.ipv4.conf.default.rp_filter = 1net.ipv4.conf.default.accept_source_route = 0kernel.sysrq = 0kernel.core_uses_pid = 1net.ipv4.tcp_syncookies = 1kernel.msgmnb = 65536kernel.msgmax = 65536kernel.shmmax = 68719476736kernel.shmall = 4294967296net.ipv4.tcp_max_tw_buckets = 6000net.ipv4.tcp_sack = 1net.ipv4.tcp_window_scaling = 1net.ipv4.tcp_rmem = 10240 87380 12582912net.ipv4.tcp_wmem = 10240 87380 12582912net.core.wmem_default = 8388608net.core.rmem_default = 8388608net.core.rmem_max = 16777216net.core.wmem_max = 16777216net.core.netdev_max_backlog = 262144net.core.somaxconn = 40960net.ipv4.tcp_max_orphans = 3276800net.ipv4.tcp_max_syn_backlog = 262144net.ipv4.tcp_timestamps = 0net.ipv4.tcp_synack_retries = 1net.ipv4.tcp_syn_retries = 1net.ipv4.tcp_tw_recycle = 1net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_mem = 94500000 915000000 927000000net.ipv4.tcp_fin_timeout = 1net.ipv4.tcp_keepalive_time = 30net.ipv4.ip_local_port_range = 1024 65000执行 sysctl -p 使内核修改生效</code></pre><p><img src="https://s1.51cto.com/images/blog/201910/24/713c229373aea83e02c0a8e4d20bcdab.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>查看更新值<br><img src="https://s1.51cto.com/images/blog/201910/24/c0bbf25a5e53f9b1afac5af2ff94e034.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>修改/usr/local/nginx1.14/conf/nginx.conf<br><img src="https://s1.51cto.com/images/blog/201910/24/955e6fc97af123b4317de1ac734d9b82.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><pre><code>sendfile on;tcp_nopush on;keepalive_timeout 65;tcp_nodelay on;client_header_buffer_size 4k;open_file_cache max=102400 inactive=20s;open_file_cache_valid 30s;open_file_cache_min_uses 1;client_header_timeout 15;client_body_timeout 15;reset_timedout_connection on;send_timeout 15;server_tokens off;client_max_body_size 10m;fastcgi_connect_timeout 600;fastcgi_send_timeout 600;fastcgi_read_timeout 600;fastcgi_buffer_size 64k;fastcgi_buffers 4 64k;fastcgi_busy_buffers_size 128k;fastcgi_temp_file_write_size 128k;fastcgi_temp_path /usr/local/nginx1.10/nginx_tmp;fastcgi_intercept_errors on;fastcgi_cache_path /usr/local/nginx1.10/fastcgi_cache levels=1:2keys_zone=cache_fastcgi:128m inactive=1d max_size=10g;gzip on;gzip_min_length 2k;gzip_buffers 4 32k;gzip_http_version 1.1;gzip_comp_level 6;gzip_types text/plain text/css text/javascript application/json application/javascriptapplication/x-javascript application/xml;gzip_vary on;gzip_proxied anylocation ~* ^.+\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ {                valid_referers none blocked 192.168.1.50；                if ($invalid_referer) {                #return 302 http://www.benet.com/img/nolink.jpg;                return 404;                break;                }                access_log off;        }location / {            root   html;            index  index.php  index.html index.htm;        }location /status {stub_status on;}把之前php测试页注释掉</code></pre><p><img src="https://s1.51cto.com/images/blog/201910/24/67ccc5fd235260f2cf030e4f604168a5.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><pre><code>location ~ .*\.(php|php5)?$ {root html;fastcgi_pass 127.0.0.1:9000;fastcgi_index index.php;include fastcgi.conf;fastcgi_cache cache_fastcgi;fastcgi_cache_valid 200 302 1h;fastcgi_cache_valid 301 1d;fastcgi_cache_valid any 1m;fastcgi_cache_min_uses 1;fastcgi_cache_use_stale error timeout invalid_header http_500;fastcgi_cache_key http://$host$request_uri;}</code></pre><p>重启php<br>nginx -s reload</p><p>测试</p><p><img src="https://s1.51cto.com/images/blog/201910/24/77bacba9f977ef69165d77bb52ca576b.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>三、验证、压力测试<br>查看ab的安装包<br>yum provides ab</p><p>安装httpd-tools<br>yum -y install httpd-tools</p><p>压力测试<br>ab -c 2000 -n 10000 192.168.1.50/index.html<br><img src="https://s1.51cto.com/images/blog/201910/24/441c6635cdcedaa3d7c38bdd66b9f0bd.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>ab -c 2000 -n 10000 192.168.1.50/index.php<br><img src="https://s1.51cto.com/images/blog/201910/24/de29a59b7a5a96260bf978504da2599b.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>两次压力测试做对比</p><p>验证防盗链<br>使用 apache 做为一个测试站点，域名为 <a href="http://www.test.com，在测试页上做一个超链接，链接" target="_blank" rel="noopener">www.test.com，在测试页上做一个超链接，链接</a> nginx</p><p>在apache主机上创建vim /var/www/html/index.html<br><img src="https://s1.51cto.com/images/blog/201910/24/ed574cbe8e06795ca0a54e01ffb1430b.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>开启httpd<br>systemctl start httpd</p><p>测试</p><p><img src="https://s1.51cto.com/images/blog/201910/24/c57c74b59eba91b5faf2c3c3d739143c.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br><img src="https://s1.51cto.com/images/blog/201910/24/1b699af52241e6050626b9ed6800bd31.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>论坛<br>Php服务器解压 压缩包<br>unzip Discuz_7.0.0_FULL_SC_UTF8.zip<br>cd Discuz_7.0.0_FULL_SC_UTF8/<br>ls<br>ls upload/<br><img src="https://s1.51cto.com/images/blog/201910/24/abbfa3c66befd53d7187a49e35d42ee1.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"><br>修改/etc/php.ini<br><img src="https://s1.51cto.com/images/blog/201910/24/51b84e704f1eaf27bbfcd82918b42668.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="Nginx优化与防盗链"></p><p>Mysql服务器</p><p>进入MySQL<br>mysql -u root -p123</p><p>创建数据库<br>create database bbs;</p><p>grant all on <em>.</em> to root@’192.168.1.%’ identified by ‘123.com’;</p><p>测试 浏览器输入 <a href="http://xn--ip-im8ckc388bqo2btxq/bbs/install" target="_blank" rel="noopener">http://自己的IP地址/bbs/install</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx优化与防盗链&quot;&gt;&lt;a href=&quot;#Nginx优化与防盗链&quot; class=&quot;headerlink&quot; title=&quot;Nginx优化与防盗链&quot;&gt;&lt;/a&gt;Nginx优化与防盗链&lt;/h1&gt;&lt;p&gt;Nginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器,Ngin
      
    
    </summary>
    
    
      <category term="HEXO的使用" scheme="http://yoursite.com/categories/HEXO%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>HEXO分类和标签的使用</title>
    <link href="http://yoursite.com/posts/bf18.html"/>
    <id>http://yoursite.com/posts/bf18.html</id>
    <published>2017-05-26T04:12:57.000Z</published>
    <updated>2020-04-21T11:26:58.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo使用攻略-添加分类及标签"><a href="#Hexo使用攻略-添加分类及标签" class="headerlink" title="Hexo使用攻略-添加分类及标签"></a>Hexo使用攻略-添加分类及标签</h1><h2 id="1、创建“分类”选项"><a href="#1、创建“分类”选项" class="headerlink" title="1、创建“分类”选项"></a>1、创建“分类”选项</h2><h3 id="1-1-生成“分类”页并添加tpye属性"><a href="#1-1-生成“分类”页并添加tpye属性" class="headerlink" title="1.1 生成“分类”页并添加tpye属性"></a>1.1 生成“分类”页并添加tpye属性</h3><p><strong>打开命令行，进入博客所在文件夹。执行命令</strong></p><pre class=" language-cpp"><code class="language-cpp">hexo <span class="token keyword">new</span> page categories</code></pre><p><strong>成功后会提示：</strong></p><pre class=" language-bash"><code class="language-bash">INFO  Created: ~/Documents/blog/source/categories/index.md</code></pre><p><strong>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</strong></p><pre class=" language-css"><code class="language-css">---<span class="token property">title</span><span class="token punctuation">:</span> 文章分类<span class="token property">date</span><span class="token punctuation">:</span> <span class="token number">2017</span>-<span class="token number">05</span>-<span class="token number">27</span> <span class="token property">13</span><span class="token punctuation">:</span><span class="token property">47</span><span class="token punctuation">:</span><span class="token number">40</span>---</code></pre><p><strong>添加<code>type: "categories"</code>到内容中，添加后是这样的：</strong></p><pre class=" language-bash"><code class="language-bash">---title: 文章分类date: 2017-05-27 13:47:40type: <span class="token string">"categories"</span>---</code></pre><p><strong>保存并关闭文件。</strong></p><h4 id="1-2-给文章添加“categories”属性"><a href="#1-2-给文章添加“categories”属性" class="headerlink" title="1.2 给文章添加“categories”属性"></a>1.2 给文章添加“categories”属性</h4><p><strong>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</strong></p><pre class=" language-css"><code class="language-css">---<span class="token property">title</span><span class="token punctuation">:</span> jQuery对表单的操作及更多应用  #这个网页上不会显示，用于自己分辨<span class="token property">date</span><span class="token punctuation">:</span> <span class="token number">2017</span>-<span class="token number">05</span>-<span class="token number">26</span> <span class="token property">12</span><span class="token punctuation">:</span><span class="token property">12</span><span class="token punctuation">:</span><span class="token number">57</span><span class="token property">categories</span><span class="token punctuation">:</span> - web前端                         #这个是分类名称---</code></pre><p><strong>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</strong></p><h3 id="2、创建“标签”选项"><a href="#2、创建“标签”选项" class="headerlink" title="2、创建“标签”选项"></a>2、创建“标签”选项</h3><h4 id="2-1-生成“标签”页并添加tpye属性"><a href="#2-1-生成“标签”页并添加tpye属性" class="headerlink" title="2.1 生成“标签”页并添加tpye属性"></a>2.1 生成“标签”页并添加tpye属性</h4><p><strong>打开命令行，进入博客所在文件夹。执行命令</strong></p><pre class=" language-cpp"><code class="language-cpp"> hexo <span class="token keyword">new</span> page tags</code></pre><p><strong>成功后会提示：</strong></p><pre class=" language-bash"><code class="language-bash">INFO  Created: ~/Documents/blog/source/tags/index.md</code></pre><p><strong>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</strong></p><pre class=" language-css"><code class="language-css">---<span class="token property">title</span><span class="token punctuation">:</span> 标签<span class="token property">date</span><span class="token punctuation">:</span> <span class="token number">2017</span>-<span class="token number">05</span>-<span class="token number">27</span> <span class="token property">14</span><span class="token punctuation">:</span><span class="token property">22</span><span class="token punctuation">:</span><span class="token number">08</span>---</code></pre><p><strong>添加<code>type: "tags"</code>到内容中，添加后是这样的：</strong></p><pre class=" language-bash"><code class="language-bash">---title: 文章分类date: 2017-05-27 13:47:40type: <span class="token string">"tags"</span>---</code></pre><p><strong>保存并关闭文件。</strong></p><h4 id="2-2-给文章添加“tags”属性"><a href="#2-2-给文章添加“tags”属性" class="headerlink" title="2.2 给文章添加“tags”属性"></a>2.2 给文章添加“tags”属性</h4><p><strong>打开需要添加标签的文章，为其添加tags属性。下方的<code>tags:</code>下方的<code>- jQuery</code> <code>- 表格</code><br> <code>- 表单验证</code>就是这篇文章的标签了</strong></p><pre class=" language-css"><code class="language-css">---<span class="token property">title</span><span class="token punctuation">:</span> jQuery对表单的操作及更多应用<span class="token property">date</span><span class="token punctuation">:</span> <span class="token number">2017</span>-<span class="token number">05</span>-<span class="token number">26</span> <span class="token property">12</span><span class="token punctuation">:</span><span class="token property">12</span><span class="token punctuation">:</span><span class="token number">57</span><span class="token property">categories</span><span class="token punctuation">:</span> - web前端<span class="token property">tags</span><span class="token punctuation">:</span>- jQuery               #标签名称---</code></pre><p><strong>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</strong></p><p><strong>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行<code>hexo new 文章名</code>命令生成的文件，页面里就有<code>categories:</code>项了。</strong></p><p><strong>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo使用攻略-添加分类及标签&quot;&gt;&lt;a href=&quot;#Hexo使用攻略-添加分类及标签&quot; class=&quot;headerlink&quot; title=&quot;Hexo使用攻略-添加分类及标签&quot;&gt;&lt;/a&gt;Hexo使用攻略-添加分类及标签&lt;/h1&gt;&lt;h2 id=&quot;1、创建“分类”选
      
    
    </summary>
    
    
      <category term="HEXO的使用" scheme="http://yoursite.com/categories/HEXO%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
</feed>
