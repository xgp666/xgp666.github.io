<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>title Python列表 date 2017-05-26 121257 categories   - python列表   tags - Python</title>
    <url>/2020/03/28/title%20Python%E5%88%97%E8%A1%A8%20date%202017-05-26%20121257%20categories%20%20%20-%20python%E5%88%97%E8%A1%A8%20%20%20tags%20-%20Python/</url>
    <content><![CDATA[<pre><code>
title: Python列表
date: 2017-05-26 12:12:57
categories: 

- python列表
tags:
- Python
</code></pre><h1 id="一、PyCharm基本设置"><a href="#一、PyCharm基本设置" class="headerlink" title="一、PyCharm基本设置"></a>一、PyCharm基本设置</h1><h2 id="1、用Ctrl-鼠标滚轮–放大或缩小字体"><a href="#1、用Ctrl-鼠标滚轮–放大或缩小字体" class="headerlink" title="1、用Ctrl+鼠标滚轮–放大或缩小字体"></a>1、用Ctrl+鼠标滚轮–放大或缩小字体</h2><p><img src="https://s4.51cto.com/images/blog/202003/20/1f57a6244ec1fa71c6a56e7c02bb814d.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p>搜索zoom</p>
<p><img src="https://s4.51cto.com/images/blog/202003/20/38c69b2c6690f139e3bf195d1c4e0ccd.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><img src="https://s4.51cto.com/images/blog/202003/20/086bbdb64099c35d4ae0fc993200ce6c.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="2、在Windows资源管理器打开文件或目录"><a href="#2、在Windows资源管理器打开文件或目录" class="headerlink" title="2、在Windows资源管理器打开文件或目录"></a>2、在Windows资源管理器打开文件或目录</h2><p><img src="https://s4.51cto.com/images/blog/202003/20/8ca85cb687f89ffef8a7fe085df577e8.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong>搜索keymap</strong></p>
<p><img src="https://s4.51cto.com/images/blog/202003/20/c5eebf71897358d5b7b88a521502a6ff.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong>设置成不常用的键即可，如F3。</strong></p>
<h2 id="3、代码提示"><a href="#3、代码提示" class="headerlink" title="3、代码提示"></a>3、代码提示</h2><p><img src="https://s4.51cto.com/images/blog/202003/20/46741a8aeb6d969822350ba892bef10a.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong>搜索letter</strong></p>
<p><img src="https://s4.51cto.com/images/blog/202003/20/7130cc0cb40cc81270cc4c7fc06ceadd.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h1 id="二、自定义函数"><a href="#二、自定义函数" class="headerlink" title="二、自定义函数"></a>二、自定义函数</h1><p><img src="https://s4.51cto.com/images/blog/202003/20/e8b43bf4b62598f756a281114896a2ab.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="1-为什么要使用函数"><a href="#1-为什么要使用函数" class="headerlink" title="1.为什么要使用函数"></a>1.为什么要使用函数</h2><blockquote>
<p><strong>函数中的代码一次编写,多处运行;</strong><br><strong>函数可以让代码复用，减少代码冗余。</strong></p>
</blockquote>
<p><strong>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</strong></p>
<p><strong>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。</strong></p>
<p><strong>假设我有这样的需求：</strong></p>
<p><img src="https://s4.51cto.com/images/blog/202003/20/8bc2a80576652649c412dc5fed808c18.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong>但是我还是觉得太麻烦了，每次想吃饭的时候都要重复这样的步骤。此时，我希望有这样的机器：</strong></p>
<p>　　<img src="https://s4.51cto.com/images/blog/202003/20/177fb9fe518cdffcb817f5fe09f399df.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p> <strong>将重复的工作封装到一起，我们只要向机器里放入东西，就能得到我们想要的。</strong></p>
<p><strong>这也就是所谓的代码重用。</strong></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义方法</span>
<span class="token keyword">def</span> <span class="token function">print_nums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""此处是函数功能的描述"""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 1.三角形 2.正方形 3.梯形</span>
key <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入要打印的图形：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 打印三角形的代码</span>
    print_nums<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">pass</span>
<span class="token keyword">elif</span> key <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 打印梯形的代码</span>
    <span class="token keyword">pass</span>
<span class="token keyword">elif</span> key <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 正方形的代码</span>
    <span class="token keyword">pass</span></code></pre>
<h5 id="输出结果如下："><a href="#输出结果如下：" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">请输入要打印的图形：<span class="token number">1</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> 
进程已结束，退出代码 <span class="token number">0</span></code></pre>
</blockquote>
<h3 id="分析一下"><a href="#分析一下" class="headerlink" title="分析一下"></a><strong>分析一下</strong></h3><p><img src="https://s4.51cto.com/images/blog/202003/20/84cc500e9b23537c5583b7875a5362a7.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><img src="https://s4.51cto.com/images/blog/202003/20/0086731c41cc958f0f974ae984cd3bf0.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="2、定义函数"><a href="#2、定义函数" class="headerlink" title="2、定义函数"></a>2、定义函数</h2><h4 id="你可以定义一个由自己想要功能的函数，以下是简单的规则："><a href="#你可以定义一个由自己想要功能的函数，以下是简单的规则：" class="headerlink" title="你可以定义一个由自己想要功能的函数，以下是简单的规则："></a><strong>你可以定义一个由自己想要功能的函数，以下是简单的规则：</strong></h4><blockquote>
<p><strong>关键字: def</strong></p>
<p><strong>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()，结尾处有冒号。</strong></p>
<p><strong>函数内第一行通常书写注释,表名该函数的意义</strong></p>
<p><strong>注释后空一行,开始写代码块，代码库要缩进</strong></p>
<p><strong>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</strong></p>
<p><strong>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</strong></p>
<p><strong>函数内容以冒号起始，并且缩进。</strong></p>
<p><strong>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</strong></p>
<p><strong>函数结束后,空2行</strong></p>
<p><strong>函数调用后空1行,再执行别的代码</strong></p>
</blockquote>
<p><strong>语法</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#代码如下</span>
<span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span> parameters <span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token string">"函数_文档字符串"</span>
  function_suite
  <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></code></pre>
<p><strong>默认情况下，参数值和参数名称是按函数声明中定义的的顺序匹配起来的。</strong></p>
<h1 id="三、函数类型"><a href="#三、函数类型" class="headerlink" title="三、函数类型"></a>三、函数类型</h1><blockquote>
<p><strong>Python函数可以使用的参数类型：</strong></p>
<p><strong>必备参数</strong><br><strong>命名参数</strong><br><strong>缺省参数</strong><br><strong>不定长参数</strong></p>
</blockquote>
<ul>
<li><h2 id="参数类型："><a href="#参数类型：" class="headerlink" title="参数类型："></a>参数类型：</h2></li>
<li></li>
<li>1、位置参数:参数的位置(顺序)很重要，形参和实参个数要匹配</li>
<li>2、关键字参数:对参数的位置要求不是很严格</li>
<li>3、默认值参数:</li>
<li>(1)如果形参中指定了默认值,在实参中可以不传递该形参对应的实参</li>
<li>(2)如果形参中指定了默认值，在实参汇总传递该参数后，最终参数以传递的实参为准</li>
<li>4、不定长参数：</li>
<li>(1)*a：接收传递单个值,保存为元组</li>
<li>(2)**b：接收键值对形式的参数，保存为字典格式<h2 id="1、无参函数"><a href="#1、无参函数" class="headerlink" title="1、无参函数"></a>1、无参函数</h2></li>
</ul>
<h4 id="无参函数实现和调用："><a href="#无参函数实现和调用：" class="headerlink" title="无参函数实现和调用："></a>无参函数实现和调用：</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义无参函数</span>
<span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""介绍自己的函数"""</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是xgp，今年18岁，年收入xxxx元'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 调用无参函数</span>
say_hi<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-1"><a href="#输出结果如下：-1" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">我是xgp，今年<span class="token number">18</span>岁，年收入xxxx元

进程已结束，退出代码 <span class="token number">0</span></code></pre>
</blockquote>
<h2 id="2、带参函数"><a href="#2、带参函数" class="headerlink" title="2、带参函数"></a>2、带参函数</h2><p><strong>下面说说带参数的函数：</strong></p>
<ul>
<li><strong>形参：指的是形式参数，是虚拟的，不占用内存空间，形参单元只有被调用的时才分配内存单元</strong></li>
<li><strong>实参：指的是实际参数，是一个变量，占用内存空间，数据传递单向，实参传给形参，形参不能传给实参</strong></li>
</ul>
<h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义带参函数：形参（形式参数，模板）</span>
<span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""介绍自己的函数"""</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">'，今年'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'岁，年收入'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'元。'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 调用带参函数：实参（实际传递的参数）</span>
say_hi<span class="token punctuation">(</span><span class="token string">'xgp'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-2"><a href="#输出结果如下：-2" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">我是xgp，今年<span class="token number">20</span>岁，年收入<span class="token number">20000</span>元。

进程已结束，退出代码 <span class="token number">0</span></code></pre>
</blockquote>
<blockquote>
<p><strong>注意事项:调用函数时,实参传递的个数</strong><br><strong>要与形参保持一致|</strong></p>
</blockquote>
<h3 id="（1）位置参数"><a href="#（1）位置参数" class="headerlink" title="（1）位置参数"></a><strong>（1）位置参数</strong></h3><p><strong>从上面的例子可以看出，实际参数和形式参数是一一对应的，如果调换位置，x和y被调用的时，位置也会互换，代码如下：</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------互换前-----"</span><span class="token punctuation">)</span>
test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------互换后-----"</span><span class="token punctuation">)</span>
test<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#输出</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>互换前<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>互换后<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">2</span>
<span class="token number">1</span></code></pre>
<p><strong>因为定义x,y两个形参，所以传递实参的时候，也只能传递两个实参，多一个或少一个都是有问题的：</strong></p>
<p>a：多传递一个参数</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------多一个参数----"</span><span class="token punctuation">)</span>
test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#输出</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>多一个参数<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"D:/PycharmProjects/pyhomework/day3/函数_带参数.py"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
TypeError<span class="token punctuation">:</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">3</span> were given  <span class="token comment" spellcheck="true">#test()函数需要传两个实参，你传了三个实参</span></code></pre>
<p>b：少传递一个实参</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------少一个参数----"</span><span class="token punctuation">)</span>
test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#输出</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>少一个参数<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"D:/PycharmProjects/pyhomework/day3/函数_带参数.py"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
TypeError<span class="token punctuation">:</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">1</span> required positional argument<span class="token punctuation">:</span> <span class="token string">'y'</span>  
<span class="token comment" spellcheck="true">#没有给y参数传实参</span></code></pre>
<h3 id="（2）关键字参数"><a href="#（2）关键字参数" class="headerlink" title="（2）关键字参数"></a><strong>（2）关键字参数</strong></h3><p><strong>上面的位置参数，看起来有点死，必须形参和实参的位置一一对应，不然就会传错参数，为了避免这种问题，就有了关键字参数的玩法：关键字传参不需要一一对应，只需要你指定你的哪个形参调用哪一个实参即可；</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------互换前------"</span><span class="token punctuation">)</span>
test<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------互换后------"</span><span class="token punctuation">)</span>
test<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#输出</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>互换前<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>互换后<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">1</span>
<span class="token number">2</span></code></pre>
<h2 id="3、默认参数"><a href="#3、默认参数" class="headerlink" title="3、默认参数"></a>3、默认参数</h2><p><strong>调用函数时，默认参数的值如果没有传入，则被认为是默认值。下例会打印默认的age，如果age没有被传入：</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>

<span class="token comment" spellcheck="true">#可写函数说明</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">"打印任何传入的字符串"</span>
   <span class="token keyword">print</span> <span class="token string">"Name: "</span><span class="token punctuation">,</span> name
   <span class="token keyword">print</span> <span class="token string">"Age "</span><span class="token punctuation">,</span> age
   <span class="token keyword">return</span>

<span class="token comment" spellcheck="true">#调用printinfo函数</span>
printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"miki"</span> <span class="token punctuation">)</span>
printinfo<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">"miki"</span> <span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-3"><a href="#输出结果如下：-3" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">Name<span class="token punctuation">:</span>  miki
Age  <span class="token number">50</span>
Name<span class="token punctuation">:</span>  miki
Age  <span class="token number">35</span></code></pre>
</blockquote>
<h2 id="4、不定长参数"><a href="#4、不定长参数" class="headerlink" title="4、不定长参数"></a>4、不定长参数</h2><p><strong>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">[</span>formal_args<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">*</span>var_args_tuple <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">"函数_文档字符串"</span>
   function_suite
   <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></code></pre>
<p><strong>加了星号（*）的变量名会存放所有未命名的变量参数。不定长参数实例如下：</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>

<span class="token comment" spellcheck="true"># 可写函数说明</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">"打印任何传入的参数"</span>
   <span class="token keyword">print</span> <span class="token string">"输出: "</span>
   <span class="token keyword">print</span> arg1
   <span class="token keyword">for</span> var <span class="token keyword">in</span> vartuple<span class="token punctuation">:</span>
      <span class="token keyword">print</span> var
   <span class="token keyword">return</span>

<span class="token comment" spellcheck="true"># 调用printinfo 函数</span>
printinfo<span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span>
printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-4"><a href="#输出结果如下：-4" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">输出<span class="token punctuation">:</span>
<span class="token number">10</span>
输出<span class="token punctuation">:</span>
<span class="token number">70</span>
<span class="token number">60</span>
<span class="token number">50</span></code></pre>
</blockquote>
<h3 id="（1）例子"><a href="#（1）例子" class="headerlink" title="（1）例子"></a>（1）例子</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 不定长参数的类型</span>
<span class="token keyword">def</span> <span class="token function">no_test</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
no_test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
no_test<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>ages<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-5"><a href="#输出结果如下：-5" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'ages'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre>
</blockquote>
<h2 id="5、匿名函数"><a href="#5、匿名函数" class="headerlink" title="5、匿名函数"></a>5、匿名函数</h2><p><strong>python 使用 lambda 来创建匿名函数。</strong></p>
<ul>
<li><strong>lambda只是一个表达式，函数体比def简单很多。</strong></li>
<li><strong>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</strong></li>
<li><strong>lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</strong></li>
<li><strong>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</strong></li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><strong>lambda函数的语法只包含一个语句，如下：</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>argn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>expression</code></pre>
<p><strong>如下实例：</strong></p>
<pre class=" language-python"><code class="language-python">相加后的值为 <span class="token punctuation">:</span>  <span class="token number">30</span>
相加后的值为 <span class="token punctuation">:</span>  <span class="token number">40</span></code></pre>
<h1 id="四、rerun传递列表类型数据"><a href="#四、rerun传递列表类型数据" class="headerlink" title="四、rerun传递列表类型数据"></a>四、rerun传递列表类型数据</h1><p><strong>return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，下例便告诉你怎么做：</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>

<span class="token comment" spellcheck="true"># 可写函数说明</span>
<span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token comment" spellcheck="true"># 返回2个参数的和."</span>
   total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2
   <span class="token keyword">print</span> <span class="token string">"函数内 : "</span><span class="token punctuation">,</span> total
   <span class="token keyword">return</span> total

<span class="token comment" spellcheck="true"># 调用sum函数</span>
total <span class="token operator">=</span> sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-6"><a href="#输出结果如下：-6" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><pre class=" language-python"><code class="language-python">函数内 <span class="token punctuation">:</span>  <span class="token number">30</span></code></pre>
<blockquote>
<p><strong>注意：在函数内没有写return语句的时候，默认return的是一个空对象。也就是就算没写，python内部也做了处理。</strong></p>
<p>　　<strong>此时，有部分人分不清函数的输出和返回值的区别。</strong></p>
<p>　　<strong>这样说吧，在函数里print之类的操作能够输出内容，是因为虽然函数的执行环境是独立的，但代码还是有效的。外部能进行的操作，函数内部也可以。但是并不是所有的函数在执行完毕后都有如此明显的输出效果，此时我们需要查看函数是否成功，或者说我放了米进去，你操作一番之后总要把饭给我拿出来吧。</strong></p>
<p>　　<strong>这就是函数中return的意义。返回一个对象。这个对象可以是对执行状态的说明，也可以是处理后的结果等等。</strong></p>
</blockquote>
<h2 id="1、return语句返回简单类型"><a href="#1、return语句返回简单类型" class="headerlink" title="1、return语句返回简单类型"></a>1、return语句返回简单类型</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'hello'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># return 语句返回字典</span>
<span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
    person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span>name<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span>age<span class="token punctuation">}</span>
    <span class="token keyword">return</span> person

<span class="token keyword">print</span><span class="token punctuation">(</span>show_info<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-7"><a href="#输出结果如下：-7" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>

进程已结束，退出代码 <span class="token number">0</span></code></pre>
</blockquote>
<h2 id="2、用户问候"><a href="#2、用户问候" class="headerlink" title="2、用户问候"></a>2、用户问候</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""返回完整名字"""</span>
    full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> last_name
    <span class="token keyword">return</span> full_name

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入您的姓名:'</span><span class="token punctuation">)</span>
    f_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'姓：'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> f_name <span class="token operator">==</span><span class="token string">'q'</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>

    l_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'名：'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> l_name <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
        <span class="token comment" spellcheck="true"># 调用函数</span>
    format_name <span class="token operator">=</span> say_hi<span class="token punctuation">(</span>f_name<span class="token punctuation">,</span>l_name<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token operator">+</span>format_name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-8"><a href="#输出结果如下：-8" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">请输入您的姓名<span class="token punctuation">:</span>
姓：x
名：gp
hellox gp!</code></pre>
</blockquote>
<h2 id="3、传递列表类型数据"><a href="#3、传递列表类型数据" class="headerlink" title="3、传递列表类型数据"></a>3、传递列表类型数据</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
user_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sdf'</span><span class="token punctuation">,</span><span class="token string">'fsd'</span><span class="token punctuation">,</span><span class="token string">'fewfwef'</span><span class="token punctuation">,</span><span class="token string">'fwefe'</span><span class="token punctuation">]</span>
test<span class="token punctuation">(</span>user_name<span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-9"><a href="#输出结果如下：-9" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">sdf
fsd
fewfwef
fwefe

进程已结束，退出代码 <span class="token number">0</span></code></pre>
</blockquote>
<h2 id="5、range函数的练习"><a href="#5、range函数的练习" class="headerlink" title="5、range函数的练习"></a>5、range函数的练习</h2><ol>
<li><strong>当只用一个变量调用这个函数时，这个变量指的是输出的等差数列的终点，如<code>range(5)</code></strong></li>
<li><strong>当给定两个变量时，分别指输出的起始值和终点,，如<code>range(2, 5)</code></strong></li>
<li><strong>当给定三个变量时，在上一条的基础上第三个变量指输出时的步长，如<code>range(2, 5, -1)</code></strong></li>
</ol>
<p><strong><em>（假定我们调用这个函数时总是用整数或浮点数）</em></strong></p>
<p><strong>分析一下如何实现这个函数，下面给出我的思路作为参考</strong></p>
<ul>
<li><strong>一共需要三个参数是显而易见的；</strong></li>
<li><strong>最直观的感受是起始值是要有默认值的，如果不规定从哪里开始，那就从0开始；</strong></li>
<li><strong>步长也是要有默认值的，如果不规定，那么步长是1；</strong></li>
<li><strong>根据有默认值的参数要放在后面的原则，那么最理所当然的参数设计是<code>range_custom(stop, start=0, step=1)</code></strong></li>
<li><strong>这个方案看上去可行，但是不满足刚才的后面两个要求，如果我们这样用两个变量调用，起始值和终点是反的；</strong></li>
<li><strong>我们加个判断就可以了，如果start用了初始值，那么说明我们调用的时候只给了一个参数，这个时候stop就是终点，如果start被重新赋值了说明给了至少两个参数，那么这时候把stop和start的值调换一下就可以了；</strong></li>
<li><strong>现在这个函数似乎可以满足大多数情况了，但是有一个bug，如果给定参数的时候给的start值就是0怎么办呢？如<code>range_custom(-5, 0)</code>按目前的规则会被翻译成<code>range(0, -5)</code>，但是我们的目的却是<code>range(-5, 0)</code>；</strong></li>
<li><strong>所以start的初始值不应该是数字而是别的数据类型，为了方便起见，我们把它的初始值赋为<code>None</code>，我们的程序雏形就出来了。</strong></li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">range_custom</span><span class="token punctuation">(</span>stop<span class="token punctuation">,</span> start<span class="token operator">=</span>None<span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> start <span class="token keyword">is</span> None<span class="token punctuation">:</span>
        <span class="token keyword">return</span> range<span class="token punctuation">(</span>stop<span class="token punctuation">)</span>
    <span class="token keyword">return</span> range<span class="token punctuation">(</span>stop<span class="token punctuation">,</span> start<span class="token punctuation">,</span> step<span class="token punctuation">)</span></code></pre>
<p><strong>现在这个程序已经满足我们的要求了，但是看上去不太舒服，可以改成</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">range_custom</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token operator">=</span>None<span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> stop <span class="token keyword">is</span> None<span class="token punctuation">:</span>
        <span class="token keyword">return</span> range<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
    <span class="token keyword">return</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> step<span class="token punctuation">)</span></code></pre>
<p><strong>现在这个函数的参数顺序在逻辑上更好理解一些，可以说基本上满足我们的要求了。当然，本例只是为了说明参数的顺序问题，并不是为了实现range函数。事实上Python的range函数还包括参数实例化，生成器等知识，在后面我们应该还有机会再接触它。</strong></p>
<h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p><strong>说到可选参数，可能有的人见过，却也不明白到底是什么意思，它一般是这样出现的</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func_option</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> args</code></pre>
<p><strong>注意到我们声明函数的时候在参数名前加了个<code>*</code>星号，这是声明可选参数的方法。那么可选参数到底有什么用呢？</strong></p>
<p><strong>可选参数的作用是用元组把所有多余的变量收集起来，这个元组的名字就是这个可选参数名。在上例<code>func_option</code>中我们可以用任意多个变量调用它，比如<code>a = func_option(1, 2, 3)</code>那么<code>a</code>就会是元组<code>(1, 2, 3)</code>。关于为什么是元组而不是列表，我们在上一篇<a href="https://www.jianshu.com/p/e6c4683a511d" target="_blank" rel="noopener">Python进阶-简单数据结构</a>中说过，元组在Python中往往是比列表更优先考虑使用的数据结构，具体原因在本文靠后<em>深入自定义函数参数</em>部分会讨论。</strong></p>
<p><strong>我们刚才说可选参数会收集多余的变量。我这么说是有原因的。</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">func_option</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> args
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> func_option2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> func_option2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> func_option2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre>
<p><strong>注意到我们的<code>*args</code>把除了给普通参数的第一个变量以外的值都放进了元组中。这样做导致了一个，问题在于我们的有默认值的参数如果不给定参数名地调用的话，就永远只能用默认值了。而且如果我们在调用函数时不把有默认值的参数放在最后面程序还会报错。</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> func_option2<span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>
SyntaxError<span class="token punctuation">:</span> positional argument follows keyword argument</code></pre>
<p><strong>那么有没有好的办法能规避这个问题呢？我们可以试试把可选参数放在有默认值的参数后面。</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">func_option3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> args
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> func_option3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> func_option3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> func_option3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> func_option2<span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>
SyntaxError<span class="token punctuation">:</span> positional argument follows keyword argument</code></pre>
<p><strong>那么这种形式的函数能不能解决之前的问题呢。看上去不行，不过我们知道了，调用函数的时候，要尽量把有默认值的参数放在靠后的位置赋予变量。那么这两种我们到底该用哪个方法呢？在实际操作中，我们倾向于将可选参数放在有默认值的参数之后，而且如果参数较多，我们倾向于调用函数时都会所有变量都加上参数名。而且实际操作中，其实可选参数用得不那么多，相对来说，另一种可选参数其实用得更多。这种可选参数的形式一般是这样</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func_optionkw</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> args</code></pre>
<p><strong>在这种情况下，关键字可选参数都是作为键值对保存在参数名的的字典中。也就是说，在调用函数时，在满足一般参数以后，变量都应该以赋值语句的形式给出，等号左边作为键右边作为值。如果不这样做，就会报错了。</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> func_optionkw<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
TypeError<span class="token punctuation">:</span> t2<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">0</span> positional arguments but <span class="token number">1</span> was given</code></pre>
<p><strong>需要说明的是，一个自定义函数只能有一个可选参数，同时也可以有至多一个关键字参数。其中关键字参数应该放在普通可选参数之后。</strong></p>
<p><strong>现在我们来总结一下函数参数顺序一般规律：</strong></p>
<ul>
<li><strong>一般参数放在最前面</strong></li>
<li><strong>可选参数放在最后面</strong></li>
<li><strong>关键字可选参数放在一般可选参数后面</strong></li>
<li><strong>函数调用时尽量把有默认值的参数对应的变量放在靠后的位置</strong></li>
<li><strong>如果参数比较多，调用函数时，最好所有变量都指明参数名</strong></li>
</ul>
<p><strong>以上这些，有的是为了防止函数定义时出错，有的是为了防止函数调用时出错，总之，应该养成良好的编程习惯。</strong></p>
<h1 id="五、变量作用域"><a href="#五、变量作用域" class="headerlink" title="五、变量作用域"></a>五、变量作用域</h1><p><strong>一个程序的所有的变量并不是在哪个位置都可以访问的。访问权限决定于这个变量是在哪里赋值的。</strong></p>
<p><strong>变量的作用域决定了在哪一部分程序你可以访问哪个特定的变量名称。两种最基本的变量作用域如下：</strong></p>
<ul>
<li><strong>全局变量</strong></li>
<li><strong>局部变量</strong></li>
</ul>
<h1 id="六、全局变量和局部变量"><a href="#六、全局变量和局部变量" class="headerlink" title="六、全局变量和局部变量"></a>六、全局变量和局部变量</h1><p><strong>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</strong></p>
<p><strong>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例：</strong></p>
<h2 id="实例-Python-2-0"><a href="#实例-Python-2-0" class="headerlink" title="实例(Python 2.0+)"></a>实例(Python 2.0+)</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>

total <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 这是一个全局变量</span>
<span class="token comment" spellcheck="true"># 可写函数说明</span>
<span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token comment" spellcheck="true">#返回2个参数的和."</span>
   total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2 <span class="token comment" spellcheck="true"># total在这里是局部变量.</span>
   <span class="token keyword">print</span> <span class="token string">"函数内是局部变量 : "</span><span class="token punctuation">,</span> total
   <span class="token keyword">return</span> total

<span class="token comment" spellcheck="true">#调用sum函数</span>
sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">"函数外是全局变量 : "</span><span class="token punctuation">,</span> total</code></pre>
<h5 id="输出结果如下：-10"><a href="#输出结果如下：-10" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><pre><code>函数内是局部变量 :  30
函数外是全局变量 :  0</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>a</title>
    <url>/2020/03/12/a/</url>
    <content><![CDATA[<h1 id="charts的四种安装方式"><a href="#charts的四种安装方式" class="headerlink" title="charts的四种安装方式"></a>charts的四种安装方式</h1><p><a href="https://hub.helm.sh/" target="_blank" rel="noopener">https://hub.helm.sh/</a></p>
<h2 id="1、开发自己的chare包"><a href="#1、开发自己的chare包" class="headerlink" title="1、开发自己的chare包"></a>1、开发自己的chare包</h2><pre><code>[root@master ~]# helm create mychare
//创建一个名为mychare的chare包
[root@master ~]# tree -C mychare/
//以树状图查看一下chare包
mychare/
├── charts
├── Chart.yaml
├── templates
│   ├── deployment.yaml
│   ├── _helpers.tpl
│   ├── ingress.yaml
│   ├── NOTES.txt
│   ├── service.yaml
│   └── tests
│       └── test-connection.yaml
└── values.yaml</code></pre><h2 id="2、调试chart"><a href="#2、调试chart" class="headerlink" title="2、调试chart"></a>2、调试chart</h2><pre><code>[root@master mychare]# cd
[root@master ~]# helm install --dry-run --debug mychare
//检查这个mychare是否有问题</code></pre><h2 id="3、安装chart"><a href="#3、安装chart" class="headerlink" title="3、安装chart"></a>3、安装chart</h2><pre><code>[root@node02 ~]# docker pull nginx:stable</code></pre><h3 id="（1）通过仓库安装"><a href="#（1）通过仓库安装" class="headerlink" title="（1）通过仓库安装"></a>（1）通过仓库安装</h3><pre><code>[root@master mychare]# helm search redis
//搜索chare包</code></pre><pre><code>[root@master mychare]# helm repo list
//查看是否有能访问仓库</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/20389715f270929a825a18f36b6f08c4.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<pre><code>[root@master mychare]# helm install stable/redis
//安装</code></pre><h3 id="（2）通过tar包安装"><a href="#（2）通过tar包安装" class="headerlink" title="（2）通过tar包安装"></a>（2）通过tar包安装</h3><pre><code>[root@master ~]# helm fetch stable/redis
//直接下载chare包
[root@master ~]# tar -zxf redis-1.1.15.tgz
//解压下载的chare包
[root@master ~]# tree -C redis
redis
├── Chart.yaml
├── README.md
├── templates
│   ├── deployment.yaml
│   ├── _helpers.tpl
│   ├── networkpolicy.yaml
│   ├── NOTES.txt
│   ├── pvc.yaml
│   ├── secrets.yaml
│   └── svc.yaml
└── values.yaml</code></pre><h3 id="（3）通过chare本地目录安装"><a href="#（3）通过chare本地目录安装" class="headerlink" title="（3）通过chare本地目录安装"></a>（3）通过chare本地目录安装</h3><pre><code>[root@master ~]# helm fetch stable/redis
//直接下载chare包
[root@master ~]# tar -zxf redis-1.1.15.tgz
//解压下载的chare包
[root@master ~]# helm install redis</code></pre><h3 id="（4）通过URL安装"><a href="#（4）通过URL安装" class="headerlink" title="（4）通过URL安装"></a>（4）通过URL安装</h3><pre><code>[root@master ~]# helm install https://example.com/charts/foo-1.2.3.tgz</code></pre><h1 id="创建自己的Repo仓库"><a href="#创建自己的Repo仓库" class="headerlink" title="创建自己的Repo仓库"></a>创建自己的Repo仓库</h1><h2 id="1）创建helm的私有仓库，以自己的名字命名。"><a href="#1）创建helm的私有仓库，以自己的名字命名。" class="headerlink" title="1）创建helm的私有仓库，以自己的名字命名。"></a>1）创建helm的私有仓库，以自己的名字命名。</h2><h3 id="1、node01启动一个httpd的容器"><a href="#1、node01启动一个httpd的容器" class="headerlink" title="1、node01启动一个httpd的容器"></a>1、node01启动一个httpd的容器</h3><pre><code>[root@node01 ~]# mkdir /var/xgp
//创建一个目录
[root@node01 ~]# docker pull httpd
//下载httpd镜像
[root@node02 ~]# docker run -d -p 8080:80 -v /var/xgp:/usr/local/apache2/htdocs httpd
//启动一个httpd的容器</code></pre><h3 id="3、生成仓库的index文件。"><a href="#3、生成仓库的index文件。" class="headerlink" title="3、生成仓库的index文件。"></a>3、生成仓库的index文件。</h3><pre><code>[root@master ~]# mkdir xgprepo
//创建一个目录存放打包的chare
[root@master ~]# helm repo index xgprepo/ --url http://192.168.1.22:8080/charts
//生成仓库的index文件</code></pre><h3 id="4、将生成的index-yaml上传到node01的-var-www-charts目录下"><a href="#4、将生成的index-yaml上传到node01的-var-www-charts目录下" class="headerlink" title="4、将生成的index.yaml上传到node01的/var/www/charts目录下."></a>4、将生成的index.yaml上传到node01的/var/www/charts目录下.</h3><h4 id="node01创建目录"><a href="#node01创建目录" class="headerlink" title="node01创建目录"></a>node01创建目录</h4><pre><code>[root@node01 ~]# mkdir /var/xgp/charts</code></pre><h4 id="master移动动到"><a href="#master移动动到" class="headerlink" title="master移动动到"></a>master移动动到</h4><pre><code>[root@master ~]# scp xgprepo/* node01:/var/xgp/charts/</code></pre><h4 id="node01查看一下"><a href="#node01查看一下" class="headerlink" title="node01查看一下"></a>node01查看一下</h4><pre><code>[root@node01 ~]# ls /var/xgp/charts/
index.yaml  </code></pre><h3 id="5、添加新的repo仓库"><a href="#5、添加新的repo仓库" class="headerlink" title="5、添加新的repo仓库"></a>5、添加新的repo仓库</h3><pre><code>[root@master ~]# helm repo add xgp http://192.168.1.22:8080/charts
[root@master ~]# helm repo list </code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/a2e1f46e4005d33c4ea6c5c8180b8ad9.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="2）-自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为-30000"><a href="#2）-自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为-30000" class="headerlink" title="2） 自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为:30000"></a>2） 自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为:30000</h2><h4 id="自定义一个chart包"><a href="#自定义一个chart包" class="headerlink" title="自定义一个chart包"></a>自定义一个chart包</h4><pre><code>[root@master ~]# helm create wsd
//创建一个名为wsd的chares包</code></pre><h4 id="按照要求修改配置文件"><a href="#按照要求修改配置文件" class="headerlink" title="按照要求修改配置文件"></a>按照要求修改配置文件</h4><pre><code>[root@master ~]# cd wsd/
//进入这个chart包
[root@master wsd]# vim values.yaml
//修改wsd的配置文件
replicaCount: 3                         #三个副本

image:
  repository: 192.168.1.21:5000/web      #更改镜像为私有镜像
  tag: v1                                #镜像标签v1
  pullPolicy: IfNotPresent              

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: NodePort              #修改模式为映射端口
  port: 80
  nodePort: 30000             #添加端口

[root@master wsd]# vim templates/service.yaml 

apiVersion: v1
kind: Service
metadata:
  name: {{ include "wsd.fullname" . }}
  labels:
{{ include "wsd.labels" . | indent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
      nodePort: {{ .Values.service.nodePort }}    #“添加”能让服务识别到nodePort的端口
  selector:
    app.kubernetes.io/name: {{ include "wsd.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}</code></pre><h4 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h4><pre><code>[root@master ~]# helm install -n wsd  wsd/ -f wsd/values.yaml </code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/b18f74519a95d138bdae8e525e4f98f5.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h4 id="查看一下镜像版本"><a href="#查看一下镜像版本" class="headerlink" title="查看一下镜像版本"></a>查看一下镜像版本</h4><pre><code>[root@master ~]# kubectl get deployments. -o wide</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/a57cd4abe5b96d92ac16450ed53fa79c.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h4 id="访问一下"><a href="#访问一下" class="headerlink" title="访问一下"></a>访问一下</h4><pre><code>[root@master ~]# curl 127.0.0.1:30000</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/7d9e241ceb6a8d0829803e1d0e5ddb8e.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="3-将实例进行更新，要求镜像生产v2版本。"><a href="#3-将实例进行更新，要求镜像生产v2版本。" class="headerlink" title="3)  将实例进行更新，要求镜像生产v2版本。"></a>3)  将实例进行更新，要求镜像生产v2版本。</h2><p><strong>私有镜像和官方镜像升级有所不同，官方的只需通过 （helm upgrade –set imageTag=“标签” 服务名称 charts包名 ）进行更改标签即可，而私有镜像需通过更改values.yaml中的标签才行比较麻烦一点。</strong></p>
<h3 id="1、修改values-yaml"><a href="#1、修改values-yaml" class="headerlink" title="1、修改values.yaml"></a>1、修改values.yaml</h3><pre><code>[root@master ~]# vim wsd/values.yaml 

# Default values for wsd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: 192.168.1.21:5000/web
  tag: v2                            #修改标签为v2
  pullPolicy: IfNotPresent
[root@master ~]# helm upgrade wsd wsd/ -f wsd/values.yaml
//基于配置文件刷新一下wsd服务</code></pre><h4 id="查看一下"><a href="#查看一下" class="headerlink" title="查看一下"></a>查看一下</h4><pre><code>[root@master ~]# kubectl get deployments. -o wide</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/904155e6a55a22dc169ab2b991c3a19a.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h4 id="访问一下-1"><a href="#访问一下-1" class="headerlink" title="访问一下"></a>访问一下</h4><pre><code>[root@master ~]# curl 127.0.0.1:30000</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/a739f12e8be562ce407bb9a739b0734f.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h3 id="2、使用edit进行版本更新"><a href="#2、使用edit进行版本更新" class="headerlink" title="2、使用edit进行版本更新"></a>2、使用edit进行版本更新</h3><p><strong><em>确定wsd这个服务开启</em></strong></p>
<pre><code>[root@master ~]# kubectl edit deployments. wsd</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/e418604d73fee964440211b46a7a143c.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h4 id="查看一下-1"><a href="#查看一下-1" class="headerlink" title="查看一下"></a>查看一下</h4><pre><code>[root@master ~]# kubectl get deployments. -o wide</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/bd177f123d471ed674ed0cc40d51ee70.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h4 id="访问一下-2"><a href="#访问一下-2" class="headerlink" title="访问一下"></a>访问一下</h4><pre><code>[root@master ~]# curl 127.0.0.1:30000</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/4755f15c01775053bd10434a90a87637.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="4）重新定义一个chart包，名称为-new-test-将这个包上传到上述私有仓库中-需要用helm-repo-update命玲更新本地的index文件。"><a href="#4）重新定义一个chart包，名称为-new-test-将这个包上传到上述私有仓库中-需要用helm-repo-update命玲更新本地的index文件。" class="headerlink" title="4）重新定义一个chart包，名称为: new-test,将这个包上传到上述私有仓库中,需要用helm repo update命玲更新本地的index文件。"></a>4）重新定义一个chart包，名称为: new-test,将这个包上传到上述私有仓库中,需要用helm repo update命玲更新本地的index文件。</h2><pre><code>[root@master ~]# helm repo list </code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/6a6e8d003c8986fab01bab76ba1473d4.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<pre><code>[root@master ~]# helm create xgp-wsd
//创建一个名为xgp-wsd的charts包

[root@master ~]# helm package xgp-wsd/
//将xgp-wsd打包在当前目录

[root@master ~]# mv xgp-wsd-0.1.0.tgz xgprepo/
//把打包文件放到仓库目录

[root@master ~]# helm repo index xgprepo/ --url http://192.168.1.22:8080/charts
//把仓库目录新加入的charts包信息记录在index.yaml中，使得其他加入的主机可以识别到，仓库的charts包

[root@master ~]# scp xgprepo/* node01:/var/xgp/charts
//将仓库目录的文件移动到httpd服务上，使各个主机可以访问，下载仓库的charts包

[root@master ~]# helm repo update 
//更新一下chart存储库

[root@master myrepo]# helm install http://192.168.1.22:8080/charts/xgp-wsd-0.1.0.tgz
//基于仓库的xgp-wsd-0.1.0.tgz包创建一个服务</code></pre><h3 id="查看一下-2"><a href="#查看一下-2" class="headerlink" title="查看一下"></a>查看一下</h3><pre><code>[root@master ~]# helm search xgp-wsd</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/04/11da050bfeec791fe57f179ae8854044.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>变量和简单的数据类型</title>
    <url>/2020/03/11/%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="一、安装ipython"><a href="#一、安装ipython" class="headerlink" title="一、安装ipython"></a>一、安装ipython</h1><p><img src="https://s1.51cto.com/images/blog/202003/10/3e3f455611b5723650c0325d2456ae21.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<pre><code>C:\WINDOWS\system32&gt;pip3 install ipython</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/20631d65ae1fb37d728c5b4bdcb8dd17.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<pre><code>C:\WINDOWS\system32&gt;pip3 list
//查看一下</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/4938656b2bbb939decf6362c5bb5c99c.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<pre><code>C:\WINDOWS\system32&gt;python -m pip install --upgrade pip
//更新下载源
C:\WINDOWS\system32&gt;python -m pip install --upgrade pip -i https://pypi.douban.com/simple
//更新下载源（比上面的快）</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/db4a95e56b941dcb45a290e7d1235148.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<pre><code>C:\WINDOWS\system32&gt;pip3 install -i  https://pypi.douban.com/simple ipython
//安装ipython
C:\WINDOWS\system32&gt;pip3 install -i  https://pypi.douban.com/simple jupyte
//安装jupyte</code></pre><h3 id="创建一个目录"><a href="#创建一个目录" class="headerlink" title="创建一个目录"></a>创建一个目录</h3><p><img src="https://s1.51cto.com/images/blog/202003/10/b2e1e821a209ad6cce73b9d496289ddb.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<pre><code>C:\WINDOWS\system32&gt;jupyter notebook
//启动编辑器jupyter</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/2e236d88aaa9d18b2dbdee4c5123408d.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong>按住shift键右击选择cmd窗口</strong></p>
<p><img src="https://s1.51cto.com/images/blog/202003/10/a58ef7b2c550d266f01e1345ff37829f.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h1 id="二、变量和简单的数据类型"><a href="#二、变量和简单的数据类型" class="headerlink" title="二、变量和简单的数据类型"></a>二、变量和简单的数据类型</h1><p><img src="https://s1.51cto.com/images/blog/202003/10/5c9ee19e20730e4e708f343ac3ab0faf.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><pre><code>C:\WINDOWS\system32&gt;jupyter notebook
//启动编辑器jupyter，会自动跳到默认浏览器或让你选择一个浏览器。</code></pre><p><strong>创建一个python3的文件</strong></p>
<p><img src="https://s1.51cto.com/images/blog/202003/10/b4033769ab57b54b1fafb8f44c45ba1f.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h3 id="1、变量命名规则"><a href="#1、变量命名规则" class="headerlink" title="1、变量命名规则"></a>1、变量命名规则</h3><p><strong><em>变量要先定义才能使用</em></strong></p>
<pre><code>message = '北京欢迎你'  #定义变量
print (message)       #输出变量
北京欢迎你              #输出成功</code></pre><h4 id="（1）只能包含的字母、数字、下划线，但是不能以数字打头"><a href="#（1）只能包含的字母、数字、下划线，但是不能以数字打头" class="headerlink" title="（1）只能包含的字母、数字、下划线，但是不能以数字打头"></a>（1）只能包含的字母、数字、下划线，但是不能以数字打头</h4><pre><code>$xpg = 'hello'   #定义变量以特殊符号开头
print ($xgp)     #输出变量</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/ae94f6d8bcfaa1f8c02eab4fbb07c179.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong><em>语法错误，所以不能使用特殊符号和数字开头</em></strong></p>
<h4 id="（2）不能包含空格，但是可以用下划线分隔其中的单词"><a href="#（2）不能包含空格，但是可以用下划线分隔其中的单词" class="headerlink" title="（2）不能包含空格，但是可以用下划线分隔其中的单词"></a>（2）不能包含空格，但是可以用下划线分隔其中的单词</h4><pre><code>a b=666     #定义变量名称以空格间隔
a b         #输出变量</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/213e5a7343889769090e90c05ec0ec6f.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong><em>语法错误，所以定义变量名称不能以空格间隔</em></strong></p>
<pre><code>a_b=666      #定义变量名称以空格间隔
a_b          #输出变量
666          #输出成功</code></pre><h4 id="（3）不能使用Python关键字和函数的名称用做变量"><a href="#（3）不能使用Python关键字和函数的名称用做变量" class="headerlink" title="（3）不能使用Python关键字和函数的名称用做变量"></a>（3）不能使用Python关键字和函数的名称用做变量</h4><pre><code>import = 'ere'    #以Python关键字定义变量名称
import            #输出变量</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/f4267e419d9a509247156d3fb9dcdfba.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong><em>可以看出输出失败了，并且只要是<code>Python关键字</code>他会变成<code>绿色</code>的</em></strong></p>
<h4 id="（3）变量名应该简短并且见名知意"><a href="#（3）变量名应该简短并且见名知意" class="headerlink" title="（3）变量名应该简短并且见名知意"></a>（3）变量名应该简短并且见名知意</h4><p><strong>应该把自己要说明情况以简短明了的方式在变量名称体现出来</strong></p>
<p><strong>如 name：</strong></p>
<pre><code>name = 'xgp'    #定义变量
name            #输出变量
'xgp'           #输出成功（通过变量名称就可以知道xgp是个名字）</code></pre><h4 id="（4）慎用大写字母I（i），小写字母l（L）和小写字母o"><a href="#（4）慎用大写字母I（i），小写字母l（L）和小写字母o" class="headerlink" title="（4）慎用大写字母I（i），小写字母l（L）和小写字母o"></a>（4）慎用大写字母I（i），小写字母l（L）和小写字母o</h4><p><strong>因为I、l和1非常像，还有0和0也非常像，到你要引用的时候非常麻烦（傻傻看不清）</strong></p>
<h4 id="（5）变量的表达形式"><a href="#（5）变量的表达形式" class="headerlink" title="（5）变量的表达形式"></a>（5）变量的表达形式</h4><pre><code>str1 = 'hello'       #单引号示范
str2 = "world"         #双引号示范
str3 = """             #三引号示范
1+1=2
2+2=4
4+4=8
"""
print(str1)             #输出变量
print(str2)             #输出变量
print(str3)             #输出变量</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/59ae99c04d8cae1cfdafcc63e54dd467.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong>变量str1使用单引号，变量str2使用双引号，变量str3使用三引号，他们都是合法的Python字符串类型，需要注意的是，单引号和双引号的作用是一样的，可以根据习惯使用，但是定义多行文字时，必须要使用三引号。</strong></p>
<h3 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h3><h4 id="（1）修改字符串大小写"><a href="#（1）修改字符串大小写" class="headerlink" title="（1）修改字符串大小写"></a>（1）修改字符串大小写</h4><pre><code>name = 'xgp wsd'
print(name.title())  #以首写字母大写的方式显示每个单词
print(name.upper())  #将所有字母都以大写的方式显示
print(name.lower())  #将所有字母都以小写的方式显示</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/bd13c93325d926c04df38dcf17d8e00c.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h4 id="（2）拼接字符"><a href="#（2）拼接字符" class="headerlink" title="（2）拼接字符"></a>（2）拼接字符</h4><pre><code>age = 18                    #定义变量 
print('我叫'+name.title()+',今年'+str(age)+'岁。')   #输出变量&lt;str()引用变量&gt;</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/67101e06f2c1345ddf3f7167ce0cd76e.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p>这种方式最常用、直观、易懂，是入门级的实现方式。但是，它也存在两处让人容易犯错的地方。</p>
<p>首先，新入门编程的同学容易犯错，他们不知道字符串是不可变类型，新的字符串会独占一块新的内存，而原来的字符串保持不变。上例中，拼接前有两段字符串，拼接后实际有三段字符串。</p>
<p>其次，一些有经验的老程序员也容易犯错，他们以为当拼接次数不超过3时，使用+号连接符就会比其它方式快（ps：不少Python教程都是如此建议），但这没有任何合理根据。</p>
<p>事实上，在拼接短的字面值时，由于CPython中的 <code>常数折叠</code> （constant folding）功能，这些字面值会被转换成更短的形式，例如’a’+’b’+’c’ 被转换成’abc’，’hello’+’world’也会被转换成’hello world’。这种转换是在编译期完成的，而到了运行期时就不会再发生任何拼接操作，因此会加快整体计算的速度。</p>
<p>常数折叠优化有一个限度，它要求拼接结果的长度不超过20。所以，<strong>当拼接的最终字符串长度不超过20时，+号操作符的方式，会比后面提到的join等方式快得多，这与+号的使用次数无关。</strong></p>
<p><img src="https://s1.51cto.com/images/blog/202003/10/d57777f357680a20980e7039c685c22d.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h4 id="（3）换行-n"><a href="#（3）换行-n" class="headerlink" title="（3）换行\n"></a>（3）换行\n</h4><pre><code>age = 18
print('我叫'+name.title()+',\n今年'+str(age)+'岁。')</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/716b3592768924fc37c07b4533a3e06e.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h4 id="（4）去空格"><a href="#（4）去空格" class="headerlink" title="（4）去空格"></a>（4）去空格</h4><pre><code>conten = ' wsd xgp '
print(conten.lstrip())     #去前面的空格
print(conten.rstrip())       #去后面的空格
print(conten.strip())       #去前面和后面的空格</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/79844387be03219bbe18f96263b9d952.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h3 id="3、数字的加减乘除"><a href="#3、数字的加减乘除" class="headerlink" title="3、数字的加减乘除"></a>3、数字的加减乘除</h3><pre><code>num1 = 8
num2 = 0.5
print(num1+num2)
print(num1-num2)
print(num1*num2)
print(num1/num2)
print(num1%num2)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/22f50e199da03ece8cf73d5f10c755d6.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h1 id="小测试"><a href="#小测试" class="headerlink" title="小测试"></a>小测试</h1><h2 id="1、将用户的姓名存到一个变量中，并向该用户显示一条信息，显示内容为：“你好，xgp，今天的Python课你学到东西了吗？”"><a href="#1、将用户的姓名存到一个变量中，并向该用户显示一条信息，显示内容为：“你好，xgp，今天的Python课你学到东西了吗？”" class="headerlink" title="1、将用户的姓名存到一个变量中，并向该用户显示一条信息，显示内容为：“你好，xgp，今天的Python课你学到东西了吗？”"></a>1、将用户的姓名存到一个变量中，并向该用户显示一条信息，显示内容为：“你好，xgp，今天的Python课你学到东西了吗？”</h2><pre><code>name = 'xgp'
print('你好，'+str(name)+'\n今天的Python课你学到东西了吗？')</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/9b43f71e41b49ac9f8b27115b8638ca8.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="2、将一个人的名字存到变量中，再以小写、大写和首字母大写的方式显示这个人的名字。"><a href="#2、将一个人的名字存到变量中，再以小写、大写和首字母大写的方式显示这个人的名字。" class="headerlink" title="2、将一个人的名字存到变量中，再以小写、大写和首字母大写的方式显示这个人的名字。"></a>2、将一个人的名字存到变量中，再以小写、大写和首字母大写的方式显示这个人的名字。</h2><pre><code>name = 'wsd'
print(name.lower())
print(name.upper())
print(name.title())</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/88d754d077cd7c8433ecdfa41f1f7cd2.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="3、按一下格式打印诗词："><a href="#3、按一下格式打印诗词：" class="headerlink" title="3、按一下格式打印诗词："></a>3、按一下格式打印诗词：</h2><blockquote>
<p>《自由》 </p>
<p>为人进出的门紧锁着;</p>
<p>想死的门敞开着。</p>
<p>有个病毒在外面高喊着:</p>
<p>“出来玩吧，给你自由！”</p>
<p>但我深深地知道……</p>
<p>出去了，不一定还能回来。</p>
<p>人的生命只有一次，</p>
<p>算球了，</p>
<p>再关十几天就自由了！</p>
</blockquote>
<pre><code>biaoti = '《自由》 '
print(str(biaoti)+'\n为人进出的门紧锁着;'+
'\n想死的门敞开着。'+
'\n有个病毒在外面高喊着:'+
'\n“出来玩吧，给你自由！”'+
'\n但我深深地知道……'+
'\n出去了，不一定还能回来。'+
'\n人的生命只有一次，'+
'\n算球了，'+
'\n再关十几天就自由了！')</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/10/2a50eaeda45f0dc2ed58138b5c881755.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>HEXO分类和标签的使用</title>
    <url>/2017/05/26/HEXO%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Hexo使用攻略-添加分类及标签"><a href="#Hexo使用攻略-添加分类及标签" class="headerlink" title="Hexo使用攻略-添加分类及标签"></a>Hexo使用攻略-添加分类及标签</h1><h2 id="1、创建“分类”选项"><a href="#1、创建“分类”选项" class="headerlink" title="1、创建“分类”选项"></a>1、创建“分类”选项</h2><h3 id="1-1-生成“分类”页并添加tpye属性"><a href="#1-1-生成“分类”页并添加tpye属性" class="headerlink" title="1.1 生成“分类”页并添加tpye属性"></a>1.1 生成“分类”页并添加tpye属性</h3><p><strong>打开命令行，进入博客所在文件夹。执行命令</strong></p>
<pre class=" language-cpp"><code class="language-cpp">hexo <span class="token keyword">new</span> page categories</code></pre>
<p><strong>成功后会提示：</strong></p>
<pre class=" language-bash"><code class="language-bash">INFO  Created: ~/Documents/blog/source/categories/index.md</code></pre>
<p><strong>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</strong></p>
<pre class=" language-css"><code class="language-css">---
<span class="token property">title</span><span class="token punctuation">:</span> 文章分类
<span class="token property">date</span><span class="token punctuation">:</span> <span class="token number">2017</span>-<span class="token number">05</span>-<span class="token number">27</span> <span class="token property">13</span><span class="token punctuation">:</span><span class="token property">47</span><span class="token punctuation">:</span><span class="token number">40</span>
---</code></pre>
<p><strong>添加<code>type: "categories"</code>到内容中，添加后是这样的：</strong></p>
<pre class=" language-bash"><code class="language-bash">---
title: 文章分类
date: 2017-05-27 13:47:40
type: <span class="token string">"categories"</span>
---</code></pre>
<p><strong>保存并关闭文件。</strong></p>
<h4 id="1-2-给文章添加“categories”属性"><a href="#1-2-给文章添加“categories”属性" class="headerlink" title="1.2 给文章添加“categories”属性"></a>1.2 给文章添加“categories”属性</h4><p><strong>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</strong></p>
<pre class=" language-css"><code class="language-css">---
<span class="token property">title</span><span class="token punctuation">:</span> jQuery对表单的操作及更多应用  #这个网页上不会显示，用于自己分辨
<span class="token property">date</span><span class="token punctuation">:</span> <span class="token number">2017</span>-<span class="token number">05</span>-<span class="token number">26</span> <span class="token property">12</span><span class="token punctuation">:</span><span class="token property">12</span><span class="token punctuation">:</span><span class="token number">57</span>
<span class="token property">categories</span><span class="token punctuation">:</span> 
- web前端                         #这个是分类名称
---</code></pre>
<p><strong>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</strong></p>
<h3 id="2、创建“标签”选项"><a href="#2、创建“标签”选项" class="headerlink" title="2、创建“标签”选项"></a>2、创建“标签”选项</h3><h4 id="2-1-生成“标签”页并添加tpye属性"><a href="#2-1-生成“标签”页并添加tpye属性" class="headerlink" title="2.1 生成“标签”页并添加tpye属性"></a>2.1 生成“标签”页并添加tpye属性</h4><p><strong>打开命令行，进入博客所在文件夹。执行命令</strong></p>
<pre class=" language-cpp"><code class="language-cpp"> hexo <span class="token keyword">new</span> page tags</code></pre>
<p><strong>成功后会提示：</strong></p>
<pre class=" language-bash"><code class="language-bash">INFO  Created: ~/Documents/blog/source/tags/index.md</code></pre>
<p><strong>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</strong></p>
<pre class=" language-css"><code class="language-css">---
<span class="token property">title</span><span class="token punctuation">:</span> 标签
<span class="token property">date</span><span class="token punctuation">:</span> <span class="token number">2017</span>-<span class="token number">05</span>-<span class="token number">27</span> <span class="token property">14</span><span class="token punctuation">:</span><span class="token property">22</span><span class="token punctuation">:</span><span class="token number">08</span>
---</code></pre>
<p><strong>添加<code>type: "tags"</code>到内容中，添加后是这样的：</strong></p>
<pre class=" language-bash"><code class="language-bash">---
title: 文章分类
date: 2017-05-27 13:47:40
type: <span class="token string">"tags"</span>
---</code></pre>
<p><strong>保存并关闭文件。</strong></p>
<h4 id="2-2-给文章添加“tags”属性"><a href="#2-2-给文章添加“tags”属性" class="headerlink" title="2.2 给文章添加“tags”属性"></a>2.2 给文章添加“tags”属性</h4><p><strong>打开需要添加标签的文章，为其添加tags属性。下方的<code>tags:</code>下方的<code>- jQuery</code> <code>- 表格</code><br> <code>- 表单验证</code>就是这篇文章的标签了</strong></p>
<pre class=" language-css"><code class="language-css">---
<span class="token property">title</span><span class="token punctuation">:</span> jQuery对表单的操作及更多应用
<span class="token property">date</span><span class="token punctuation">:</span> <span class="token number">2017</span>-<span class="token number">05</span>-<span class="token number">26</span> <span class="token property">12</span><span class="token punctuation">:</span><span class="token property">12</span><span class="token punctuation">:</span><span class="token number">57</span>
<span class="token property">categories</span><span class="token punctuation">:</span> 
- web前端
<span class="token property">tags</span><span class="token punctuation">:</span>
- jQuery               #标签名称
---</code></pre>
<p><strong>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</strong></p>
<p><strong>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行<code>hexo new 文章名</code>命令生成的文件，页面里就有<code>categories:</code>项了。</strong></p>
<p><strong>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>HEXO的使用</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title>Python列表</title>
    <url>/2017/05/26/Python%20%E5%88%97%E8%A1%A8(List)/</url>
    <content><![CDATA[<h1 id="Python-列表"><a href="#Python-列表" class="headerlink" title="Python 列表"></a>Python 列表</h1><p><strong>Python的基本数据类型有整数，浮点数，布尔，字符串，它们是最基本的数据。在实际编程中，我们要经常组织由很多基本数据组成的集合，这些集合的不同组织方式就是：数据结构，今天讲的是数据结构中的Python list(列表)。数据结构就是一些数据组合得到的“复合”数据类型。</strong></p>
<p><img src="https://s1.51cto.com/images/blog/202003/11/137b021999e8e998f17432d47b30f2a4.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="Python内置的数据结构有："><a href="#Python内置的数据结构有：" class="headerlink" title="Python内置的数据结构有："></a>Python内置的数据结构有：</h2><ul>
<li><strong>列表(list)</strong></li>
<li><strong>元组(tuple)</strong></li>
<li><strong>字典(dict)</strong></li>
<li><strong>集合(set)</strong></li>
</ul>
<p><strong>在Python语言中，以上4种数据结构和基础数据类型（整数、浮点数等）统称为“内置类型”（Built-in Types）。</strong></p>
<h1 id="一、什么是列表"><a href="#一、什么是列表" class="headerlink" title="一、什么是列表"></a>一、什么是列表</h1><p><strong>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。</strong></p>
<p><strong>Python有6个序列的内置类型，但最常见的是列表和元组。</strong></p>
<p><strong>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</strong></p>
<p><strong>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</strong></p>
<p><strong>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。</strong></p>
<p><strong>列表的数据项不需要具有相同的类型</strong></p>
<h2 id="（1）创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示："><a href="#（1）创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：" class="headerlink" title="（1）创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示："></a>（1）创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：</h2><pre><code># 定义列表
name = ['Tom','Jack','John']
pet = ['cat','dog','bird']

# 打印列表
print(name)
print(pet)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/d3d174c5845ce80de87d059e22e963bc.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="（2）用索引访问列表元素"><a href="#（2）用索引访问列表元素" class="headerlink" title="（2）用索引访问列表元素"></a>（2）用索引访问列表元素</h2><p><strong>使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：</strong></p>
<pre><code># 通过索引读取列表中的元素，索引从0开始，-1代表最后一个元素

print(name[0])     #查看列表中第一个
print(pet[2])      #查看列表中第二个
print(name[-1])    #查看列表中最后一个
print(pet[-2])    #查看列表中倒数第二个
print (name[0:2])  #查看索引2之前的元素</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/9d84b048d3fe5fa616b14fcedcd90f70.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h1 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h1><h2 id="1、通过素引获取元素-进行修改"><a href="#1、通过素引获取元素-进行修改" class="headerlink" title="1、通过素引获取元素,进行修改"></a>1、通过素引获取元素,进行修改</h2><pre><code>#修改列表的元素
name[1] = 'Sean'   #修改name列表，索引1的内容为Sean
print(name)           #打印列表</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/085e2a55fb2e9567e220bf49802b7505.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="2、-向列表里面加元素"><a href="#2、-向列表里面加元素" class="headerlink" title="2、 向列表里面加元素"></a>2、 向列表里面加元素</h2><p><strong>向python列表里面添加元素主要有三种方法：</strong></p>
<h3 id="（1）append（）"><a href="#（1）append（）" class="headerlink" title="（1）append（）"></a><strong>（1）append（）</strong></h3><p><strong>append()对于列表的操作主要实现的是在特定的列表最后添加一个元素，并且只能一次添加一个元素，并且只能在列表最后；</strong></p>
<p><code>name.append(元素A)</code></p>
<pre><code># 在列表末尾添加新元素
name.append('Bob')
print(name)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/b9f5217ecdae270c7d713aab7f7e667b.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h3 id="（2）extend（）"><a href="#（2）extend（）" class="headerlink" title="（2）extend（）"></a><strong>（2）extend（）</strong></h3><p><strong>extend（）对于列表的操作主要实现的是对于特定列表的扩展和增长，可以一次添加多个元素，不过也只能添加在列表的最后；</strong></p>
<pre><code>`name.extend([元素A，元素B，……])`</code></pre><pre><code>name.extend(['Xgp','Wsd'])
print(name)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/6d7f2f3cc974dc445679b3488a1b7866.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h3 id="（3）insert（）"><a href="#（3）insert（）" class="headerlink" title="（3）insert（）"></a><strong>（3）insert（）</strong></h3><p><strong>insert（）对于列表的操作主要是在列表的特定位置添加想要添加的特定元素，比较常用，这里的特定位置是指元素所在列表中的位置索引号，需要注意的是这里的索引号都是从0开始的，不是从1开始的，这个大家需要特别注意。</strong></p>
<pre><code>`pet.insert(A,元素B)：表示在列表m里面的第A+1处加入元素B`</code></pre><pre><code># 在列表指定位置添加新元素
print(pet)
pet.insert(0,'penguin')   #在列表最前面添加数据
print(pet)
pet.insert(-2,'pig')      #在列表倒数第三个添加数据
print(pet)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/ea1415a888f8e57c43526808b7a17d81.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="3、删减列表中的一些元素；"><a href="#3、删减列表中的一些元素；" class="headerlink" title="3、删减列表中的一些元素；"></a>3、删减列表中的一些元素；</h2><p><strong>与之前python列表的添加元素相对，删减列表里面的一些元素也有三种方法：</strong></p>
<h3 id="（1）del-pet-n"><a href="#（1）del-pet-n" class="headerlink" title="（1）del pet[n]"></a>（1）del pet[n]</h3><p><strong>它的作用是删除掉列表里面的索引号位置为n 的元素，这里需要注意的是del是一种操作语句。</strong></p>
<p> <code>del m[n]</code></p>
<pre><code># 根据索引从列表中删除元素
print(pet)
del pet[0]      #删除开头的元素
print (pet)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/292edbb8c3095c07fc72f79295d51ca7.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h3 id="（2）pet-pop（）"><a href="#（2）pet-pop（）" class="headerlink" title="（2）pet.pop（）"></a>（2）pet.pop（）</h3><p><strong>它的作用是将列表m的最后一个元素返回，并且在此基础上进行删除掉</strong></p>
<p><code>Temp=pet.pop()  %这里temp就会直接等于吗列表里最后一个元素。</code></p>
<p> <code>Print(pet)    %这里再次输出m的时候已经是删掉最后一个元素的m列表</code></p>
<h4 id="pop-弹出列表末尾的元素"><a href="#pop-弹出列表末尾的元素" class="headerlink" title="pop():弹出列表末尾的元素"></a>pop():弹出列表末尾的元素</h4><pre><code>print(pet)
new_pet=pet.pop()
print(new_pet)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/08733dd7c72202d207f028b84a1fbb85.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h4 id="弹出指定位置的元素"><a href="#弹出指定位置的元素" class="headerlink" title="弹出指定位置的元素"></a>弹出指定位置的元素</h4><pre><code># 弹出指定位置的元素
print(pet)
pet.pop(2)
print(pet)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/2b1641c4a69affa851abf2c5e2909c81.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h3 id="（3）pet-remove"><a href="#（3）pet-remove" class="headerlink" title="（3）pet.remove()"></a>（3）pet.remove()</h3><p><strong>m.remove的作用是移除掉列表m里面的特定元素；</strong></p>
<p><code>m.remove(元素A)</code></p>
<pre><code># 根据元素的值进行删除：remove()
print(pet)            #查看源列表
pet.remove('cat')     #删除cat
print(pet)            #打印列表</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/dda2c5caf4e83b6478d289b6adf2916d.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h1 id="三、排序"><a href="#三、排序" class="headerlink" title="三、排序"></a>三、排序</h1><h3 id="（1）永久排序（正索引，从头到尾）"><a href="#（1）永久排序（正索引，从头到尾）" class="headerlink" title="（1）永久排序（正索引，从头到尾）"></a>（1）永久排序（正索引，从头到尾）</h3><p><strong>sort()排序方法：此<a href="https://www.iplaypy.com/jichu/function.html" target="_blank" rel="noopener">函数</a>方法对列表内容进行正向排序，排序后的新列表会覆盖原列表（id不变），也就是sort排序方法是直接修改原列表list排序方法。</strong></p>
<h3 id="（2）临时排序（正索引，从头到尾）"><a href="#（2）临时排序（正索引，从头到尾）" class="headerlink" title="（2）临时排序（正索引，从头到尾）"></a>（2）临时排序（正索引，从头到尾）</h3><p><strong>sorted()方法：即可以保留原列表，又能得到已经排序好的列表</strong></p>
<h3 id="（3）倒序（从头到尾从尾到头）"><a href="#（3）倒序（从头到尾从尾到头）" class="headerlink" title="（3）倒序（从头到尾从尾到头）"></a>（3）倒序（从头到尾从尾到头）</h3><p><strong>reverse列表反转排序：是把原列表中的元素顺序从左至右的重新存放，而不会对列表中的参数进行排序整理。如果需要对列表中的参数进行整理，就需要用到列表的另一种排序方式sort正序排序。</strong></p>
<h3 id="（4）列表长度"><a href="#（4）列表长度" class="headerlink" title="（4）列表长度"></a>（4）列表长度</h3><p><strong>len() 方法返回列表元素个数。</strong></p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><pre><code># 定义列表：汽车的品牌
print('原始排序：')
brand = ['audi','bmw','toyota','luhu']
print(brand)

#临时排序
print('临时排序：')
print(sorted(brand))

# 永久排序: sort()
print('正序排序：')
brand.sort()
print(brand)

# 倒序排序
print('倒序排序:')
brand.sort(reverse=True)
print(brand)

# 获取列表长度
print('列表长度:')
print(len(brand))</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/3a203bc5e8e00faf71575a178c890558.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h1 id="四、小练习"><a href="#四、小练习" class="headerlink" title="四、小练习"></a>四、小练习</h1><h2 id="列表练习（一）"><a href="#列表练习（一）" class="headerlink" title="列表练习（一）"></a>列表练习（一）</h2><ul>
<li><strong>定义一个列表，存储5个科目名称</strong></li>
</ul>
<pre><code>kemu = ['语文','数学','英语','地理','生物']
print(kemu)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/0a892af8758dd19c970d7de47437ff8a.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>新增科目（末尾新增）</strong></li>
</ul>
<pre><code>kemu.append('化学')
print(kemu)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/0f0b406f8c28ebebc57ae634d49a2ee7.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>修改科目</strong></li>
</ul>
<pre><code>kemu[2] = '计算机'
print(kemu)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/5ab12537306589f9162bb67547c7f51e.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>删除科目，并且在打印科目列表的时候，能够显示删除了哪个科目</strong></li>
</ul>
<pre><code>print(kemu)
new_kemu=kemu.pop(3)
print(new_kemu)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/138b490d7841d85b817813e52a89420c.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>删除第2个科目</strong></li>
</ul>
<pre><code>kemu.pop(1)
print(kemu)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/a4947680d6baa4bd676067502617b085.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>指定位置新增</strong></li>
</ul>
<pre><code>kemu.insert(0,'科学')
print(kemu)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/7acdad95a50906f7ff9db554a238de19.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>删除指定名称的科目</strong></li>
</ul>
<pre><code>kemu.remove('生物')
print(kemu)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/34711348de69c3a3b32c902360ddf6ae.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="列表练习（二）"><a href="#列表练习（二）" class="headerlink" title="列表练习（二）"></a>列表练习（二）</h2><ul>
<li><strong>将5个城市的名称存储到列表中，并且保证名称不是按照字母顺序排列的</strong></li>
</ul>
<pre><code>city = ['北京','上海','广州','深圳','山西']
print(city)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/497b287216835fe7a5c9d5e61dea641d.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>打印出原始的城市列表信息</strong></li>
</ul>
<pre><code>print(city)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/ecf3236daafbd4344684a6545552b3bd.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>使用sorted()方法按字母顺序打印城市列表，但是不要修改列表元素的顺序</strong></li>
</ul>
<pre><code>print(sorted(city))</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/ef74e3a4b39c7ff64f81b85b5354fa03.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>打印该列表，确认城市名称排列顺序没有被修改</strong></li>
</ul>
<pre><code>print(city)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/8dcbfbba443ae0eef3e8842efa798a5f.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>使用sort()方法排列城市名称，确保永久性修改排列顺序</strong></li>
</ul>
<pre><code>city.sort()
print(city)</code></pre><p><img src="https://s1.51cto.com/images/blog/202003/11/d3fc524785b3984393f8d919fd34ddb2.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>python列表</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面向对象</title>
    <url>/2017/05/26/Python%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E7%B1%BB%EF%BC%8C%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Python-面向对象"><a href="#Python-面向对象" class="headerlink" title="Python 面向对象"></a>Python 面向对象</h1><p><strong>记住一句话：类是模板，而实例则是根据类创建的对象。</strong></p>
<p><strong>初学时对类的理解是从类的字面上，可以片面的认为它是一个种类，它是相似特征的抽像，也就是相似的东西，可以把相似特征的事务抽象成一个类。（事务可以是具体的物体或行为）</strong></p>
<p><strong>以圆为例，圆是具有圆周率(pi)和半径(r)两个相似特征的属性。根据相似特征抽象出圆类，每个圆的半径可以不同，那么半径可以作为圆的实例属性；而每个圆的圆周率pi是相同的，那么圆周率pi就可以作为类属性，这样就定义出了一个圆类。而我们要知道圆的面积，周长等可以通过类方法计算出来。</strong></p>
<p><strong>（看完整篇文章，还是对类不理解，回过头在来看这部分，对照列子多理解。）</strong></p>
<p><img src="https://s4.51cto.com/images/blog/202003/26/153357f05b5ca2d9870761c7bc0f7234.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h3 id="类的应用场景："><a href="#类的应用场景：" class="headerlink" title="类的应用场景："></a><strong>类的应用场景：</strong></h3><blockquote>
<p><strong>零散代码(代码块)–&gt;函数(方法)–&gt;类–&gt;模块(文件)</strong><br><strong>类:表示抽象(模糊)的事物</strong><br><strong>对象:表示具体(清晰)的事物</strong></p>
</blockquote>
<h2 id="1、面向对象技术简介"><a href="#1、面向对象技术简介" class="headerlink" title="1、面向对象技术简介"></a>1、面向对象技术简介</h2><ul>
<li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li>
<li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li>
<li><strong>数据成员：</strong>类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li>
<li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li>
<li><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li>
<li><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。</li>
<li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li>
<li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li>
<li><strong>方法：</strong>类中定义的函数。</li>
<li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li>
</ul>
<h2 id="2、创建类"><a href="#2、创建类" class="headerlink" title="2、创建类"></a>2、创建类</h2><p><strong>使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">:</span>
   <span class="token string">'类的帮助信息'</span>   <span class="token comment" spellcheck="true">#类文档字符串</span>
   class_suite  <span class="token comment" spellcheck="true">#类体</span></code></pre>
<p><strong>类的帮助信息可以通过ClassName.doc查看。</strong></p>
<p><strong>class_suite 由类成员，方法，数据属性组成。</strong></p>
<h3 id="（1）例子"><a href="#（1）例子" class="headerlink" title="（1）例子"></a>（1）例子</h3><p><strong>描述人类的文件</strong><br><strong>类的结构：</strong><br>    <strong>1、动态的行为（动词）：speak、sing</strong><br>    <strong>2、静态的属性（名词）：gender、user_name</strong><br>        <strong>（1）全局：在类中的任何地方都能使用</strong><br>        <strong>（2）局部：只能够在方法内部使用</strong><br><strong>使用类：</strong><br>    <strong>实例化对象：对象名 = 类名 ( 参数【可选的】)</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""模拟人类"""</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""初始化属性：gender和user_name"""</span>
        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> sex
        self<span class="token punctuation">.</span>user_name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""模拟人类说话"""</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在说话。"</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""模拟人类唱歌"""</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在唱歌。"</span><span class="token punctuation">)</span></code></pre>
<ul>
<li><strong><code>empCount</code> 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 <code>Employee.empCount</code> 访问。</strong></li>
<li><strong>第一种方法<code>__init__()</code>方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</strong></li>
<li><strong><code>self</code> 代表类的实例，<code>self</code> 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</strong></li>
</ul>
<h5 id="输出结果如下："><a href="#输出结果如下：" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用类</span>
man <span class="token operator">=</span> Human<span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'xgp'</span><span class="token punctuation">)</span>
man<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>

lz <span class="token operator">=</span> Human<span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'kk'</span><span class="token punctuation">)</span>
lz<span class="token punctuation">.</span>sing<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
</blockquote>
<h3 id="（2）修改初始值"><a href="#（2）修改初始值" class="headerlink" title="（2）修改初始值"></a>（2）修改初始值</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>strain<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""给属性赋初始值（默认值）"""</span>
        self<span class="token punctuation">.</span>nick_name <span class="token operator">=</span> <span class="token string">'咪咪'</span>
        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> sex
        self<span class="token punctuation">.</span>stain <span class="token operator">=</span> strain


cat <span class="token operator">=</span> Pet<span class="token punctuation">(</span><span class="token string">'公'</span><span class="token punctuation">,</span><span class="token string">'土猫'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 修改初始值</span>
cat<span class="token punctuation">.</span>nick_name <span class="token operator">=</span> <span class="token string">'妙妙'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>nick_name<span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-1"><a href="#输出结果如下：-1" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">妙妙</code></pre>
</blockquote>
<h2 id="3、self代表类的实例，而非类"><a href="#3、self代表类的实例，而非类" class="headerlink" title="3、self代表类的实例，而非类"></a>3、self代表类的实例，而非类</h2><p><strong>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<code>第一个参数名称</code>, 按照惯例它的名称是 self。</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">prt</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>

t <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span>
t<span class="token punctuation">.</span>prt<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-2"><a href="#输出结果如下：-2" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Test instance at <span class="token number">0x10d066878</span><span class="token operator">></span>
__main__<span class="token punctuation">.</span>Test</code></pre>
</blockquote>
<p><strong>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 <code>self.__class__</code> 则指向类。</strong></p>
<p><strong>self 不是 python 关键字，我们把他换成 <code>runoob</code> 也是可以正常执行的:</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">prt</span><span class="token punctuation">(</span>runoob<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>runoob<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>runoob<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>

t <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span>
t<span class="token punctuation">.</span>prt<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-3"><a href="#输出结果如下：-3" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Test instance at <span class="token number">0x10d066878</span><span class="token operator">></span>
__main__<span class="token punctuation">.</span>Test</code></pre>
</blockquote>
<h2 id="4、创建实例对象"><a href="#4、创建实例对象" class="headerlink" title="4、创建实例对象"></a>4、创建实例对象</h2><p><strong>实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。</strong></p>
<p><strong>以下使用类的名称 <code>Dn</code> 来实例化，并通过 <code>__init__</code> 方法接收参数。</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""
小名和小红各自买了一台笔记本电脑,
其中小名的电脑品牌是联想, CPU8核, 512G固态硬盘,双飞燕鼠标
省红的电脑品牌是机械师, CPU4核, 256G固态硬盘+1T普通硬盘，机械师鼠标
使用面向对象的思维，编写代码完成以 上描述。
"""</span>
<span class="token keyword">class</span> <span class="token class-name">Dn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>brand<span class="token punctuation">,</span>cpu<span class="token punctuation">,</span>disk<span class="token punctuation">,</span>mouse<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>nice_name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>nice_pp <span class="token operator">=</span> brand
        self<span class="token punctuation">.</span>nice_cpu <span class="token operator">=</span> cpu
        self<span class="token punctuation">.</span>nice_disk <span class="token operator">=</span> disk
        self<span class="token punctuation">.</span>nice_mouse <span class="token operator">=</span> mouse
    <span class="token keyword">def</span> <span class="token function">xgp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>nice_name <span class="token operator">+</span> <span class="token string">'的电脑配置：“'</span>
              <span class="token operator">+</span> <span class="token string">'品牌：'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>nice_pp <span class="token operator">+</span> <span class="token string">','</span>
              <span class="token operator">+</span> <span class="token string">'cpu：'</span> <span class="token operator">+</span>self<span class="token punctuation">.</span>nice_cpu <span class="token operator">+</span> <span class="token string">','</span>
              <span class="token operator">+</span> <span class="token string">'硬盘：'</span> <span class="token operator">+</span>self<span class="token punctuation">.</span>nice_disk <span class="token operator">+</span> <span class="token string">','</span>
              <span class="token operator">+</span> <span class="token string">'鼠标：'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>nice_mouse <span class="token operator">+</span> <span class="token string">','</span>
              <span class="token operator">+</span> <span class="token string">'”。'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 可以使用点号 . 来访问对象的属性。使用如下类的名称访问类变量</span>
Dn1 <span class="token operator">=</span> Dn<span class="token punctuation">(</span><span class="token string">'小名'</span><span class="token punctuation">,</span><span class="token string">'联想'</span><span class="token punctuation">,</span><span class="token string">'8核'</span><span class="token punctuation">,</span><span class="token string">'512固态硬盘'</span><span class="token punctuation">,</span><span class="token string">'双飞燕'</span><span class="token punctuation">)</span>
Dn1<span class="token punctuation">.</span>xgp<span class="token punctuation">(</span><span class="token punctuation">)</span>

Dn2 <span class="token operator">=</span> Dn<span class="token punctuation">(</span><span class="token string">'小米'</span><span class="token punctuation">,</span><span class="token string">'机械师'</span><span class="token punctuation">,</span><span class="token string">'4核'</span><span class="token punctuation">,</span><span class="token string">'256G固态硬盘+1T普通硬盘'</span><span class="token punctuation">,</span><span class="token string">'机械师鼠标'</span><span class="token punctuation">)</span>
Dn2<span class="token punctuation">.</span>xgp<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-4"><a href="#输出结果如下：-4" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">小名的电脑配置：“品牌：联想<span class="token punctuation">,</span>cpu：<span class="token number">8</span>核<span class="token punctuation">,</span>固态硬盘：<span class="token number">512</span>固态硬盘<span class="token punctuation">,</span>鼠标：双飞燕”。
小名的电脑配置：“品牌：机械师<span class="token punctuation">,</span>cpu：<span class="token number">4</span>核<span class="token punctuation">,</span>固态硬盘：256G固态硬盘<span class="token punctuation">,</span>机械硬盘1T普通硬盘<span class="token punctuation">,</span>鼠标：机械师鼠标”。</code></pre>
</blockquote>
<h2 id="5、类的继承"><a href="#5、类的继承" class="headerlink" title="5、类的继承"></a>5、类的继承</h2><p><img src="https://s4.51cto.com/images/blog/202003/27/2ad26adbbbec89a9aba2520c7ff15344.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<p><strong>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。</strong></p>
<p><strong>通过继承创建的新类称为<code>子类</code>或派生类，被继承的类称为<code>基类</code>、<code>父类</code>或<code>超类</code>。</strong></p>
<p><strong>继承语法</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> 派生类名<span class="token punctuation">(</span>基类名<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<p><strong>在python中继承中的一些特点：</strong></p>
<ul>
<li><strong>1、如果在子类中需要父类的构造方法就需要显示的调用父类的构造方法，或者不重写父类的构造方法。详细说明可查看：<a href="https://www.runoob.com/w3cnote/python-extends-init.html" target="_blank" rel="noopener">python 子类继承父类构造函数说明</a>。</strong></li>
<li><strong>2、在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数</strong></li>
<li><strong>3、Python 总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。</strong></li>
</ul>
<p><strong>如果在继承元组中列了一个以上的类，那么它就被称作”多重继承” 。</strong></p>
<h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a><strong>语法：</strong></h4><p><strong>派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SubClassName</span> <span class="token punctuation">(</span>ParentClass1<span class="token punctuation">[</span><span class="token punctuation">,</span> ParentClass2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<h3 id="（1）例子-1"><a href="#（1）例子-1" class="headerlink" title="（1）例子"></a>（1）例子</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定义父类</span>
   parentAttr <span class="token operator">=</span> <span class="token number">100</span>
   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"调用父类构造函数"</span><span class="token punctuation">)</span>

   <span class="token keyword">def</span> <span class="token function">parentMethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用父类方法'</span><span class="token punctuation">)</span>

   <span class="token keyword">def</span> <span class="token function">setAttr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>
      Parent<span class="token punctuation">.</span>parentAttr <span class="token operator">=</span> attr

   <span class="token keyword">def</span> <span class="token function">getAttr</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"父类属性 :"</span><span class="token punctuation">,</span> Parent<span class="token punctuation">.</span>parentAttr<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 定义子类</span>
   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"调用子类构造方法"</span><span class="token punctuation">)</span>

   <span class="token keyword">def</span> <span class="token function">childMethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'调用子类方法'</span><span class="token punctuation">)</span>

c <span class="token operator">=</span> Child<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 实例化子类</span>
c<span class="token punctuation">.</span>childMethod<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 调用子类的方法</span>
c<span class="token punctuation">.</span>parentMethod<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 调用父类方法</span>
c<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 再次调用父类的方法 - 设置属性值</span>
c<span class="token punctuation">.</span>getAttr<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 再次调用父类的方法 - 获取属性值</span></code></pre>
<h5 id="输出结果如下：-5"><a href="#输出结果如下：-5" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">调用子类构造方法
调用子类方法
调用父类方法
父类属性 <span class="token punctuation">:</span> <span class="token number">200</span></code></pre>
</blockquote>
<h3 id="（2）例子"><a href="#（2）例子" class="headerlink" title="（2）例子"></a>（2）例子</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""
小名和小红各自买了一台笔记本电脑,
其中小名的电脑品牌是联想, CPU8核, 512G固态硬盘,双飞燕鼠标
省红的电脑品牌是机械师, CPU4核, 256G固态硬盘+1T普通硬盘，机械师鼠标
使用面向对象的思维，编写代码完成以 上描述。
"""</span>
<span class="token keyword">class</span> <span class="token class-name">Dn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>brand<span class="token punctuation">,</span>cpu<span class="token punctuation">,</span>disk<span class="token punctuation">,</span>mouse<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>nice_pp <span class="token operator">=</span> brand
        self<span class="token punctuation">.</span>nice_cpu <span class="token operator">=</span> cpu
        self<span class="token punctuation">.</span>nice_disk <span class="token operator">=</span> disk
        self<span class="token punctuation">.</span>nice_mouse <span class="token operator">=</span> mouse

<span class="token comment" spellcheck="true"># 继承:共享某个类的代码</span>
<span class="token keyword">class</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span>Dn<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>brand<span class="token punctuation">,</span>cpu<span class="token punctuation">,</span>disk<span class="token punctuation">,</span>mouse<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>brand<span class="token punctuation">,</span>cpu<span class="token punctuation">,</span>disk<span class="token punctuation">,</span>mouse<span class="token punctuation">)</span>


    <span class="token keyword">def</span> <span class="token function">xgp</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'的电脑配置：“'</span>
                      <span class="token operator">+</span> <span class="token string">'品牌：'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>nice_pp <span class="token operator">+</span> <span class="token string">','</span>
                      <span class="token operator">+</span> <span class="token string">'cpu：'</span> <span class="token operator">+</span>self<span class="token punctuation">.</span>nice_cpu <span class="token operator">+</span> <span class="token string">','</span>
                      <span class="token operator">+</span> <span class="token string">'固态硬盘：'</span> <span class="token operator">+</span>self<span class="token punctuation">.</span>nice_disk <span class="token operator">+</span> <span class="token string">','</span>
                      <span class="token operator">+</span> <span class="token string">'鼠标：'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>nice_mouse
                      <span class="token operator">+</span> <span class="token string">'”。'</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">XiaoHong</span><span class="token punctuation">(</span>Dn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>brand<span class="token punctuation">,</span>cpu<span class="token punctuation">,</span>disk<span class="token punctuation">,</span>sim_disk<span class="token punctuation">,</span>mouse<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>sim_disk <span class="token operator">=</span> sim_disk
        super<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> __init__<span class="token punctuation">(</span>brand<span class="token punctuation">,</span>cpu<span class="token punctuation">,</span>disk<span class="token punctuation">,</span>mouse<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">wsd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'的电脑配置：“'</span>
              <span class="token operator">+</span> <span class="token string">'品牌：'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>nice_pp <span class="token operator">+</span> <span class="token string">','</span>
              <span class="token operator">+</span> <span class="token string">'cpu：'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>nice_cpu <span class="token operator">+</span> <span class="token string">','</span>
              <span class="token operator">+</span> <span class="token string">'固态硬盘：'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>nice_disk <span class="token operator">+</span> <span class="token string">','</span>
              <span class="token operator">+</span> <span class="token string">'机械硬盘'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>sim_disk <span class="token operator">+</span> <span class="token string">','</span>
              <span class="token operator">+</span> <span class="token string">'鼠标：'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>nice_mouse
              <span class="token operator">+</span> <span class="token string">'”。'</span><span class="token punctuation">)</span>

xiaoming <span class="token operator">=</span> XiaoMing<span class="token punctuation">(</span><span class="token string">'联想'</span><span class="token punctuation">,</span><span class="token string">'8核'</span><span class="token punctuation">,</span><span class="token string">'512固态硬盘'</span><span class="token punctuation">,</span><span class="token string">'双飞燕'</span><span class="token punctuation">)</span>
xiaoming<span class="token punctuation">.</span>xgp<span class="token punctuation">(</span><span class="token string">'小名'</span><span class="token punctuation">)</span>
xiaohong <span class="token operator">=</span> XiaoHong<span class="token punctuation">(</span><span class="token string">'机械师'</span><span class="token punctuation">,</span><span class="token string">'4核'</span><span class="token punctuation">,</span><span class="token string">'256G固态硬盘'</span><span class="token punctuation">,</span><span class="token string">'1T普通硬盘'</span><span class="token punctuation">,</span><span class="token string">'机械师鼠标'</span><span class="token punctuation">)</span>
xiaohong<span class="token punctuation">.</span>wsd<span class="token punctuation">(</span><span class="token string">'小名'</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-6"><a href="#输出结果如下：-6" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><blockquote>
<pre class=" language-python"><code class="language-python">小名的电脑配置：“品牌：联想<span class="token punctuation">,</span>cpu：<span class="token number">8</span>核<span class="token punctuation">,</span>固态硬盘：<span class="token number">512</span>固态硬盘<span class="token punctuation">,</span>鼠标：双飞燕”。
小名的电脑配置：“品牌：机械师<span class="token punctuation">,</span>cpu：<span class="token number">4</span>核<span class="token punctuation">,</span>固态硬盘：256G固态硬盘<span class="token punctuation">,</span>机械硬盘1T普通硬盘<span class="token punctuation">,</span>鼠标：机械师鼠标”。</code></pre>
</blockquote>
<h3 id="（3）方法重写（员工自我介绍）"><a href="#（3）方法重写（员工自我介绍）" class="headerlink" title="（3）方法重写（员工自我介绍）"></a>（3）方法重写（员工自我介绍）</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Empoyee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""员工类"""</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>years_old<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""初始化普通员工属性"""</span>
        self<span class="token punctuation">.</span>user_name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>user_years_old <span class="token operator">=</span> years_old
        self<span class="token punctuation">.</span>user_money <span class="token operator">=</span> money

    <span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""模拟员工自我介绍的方法"""</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>user_name
              <span class="token operator">+</span><span class="token string">',工龄'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>user_years_old
              <span class="token operator">+</span><span class="token string">'年，年工资为'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>user_money
              <span class="token operator">+</span><span class="token string">'元。'</span>
              <span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">SE</span><span class="token punctuation">(</span>Empoyee<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>years_old<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>years_old<span class="token punctuation">,</span>money<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""模拟员工自我介绍的方法"""</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>user_name
              <span class="token operator">+</span><span class="token string">',工龄'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>user_years_old
              <span class="token operator">+</span><span class="token string">'年，年工资为'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>user_money
              <span class="token operator">+</span><span class="token string">'元。'</span>
              <span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">PM</span><span class="token punctuation">(</span>Empoyee<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>years_old<span class="token punctuation">,</span>money<span class="token punctuation">,</span>bonus<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>years_old<span class="token punctuation">,</span>money<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 编写子类特有的属性</span>
        self<span class="token punctuation">.</span>pm_bonus <span class="token operator">=</span> bonus

    <span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""模拟项目经理自我介绍的方法"""</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>user_name
              <span class="token operator">+</span><span class="token string">',工龄'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>user_years_old
              <span class="token operator">+</span><span class="token string">'年，月工资为'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>user_money
              <span class="token operator">+</span><span class="token string">'元，'</span>
              <span class="token operator">+</span> <span class="token string">'管理奖金'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>pm_bonus <span class="token operator">+</span> <span class="token string">'元。'</span>
              <span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">CTO</span><span class="token punctuation">(</span>Empoyee<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>years_old<span class="token punctuation">,</span>money<span class="token punctuation">,</span>bonus<span class="token punctuation">,</span>annual_bonus<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>years_old<span class="token punctuation">,</span>money<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cto_bonus <span class="token operator">=</span> bonus
        self<span class="token punctuation">.</span>cto_annual_bonus <span class="token operator">=</span> annual_bonus

    <span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""模拟项目经理自我介绍的方法"""</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>user_name
              <span class="token operator">+</span><span class="token string">',工龄'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>user_years_old
              <span class="token operator">+</span><span class="token string">'年，月工资为'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>user_money
              <span class="token operator">+</span><span class="token string">'元，'</span>
              <span class="token operator">+</span> <span class="token string">'管理奖金'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>cto_bonus <span class="token operator">+</span> <span class="token string">'元，'</span>
              <span class="token operator">+</span> <span class="token string">'年终奖'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>cto_annual_bonus <span class="token operator">+</span> <span class="token string">'元。'</span>
              <span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 使用类：实例化对象</span>
se <span class="token operator">=</span> SE<span class="token punctuation">(</span><span class="token string">'xgp'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'8k'</span><span class="token punctuation">)</span>
se<span class="token punctuation">.</span>say_hi<span class="token punctuation">(</span><span class="token punctuation">)</span>

pm <span class="token operator">=</span> PM<span class="token punctuation">(</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'10000'</span><span class="token punctuation">,</span><span class="token string">'5000'</span><span class="token punctuation">)</span>
pm<span class="token punctuation">.</span>say_hi<span class="token punctuation">(</span><span class="token punctuation">)</span>

cto <span class="token operator">=</span> CTO<span class="token punctuation">(</span><span class="token string">'xgp'</span><span class="token punctuation">,</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token string">'30000'</span><span class="token punctuation">,</span><span class="token string">'6000'</span><span class="token punctuation">,</span><span class="token string">'12000'</span><span class="token punctuation">)</span>
cto<span class="token punctuation">.</span>say_hi<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h5 id="输出结果如下：-7"><a href="#输出结果如下：-7" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><pre class=" language-python"><code class="language-python">我叫xgp<span class="token punctuation">,</span>工龄<span class="token number">4</span>年，年工资为8k元。
我叫wsd<span class="token punctuation">,</span>工龄<span class="token number">6</span>年，月工资为<span class="token number">10000</span>元，管理奖金<span class="token number">5000</span>元。
我叫xgp<span class="token punctuation">,</span>工龄<span class="token number">10</span>年，月工资为<span class="token number">30000</span>元，管理奖金<span class="token number">6000</span>元，年终奖<span class="token number">12000</span>元。</code></pre>
<h4 id="分析以上代码"><a href="#分析以上代码" class="headerlink" title="分析以上代码"></a>分析以上代码</h4><p><img src="https://s4.51cto.com/images/blog/202003/27/a0687de23fb422c1ef1630711c289e52.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""><br><img src="https://s4.51cto.com/images/blog/202003/27/4a70deba09d0062d863a238d2d7a955d.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<h2 id="6、Python内置类属性"><a href="#6、Python内置类属性" class="headerlink" title="6、Python内置类属性"></a>6、Python内置类属性</h2><ul>
<li><strong><code>__dict__</code> : 类的属性（包含一个字典，由类的数据属性组成）</strong></li>
<li><strong>~ :类的文档字符串</strong></li>
<li><strong><code>__name__</code>: 类名</strong></li>
<li><strong><code>__module__</code>: 类定义所在的模块（类的全名是’<code>__main__.className</code>‘，如果类位于一个导入模块mymod中，那么<code>className.__module__</code> 等于 mymod）</strong></li>
<li><strong><code>__bases__</code> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</strong></li>
</ul>
<h3 id="Python内置类属性调用实例如下："><a href="#Python内置类属性调用实例如下：" class="headerlink" title="Python内置类属性调用实例如下："></a>Python内置类属性调用实例如下：</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>

<span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">:</span>
   <span class="token string">'所有员工的基类'</span>
   empCount <span class="token operator">=</span> <span class="token number">0</span>

   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
      self<span class="token punctuation">.</span>salary <span class="token operator">=</span> salary
      Employee<span class="token punctuation">.</span>empCount <span class="token operator">+=</span> <span class="token number">1</span>

   <span class="token keyword">def</span> <span class="token function">displayCount</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token keyword">print</span> <span class="token string">"Total Employee %d"</span> <span class="token operator">%</span> Employee<span class="token punctuation">.</span>empCount

   <span class="token keyword">def</span> <span class="token function">displayEmployee</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span> <span class="token string">"Name : "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>  <span class="token string">", Salary: "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>salary

<span class="token keyword">print</span> <span class="token string">"Employee.__doc__:"</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>__doc__
<span class="token keyword">print</span> <span class="token string">"Employee.__name__:"</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>__name__
<span class="token keyword">print</span> <span class="token string">"Employee.__module__:"</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>__module__
<span class="token keyword">print</span> <span class="token string">"Employee.__bases__:"</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>__bases__
<span class="token keyword">print</span> <span class="token string">"Employee.__dict__:"</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>__dict__</code></pre>
<h5 id="输出结果如下：-8"><a href="#输出结果如下：-8" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><pre class=" language-python"><code class="language-python">Employee<span class="token punctuation">.</span>__doc__<span class="token punctuation">:</span> 所有员工的基类
Employee<span class="token punctuation">.</span>__name__<span class="token punctuation">:</span> Employee
Employee<span class="token punctuation">.</span>__module__<span class="token punctuation">:</span> __main__
Employee<span class="token punctuation">.</span>__bases__<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
Employee<span class="token punctuation">.</span>__dict__<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'__module__'</span><span class="token punctuation">:</span> <span class="token string">'__main__'</span><span class="token punctuation">,</span> <span class="token string">'displayCount'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function displayCount at <span class="token number">0x10a939c80</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'empCount'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'displayEmployee'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function displayEmployee at <span class="token number">0x10a93caa0</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">:</span> <span class="token string">'\xe6\x89\x80\xe6\x9c\x89\xe5\x91\x98\xe5\xb7\xa5\xe7\x9a\x84\xe5\x9f\xba\xe7\xb1\xbb'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function __init__ at <span class="token number">0x10a939578</span><span class="token operator">></span><span class="token punctuation">}</span></code></pre>
<h2 id="7、python对象销毁-垃圾回收"><a href="#7、python对象销毁-垃圾回收" class="headerlink" title="7、python对象销毁(垃圾回收)"></a>7、python对象销毁(垃圾回收)</h2><p><strong>Python 使用了引用计数这一简单技术来跟踪和回收垃圾。</strong></p>
<p><strong>在 Python 内部记录着所有使用中的对象各有多少引用。</strong></p>
<p><strong>一个内部跟踪变量，称为一个引用计数器。</strong></p>
<p><strong>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是”立即”的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。</strong></p>
<pre><code>a = 40      # 创建对象  &lt;40&gt;
b = a       # 增加引用， &lt;40&gt; 的计数
c = [b]     # 增加引用.  &lt;40&gt; 的计数

del a       # 减少引用 &lt;40&gt; 的计数
b = 100     # 减少引用 &lt;40&gt; 的计数
c[0] = -1   # 减少引用 &lt;40&gt; 的计数</code></pre><p><strong>垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。</strong></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>析构函数 <code>__del__</code> ，<code>__del__</code>在对象销毁的时候被调用，当对象不再被使用时，<code>__del__</code>方法运行：</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span> self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
      self<span class="token punctuation">.</span>y <span class="token operator">=</span> y
   <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
      class_name <span class="token operator">=</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__
      <span class="token keyword">print</span> class_name<span class="token punctuation">,</span> <span class="token string">"销毁"</span>

pt1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span>
pt2 <span class="token operator">=</span> pt1
pt3 <span class="token operator">=</span> pt1
<span class="token keyword">print</span> id<span class="token punctuation">(</span>pt1<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>pt2<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>pt3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印对象的id</span>
<span class="token keyword">del</span> pt1
<span class="token keyword">del</span> pt2
<span class="token keyword">del</span> pt3</code></pre>
<h5 id="输出结果如下：-9"><a href="#输出结果如下：-9" class="headerlink" title="输出结果如下："></a>输出结果如下：</h5><pre class=" language-python"><code class="language-python"><span class="token number">3083401324</span> <span class="token number">3083401324</span> <span class="token number">3083401324</span>
Point 销毁</code></pre>
<p><strong>注意：</strong>通常你需要在单独的文件中定义一个类</p>
<h2 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h2><p><strong>参数的传递图，翻译与<a href="https://link.zhihu.com/?target=http%3A//pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/">pythoncentral</a>网</strong></p>
<p><img src="https://s4.51cto.com/images/blog/202003/26/3c37921be4cb4b65679ec9c267d9114f.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<ul>
<li><strong>In 1 and 2,</strong> the arguments are passed to the method.</li>
<li><strong>1和2</strong>参数传递给<strong><strong>init</strong></strong>方法中的<strong>data参数</strong>。</li>
<li><strong>On 3,</strong> the self argument refers to the instance.</li>
<li><strong>3**</strong>self** 参数指向当前实例自身，self代表创建的实例变量 <strong>ik1</strong> 或者 <strong>Kls(‘arun’)。</strong></li>
<li><strong>At 4,</strong> we do not need to provide the instance to the method, as it is handled by the interpretor itself.</li>
<li><strong>4</strong> 我们不需要传递实例自身给方法，Python解释器自己会做这些操作的；<strong>ik14</strong> 会自动作为第一个实例参数(<strong>self</strong>)传入方法中。</li>
</ul>
<p><img src="https://s4.51cto.com/images/blog/202003/27/65a735ee169452f401eb0a7cd320a594.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>python面向对象</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>contact</title>
    <url>/contact/index.html</url>
    <content><![CDATA[<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/canvas-nest/canvas-nest-nomobile.min.js</url>
    <content><![CDATA[!function(){
	var userAgentInfo = navigator.userAgent;
    var Agents = ["iPad", "iPhone", "Android", 
          "SymbianOS", "Windows Phone",
           "iPod", "webOS", "BlackBerry", "IEMobile"];
    for (var v = 0; v &lt; Agents.length; v++) {
      if (userAgentInfo.indexOf(Agents[v]) &gt; 0) {
        return;
      }
    }
	function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j("script"),w=i.length,v=i[w-1];return{l:w,z:o(v,"zIndex",-1),o:o(v,"opacity",0.5),c:o(v,"color","0,0,0"),n:o(v,"count",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;r||i.x&lt;0?-1:1,i.ya*=i.y&gt;n||i.y&lt;0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){b=i.x-x.x,z=i.y-x.y,y=b*b+z*z;y<x.max&&(x===f&&y>=x.max/2&amp;&amp;(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle="rgba("+s.c+","+(A+0.2)+")",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement("canvas"),s=l(),c="c_n"+s.l,e=u.getContext("2d"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText="position:fixed;top:0;left:0;z-index:"+s.z+";opacity:"+s.o;j("body")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n&gt;p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();</w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){b=i.x-x.x,z=i.y-x.y,y=b*b+z*z;y<x.max&&(x===f&&y><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/canvas-nest/README.html</url>
    <content><![CDATA[<h1 id="Theme-NexT-Canvas-Nest"><a href="#Theme-NexT-Canvas-Nest" class="headerlink" title="Theme NexT Canvas Nest"></a>Theme NexT Canvas Nest</h1><p><img src="https://img.shields.io/badge/NexT-v7.3.0+-blue?style=flat-square" alt="Theme Version"></p>
<p><a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="noopener">canvas-nest.js</a> for <a href="https://github.com/theme-next" target="_blank" rel="noopener">NexT</a>.</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><h3 id="Step-1-rarr-Go-to-Hexo-dir"><a href="#Step-1-rarr-Go-to-Hexo-dir" class="headerlink" title="Step 1 → Go to Hexo dir"></a>Step 1 → Go to Hexo dir</h3><p>Change dir to <strong>Hexo</strong> directory. There must be <code>scaffolds</code>, <code>source</code>, <code>themes</code> and other directories:</p>
<pre class=" language-sh"><code class="language-sh">$ cd hexo
$ ls
scaffolds  source  themes  _config.yml  package.json</code></pre>
<h3 id="Step-2-rarr-Create-footer-swig"><a href="#Step-2-rarr-Create-footer-swig" class="headerlink" title="Step 2 → Create footer.swig"></a>Step 2 → Create <code>footer.swig</code></h3><p>Create a file named <code>footer.swig</code> in <code>hexo/source/_data</code> directory (create <code>_data</code> directory if it does not exist).</p>
<p>Edit this file and add the following content:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0,0,255<span class="token punctuation">"</span></span> <span class="token attr-name">opacity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span> <span class="token attr-name">zIndex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">count</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>99<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>You can customize these options.</p>
<h3 id="Step-3-rarr-Set-it-up"><a href="#Step-3-rarr-Set-it-up" class="headerlink" title="Step 3 → Set it up"></a>Step 3 → Set it up</h3><p>In the NexT <code>_config.yml</code>, uncomment <code>footer</code> under the <code>custom_file_path</code> section.</p>
<pre class=" language-yml"><code class="language-yml"># Define custom file paths.
# Create your custom files in site directory `source/_data` and uncomment needed files below.
custom_file_path:
  #head: source/_data/head.swig
  #header: source/_data/header.swig
  #sidebar: source/_data/sidebar.swig
  #postMeta: source/_data/post-meta.swig
  #postBodyEnd: source/_data/post-body-end.swig
  footer: source/_data/footer.swig
  #bodyEnd: source/_data/body-end.swig
  #variable: source/_data/variables.styl
  #mixin: source/_data/mixins.styl
  #style: source/_data/styles.styl</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/canvas-nest/canvas-nest.min.js</url>
    <content><![CDATA[!function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j("script"),w=i.length,v=i[w-1];return{l:w,z:o(v,"zIndex",-1),o:o(v,"opacity",0.5),c:o(v,"color","0,0,0"),n:o(v,"count",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;r||i.x&lt;0?-1:1,i.ya*=i.y&gt;n||i.y&lt;0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){b=i.x-x.x,z=i.y-x.y,y=b*b+z*z;y<x.max&&(x===f&&y>=x.max/2&amp;&amp;(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle="rgba("+s.c+","+(A+0.2)+")",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement("canvas"),s=l(),c="c_n"+s.l,e=u.getContext("2d"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText="position:fixed;top:0;left:0;z-index:"+s.z+";opacity:"+s.o;j("body")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n&gt;p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();</w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){b=i.x-x.x,z=i.y-x.y,y=b*b+z*z;y<x.max&&(x===f&&y><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
</search>
