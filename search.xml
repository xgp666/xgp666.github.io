<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>02 k8s架构，基本概念</title>
    <url>/posts/cd85.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.1.21</td>
<td></td>
</tr>
<tr>
<td>node01</td>
<td>192.168.1.22</td>
<td></td>
</tr>
<tr>
<td>node02</td>
<td>192.168.1.23</td>
<td></td>
</tr>
</tbody>
</table>
<h1>kubernetes架构</h1>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/qqq.png" alt="image-20200104100759831"></p>
<p><strong>kubectl</strong>：k8s是命令行端，用来发送客户的操作指令。</p>
<h2 id="master节点">master节点</h2>
<p><strong>1. API server[资源操作入口]</strong>：是k8s集群的前端接口，各种各样客户端工具以及k8s的其他组件可以通过它管理k8s集群的各种资源。它提供了HTTP/HTTPS RESTful API,即K8S API。</p>
<blockquote>
<ul>
<li><strong>提供了资源对象的唯一操作入口，其他所有组件都必须通过它提供的API来操作资源数据，只有API Server与存储通信，其他模块通过API Server访问集群状态。</strong></li>
</ul>
<p><strong>第一，是为了保证集群状态访问的安全。</strong></p>
<p><strong>第二，是为了隔离集群状态访问的方式和后端存储实现的方式：API Server是状态访问的方式，不会因为后端存储技术etcd的改变而改变。</strong></p>
<ul>
<li><strong>作为kubernetes系统的入口，封装了核心对象的增删改查操作，以<a href="https://www.centos.bz/tag/restful/" target="_blank" rel="noopener">RESTFul</a>接口方式提供给外部客户和内部组件调用。对相关的资源数据“全量查询”+“变化监听”，实时完成相关的业务功能。</strong></li>
</ul>
</blockquote>
<p><strong>2. Scheduler[集群分发调度器]</strong>：负责决定将Pod放在哪个Node上运行。在调度时，会充分考虑集群的拓扑结构，当前各个节点的负载情况，以及应对高可用、性能、数据亲和性和需求。</p>
<blockquote>
<p><strong>1.Scheduler收集和分析当前Kubernetes集群中所有Minion节点的资源(内存、CPU)负载情况，然后依此分发新建的Pod到Kubernetes集群中可用的节点。</strong></p>
<p><strong>2.实时监测Kubernetes集群中未分发和已分发的所有运行的Pod。</strong></p>
<p><strong>3.Scheduler也监测Minion节点信息，由于会频繁查找Minion节点，Scheduler会缓存一份最新的信息在本地。</strong></p>
<p><strong>4.最后，Scheduler在分发Pod到指定的Minion节点后，会把Pod相关的信息Binding写回API Server。</strong></p>
</blockquote>
<p><strong>4. Controller Manager[内部管理控制中心]</strong>：负责管理集群的各种资源，保证资源处于预期的状态。它由多种Controller组成，包括Replication Controller、Endpoints Controller、Namespace Controller、Serviceaccounts Controller等。</p>
<blockquote>
<p><strong>实现集群故障检测和恢复的自动化工作，负责执行各种控制器，主要有：</strong></p>
<p><strong>1.endpoint-controller：定期关联<a href="https://www.centos.bz/tag/service/" target="_blank" rel="noopener">service</a>和pod(关联信息由endpoint对象维护)，保证service到pod的映射总是最新的。</strong></p>
<p><strong>2.replication-controller：定期关联replicationController和pod，保证replicationController定义的复制数量与实际运行pod的数量总是一致的。</strong></p>
</blockquote>
<p><strong>5. Etcd</strong>：负责保存k8s集群的配置信息和各种资源的状态信息。当数据发生变化时，etcd会快速的通知k8s相关组件。<a href>（第三方组件）它有可替换方案。Consul、zookeeper</a></p>
<p><strong>6. Pod:</strong> k8s集群的最小组成单位。一个Pod内，可以运行一个或多个容器。大多数情况下，一个Pod内只有一个Container容器。</p>
<p><strong>7. Flanner</strong>：是k8s集群网络，可以保证Pod的跨主机通信。也有替换方案。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod --all-namespaces<br>//查看pod信息<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200104100759831.png" alt="image-20200104100759831"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod --all-namespaces -o wide<br>//显示pod的节点信息<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200104101023909.png" alt="image-20200104101023909"></p>
<h2 id="Node节点">Node节点</h2>
<p><strong>Kubelet[节点上的Pod管家]</strong>：它是Node的agent(代理)，当Scheduler确定某 个Node上运行Pod之后，会将Pod的具体配置信息发送给该节点的kubelet,kubelet会根据这些信息创建和运行容器，并向Master报告运行状态。</p>
<blockquote>
<ul>
<li><strong>负责Node节点上pod的创建、修改、监控、删除等全生命周期的管理</strong></li>
<li><strong>定时上报本Node的状态信息给API Server。</strong></li>
<li><strong>kubelet是Master API Server和Minion之间的桥梁，接收Master API Server分配给它的commands和work，与持久性键值存储etcd、file、server和http进行交互，读取配置信息。</strong></li>
<li><strong>具体的工作如下：</strong></li>
</ul>
<p><strong>设置容器的环境变量、给容器绑定<a href="https://www.centos.bz/tag/volume/" target="_blank" rel="noopener">Volume</a>、给容器绑定Port、根据指定的Pod运行一个单一容器、给指定的Pod创建network 容器。</strong></p>
<p><strong>同步Pod的状态、同步Pod的状态、从<a href="https://www.centos.bz/tag/cadvisor/" target="_blank" rel="noopener">cAdvisor</a>获取<a href="https://www.centos.bz/tag/container/" target="_blank" rel="noopener">Container</a> info、 pod info、 root info、 <a href="https://www.centos.bz/tag/machine/" target="_blank" rel="noopener">machine</a> info。</strong></p>
<p><strong>在容器中运行命令、杀死容器、删除Pod的所有容器。</strong></p>
</blockquote>
<p>**kube-proxy[负载均衡、路由转发]:**负责将访问service的TCP/UDP数据流转发到后端的容器。如果有多个副本，kube-proxy会实现负载均衡。</p>
<blockquote>
<ul>
<li><strong>Proxy是为了解决外部网络能够访问跨机器集群中容器提供的应用服务而设计的，运行在每个Node上。Proxy提供TCP/UDP sockets的proxy，每创建一种Service，Proxy主要从etcd获取Services和Endpoints的配置信息（也可以从file获取），然后根据配置信息在Minion上启动一个Proxy的进程并监听相应的服务端口，当外部请求发生时，Proxy会根据Load Balancer将请求分发到后端正确的容器处理。</strong></li>
<li><strong>Proxy不但解决了同一主宿机相同服务端口冲突的问题，还提供了Service转发服务端口对外提供服务的能力，Proxy后端使用了随机、轮循负载均衡算法。</strong></li>
</ul>
</blockquote>
<h2 id="范例">范例</h2>
<blockquote>
<h3 id="分析各个组件的作用以及架构工作流程">分析各个组件的作用以及架构工作流程:</h3>
<p><strong>1) kubectl发送部署 请求到API server</strong><br>
<strong>2) APIserver通知Controller Manager创建一个Deployment资源。</strong><br>
<strong>3) Scheduler执行调度任务,将两个副本Pod分发到node01和node02. 上。</strong><br>
<strong>4) node01和node02, 上的kubelet在各自节点上创建并运行Pod。</strong></p>
<h3 id="补充">补充</h3>
<p><strong>1.应用的配置和当前的状态信息保存在etcd中，执行kubectl get pod时API server会从etcd中读取这些数据。</strong></p>
<p><strong>2.flannel会为每个Pod分配一个IP。 但此时没有创建Service资源，目前kube-proxy还没有参与进来。</strong></p>
</blockquote>
<h3 id="运行一个例子（创建一个deployment资源对象-pod控制器-）">运行一个例子（创建一个deployment资源对象&lt;pod控制器&gt;）</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl run test-web --image=httpd --replicas=<span class="hljs-number">2</span><br><span class="hljs-comment">//创建一个deployment资源对象。</span><br></code></pre></td></tr></table></figure>
<p><em><strong>运行完成之后，如果有镜像可直接开启，没有的话需要等待一会儿，node节点要在docker hup上下载</strong></em></p>
<h4 id="查看一下">查看一下</h4>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master ~]# kubectl <span class="hljs-builtin-name">get</span>  deployments.或 kubectl <span class="hljs-builtin-name">get</span>  deploy<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200104110812772.png" alt="image-20200104110812772"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200104110954406.png" alt="image-20200104110954406"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod  -o wide<br>//显示pod的节点信息<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200104111128779.png" alt="image-20200104111128779"></p>
<p><em><strong>如果，node节点没有运行test-web服务，需要在节点上重启一下<systemctl restart kubelet></systemctl></strong></em></p>
<h3 id="如果删除一个pod">如果删除一个pod</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl delete pod test-web<span class="hljs-number">-5</span>b56bdff65<span class="hljs-number">-2</span>njqf<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-2">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200104112418012.png" alt="image-20200104112418012"></p>
<p><em><strong>现在发现容器还存在，因为控制器会自动发现，一旦与之前执行的命令有误差，他会自动补全。</strong></em></p>
<p><a href="https://blog.csdn.net/gongxsh00/article/details/79932136" target="_blank" rel="noopener">https://blog.csdn.net/gongxsh00/article/details/79932136</a></p>
]]></content>
  </entry>
  <entry>
    <title>01 部署k8s集群</title>
    <url>/posts/xgp.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="1913e79776ec14e68ea9081cdc1ede916632d27c50c78daf04613fe13de95675"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s部署</tag>
      </tags>
  </entry>
  <entry>
    <title>03 创建资源的两种方式</title>
    <url>/posts/6989.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>主机</th>
<th>IP地址</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.1.21</td>
<td></td>
</tr>
<tr>
<td>node01</td>
<td>192.168.1.22</td>
<td></td>
</tr>
<tr>
<td>node02</td>
<td>192.168.1.23</td>
<td></td>
</tr>
</tbody>
</table>
<h1>两种创建资源的方法</h1>
<h2 id="基于命令的方式：">基于命令的方式：</h2>
<ol>
<li><strong>简单直观快捷，上手快。</strong></li>
<li><strong>适合临时测试或实验。</strong></li>
</ol>
<h2 id="基于配置文件的方式：">基于配置文件的方式：</h2>
<ol>
<li><strong>配置文件描述了 <code>What</code>，即应用最终要达到的状态。</strong></li>
<li><strong>配置文件提供了创建资源的模板，能够重复部署。</strong></li>
<li><strong>可以像管理代码一样管理部署。</strong></li>
<li><strong>适合正式的、跨环境的、规模化部署。</strong></li>
<li><strong>这种方式要求熟悉配置文件的语法，有一定难度。</strong></li>
</ol>
<h1>一，用命令行的方式创建资源</h1>
<h3 id="仅接受json格式"><em>仅接受json格式</em></h3>
<h2 id="配置清单（yml、yaml）">配置清单（yml、yaml）</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# cd</span> /etc/kubernetes/manifests/<br>//k8s的yml、yaml文件<br></code></pre></td></tr></table></figure>
<h2 id="1-node01和node02下载nginx镜像">1.node01和node02下载nginx镜像</h2>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">docker pull nginx<br><span class="hljs-comment">//下载nginx镜像</span><br></code></pre></td></tr></table></figure>
<h2 id="2-master创建Pod控制器（test-web），deployment">2.master创建Pod控制器（test-web），deployment</h2>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl run test-web --image=nginx --replicas=<span class="hljs-number">5</span><br><span class="hljs-comment">//创建Pod控制器，deployment</span><br></code></pre></td></tr></table></figure>
<h2 id="3-查看控制器情况">3.查看控制器情况</h2>
<h3 id="（1）">（1）</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments.<br>//查看控制器情况<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106093615852.png" alt="image-20200106093615852"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod --all-namespaces -o wide<br>//显示pod的节点信息<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106093922849.png" alt="image-20200106093922849"></p>
<h3 id="（2）">（2）</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get namespaces <br>//查看k8s名称空间<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106093850247.png" alt="image-20200106093850247"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> describe deployments. test-web<br>//查看资源详细信息<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106093723330.png" alt="image-20200106093723330"></p>
<p><em><strong>查看某种资源对象，没有指定名称空间，默认是在default名称空间。可以加上-n选项，查看指定名称空间的资源。</strong></em></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -n kube-system<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106094343401.png" alt="image-20200106094343401"></p>
<h2 id="3-删除test-web控制器">3.删除test-web控制器</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> delete deployments. test-web<br></code></pre></td></tr></table></figure>
<h2 id="4-master创建Pod控制器（web），deployment">4.master创建Pod控制器（web），deployment</h2>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master ~]# kubectl <span class="hljs-builtin-name">run</span> web <span class="hljs-attribute">--image</span>=nginx <span class="hljs-attribute">--replicas</span>=5<br></code></pre></td></tr></table></figure>
<h3 id="查看一下pod信息">查看一下pod信息</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br>//查看一下pod的节点信息<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106095722353.png" alt="image-20200106095722353"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> describe deployments. web <br>//查看资源详细信息<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106100606861.png" alt="image-20200106100606861"></p>
<p><em><strong>注意：直接运行创建的deployment资源对象，是经常使用的一个控制器资源类型，除了deployment，还有rc、rs等等pod控制器，deployment是一个高级的pod控制器。</strong></em></p>
<h3 id="本机测试访问nginx">本机测试访问nginx</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.7</span><br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106100827131.png" alt="image-20200106100827131"></p>
<h2 id="5-创建service资源类型">5.创建service资源类型</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala">[root<span class="hljs-meta">@master</span> ~]# kubectl expose deployment web --name=web-xgp --port=<span class="hljs-number">80</span> --<span class="hljs-class"><span class="hljs-keyword">type</span><span class="hljs-title">=NodePort</span></span><br><span class="hljs-class"><span class="hljs-title">//创建service资源类型，这里我们设置了映射端口</span></span><br></code></pre></td></tr></table></figure>
<p><em><strong>如果想要外网能够访问服务，可以暴露deployment资源，得到service资源，但svc资源的类型必须为NodePort。</strong></em></p>
<p><strong>映射端口范围：30000-32767</strong></p>
<h3 id="查看service信息">查看service信息</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get svc<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106101443348.png" alt="image-20200106101443348"></p>
<h3 id="浏览器测试访问http-192-168-1-21-30493">浏览器测试访问http://192.168.1.21:30493/</h3>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106101624954.png" alt="image-20200106101624954"></p>
<h1>二、服务的扩容与缩容</h1>
<h2 id="1-查看控制器信息">1. 查看控制器信息</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106104638757.png" alt="image-20200106104638757"></p>
<h2 id="2-扩容">2.扩容</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> scale deployment web --<span class="hljs-attr">replicas=</span><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106104757123.png" alt="image-20200106104757123"></p>
<h2 id="3-缩容">3.缩容</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> scale deployment web --<span class="hljs-attr">replicas=</span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-2">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106105536316.png" alt="image-20200106105536316"></p>
<h2 id="3-通过修改web的yaml文件进行扩容缩容">3.通过修改web的yaml文件进行扩容缩容</h2>
<h3 id="备份web的yaml文件">备份web的yaml文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o yaml &gt; web.yaml<br></code></pre></td></tr></table></figure>
<h3 id="使用edit修改web的yaml文件">使用edit修改web的yaml文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> edit deployments. web<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106105924531.png" alt="image-20200106105924531"></p>
<h3 id="查看一下-3">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106105816339.png" alt="image-20200106105816339"></p>
<h1>三、服务的升级与回滚</h1>
<h2 id="node01和node02下载1-15版本的nginx">node01和node02下载1.15版本的nginx</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull nginx:<span class="hljs-number">1.15</span><br></code></pre></td></tr></table></figure>
<h2 id="1-master设置服务升级">1.master设置服务升级</h2>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master ~]#  kubectl <span class="hljs-builtin-name">set</span> image deployment web <span class="hljs-attribute">web</span>=nginx:1.15<br></code></pre></td></tr></table></figure>
<h3 id="查看一下-4">查看一下</h3>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106111227960.png" alt="image-20200106111227960"></p>
<h2 id="2-master设置服务回滚">2.master设置服务回滚</h2>
<h3 id="（1）修改配置文件回滚">（1）修改配置文件回滚</h3>
<h3 id="使用edit修改web的yaml文件-2">使用edit修改web的yaml文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> edit deployments. web<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106111523148.png" alt="image-20200106111523148"></p>
<h3 id="查看一下-5">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106111319699.png" alt="image-20200106111319699"></p>
<h3 id="（2）命令回滚">（2）命令回滚</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout undo deployment web<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106111733617.png" alt="image-20200106111733617"></p>
<p><em><strong>注意:只能回滚到上一次操作的状态</strong></em></p>
<h1>四、实验环境</h1>
<table>
<thead>
<tr>
<th>主机</th>
<th>IP地址</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.1.21</td>
<td>registry+Deployment</td>
</tr>
<tr>
<td>node01</td>
<td>192.168.1.22</td>
<td></td>
</tr>
<tr>
<td>node02</td>
<td>192.168.1.23</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="1-master-基于httpd制作自己的镜像，需要3个版本，v1-v2-v3-并且对应的版本镜像，访问的主目录内容不一样">1.master 基于httpd制作自己的镜像，需要3个版本，v1,v2,v3.并且对应的版本镜像，访问的主目录内容不一样</h2>
<h3 id="（1）master下载httpd镜像">（1）master下载httpd镜像</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull httpd<br></code></pre></td></tr></table></figure>
<h3 id="（2）编写Dockerfile">（2）编写Dockerfile</h3>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">[root@master xgp]<span class="hljs-comment"># vim Dockerfile</span><br><span class="hljs-keyword">FROM</span> httpd<br><span class="hljs-keyword">COPY</span><span class="bash"> index.html /usr/<span class="hljs-built_in">local</span>/apache2/htdocs/index.html</span><br></code></pre></td></tr></table></figure>
<h3 id="（3）创建测试网页v1">（3）创建测试网页v1</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment">#echo "&lt;h1&gt;xgp | test-web | httpd:v1&lt;h1&gt;" &gt; index.html</span><br></code></pre></td></tr></table></figure>
<h3 id="（4）基于Dockerfile创建镜像-web1">（4）基于Dockerfile创建镜像 web1</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># docker build -t web1 .</span><br></code></pre></td></tr></table></figure>
<h3 id="（5）创建测试网页v2">（5）创建测试网页v2</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment">#echo "&lt;h1&gt;xgp | test-web | httpd:v1&lt;h1&gt;" &gt; index.html</span><br></code></pre></td></tr></table></figure>
<h3 id="（6）基于Dockerfile创建镜像-web2">（6）基于Dockerfile创建镜像 web2</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># docker build -t web2 .</span><br></code></pre></td></tr></table></figure>
<h3 id="（7）创建测试网页v3">（7）创建测试网页v3</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># echo "&lt;h1&gt;xgp | test-web | httpd:v3&lt;h1&gt;" &gt; index.html</span><br></code></pre></td></tr></table></figure>
<h3 id="（8）基于Dockerfile创建镜像-web3">（8）基于Dockerfile创建镜像 web3</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># docker build -t web3 .</span><br></code></pre></td></tr></table></figure>
<h2 id="2-master部署私有仓库">2.master部署私有仓库</h2>
<h3 id="（1）master下载registry镜像">（1）master下载registry镜像</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull registry<br></code></pre></td></tr></table></figure>
<h3 id="（2）启动registry">（2）启动registry</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># docker run -itd --name registry -p 5000:5000 --restart=always registry:latest</span><br></code></pre></td></tr></table></figure>
<h3 id="（3）修改docker配置文件，加入私有仓库（三台）">（3）修改docker配置文件，加入私有仓库（三台）</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master xgp]# vim /usr/lib/systemd/system/docker.service<br>ExecStart=/usr/bin/dockerd --insecure-registry <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106120848869.png" alt="image-20200106120848869"></p>
<h3 id="（4）重启docker（三台）">（4）重启docker（三台）</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># systemctl daemon-reload </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># systemctl restart docker</span><br></code></pre></td></tr></table></figure>
<h2 id="3-上传之前创建的三个web镜像到私有仓库">3.上传之前创建的三个web镜像到私有仓库</h2>
<h3 id="（1）修改镜像标签">（1）修改镜像标签</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master xgp]# docker tag web1:latest <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web1:latest<br>[<span class="hljs-symbol">root@</span>master xgp]# docker tag web2:latest <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web2:latest<br>[<span class="hljs-symbol">root@</span>master xgp]# docker tag web3:latest <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web3:latest<br></code></pre></td></tr></table></figure>
<h3 id="（2）将三个web镜像上传到私有仓库">（2）将三个web镜像上传到私有仓库</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master xgp]# docker push  <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web1:latest <br>[<span class="hljs-symbol">root@</span>master xgp]# docker push  <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web2:latest<br>[<span class="hljs-symbol">root@</span>master xgp]# docker push  <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web3:latest<br></code></pre></td></tr></table></figure>
<h2 id="4-部署一个Deployment资源对象，要求镜像使用上述私有镜像v1版本。6个副本Pod。">4.部署一个Deployment资源对象，要求镜像使用上述私有镜像v1版本。6个副本Pod。</h2>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master xgp]# kubectl run www1 --image=<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web1:latest --replicas=<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-6">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106122026271.png" alt="image-20200106122026271"></p>
<h3 id="本地访问一下">本地访问一下</h3>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106122426308.png" alt="image-20200106122426308"></p>
<h3 id="5-将上述Deployment暴露一个service资源对象，使外网能否访问服务。">5.将上述Deployment暴露一个service资源对象，使外网能否访问服务。</h3>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master xgp]#  kubectl expose deployment www1 <span class="hljs-attribute">--name</span>=web-xgp <span class="hljs-attribute">--port</span>=80 <span class="hljs-attribute">--type</span>=NodePort<br></code></pre></td></tr></table></figure>
<h3 id="查看一下-7">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106122313996.png" alt="image-20200106122313996"></p>
<h3 id="浏览器访问一下">浏览器访问一下</h3>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106122340747.png" alt="image-20200106122340747"></p>
<h2 id="6-将上述Deployment进行扩容和缩容操作，扩容为8个副本Pod，然后缩容为4个副本Pod。">6.将上述Deployment进行扩容和缩容操作，扩容为8个副本Pod，然后缩容为4个副本Pod。</h2>
<h2 id="（1）扩容">（1）扩容</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl scale deployment www1 --replicas=8</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-8">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106122722977.png" alt="image-20200106122722977"></p>
<h2 id="（2）缩容">（2）缩容</h2>
<h3 id="修改k8s配置文件">修改k8s配置文件</h3>
<h3 id="备份web的yaml文件-2">备份web的yaml文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o yaml &gt; www1.yaml<br></code></pre></td></tr></table></figure>
<h3 id="使用edit修改web的yaml文件-3">使用edit修改web的yaml文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> edit deployments. www1<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106105924531.png" alt="image-20200106105924531"></p>
<h3 id="查看一下-9">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106122953397.png" alt="image-20200106122953397"></p>
<h2 id="7-将上述Deployment进行升级与回滚操作，将v1版本，升级到v2版本。">7.将上述Deployment进行升级与回滚操作，将v1版本，升级到v2版本。</h2>
<h2 id="（1）升级版本为web2">（1）升级版本为web2</h2>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl <span class="hljs-keyword">set</span> image deployment www1 www1=<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web2<br></code></pre></td></tr></table></figure>
<h3 id="本机测试访问">本机测试访问</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30996</span><br>&lt;h1&gt;xgp | test-web | httpd:v2&lt;h1&gt;<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106125722931.png" alt="image-20200106125722931"></p>
<h3 id="浏览器测试访问">浏览器测试访问</h3>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106125750021.png" alt="image-20200106125750021"></p>
<h2 id="（2）回滚版本到web1">（2）回滚版本到web1</h2>
<h3 id="1-修改配置文件回滚">&lt;1&gt;修改配置文件回滚</h3>
<h3 id="使用edit修改web的yaml文件-4">使用edit修改web的yaml文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> edit deployments. www1<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106130010344.png" alt="image-20200106130010344"></p>
<h3 id="查看一下-10">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106130304423.png" alt="image-20200106130304423"></p>
<h3 id="访问一下">访问一下</h3>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106130435212.png" alt="image-20200106130435212"></p>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106130447693.png" alt="image-20200106130447693"></p>
<h3 id="2-命令回滚">&lt;2&gt;命令回滚</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout undo deployment www1<br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106130317956.png" alt="image-20200106130317956"></p>
<p><em><strong>注意:只能回滚到上一次操作的状态</strong></em></p>
<h3 id="访问一下-2">访问一下</h3>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106130357339.png" alt="image-20200106130357339"></p>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200106130414060.png" alt="image-20200106130414060"></p>
]]></content>
  </entry>
  <entry>
    <title>04 配置清单</title>
    <url>/posts/748b.html</url>
    <content><![CDATA[<h1>一，两种创建资源的方法</h1>
<h2 id="1-基于命令的方式：">1. 基于命令的方式：</h2>
<ol>
<li><strong>简单直观快捷，上手快。</strong></li>
<li><strong>适合临时测试或实验。</strong></li>
</ol>
<h2 id="2-基于配置清单的方式：">2. 基于配置清单的方式：</h2>
<ol>
<li><strong>配置文件描述了 <code>What</code>，即应用最终要达到的状态。</strong></li>
<li><strong>配置文件提供了创建资源的模板，能够重复部署。</strong></li>
<li><strong>可以像管理代码一样管理部署。</strong></li>
<li><strong>适合正式的、跨环境的、规模化部署。</strong></li>
<li><strong>这种方式要求熟悉配置文件的语法，有一定难度。</strong></li>
</ol>
<h2 id="环境介绍">环境介绍</h2>
<table>
<thead>
<tr>
<th>主机</th>
<th>IP地址</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.1.21</td>
<td>k8s</td>
</tr>
<tr>
<td>node01</td>
<td>192.168.1.22</td>
<td>k8s</td>
</tr>
<tr>
<td>node02</td>
<td>192.168.1.23</td>
<td>k8s</td>
</tr>
</tbody>
</table>
<h1>二. 配置清单（yam，yaml）</h1>
<p><strong>在k8s中，一般使用yaml格式的文件来创建符合我们预期期望的pod，这样的yaml文件我们一般称为资源清单</strong></p>
<blockquote>
<p><strong>/etc/kubernetes/manifests/</strong>    k8s存放（yam、yaml）文件的地方</p>
<p>**kubectl explain deployment（通过explain参数加上资源类别就能看到该资源应该怎么定义）</p>
<p><strong>kubectl explain deployment.metadata</strong> 通过资源类别加上带有Object标记的字段，我们就可以看到一级字段下二级字段的内容有那些怎么去定义等</p>
<p><strong>kubectl explain deployment.metadata.ownerReferences</strong> 通过加上不同级别的字段名称来看下字段下的内容，而且前面的[]号代表对象列表</p>
</blockquote>
<h2 id="1-常见yaml文件写法，以及字段的作用">1.常见yaml文件写法，以及字段的作用</h2>
<p><strong>(1) apiVersion：api版本信息</strong></p>
<p><em><strong>（用来定义当前属于哪个组和那个版本，这个直接关系到最终提供使用的是那个版本）</strong></em></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># kubectl api-versions</span><br>//查看到当前所有api的版本<br></code></pre></td></tr></table></figure>
<p><strong>(2) kind: 资源对象的类别</strong></p>
<p><em><strong>(用来定义创建的对象是属于什么类别，是pod，service，还是deployment等对象，可以按照其固定的语法格式来自定义。)</strong></em><br>
<strong>(3) metadata: 元数据 名称字段（必写）</strong></p>
<blockquote>
<p><strong>提供以下几个字段</strong>：<br>
　　<strong>creationTimestamp: &quot;2019-06-24T12:18:48Z&quot;</strong><br>
　　<strong>generateName: myweb-5b59c8b9d-</strong><br>
　　<strong>labels: （对象标签）</strong><br>
　　　　<strong>pod-template-hash: 5b59c8b9d</strong><br>
　　　　<strong>run: myweb</strong><br>
　　<strong>name: myweb-5b59c8b9d-gwzz5 （pods对象的名称，同一个类别当中的pod对象名称是唯一的，不能重复）</strong><br>
　　<strong>namespace: default （对象所属的名称空间，同一名称空间内可以重复，这个名称空间也是k8s级别的名称空间，不和容器的名称空间混淆）</strong><br>
　　<strong>ownerReferences:</strong></p>
<p>- <strong>apiVersion: apps/v1</strong><br>
　　　　<strong>blockOwnerDeletion: true</strong><br>
　　　　<strong>controller: true</strong><br>
　　　　<strong>kind: ReplicaSet</strong><br>
　　　　<strong>name: myweb-5b59c8b9d</strong><br>
　　　　<strong>uid: 37f38f64-967a-11e9-8b4b-000c291028e5</strong><br>
　　<strong>resourceVersion: &quot;943&quot;</strong><br>
　　<strong>selfLink: /api/v1/namespaces/default/pods/myweb-5b59c8b9d-gwzz5</strong><br>
　　<strong>uid: 37f653a6-967a-11e9-8b4b-000c291028e5</strong><br>
　　<strong>annotations（资源注解，这个需要提前定义，默认是没有的）</strong><br>
<strong>通过这些标识定义了每个资源引用的path：即/api/group/version/namespaces/名称空间/资源类别/对象名称</strong></p>
</blockquote>
<p><strong>(4) spec： 用户期望的状态</strong></p>
<p><em><strong>（这个字段最重要，因为spec是用来定义目标状态的‘disired state’，而且资源不通导致spec所嵌套的字段也各不相同，也就因为spec重要且字段不相同，k8s在内部自建了一个spec的说明用于查询）</strong></em></p>
<p><strong>(5) status：资源现在处于什么样的状态</strong></p>
<p><em><strong>（当前状态，’current state‘，这个字段有k8s集群来生成和维护，不能自定义，属于一个只读字段）</strong></em></p>
<h2 id="2-编写一个yaml文件">2.编写一个yaml文件</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">web.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>  <span class="hljs-comment">#资源对象是控制器</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span>   <span class="hljs-comment">#api的版本</span><br><span class="hljs-attr">metadata:</span>      <span class="hljs-comment">#描述kind（资源类型）</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span>   <span class="hljs-comment">#定义控制器名称</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>   <span class="hljs-comment">#副本数量</span><br>  <span class="hljs-attr">template:</span>     <span class="hljs-comment">#模板</span><br>    <span class="hljs-attr">metadata:</span>    <br>      <span class="hljs-attr">labels:</span>   <span class="hljs-comment">#标签</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">web_server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span>   <span class="hljs-comment">#指定容器</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span>  <span class="hljs-comment">#容器名称</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span>   <span class="hljs-comment">#使用的镜像</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f web.yaml<br></code></pre></td></tr></table></figure>
<h3 id="查看一下">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments.  -o wide<br>//查看控制器信息<br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107100450262.png" alt="image-20200107100450262"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br>//查看pod节点信息<br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107101803209.png" alt="image-20200107101803209"></p>
<h2 id="3-编写一个service-yaml文件">3.编写一个service.yaml文件</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">web-svc.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span>  <span class="hljs-comment">#资源对象是副本</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>   <span class="hljs-comment">#api的版本</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span>     <span class="hljs-comment">#标签选择器</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">web-server</span>  <span class="hljs-comment">#须和web.yaml的标签一致</span><br>  <span class="hljs-attr">ports:</span>              <span class="hljs-comment">#端口</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>            <span class="hljs-comment">#宿主机的端口</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span>      <span class="hljs-comment">#容器的端口</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p><strong>使用相同标签和标签选择器内容，使两个资源对象相互关联。</strong></p>
<p><strong>创建的service资源对象，默认的type为ClusterIP，意味着集群内任意节点都可访问。它的作用是为后端真正服务的pod提供一个统一的接口。如果想要外网能够访问服务，应该把type改为NodePort</strong></p>
</blockquote>
<h3 id="（1）执行一下">（1）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f web-svc.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（2）查看一下">（2）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get svc<br>//查看控制器信息<br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107110717972.png" alt="image-20200107110717972"></p>
<h3 id="（3）访问一下">（3）访问一下</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">10.111</span><span class="hljs-number">.193</span><span class="hljs-number">.168</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107110837353.png" alt="image-20200107110837353"></p>
<h2 id="4-外网能够访问服务">4.外网能够访问服务</h2>
<h3 id="（1）修改web-svc-yaml文件">（1）修改web-svc.yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span>  <span class="hljs-comment">#资源对象是副本</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>   <span class="hljs-comment">#api的版本</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>    <span class="hljs-comment">#添加 更改网络类型</span><br>  <span class="hljs-attr">selector:</span>     <span class="hljs-comment">#标签选择器</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">web_server</span>  <span class="hljs-comment">#须和web.yaml的标签一致</span><br>  <span class="hljs-attr">ports:</span>              <span class="hljs-comment">#端口</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>            <span class="hljs-comment">#宿主机的端口</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span>      <span class="hljs-comment">#容器的端口</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30086</span>     <span class="hljs-comment">#指定群集映射端口，范围是30000-32767</span><br></code></pre></td></tr></table></figure>
<h3 id="（2）刷新一下">（2）刷新一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  kubectl</span> apply -f web-svc.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（3）查看一下">（3）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get svc<br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107111338940.png" alt="image-20200107111338940"></p>
<h3 id="（4）浏览器测试">（4）浏览器测试</h3>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107111451952.png" alt="image-20200107111451952"></p>
<h1>三、小实验</h1>
<blockquote>
<p><strong>基于上一篇博客实验继续进行</strong></p>
</blockquote>
<h3 id="1-使用yaml文件的方式创建一个Deployment资源对象，要求镜像使用个人私有镜像v1版本。replicas为3个。">1.使用yaml文件的方式创建一个Deployment资源对象，要求镜像使用个人私有镜像v1版本。replicas为3个。</h3>
<h3 id="编写yaml文件">编写yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">www.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">www_server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br></code></pre></td></tr></table></figure>
<h4 id="（1）执行一下-2">（1）执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f web-svc.yaml<br></code></pre></td></tr></table></figure>
<h4 id="（2）查看一下-2">（2）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br>//查看控制器信息<br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107120901208.png" alt="image-20200107120901208"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br>//查看pod节点信息<br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107121002152.png" alt="image-20200107121002152"></p>
<h4 id="（3）访问一下-2">（3）访问一下</h4>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107121147669.png" alt="image-20200107121147669"></p>
<h3 id="2-使用yaml文件的方式创建一个Service资源对象，要与上述Deployment资源对象关联，type类型为：-NodePort，端口为-30123"><strong>2.</strong>  使用yaml文件的方式创建一个Service资源对象，要与上述Deployment资源对象关联，type类型为： NodePort，端口为:30123.</h3>
<h4 id="编写service文件">编写service文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">www-svc.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">www-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">www_server</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-2">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f www-svc.yaml<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-2">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get svc<br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107121929525.png" alt="image-20200107121929525"></p>
<h4 id="访问一下">访问一下</h4>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C04%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.assets%5Cimage-20200107122015559.png" alt="image-20200107122015559"></p>
<h1>四. 总结</h1>
<h2 id="1-Pod的作用"><strong>1. Pod的作用</strong></h2>
<blockquote>
<p>在k8s中pod是最小的管理单位，在一个pod中通常会包含一个或多个容器。大多数情况下，一个Pod内只有一个Container容器。<br>
在每一个Pod中都有一个特殊的Pause容器和一个或多个业务容器，Pause来源于pause-amd64镜像,Pause容器在Pod中具有非常重要的作用：</p>
<ul>
<li>Pause容器作为Pod容器的根容器，其本地于业务容器无关，它的状态代表了整个pod的状态。</li>
<li>Pod里的多个业务容器共享Pause容器的IP，每个Pod被分配一个独立的IP地址，Pod中的每个容器共享网络命名空间，包括IP地址和网络端口。Pod内的容器可以使用localhost相互通信。k8s支持底层网络集群内任意两个Pod之间进行通信。</li>
<li>Pod中的所有容器都可以访问共享volumes，允许这些容器共享数据。volumes还用于Pod中的数据持久化，以防其中一个容器需要重新启动而丢失数据。</li>
</ul>
</blockquote>
<h2 id="2-Service的作用"><strong>2. Service的作用</strong></h2>
<p><strong>Service 是后端真实服务的抽象，一个 Service 可以代表多个相同的后端服务</strong></p>
<p><strong>Service 为 POD 控制器控制的 POD 集群提供一个固定的访问端点，Service 的工作还依赖于 K8s 中的一个附件，就是 CoreDNS ，它将 Service 地址提供一个域名解析。</strong></p>
<h3 id="NodePort-类型的-service">NodePort 类型的 service</h3>
<blockquote>
<p><strong>clusterIP</strong>：指定 Service 处于 service 网络的哪个 IP，默认为动态分配</p>
<p><strong>NodePort 是在 ClusterIP 类型上增加了一个暴露在了 node 的网络命名空间上的一个 nodePort，所以用户可以从集群外部访问到集群了，因而用户的请求流程是：Client -&gt; NodeIP:NodePort -&gt; ClusterIP:ServicePort -&gt; PodIP:ContainerPort。</strong></p>
<p><strong>可以理解为 NodePort 增强了 ClusterIP 的功能，让客户端可以在每个集群外部访问任意一个 nodeip 从而访问到 clusterIP，再由 clusterIP 进行负载均衡至 POD。</strong></p>
</blockquote>
<h2 id="3-流量走向">3.流量走向</h2>
<p><strong>我们在创建完成一个服务之后，用户首先应该访问的是nginx反向代理的ip，然后通过nginx访问到后端的k8s服务器（master节点）的“NodePort暴露IP 及 映射的端口“，master的apiserver接受到客户端发送来的访问指令，将访问指令通知Controller Manager控制器，Scheduler执行调度任务，将访问指令分发到各节点之上，通过”master节点“的“ip+映射端口”访问到后端k8s节点的信息，节点的Kubelet（pod代理）当Scheduler确定让那个节点返回访问信息之后，kube-proxy将访问信息负载均衡到该节点的容器上，各容器返回信息，并向Master报告运行状态</strong></p>
]]></content>
  </entry>
  <entry>
    <title>05 Delpoyment、service</title>
    <url>/posts/936d.html</url>
    <content><![CDATA[<h1>Deployment介绍</h1>
<p><strong>Deployment是kubernetes 1.2引入的概念，用来解决Pod的编排问题。Deployment可以理解为RC的升级版（RC+Reolicat Set）。特点在于可以随时知道Pod的部署进度，即对Pod的创建、调度、绑定节点、启动容器完整过程的进度展示。</strong></p>
<h2 id="使用场景">使用场景</h2>
<blockquote>
<p>创建一个Deployment对象来生成对应的Replica Set并完成Pod副本的创建过程。<br>
检查Deployment的状态来确认部署动作是否完成（Pod副本的数量是否达到预期值）。<br>
更新Deployment以创建新的Pod(例如镜像升级的场景)。<br>
如果当前Deployment不稳定，回退到上一个Deployment版本。<br>
挂起或恢复一个Deployment。</p>
</blockquote>
<h1>Service介绍</h1>
<p><img src="https://img-blog.csdn.net/20170809212910268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHV3aF8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p><strong>Service定义了一个服务的访问入口地址，前端应用通过这个入口地址访问其背后的一组由Pod副本组成的集群实例，Service与其后端的Pod副本集群之间是通过Label Selector来实现“无缝对接”。RC保证Service的Pod副本实例数目保持预期水平。</strong></p>
<h2 id="外部系统访问Service的问题">外部系统访问Service的问题</h2>
<table>
<thead>
<tr>
<th style="text-align:left">IP类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Node IP</td>
<td style="text-align:left">Node节点的IP地址</td>
</tr>
<tr>
<td style="text-align:left">Pod IP</td>
<td style="text-align:left">Pod的IP地址</td>
</tr>
<tr>
<td style="text-align:left">Cluster IP</td>
<td style="text-align:left">Service的IP地址</td>
</tr>
</tbody>
</table>
<h1>环境介绍</h1>
<table>
<thead>
<tr>
<th>主机</th>
<th>IP地址</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>master</strong></td>
<td><strong>192.168.1.21</strong></td>
<td><strong>k8s</strong></td>
</tr>
<tr>
<td><strong>node01</strong></td>
<td><strong>192.168.1.22</strong></td>
<td><strong>k8s</strong></td>
</tr>
<tr>
<td><strong>node02</strong></td>
<td><strong>192.168.1.23</strong></td>
<td><strong>k8s</strong></td>
</tr>
</tbody>
</table>
<h1>一，Delpoyment和service的简单使用</h1>
<h2 id="1-练习写一个yaml文件，要求使用自己的私有镜像，要求副本数量为三个。">1.练习写一个yaml文件，要求使用自己的私有镜像，要求副本数量为三个。</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br></code></pre></td></tr></table></figure>
<h3 id="（1）执行一下">（1）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp.yaml  --recore<br></code></pre></td></tr></table></figure>
<h3 id="（2）查看一下">（2）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod<br></code></pre></td></tr></table></figure>
<p>![image-20200108090638488](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108090638488.png)</p>
<h3 id="（3）访问一下">（3）访问一下</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.16</span><br></code></pre></td></tr></table></figure>
<p>![image-20200108090817058](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108090817058.png)</p>
<h3 id="（4）更新一下yaml文件，副本加一">（4）更新一下yaml文件，副本加一</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">4</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br></code></pre></td></tr></table></figure>
<h4 id="1-执行一下">&lt;1&gt;执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp.yaml --recore<br></code></pre></td></tr></table></figure>
<h4 id="2-查看一下">&lt;2&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod<br></code></pre></td></tr></table></figure>
<p>![image-20200108091104534](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108091104534.png)</p>
<p><em><strong>副本数量加一，如果yaml文件的副本为0，则副本数量还是之前的状态，并不会更新。</strong></em></p>
<h2 id="2-练习写一个service文件">2.练习写一个service文件</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp-svc.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h3 id="（1）执行一下-2">（1）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp-svc.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（2）查看一下-2">（2）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get svc<br></code></pre></td></tr></table></figure>
<p>![image-20200108091909396](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108091909396.png)</p>
<h3 id="（3）访问一下-2">（3）访问一下</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">10.107</span><span class="hljs-number">.119</span><span class="hljs-number">.49</span><br></code></pre></td></tr></table></figure>
<p>![image-20200108092011164](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108092011164.png)</p>
<h2 id="3-修改yaml文件">3.修改yaml文件</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp.yaml</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span>  <span class="hljs-comment">#提示端口</span><br></code></pre></td></tr></table></figure>
<p><em><strong>注意：在Delpoyment资源对象中，可以添加Port字段，但此字段仅供用户查看，并不实际生效</strong></em></p>
<h3 id="执行一下">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp.yaml --recore<br></code></pre></td></tr></table></figure>
<h2 id="4-service文件映射端口">4.service文件映射端口</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp-svc.yaml</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-2">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp-svc.yaml<br></code></pre></td></tr></table></figure>
<h3 id="查看一下">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get svc<br></code></pre></td></tr></table></figure>
<p>![image-20200108094404773](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108094404773.png)</p>
<h3 id="访问一下">访问一下</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<p>![image-20200108094439682](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108094439682.png)</p>
<p>![image-20200108094501253](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108094501253.png)</p>
<h2 id="5-修改三个pod页面内容">5.修改三个pod页面内容</h2>
<h3 id="（1）查看一下pod信息">（1）查看一下pod信息</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200108094953119](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108094953119.png)</p>
<h3 id="（2）修改POD页面内容（三台不一样）">（2）修改POD页面内容（三台不一样）</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl exec -it xgp-web<span class="hljs-number">-8</span>d5f9656f<span class="hljs-number">-8</span>z7d9 /bin/bash<br><span class="hljs-comment">//根据pod名称进入pod之中</span><br></code></pre></td></tr></table></figure>
<h3 id="进入容器后修改页面内容">进入容器后修改页面内容</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>xgp-web<span class="hljs-number">-8</span>d5f9656f<span class="hljs-number">-8</span>z7d9:/usr/local/apache2# echo xgp-v1 &gt; htdocs/index.html <br><span class="hljs-symbol">root@</span>xgp-web<span class="hljs-number">-8</span>d5f9656f<span class="hljs-number">-8</span>z7d9:/usr/local/apache2# exit<br></code></pre></td></tr></table></figure>
<h3 id="访问一下-2">访问一下</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<p>![image-20200108095626532](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108095626532.png)</p>
<h1>二.分析一下k8s负载均衡原理</h1>
<h3 id="（1）查看service的暴露IP">（1）查看service的暴露IP</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get svc<br></code></pre></td></tr></table></figure>
<p>![image-20200108101539835](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108101539835.png)</p>
<h3 id="（2）查看一下iptabes规则">（2）查看一下iptabes规则</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# iptables-save</span> <br>//查看已配置的规则<br></code></pre></td></tr></table></figure>
<blockquote>
<p>SNAT：Source NAT（源地址转换）</p>
<p>DNAT：Destination NAT（目标地址转换）</p>
<p>MASQ：动态的源地址转换</p>
</blockquote>
<h3 id="（3）根据service的暴露IP，查看对应的iptabes规则">（3）根据service的暴露IP，查看对应的iptabes规则</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# iptables-save | grep <span class="hljs-number">10.107</span><span class="hljs-number">.119</span><span class="hljs-number">.49</span><br></code></pre></td></tr></table></figure>
<p>![image-20200108101726315](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108101726315.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# iptables-save</span> | grep KUBE-SVC-ESI7C72YHAUGMG5S<br></code></pre></td></tr></table></figure>
<p>![image-20200108102003596](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108102003596.png)</p>
<h3 id="（4）对应一下IP是否一致">（4）对应一下IP是否一致</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# iptables-save</span> | grep KUBE-SEP-ZHDQ73ZKUBMELLJB<br></code></pre></td></tr></table></figure>
<p>![image-20200108102137062](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108102137062.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200108102203144](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108102203144.png)</p>
<p><strong>Service实现的负载均衡：默认使用的是iptables规则。IPVS</strong></p>
<h1>三.回滚到指定版本</h1>
<h3 id="（1）删除之前创建的delpoy和service">（1）删除之前创建的delpoy和service</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span>  delete -f xgp.yaml <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span>  delete -f xgp-svc.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（2）准备三个版本所使用的私有镜像，来模拟每次升级不同的镜像">（2）准备三个版本所使用的私有镜像，来模拟每次升级不同的镜像</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp1.yaml</span>  <span class="hljs-string">（三个文件名不相同）</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span>  <span class="hljs-string">（三台版本不同）</span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<p>此处3个yaml文件 指定不同版本的镜像</p>
<h3 id="（3）运行三个服务，并记录三个版本信息">（3）运行三个服务，并记录三个版本信息</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp-<span class="hljs-number">1</span>.yaml --record <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp-<span class="hljs-number">2</span>.yaml --record <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp-<span class="hljs-number">3</span>.yaml --record<br></code></pre></td></tr></table></figure>
<h3 id="（4）查看有哪些版本信息">（4）查看有哪些版本信息</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout history deployment xgp-web<br></code></pre></td></tr></table></figure>
<p>![image-20200108105842447](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108105842447.png)</p>
<h3 id="（5）运行之前的service文件">（5）运行之前的service文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp-svc.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（6）查看service暴露端口">（6）查看service暴露端口</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get svc<br></code></pre></td></tr></table></figure>
<p>![image-20200108110014614](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108110014614.png)</p>
<h3 id="（7）测试访问">（7）测试访问</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<p>![image-20200108110049396](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108110049396.png)</p>
<h3 id="（8）回滚到指定版本">（8）回滚到指定版本</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl rollout undo deployment xgp-web --to-revision=<span class="hljs-number">1</span><br><span class="hljs-comment">//这里指定的是版本信息的编号</span><br></code></pre></td></tr></table></figure>
<h4 id="1-访问一下">&lt;1&gt;访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<p>![image-20200108110337266](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108110337266.png)</p>
<h4 id="2-查看有哪些版本信息">&lt;2&gt;查看有哪些版本信息</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout history deployment xgp-web<br></code></pre></td></tr></table></figure>
<p>![image-20200108110443558](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108110443558.png)</p>
<p><em><strong>编号1已经被编号2替代，从而生的是一个新的编号4</strong></em></p>
<h1>四.用label控制pod的位置</h1>
<blockquote>
<p>默认情况下，scheduler会将pod调度到所有可用的Node，不过有些情况我们希望将 Pod 部署到指定的 Node，比如将有大量磁盘 I/O 的 Pod 部署到配置了 SSD 的 Node；或者 Pod 需要 GPU，需要运行在配置了 GPU 的节点上。</p>
<p>kubernetes通过label来实现这个功能</p>
<p>label 是 key-value 对，各种资源都可以设置 label，灵活添加各种<strong>自定义属性</strong>。比如执行如下命令标注 k8s-node1 是配置了 SSD 的节点</p>
</blockquote>
<h4 id="首先我们给node1节点打上一个ssd的标签">首先我们给node1节点打上一个ssd的标签</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> label nodes node02 <span class="hljs-attr">disk=</span>ssd<br></code></pre></td></tr></table></figure>
<h3 id="（1）查看标签">（1）查看标签</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get nodes --show-labels | grep node02<br></code></pre></td></tr></table></figure>
<p>![image-20200108111354832](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108111354832.png)</p>
<h3 id="（2）删除副本一">（2）删除副本一</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> delete -f xgp-<span class="hljs-number">1</span>.yaml <br>deployment.extensions <span class="hljs-string">"xgp-web"</span> deleted<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> delete svc xgp-svc<br></code></pre></td></tr></table></figure>
<h3 id="（3）修改副本一的yaml文件">（3）修改副本一的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp-1.yaml</span> <br><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodeSelector:</span>    <span class="hljs-comment">#添加节点选择器</span><br>        <span class="hljs-attr">disk:</span> <span class="hljs-string">ssd</span>      <span class="hljs-comment">#和标签内容一致</span><br></code></pre></td></tr></table></figure>
<h3 id="（4）执行一下">（4）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp-<span class="hljs-number">1</span>.yaml<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-2">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200108112059395](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108112059395.png)</p>
<p><em><strong>现在pod都在node02上运行</strong></em></p>
<h3 id="（5）删除标签">（5）删除标签</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span>  label nodes node02 disk-<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-3">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get nodes --show-labels | grep node02<br></code></pre></td></tr></table></figure>
<p>![image-20200108112245347](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108112245347.png)</p>
<p><em><strong>没有disk标签了</strong></em></p>
<h1>五，小实验</h1>
<h3 id="1）使用私有镜像v1版本部署一个Deployment资源对象，要求副本Pod数量为3个，并创建一个Service资源对象相互关联，指定要求3个副本Pod全部运行在node01节点上，记录一个版本。"><strong>1）使用私有镜像v1版本部署一个Deployment资源对象，要求副本Pod数量为3个，并创建一个Service资源对象相互关联，指定要求3个副本Pod全部运行在node01节点上，记录一个版本。</strong></h3>
<h4 id="（1）用label控制pod的位置">（1）用label控制pod的位置</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> label nodes node01 <span class="hljs-attr">disk=</span>ssd<br></code></pre></td></tr></table></figure>
<h4 id="（2）编写源yaml文件">（2）编写源yaml文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodeSelector:</span>    <br>        <span class="hljs-attr">disk:</span> <span class="hljs-string">ssd</span><br></code></pre></td></tr></table></figure>
<h4 id="（3）编写源service文件">（3）编写源service文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp-svc.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<h4 id="（4）执行yaml文件，创建控制器。执行service文件创建映射端口">（4）执行yaml文件，创建控制器。执行service文件创建映射端口</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f  xgp.yaml <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp-svc.yaml<br></code></pre></td></tr></table></figure>
<h4 id="（5）查看一下pod节点">（5）查看一下pod节点</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200108122424654](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108122424654.png)</p>
<h4 id="（6）记录一个版本">（6）记录一个版本</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout history deployment xgp-web &gt; pod.txt<br></code></pre></td></tr></table></figure>
<p>![image-20200108142016701](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108142016701.png)</p>
<h4 id="（7）访问一下">（7）访问一下</h4>
<p>![image-20200108122518278](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108122518278.png)</p>
<p>![image-20200108122534683](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108122534683.png)</p>
<h3 id="2）根据上述Deployment，升级为v2版本，记录一个版本。"><strong>2）根据上述Deployment，升级为v2版本，记录一个版本。</strong></h3>
<h4 id="（1）修改yaml文件镜像版本">（1）修改yaml文件镜像版本</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp.yaml</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v2</span>    <span class="hljs-comment">#修改版本为二</span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">disk:</span> <span class="hljs-string">ssd</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）刷新一下yaml文件">（2）刷新一下yaml文件</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp.yaml --recore<br></code></pre></td></tr></table></figure>
<h4 id="（3）访问一下-3">（3）访问一下</h4>
<p>![image-20200108141825924](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108141825924.png)</p>
<h4 id="（4）记录一个版本">（4）记录一个版本</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout history deployment xgp-web &gt; pod.txt<br></code></pre></td></tr></table></figure>
<p>![image-20200108142030157](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108142030157.png)</p>
<h3 id="3）最后升级到v3版本，这时，查看Service关联，并且分析访问流量的负载均衡详细情况。"><strong>3）最后升级到v3版本，这时，查看Service关联，并且分析访问流量的负载均衡详细情况。</strong></h3>
<h4 id="1）修改yaml文件镜像版本">1）修改yaml文件镜像版本</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">xgp.yaml</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v3</span>   <span class="hljs-comment">#修改版本为二</span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">disk:</span> <span class="hljs-string">ssd</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）刷新一下yaml文件-2">（2）刷新一下yaml文件</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f xgp.yaml --recore<br></code></pre></td></tr></table></figure>
<h4 id="（3）访问一下-4">（3）访问一下</h4>
<p>![image-20200108142329749](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108142329749.png)</p>
<h4 id="（5）分析访问流量的负载均衡详细情况">（5）分析访问流量的负载均衡详细情况</h4>
<h5 id="1-查看一下service映射端口">&lt;1&gt;查看一下service映射端口</h5>
<p>![image-20200108142504637](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108142504637.png)</p>
<h5 id="2-以ip为起点，分析访问流量的负载均衡详细情况">&lt;2&gt;以ip为起点，分析访问流量的负载均衡详细情况</h5>
<p><strong>Service实现的负载均衡：默认使用的是iptables规则。IPVS</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# iptables-save | grep <span class="hljs-number">10.107</span><span class="hljs-number">.27</span><span class="hljs-number">.229</span><br><span class="hljs-comment">//根据service的暴露IP，查看对应的iptabes规则</span><br></code></pre></td></tr></table></figure>
<p>![image-20200108143052433](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108143052433.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# iptables-save</span> | grep KUBE-SVC-ESI7C72YHAUGMG5S<br></code></pre></td></tr></table></figure>
<p>![image-20200108143359463](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108143359463.png)</p>
<p><em><strong>这里显示了各节点的负载比例</strong></em></p>
<h5 id="3-对应一下IP是否一致">&lt;3&gt;对应一下IP是否一致</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# iptables-save</span> | grep KUBE-SEP-VDKW5WQIWOLZMJ6G<br></code></pre></td></tr></table></figure>
<p>![image-20200108143547946](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108143547946.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200108143608942](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108143608942.png)</p>
<h3 id="4）回滚到指定版本v1，并作验证。"><strong>4）回滚到指定版本v1，并作验证。</strong></h3>
<h4 id="1-回滚到指定版本">&lt;1&gt;回滚到指定版本</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl rollout undo deployment xgp-web --to-revision=<span class="hljs-number">1</span><br><span class="hljs-comment">//这里指定的是版本信息的编号</span><br></code></pre></td></tr></table></figure>
<h4 id="2-访问一下">&lt;2&gt;访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<p>![image-20200108110337266](G:\四期\虚拟化\kubernetes\k8s文档\05 Delpoyment、service.assets\image-20200108110337266.png)</p>
<blockquote>
<p><strong>排错思路</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# less</span> /var/log/messages  | grep kubelet<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span>  logs -n  kube-system kube-scheduler-<span class="hljs-keyword">master</span> <span class="hljs-title"></span><br><span class="hljs-title">[root</span>@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> describe pod xgp-web-<span class="hljs-number">7</span>d478f5bb7-bd4bj <br></code></pre></td></tr></table></figure>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>06 pod资源对象</title>
    <url>/posts/cf38.html</url>
    <content><![CDATA[<h1>一，k8s的资源对象</h1>
<p><em><strong>Deployment、Service、Pod是k8s最核心的3个资源对象</strong></em></p>
<blockquote>
<p>**Deployment：**最常见的无状态应用的控制器，支持应用的扩缩容、滚动升级等操作。</p>
<p>**Service：**为弹性变动且存在生命周期的Pod对象提供了一个固定的访问接口，用于服务发现和服务访问。</p>
<p>**Pod：**是运行容器以及调度的最小单位。同一个pod可以同时运行多个容器，这些容器共享net、UTS、IPC，除此之外还有USER、PID、MOUNT。</p>
<p>**ReplicationController：**用于确保每个Pod副本在任意时刻都能满足目标数量，简单来说，它用于每个容器或容器组总是运行并且可以访问的：老一代无状态的Pod应用控制器。</p>
<p>**RwplicatSet：**新一代的无状态的Pod应用控制器，它与RC的不同之处在于支持的标签选择器不同，RC只支持等值选择器（键值对），RS还额外支持基于集合的选择器。</p>
<p>**StatefulSet：**用于管理有状态的持久化应用，如database服务程序，它与Deployment不同之处在于，它会为每一个pod创建一个独有的持久性标识符，并确保每个pod之间的顺序性。</p>
<p>**DaemonSet：**用于确保每一个节点都运行了某个pod的一个副本，新增的节点一样会被添加到此类pod，在节点移除时，此pod会被回收。</p>
<p>**Job：**用于管理运行完成后即可终止的应用，例如批量处理做作业任务；</p>
<p>**volume：**pv pvc<br>
<strong>ConfigMap：</strong><br>
<strong>Secret：</strong><br>
<strong>Role：</strong><br>
<strong>ClusterRole：</strong><br>
<strong>RoleBinding：</strong><br>
<strong>cluster RoleBinding：</strong><br>
<strong>service account：</strong><br>
<strong>Helm：</strong></p>
</blockquote>
<h2 id="Pod的生命周期被定义为以下几个阶段。">Pod的生命周期被定义为以下几个阶段。</h2>
<blockquote>
<ul>
<li><strong>Pending：Pod已经被创建，但是一个或者多个容器还未创建，这包括Pod调度阶段，以及容器镜像的下载过程。</strong></li>
<li><strong>Running：Pod已经被调度到Node，所有容器已经创建，并且至少一个容器在运行或者正在重启。</strong></li>
<li><strong>Succeeded：Pod中所有容器正常退出。</strong></li>
<li><strong>Failed：Pod中所有容器退出，至少有一个容器是一次退出的。</strong></li>
</ul>
</blockquote>
<h1>环境介绍</h1>
<table>
<thead>
<tr>
<th>主机</th>
<th>IP地址</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.1.21</td>
<td>k8s</td>
</tr>
<tr>
<td>node01</td>
<td>192.168.1.22</td>
<td>k8s</td>
</tr>
<tr>
<td>node02</td>
<td>192.168.1.23</td>
<td>k8s</td>
</tr>
</tbody>
</table>
<h1>二，Namespace：名称空间</h1>
<p><strong>默认的名称空间：</strong></p>
<blockquote>
<p><strong>Namespace（命名空间）是kubernetes系统中的另一个重要的概念，通过将系统内部的对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理。</strong></p>
<p><strong>Kubernetes集群在启动后，会创建一个名为“default”的Namespace，如果不特别指明Namespace，则用户创建的Pod、RC、Service都被系统创建到“default”的Namespace中。</strong></p>
</blockquote>
<h2 id="1-查看名称空间">1.查看名称空间</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get namespaces<br></code></pre></td></tr></table></figure>
<p>![image-20200109094700728](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109094700728.png)</p>
<h2 id="2-查看名称空间详细信息">2.查看名称空间详细信息</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> describe ns default<br></code></pre></td></tr></table></figure>
<p>![image-20200109095006067](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109095006067.png)</p>
<h2 id="3-创建名称空间">3.创建名称空间</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> create ns bdqn<br></code></pre></td></tr></table></figure>
<h3 id="查看一下">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get namespaces<br></code></pre></td></tr></table></figure>
<p>![image-20200109095153448](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109095153448.png)</p>
<h2 id="4-创建namespace的yaml文件">4.创建namespace的yaml文件</h2>
<h3 id="（1）查看格式">（1）查看格式</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> explain ns<br>//查看nasespace的yaml文件的格式<br></code></pre></td></tr></table></figure>
<h3 id="（2）创建namespace的yaml文件">（2）创建namespace的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master ~]<span class="hljs-meta"># vim test-ns.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Namespace<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test<br></code></pre></td></tr></table></figure>
<h3 id="（3）运行namespace的yaml文件">（3）运行namespace的yaml文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f test-ns.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（4）查看一下">（4）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get ns<br></code></pre></td></tr></table></figure>
<p>![image-20200109095808777](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109095808777.png)</p>
<h2 id="4-删除名称空间">4.删除名称空间</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> delete ns test <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> delete -f test-ns.yaml<br></code></pre></td></tr></table></figure>
<p><strong>注意：namespace资源对象进用于资源对象的隔离，并不能隔绝不同名称空间的Pod之间的通信。那是网络策略资源的功能。</strong></p>
<h2 id="5-查看指定名称空间">5.查看指定名称空间</h2>
<p><strong>可使用–namespace或-n选项</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -n kube-system <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod --namespace kube-system<br></code></pre></td></tr></table></figure>
<h1>三，Pod</h1>
<h2 id="1-编写一个pod的yaml文件">1.编写一个pod的yaml文件</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-app</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br></code></pre></td></tr></table></figure>
<p><em><strong>pod的yaml文件不支持replicas字段</strong></em></p>
<h3 id="（1）运行一下">（1）运行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f pod.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（2）查看一下">（2）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod<br></code></pre></td></tr></table></figure>
<p>![image-20200109100836911](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109100836911.png)</p>
<p><em><strong>ps：这个pod因为是自己创建的，所以删除之后k8s并不会自动生成，相当于docker中创建</strong></em></p>
<h2 id="2-指定pod的namespace名称空间">2.指定pod的namespace名称空间</h2>
<h3 id="（1）修改pod的yaml文件">（1）修改pod的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span>        <span class="hljs-comment">#资源类型</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>   <span class="hljs-comment">#api版本</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span>    <span class="hljs-comment">#指定控制器名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn</span>   <span class="hljs-comment">#指定namespace（名称空间）</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span>      <span class="hljs-comment">#容器</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-app</span>  <span class="hljs-comment">#容器名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span>  <span class="hljs-comment">#镜像</span><br></code></pre></td></tr></table></figure>
<h5 id="执行一下">执行一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f pod.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（2）查看一下-2">（2）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  kubectl</span> get pod -n bdqn <br>//根据namespace名称查看<br></code></pre></td></tr></table></figure>
<p>![image-20200109101521992](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109101521992.png)</p>
<h2 id="3-pod中镜像获取策略">3.pod中镜像获取策略</h2>
<blockquote>
<p>**Always：**镜像标签为“laster”或镜像不存在时，总是从指定的仓库中获取镜像。</p>
<p>**IfNotPresent：**仅当本地镜像不存在时才从目标仓库下载。</p>
<p>**Never：**禁止从仓库中下载镜像，即只使用本地镜像。</p>
</blockquote>
<p><em><strong>注意：对于标签为“laster”或者标签不存在，其默认的镜像下载策略为“Always”，而对于其他的标签镜像，默认策略为“IfNotPresent”。</strong></em></p>
<h2 id="4-观察pod和service的不同并关联">4.观察pod和service的不同并关联</h2>
<h3 id="（1）pod的yaml文件（指定端口）">（1）pod的yaml文件（指定端口）</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span>          <span class="hljs-comment">#资源类型</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>      <span class="hljs-comment">#api版本</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span>       <span class="hljs-comment">#指定控制器名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn</span>   <span class="hljs-comment">#指定namespace（名称空间）</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span>                          <span class="hljs-comment">#容器</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-app</span>                    <span class="hljs-comment">#容器名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span>   <span class="hljs-comment">#镜像</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>   <span class="hljs-comment">#获取的策略</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h4 id="1-删除之前的pod">&lt;1&gt;删除之前的pod</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> delete pod -n bdqn test-pod<br></code></pre></td></tr></table></figure>
<h4 id="2-执行一下">&lt;2&gt;执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f pod.yaml<br></code></pre></td></tr></table></figure>
<h4 id="3-查看一下">&lt;3&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -n bdqn<br></code></pre></td></tr></table></figure>
<p>![image-20200109110215669](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109110215669.png)</p>
<h3 id="（2）pod的yaml文件（修改端口）">（2）pod的yaml文件（修改端口）</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-app</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">90</span>   <span class="hljs-comment">#改一下端口</span><br></code></pre></td></tr></table></figure>
<h4 id="1-删除之前的pod-2">&lt;1&gt;删除之前的pod</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> delete pod -n bdqn test-pod<br></code></pre></td></tr></table></figure>
<h4 id="2-执行一下-2">&lt;2&gt;执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f pod.yaml<br></code></pre></td></tr></table></figure>
<h4 id="3-查看一下-2">&lt;3&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -n bdqn -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200109110409584](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109110409584.png)</p>
<h4 id="4-访问一下">&lt;4&gt;访问一下</h4>
<p>![image-20200109110430334](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109110430334.png)</p>
<p><strong>会发现修改的90端口并不生效，他只是一个提示字段并不生效。</strong></p>
<h3 id="（3）pod的yaml文件（添加标签）">（3）pod的yaml文件（添加标签）</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn</span><br>  <span class="hljs-attr">labels:</span>                 <span class="hljs-comment">#标签</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test-web</span>          <span class="hljs-comment">#标签名称</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-app</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">90</span>   <span class="hljs-comment">#改一下端口</span><br></code></pre></td></tr></table></figure>
<h4 id="pod">--------------------------------------pod---------------------------------------------</h4>
<h2 id="（4）编写一个service的yaml文件">（4）编写一个service的yaml文件</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">test-svc.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>      <span class="hljs-comment">#api版本</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span>          <span class="hljs-comment">#资源类型</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-svc</span>       <span class="hljs-comment">#指定控制器名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn</span>   <span class="hljs-comment">#指定namespace（名称空间）</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span>          <span class="hljs-comment">#标签</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test-web</span>    <span class="hljs-comment">#标签名称（须和pod的标签名称一致）</span><br>  <span class="hljs-attr">ports:</span>              <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>          <span class="hljs-comment">#宿主机端口</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span>    <span class="hljs-comment">#容器端口</span><br></code></pre></td></tr></table></figure>
<p><em><strong>会发现添加的80端口生效了，所以不能乱改。</strong></em></p>
<h4 id="1-执行一下">&lt;1&gt;执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f test-svc.yaml<br></code></pre></td></tr></table></figure>
<h4 id="2-查看一下">&lt;2&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get svc -n bdqn<br></code></pre></td></tr></table></figure>
<p>![image-20200109121106859](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109121106859.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> describe svc -n bdqn test-svc<br></code></pre></td></tr></table></figure>
<p>![image-20200109121139399](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109121139399.png)</p>
<h4 id="4-访问一下-2">&lt;4&gt;访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">10.98</span><span class="hljs-number">.57</span><span class="hljs-number">.97</span><br></code></pre></td></tr></table></figure>
<p>![image-20200109121205607](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109121205607.png)</p>
<h4 id="service">--------------------------------------service---------------------------------------------</h4>
<h1>四，容器的重启策略</h1>
<p><strong>Pod的重启策略（RestartPolicy）应用与Pod内所有容器，并且仅在Pod所处的Node上由kubelet进行判断和重启操作。当某个容器异常退出或者健康检查失败时，kubelet将根据RestartPolicy的设置来进行相应的操作。</strong></p>
<blockquote>
<p><strong>Always：</strong>（默认情况下使用）但凡Pod对象终止就将其重启；<br>
**OnFailure：**仅在Pod对象出现错误时才将其重启；<br>
**Never：**从不重启；</p>
</blockquote>
<h1>五，pod的默认健康检查</h1>
<p><strong>每个容器启动时都会执行一个进程，此进程由 Dockerfile 的 CMD 或 ENTRYPOINT 指定。如果进程退出时返回码非零，则认为容器发生故障，Kubernetes 就会根据 <code>restartPolicy</code> 重启容器。</strong></p>
<h2 id="（1）编写健康检查的yaml文件">（1）编写健康检查的yaml文件</h2>
<p><strong>下面我们模拟一个容器发生故障的场景，Pod 配置文件如下：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">healcheck.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">test:</span> <span class="hljs-string">healcheck</span><br>  <span class="hljs-attr">name:</span>  <span class="hljs-string">healcheck</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span>  <span class="hljs-comment">#指定重启策略</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span>  <span class="hljs-string">healcheck</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:latest</span><br>    <span class="hljs-attr">args:</span>                   <span class="hljs-comment">#生成pod时运行的命令</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">20</span><span class="hljs-string">;</span> <span class="hljs-string">exit</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<h3 id="1-执行一下-2">&lt;1&gt;执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f  healcheck.yaml<br></code></pre></td></tr></table></figure>
<h3 id="2-查看一下-2">&lt;2&gt;查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200109121809350](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109121809350.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w | grep healcheck<br></code></pre></td></tr></table></figure>
<p>![image-20200109121817775](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109121817775.png)</p>
<p><strong>在上面的例子中，容器进程返回值非零，Kubernetes 则认为容器发生故障，需要重启。但有不少情况是发生了故障，但进程并不会退出。</strong></p>
<h1>六，小实验</h1>
<h2 id="1）以自己的名称创建一个k8s名称空间，以下所有操作都在此名称空间中。">1）以自己的名称创建一个k8s名称空间，以下所有操作都在此名称空间中。</h2>
<h3 id="（1）创建名称空间">（1）创建名称空间</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> create ns xgp<br></code></pre></td></tr></table></figure>
<h3 id="（2）查看一下-3">（2）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get ns xgp<br></code></pre></td></tr></table></figure>
<p>![image-20200109133106300](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109133106300.png)</p>
<h2 id="2）创建一个Pod资源对象，使用的是私有仓库中私有镜像，其镜像的下载策略为：NEVER。-Pod的重启策略为：-Never">2）创建一个Pod资源对象，使用的是私有仓库中私有镜像，其镜像的下载策略为：NEVER。 Pod的重启策略为： Never.</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">www</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Never</span><br>    <span class="hljs-attr">args:</span>                   <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">90</span><span class="hljs-string">;</span> <span class="hljs-string">exit</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h2 id="3）创建出容器之后，执行非正常退出，查看Pod的最终状态。">3）创建出容器之后，执行非正常退出，查看Pod的最终状态。</h2>
<h3 id="（1）执行一下上面pod的yaml文件">（1）执行一下上面pod的yaml文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f pod.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（2）动态查看ns中test-pod的信息">（2）动态查看ns中test-pod的信息</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -n xgp  -w | grep test-pod<br></code></pre></td></tr></table></figure>
<p>![image-20200109135543482](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109135543482.png)</p>
<blockquote>
<p><strong>删除test-pod</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> delete pod -n xgp test-pod <br></code></pre></td></tr></table></figure>
</blockquote>
<h2 id="4-创建一个Service资源对象，与上述Pod对象关联，验证他们的关联性。">4) 创建一个Service资源对象，与上述Pod对象关联，验证他们的关联性。</h2>
<h3 id="（1）修改pod的yaml文件-2">（1）修改pod的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">www</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Never</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h3 id="（1）编写service的yaml文件">（1）编写service的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">svc.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test-web</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h3 id="（2）执行一下">（2）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f svc.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（3）查看一下">（3）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get  pod -o wide -n xgp<br></code></pre></td></tr></table></figure>
<p>![image-20200109141712910](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109141712910.png)</p>
<h3 id="（4）访问一下">（4）访问一下</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure>
<p>![image-20200109141749352](G:\四期\虚拟化\kubernetes\k8s文档\06 pod资源对象.assets\image-20200109141749352.png)</p>
]]></content>
  </entry>
  <entry>
    <title>08 ReplicaSet、DaemonSet</title>
    <url>/posts/7772.html</url>
    <content><![CDATA[<h1>ReplicaSet简单介绍</h1>
<h2 id="1-RC：ReplicationController（老一代的pod控制器）">1. RC：ReplicationController（老一代的pod控制器）</h2>
<p><strong>用来确保由其管控的Pod对象副本数量，能够满足用户期望，多则删除，少则通过模本创建</strong></p>
<h3 id="特点：">特点：</h3>
<ul>
<li>​		<strong>确保Pod资源对象的数量精准。</strong></li>
<li>​		<strong>确保pod健康运行。</strong></li>
<li>​		<strong>弹性伸缩</strong></li>
</ul>
<p><strong>同样，它也可以通过yaml或json格式的资源清单来创建。其中spec字段一般嵌套以下字段：</strong></p>
<ul>
<li>​		<strong>replicas：期望的Pod对象副本数量。</strong></li>
<li>​		<strong>selector：当前控制器匹配Pod对此项副本的标签选择器</strong></li>
<li>​		<strong>template：pod副本的模板</strong></li>
</ul>
<p><strong>与RC相比而言，RS不仅支持<em>基于等值</em>的标签选择器，而且还支持<em>基于集合</em>的标签选择器。</strong></p>
<h2 id="2-标签：解决同类型的资源对象，为了更好的管理，按照标签分组。">2. 标签：解决同类型的资源对象，为了更好的管理，按照标签分组。</h2>
<h3 id="常用的标签分类：">常用的标签分类：</h3>
<ul>
<li>​		<strong>release（版本）：stable（稳定版）、canary（金丝雀版本）、beta（测试版本）</strong></li>
<li>​		<strong>environment（环境变量）：dev（开发）、qa（测试）、production（生产）</strong></li>
<li>​		<strong>application（应用）：ui、as（application software应用软件）、pc、sc</strong></li>
<li>​		<strong>tier（架构层级）：frontend（前端）、backend（后端）、cache（缓存）</strong></li>
<li>​		<strong>partition（分区）：customerA（客户A）、customerB（客户B）</strong></li>
<li>​		<strong>track（品控级别）：daily（每天）、weekly（每周）</strong></li>
</ul>
<p><strong>标签要做到：见名知意。</strong></p>
<h2 id="3-测试">3.测试</h2>
<h3 id="（1）编写一个pod的yaml文件">（1）编写一个pod的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master ~]<span class="hljs-meta"># vim label.yaml </span><br><br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> labels<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    env:</span> qa<br><span class="hljs-symbol">    tier:</span> frontend<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: myapp<br><span class="hljs-symbol">    image:</span> httpd<br></code></pre></td></tr></table></figure>
<h4 id="1-执行一下">&lt;1&gt;执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f label.yaml  --record<br></code></pre></td></tr></table></figure>
<h4 id="2-查看一下">&lt;2&gt;查看一下</h4>
<figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart">[root<span class="hljs-meta">@master</span> ~]# kubectl <span class="hljs-keyword">get</span> pod  --<span class="hljs-keyword">show</span>-labels <br><span class="hljs-comment">//通过--show-labels显示资源对象的</span><br></code></pre></td></tr></table></figure>
<p>![image-20200114095943595](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaS儿童、DaemonSet.assets\image-20200114095943595.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get po -L env,tier<br>//显示某个键对应的值<br></code></pre></td></tr></table></figure>
<p>![image-20200114100043922](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaS儿童、DaemonSet.assets\image-20200114100043922.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get po -l env,tier<br>//通过-l 查看仅包含某个标签的资源。<br></code></pre></td></tr></table></figure>
<p>![image-20200114100200895](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaS儿童、DaemonSet.assets\image-20200114100200895.png)</p>
<h3 id="（2）添加标签">（2）添加标签</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> label pod  labels <span class="hljs-attr">app=</span>pc<br>//给pod资源添加标签<br></code></pre></td></tr></table></figure>
<h3 id="（3）修改标签">（3）修改标签</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> label pod labels <span class="hljs-attr">env=</span>dev --overwrite<br>//修改标签<br></code></pre></td></tr></table></figure>
<figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart">[root<span class="hljs-meta">@master</span> ~]# kubectl <span class="hljs-keyword">get</span> pod -l tier --<span class="hljs-keyword">show</span>-labels <br><span class="hljs-comment">//查看标签</span><br></code></pre></td></tr></table></figure>
<p>![image-20200114100607585](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaS儿童、DaemonSet.assets\image-20200114100607585.png)</p>
<h3 id="（4）编写一个service的yaml文件">（4）编写一个service的yaml文件</h3>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master ~]# vim service.yaml<br>kind: Service<br>apiVersion: v1<br>metadata:<br>  name: service<br>spec:<br>  type: NodePort<br>  selector:<br>    env: qa<br>  ports:<br>  - protocol: TCP<br>    port: 90<br>    targetPort: 80<br>    nodePort: 30123<br></code></pre></td></tr></table></figure>
<h4 id="1-执行一下-2">&lt;1&gt;执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f service.yaml<br></code></pre></td></tr></table></figure>
<h4 id="2-查看一下-2">&lt;2&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> describe svc<br></code></pre></td></tr></table></figure>
<p>![image-20200114101837151](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaSet、DaemonSet.assets\image-20200114101837151.png)</p>
<h4 id="3-访问一下">&lt;3&gt;访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<p>![image-20200114101915248](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaSet、DaemonSet.assets\image-20200114101915248.png)</p>
<p><strong>如果标签有多个，标签选择器选择其中一个，也可以关联成功。相反，如果选择器有多个，那么标签必须完全满足条件，才可以关联成功。</strong></p>
<h2 id="4-标签选择器：标签的查询过滤条件。">4. 标签选择器：标签的查询过滤条件。</h2>
<p><strong><a href>基于等值关系的（equality-based）</a>：“=”，“==”，“！ =”前面两个都是相等，最后一个是不等于。</strong></p>
<p><strong><a href>基于集合关系（set-based）</a>:in、notin、exists三种。选择器列表间为“逻辑与”关系，使用ln或者NotIn操作时，其valuas不强制要求为非空的字符串列表，而使用Exists或DostNotExist时，其values必须为空</strong></p>
<h4 id="使用标签选择器的逻辑：">使用标签选择器的逻辑：</h4>
<ul>
<li><strong>同时指定的多个选择器之间的逻辑关系为“与”操作。</strong></li>
<li><strong>使用空值的标签选择器意味着每个资源对象都将把选中。</strong></li>
<li><strong>空的标签选择器无法选中任何资源。</strong></li>
</ul>
<h3 id="（1）例子">（1）例子</h3>
<p>![image-20200114110334223](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaSet、DaemonSet.assets\image-20200114110334223.png)</p>
<h4 id="编写一个selector的yaml’文件">编写一个selector的yaml’文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">selector.yaml</span><br><span class="hljs-attr">selector:</span><br>  <span class="hljs-attr">matchLabels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">mathExpressions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#123;key:</span> <span class="hljs-string">name,operator:</span> <span class="hljs-string">In,values:</span> <span class="hljs-string">[zhangsan,lisi]&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#123;key:</span> <span class="hljs-string">age,operator:</span> <span class="hljs-string">Exists,values:&#125;</span><br></code></pre></td></tr></table></figure>
<ul>
<li><strong>selector：当前控制器匹配Pod对此项副本的标签选择器</strong></li>
<li><strong>matchLabels: 指定键值对表示的标签选择器。</strong></li>
<li><strong>mathExpressions:：基于表达式来指定的标签选择器。</strong></li>
</ul>
<h1>DaemonSet</h1>
<p><em><strong>它也是一种pod控制器。</strong></em></p>
<p><em><strong>RC，RS , deployment , daemonset.都是pod控制器。statfukSet，RBAC</strong></em></p>
<h3 id="1-使用场景：">1. 使用场景：</h3>
<p><strong>如果必须将pod运行在固定的某个或某几个节点，且要优先于其他的pod的启动。通常情况下，默认会将每一个节点都运行，并且只能运行一个pod。这种情况推荐使用DeamonSet资源对象。</strong></p>
<ul>
<li><strong>监控程序；</strong></li>
<li><strong>日志收集程序；</strong></li>
<li><strong>集群存储程序；</strong></li>
</ul>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">[root@master ~]# kubectl get ds -n kube-<span class="hljs-keyword">system</span> <br><span class="hljs-comment">//查看一下DaemonSet</span><br></code></pre></td></tr></table></figure>
<h3 id="2-DaemonSet-与-Deployment-的区别">2. DaemonSet 与 Deployment 的区别</h3>
<ul>
<li><strong>Deployment 部署的副本 Pod 会分布在各个 Node 上，每个 Node 都可能运行好几个副本。</strong></li>
<li><strong>DaemonSet 的不同之处在于：每个 Node 上最多只能运行一个副本。</strong></li>
</ul>
<h3 id="3-运行一个web服务，在每一个节点运行一个pod。">3. 运行一个web服务，在每一个节点运行一个pod。</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master ~]<span class="hljs-meta"># vim daemonset.yaml</span><br><br><span class="hljs-symbol">kind:</span> DaemonSet<br><span class="hljs-symbol">apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-ds<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        name:</span> test-ds<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: test-ds<br><span class="hljs-symbol">        image:</span> httpd<br></code></pre></td></tr></table></figure>
<h4 id="1-执行一下-3">&lt;1&gt;执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f daemonset.yaml<br></code></pre></td></tr></table></figure>
<h4 id="2-查看一下-3">&lt;2&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get ds<br></code></pre></td></tr></table></figure>
<p>![image-20200114112936161](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaSet、DaemonSet.assets\image-20200114112936161.png)</p>
<h1>总结</h1>
<h2 id="1）总结RC、RS、Deplyment、DaemonSet控制器的特点及使用场景。"><strong>1）总结RC、RS、Deplyment、DaemonSet控制器的特点及使用场景。</strong></h2>
<h3 id="1-Replication-Controller（RC）">&lt;1&gt;Replication Controller（RC）</h3>
<h4 id="介绍及使用场景">介绍及使用场景</h4>
<p><strong><code>Replication Controller</code>简称<code>RC</code>，<code>RC</code>是<code>Kubernetes</code>系统中的核心概念之一，简单来说，<code>RC</code>可以保证在任意时间运行<code>Pod</code>的副本数量，能够保证<code>Pod</code>总是可用的。如果实际<code>Pod</code>数量比指定的多那就结束掉多余的，如果实际数量比指定的少就新启动一些<code>Pod</code>，当<code>Pod</code>失败、被删除或者挂掉后，<code>RC</code>都会去自动创建新的<code>Pod</code>来保证副本数量，所以即使只有一个<code>Pod</code>，我们也应该使用<code>RC</code>来管理我们的<code>Pod</code>。</strong></p>
<h4 id="主要功能">主要功能</h4>
<ul>
<li><strong>确保pod数量：RC用来管理正常运行Pod数量，一个RC可以由一个或多个Pod组成，在RC被创建后，系统会根据定义好的副本数来创建Pod数量。在运行过程中，如果Pod数量小于定义的，就会重启停止的或重新分配Pod，反之则杀死多余的。</strong></li>
<li><strong>确保pod健康：当pod不健康，运行出错或者无法提供服务时，RC也会杀死不健康的pod，重新创建新的。</strong></li>
<li><strong>弹性伸缩 ：在业务高峰或者低峰期的时候，可以通过RC动态的调整pod的数量来提高资源的利用率。同时，配置相应的监控功能（Hroizontal Pod Autoscaler），会定时自动从监控平台获取RC关联pod的整体资源使用情况，做到自动伸缩。</strong></li>
<li><strong>滚动升级：滚动升级为一种平滑的升级方式，通过逐步替换的策略，保证整体系统的稳定，在初始化升级的时候就可以及时发现和解决问题，避免问题不断扩大。</strong></li>
</ul>
<h3 id="2-Replication-Set（RS）">&lt;2&gt;Replication Set（RS）</h3>
<p><strong>被认为 是“升级版”的RC。RS也是用于保证与label selector匹配的pod数量维持在期望状态。</strong></p>
<blockquote>
<p><strong>实际上<code>RS</code>和<code>RC</code>的功能基本一致，目前唯一的一个区别就是<code>RC</code>只支持基于等式的<code>selector</code>（env=dev或app=nginx），但<code>RS</code>还支持基于集合的<code>selector</code>（version in (v1, v2)），这对复杂的运维管理就非常方便了。</strong></p>
<p><strong><code>kubectl</code>命令行工具中关于<code>RC</code>的大部分命令同样适用于我们的<code>RS</code>资源对象。不过我们也很少会去单独使用<code>RS</code>，它主要被<code>Deployment</code>这个更加高层的资源对象使用，除非用户需要自定义升级功能或根本不需要升级<code>Pod</code>，在一般情况下，我们推荐使用<code>Deployment</code>而不直接使用<code>Replica Set</code>。</strong></p>
</blockquote>
<h4 id="区别在于">区别在于</h4>
<p><strong>1、RC只支持基于等式的selector（env=dev或environment!=qa），但RS还支持新的，基于集合的selector（version in (v1.0, v2.0)或env notin (dev, qa)），这对复杂的运维管理很方便。</strong></p>
<p><strong>2、升级方式</strong></p>
<ul>
<li><strong>RS不能使用kubectlrolling-update进行升级</strong></li>
<li><strong>kubectl rolling-update专用于rc</strong></li>
<li><strong>RS升级使用deployment或者kubectl replace命令</strong></li>
<li><strong>社区引入这一API的初衷是用于取代vl中的RC，也就是说当v1版本被废弃时，RC就完成了它的历史使命，而由RS来接管其工作</strong></li>
</ul>
<h3 id="3-DaemonSet">&lt;3&gt;DaemonSet</h3>
<h4 id="1-特点：">1. 特点：</h4>
<p><strong>如果必须将pod运行在固定的某个或某几个节点，且要优先于其他的pod的启动。通常情况下，默认会将每一个节点都运行，并且只能运行一个pod。这种情况推荐使用DeamonSet资源对象。</strong></p>
<p><strong>一个DaemonSet对象能确保其创建的Pod在集群中的每一台（或指定）Node上都运行一个副本。如果集群中动态加入了新的Node，DaemonSet中的Pod也会被添加在新加入Node上运行。删除一个DaemonSet也会级联删除所有其创建的Pod。</strong></p>
<h4 id="2-使用环境"><strong>2. 使用环境</strong></h4>
<ul>
<li><strong>监控程序；</strong></li>
<li><strong>日志收集程序；</strong></li>
<li><strong>集群存储程序；</strong></li>
</ul>
<h3 id="4-Deployment">&lt;4&gt;Deployment</h3>
<h4 id="1-什么是Deployment">1. 什么是Deployment</h4>
<p><strong>Kubernetes Deployment提供了官方的用于更新Pod和Replica Set（下一代的Replication Controller）的方法，您可以在Deployment对象中只描述您所期望的理想状态（预期的运行状态），Deployment控制器为您将现在的实际状态转换成您期望的状态，例如，您想将所有的webapp:v1.0.9升级成webapp:v1.1.0，您只需创建一个Deployment，Kubernetes会按照Deployment自动进行升级。现在，您可以通过Deployment来创建新的资源（pod，rs，rc），替换已经存在的资源等。</strong></p>
<p><strong>你只需要在Deployment中描述你想要的目标状态是什么，Deployment controller就会帮你将Pod和Replica Set的实际状态改变到你的目标状态。你可以定义一个全新的Deployment，也可以创建一个新的替换旧的Deployment。</strong></p>
<h4 id="2-典型的用例">2. 典型的用例</h4>
<ul>
<li><strong>使用Deployment来创建ReplicaSet。ReplicaSet在后台创建pod。检查启动状态，看它是成功还是失败。</strong></li>
<li><strong>然后，通过更新Deployment的PodTemplateSpec字段来声明Pod的新状态。这会创建一个新的ReplicaSet，Deployment会按照控制的速率将pod从旧的ReplicaSet移动到新的ReplicaSet中。</strong></li>
<li><strong>如果当前状态不稳定，回滚到之前的Deployment revision。每次回滚都会更新Deployment的revision。</strong></li>
<li><strong>扩容Deployment以满足更高的负载。</strong></li>
<li><strong>暂停Deployment来应用PodTemplateSpec的多个修复，然后恢复上线。</strong></li>
<li><strong>根据Deployment 的状态判断上线是否hang住了。</strong></li>
<li><strong>清除旧的不必要的ReplicaSet。</strong></li>
</ul>
<h4 id="3-使用环境">3. 使用环境</h4>
<p><strong>Deployment集成了上线部署、滚动升级、创建副本、暂停上线任务，恢复上线任务，回滚到以前某一版本（成功/稳定）的Deployment等功能，在某种程度上，Deployment可以帮我们实现无人值守的上线，大大降低我们的上线过程的复杂沟通、操作风险。</strong></p>
<ul>
<li><strong>定义Deployment来创建Pod和ReplicaSet</strong></li>
<li><strong>滚动升级和回滚应用</strong></li>
<li><strong>扩容和缩容</strong></li>
<li><strong>暂停和继续Deployment</strong></li>
</ul>
<h4 id="3-DaemonSet-与-Deployment-的区别">3. DaemonSet 与 Deployment 的区别</h4>
<ul>
<li><strong>Deployment 部署的副本 Pod 会分布在各个 Node 上，每个 Node 都可能运行好几个副本。</strong></li>
<li><strong>DaemonSet 的不同之处在于：每个 Node 上最多只能运行一个副本。</strong></li>
</ul>
<h2 id="2）使用DaemonSet控制器运行httpd服务，要求名称以自己的名称命名。标签为：tier-backend-env-dev"><strong>2）使用DaemonSet控制器运行httpd服务，要求名称以自己的名称命名。标签为：tier=backend,env=dev.</strong></h2>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master ~]<span class="hljs-meta"># vim daemonset.yaml </span><br><span class="hljs-symbol">kind:</span> DaemonSet<br><span class="hljs-symbol">apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> xgp-ds<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        tier:</span> backend<br><span class="hljs-symbol">        env:</span> dev<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: xgp-ds<br><span class="hljs-symbol">        image:</span> httpd<br></code></pre></td></tr></table></figure>
<h3 id="查看一下">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod  --show-labels<br></code></pre></td></tr></table></figure>
<p>![image-20200114100043922](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaS儿童、DaemonSet.assets\image-20200114100043922.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -L env,tier<br></code></pre></td></tr></table></figure>
<p>![image-20200114095943595](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaSet、DaemonSet.assets\image-20200114095943595.png)</p>
<h2 id="3-创建service资源对象与上述资源进行关联，要有验证。"><strong>3) 创建service资源对象与上述资源进行关联，要有验证。</strong></h2>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master ~]# vim service.yaml <br>kind: Service<br>apiVersion: v1<br>metadata:<br>  name: service<br>spec: <br>  type: NodePort<br>  selector: <br>    env: dev<br>  ports:    <br>  - protocol: TCP<br>    port: 90 <br>    targetPort: 80<br>    nodePort: 30123<br></code></pre></td></tr></table></figure>
<h3 id="执行一下">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f service.yaml<br></code></pre></td></tr></table></figure>
<h3 id="查看一下-2">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> describe svc<br></code></pre></td></tr></table></figure>
<p>![image-20200114120345596](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaSet、DaemonSet.assets\image-20200114120345596.png)</p>
<h3 id="访问一下">访问一下</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30123</span><br></code></pre></td></tr></table></figure>
<p>![image-20200114120444524](G:\四期\虚拟化\kubernetes\k8s文档\08 ReplicaSet、DaemonSet.assets\image-20200114120444524.png)</p>
<h2 id="4）整理关于标签和标签选择器都有什么作用？"><strong>4）整理关于标签和标签选择器都有什么作用？</strong></h2>
<p><strong>&lt;1&gt;标签：解决同类型的资源对象，为了更好的管理，按照标签分组。</strong></p>
<p><strong>&lt;2&gt;标签选择器：标签的查询过滤条件。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>07 pod健康检查</title>
    <url>/posts/cffe.html</url>
    <content><![CDATA[<h1>pod健康检查</h1>
<h2 id="一、Pod的liveness和readiness探针">一、Pod的liveness和readiness探针</h2>
<p><strong>Kubelet使用liveness probe（存活探针）来确定何时重启容器。例如，当应用程序处于运行状态但无法做进一步操作，liveness探针将捕获到deadlock，重启处于该状态下的容器，使应用程序在存在bug的情况下依然能够继续运行下去</strong><br>
<strong>Kubelet使用readiness probe（就绪探针）来确定容器是否已经就绪可以接受流量。只有当Pod中的容器都处于就绪状态时kubelet才会认定该Pod处于就绪状态。该信号的作用是控制哪些Pod应该作为service的后端。如果Pod处于非就绪状态，那么它们将会被从service的load balancer中移除。</strong></p>
<h2 id="Probe支持以下三种检查方法：">Probe支持以下三种检查方法：</h2>
<h4 id="1-exec-命令">&lt;1&gt;exec-命令</h4>
<p><strong>在用户容器内执行一次命令，如果命令执行的退出码为0，则认为应用程序正常运行，其他任务应用程序运行不正常。</strong></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">livenessProbe:</span><br><span class="hljs-symbol">  exec:</span><br><span class="hljs-symbol">    command:</span><br>    - cat<br>    - <span class="hljs-meta-keyword">/home/</span>laizy<span class="hljs-meta-keyword">/test/</span>hostpath/healthy<br></code></pre></td></tr></table></figure>
<h4 id="2-TCPSocket">&lt;2&gt;TCPSocket</h4>
<p><strong>将会尝试打开一个用户容器的Socket连接（就是IP地址：端口）。如果能够建立这条连接，则认为应用程序正常运行，否则认为应用程序运行不正常。</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br><span class="hljs-attr">tcpSocket:</span><br>   <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure>
<h4 id="3-HTTPGet">&lt;3&gt;HTTPGet</h4>
<p><strong>调用容器内Web应用的web hook，如果返回的HTTP状态码在200和399之间，则认为应用程序正常运行，否则认为应用程序运行不正常。每进行一次HTTP健康检查都会访问一次指定的URL。</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">httpGet:</span> <span class="hljs-comment">#通过httpget检查健康，返回200-399之间，则认为容器正常</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/</span> <span class="hljs-comment">#URI地址</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span> <span class="hljs-comment">#端口号</span><br>  <span class="hljs-comment">#host: 127.0.0.1 #主机地址</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span> <span class="hljs-comment">#支持的协议，http或者https</span><br><span class="hljs-string">httpHeaders：’’</span> <span class="hljs-comment">#自定义请求的header</span><br></code></pre></td></tr></table></figure>
<h2 id="参数说明">参数说明</h2>
<blockquote>
<p>**initialDelaySeconds：**容器启动后第一次执行探测是需要等待多少秒。</p>
<p>**periodSeconds：**执行探测的频率。默认是10秒，最小1秒。</p>
<p>** timeoutSeconds：**探测超时时间。默认1秒，最小1秒。</p>
<p>**successThreshold：**探测失败后，最少连续探测成功多少次才被认定为成功。默认是1。对于liveness必须是1。最小值是1。</p>
</blockquote>
<h2 id="探针探测的结果有以下三者之一：">探针探测的结果有以下三者之一：</h2>
<blockquote>
<p>Success：Container通过了检查。<br>
Failure：Container未通过检查。<br>
Unknown：未能执行检查，因此不采取任何措施。</p>
</blockquote>
<h3 id="1-LivenessProbe（活跃度）">1. LivenessProbe（活跃度）</h3>
<h4 id="（1）编写一个livenss的yaml文件">（1）编写一个livenss的yaml文件</h4>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@node02 ~]<span class="hljs-meta"># vim livenss.yaml</span><br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> liveness<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    test:</span> liveness<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  restartPolicy:</span> OnFailure<br><span class="hljs-symbol">  containers:</span><br>  - name: liveness<br><span class="hljs-symbol">    image:</span> busybox<br><span class="hljs-symbol">    args:</span><br>    - <span class="hljs-meta-keyword">/bin/</span>sh<br>    - -c<br>    - touch <span class="hljs-meta-keyword">/tmp/</span>test; sleep <span class="hljs-number">60</span>; rm -rf <span class="hljs-meta-keyword">/tmp/</span>test; sleep <span class="hljs-number">300</span><br><span class="hljs-symbol">    livenessProbe:</span>              <span class="hljs-meta">#存活探测</span><br><span class="hljs-symbol">      exec:</span>                     <span class="hljs-meta">#通过执行命令来检查服务是否正常</span><br><span class="hljs-symbol">        command:</span>                <span class="hljs-meta">#命令模式</span><br>        - cat<br>        - <span class="hljs-meta-keyword">/tmp/</span>test<br><span class="hljs-symbol">      initialDelaySeconds:</span> <span class="hljs-number">10</span>    <span class="hljs-meta">#pod运行10秒后开始探测</span><br><span class="hljs-symbol">      periodSeconds:</span> <span class="hljs-number">5</span>           <span class="hljs-meta">#检查的频率，每5秒探测一次</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）运行一下">（2）运行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f liveness.yaml<br></code></pre></td></tr></table></figure>
<h4 id="（3）查看一下">（3）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w<br></code></pre></td></tr></table></figure>
<p><img src="http://q9npprkue.bkt.clouddn.com/image-20200113091518720.png" alt="image-20200113091518720"></p>
<p><strong>Liveness活跃度探测，根据探测某个文件是否存在，来确定某个服务是否正常运行，如果存在则正常，负责，它会根据你设置的Pod的重启策略操作Pod。</strong></p>
<h3 id="2-Readiness（敏感探测、就绪性探测）">2. Readiness（敏感探测、就绪性探测）</h3>
<h4 id="（1）编写一个readiness的yaml文件">（1）编写一个readiness的yaml文件</h4>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master ~]<span class="hljs-meta"># vim readiness.yaml </span><br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> readiness<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    test:</span> readiness<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  restartPolicy:</span> Never<br><span class="hljs-symbol">  containers:</span><br>  - name: readiness<br><span class="hljs-symbol">    image:</span> busybox<br><span class="hljs-symbol">    args:</span><br>    - <span class="hljs-meta-keyword">/bin/</span>sh<br>    - -c<br>    - touch <span class="hljs-meta-keyword">/tmp/</span>test; sleep <span class="hljs-number">60</span>; rm -rf <span class="hljs-meta-keyword">/tmp/</span>test; sleep <span class="hljs-number">300</span><br><span class="hljs-symbol">    readinessProbe:</span><br><span class="hljs-symbol">      exec:</span><br><span class="hljs-symbol">        command:</span><br>        - cat<br>        - <span class="hljs-meta-keyword">/tmp/</span>test<br><span class="hljs-symbol">      initialDelaySeconds:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">      periodSeconds:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）运行一下-2">（2）运行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f readiness.yaml<br></code></pre></td></tr></table></figure>
<h4 id="（3）查看一下-2">（3）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w<br></code></pre></td></tr></table></figure>
<p>![image-20200113095301156](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113095301156.png)</p>
<h3 id="3-总结liveness和readiness探测">3. 总结liveness和readiness探测</h3>
<blockquote>
<p><strong>（1）liveness和readiness是两种健康检查机制，k8s将两种探测采取相同的默认行为，即通过判断容器启动进程的返回值是否为零，来判断探测是否成功。</strong></p>
<p><strong>（2）两种探测配置方法完全一样，不同之处在于探测失败后的行为。</strong></p>
<blockquote>
<p>​			<strong>liveness探测是根据重启策略操作容器，大多数是重启容器。</strong></p>
<p>​			<strong>readiness则是将容器设置为不可用，不接收Service转发的请求。</strong></p>
</blockquote>
<p><strong>（3）两种探测方法可建议独立存在，也可以同时存在。用livensess判断是否需要重启，实现自愈；用readiness判断容器是否已经准备好对外提供服务。</strong></p>
</blockquote>
<h1>二、 检测的应用</h1>
<h2 id="1-在scale-扩容-缩容-中的应用。">1. 在scale(扩容/缩容) 中的应用。</h2>
<h4 id="（1）编写一个readiness的yaml文件-2">（1）编写一个readiness的yaml文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">hcscal.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span> <br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span>   <span class="hljs-comment">#探测的协议</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/healthy</span>  <span class="hljs-comment">#访问的目录</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">90</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30321</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）运行一下-3">（2）运行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f readiness.yaml<br></code></pre></td></tr></table></figure>
<h4 id="（3）查看一下-3">（3）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w<br></code></pre></td></tr></table></figure>
<p>![image-20200113102400721](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113102400721.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200113104819603](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113104819603.png)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master ~]# kubectl <span class="hljs-builtin-name">get</span><span class="hljs-built_in"> service </span>-o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200113104858861](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113104858861.png)</p>
<h4 id="（4）访问一下">（4）访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl  <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>/healthy<br></code></pre></td></tr></table></figure>
<p>![image-20200113104931451](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113104931451.png)</p>
<h4 id="（5）pod在指定目录创建一个文件">（5）pod在指定目录创建一个文件</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl exec web<span class="hljs-number">-69</span>d659f974<span class="hljs-number">-7</span>s9bc touch /usr/local/apache2/htdocs/healthy<br></code></pre></td></tr></table></figure>
<h4 id="（6）查看一下">（6）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w<br></code></pre></td></tr></table></figure>
<p>![image-20200113105045616](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113105045616.png)</p>
<h2 id="2-在更新过程中的使用">2. 在更新过程中的使用</h2>
<h4 id="（1）编写一个readiness的yaml文件-3">（1）编写一个readiness的yaml文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">app.v1.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">app</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">10</span><span class="hljs-string">;</span> <span class="hljs-string">touch</span> <span class="hljs-string">/tmp/healthy;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3000</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/tmp/healthy</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）运行一下并记录版本信息">（2）运行一下并记录版本信息</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f readiness.yaml --record<br></code></pre></td></tr></table></figure>
<h5 id="查看一下">查看一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout history deployment app<br></code></pre></td></tr></table></figure>
<p>![image-20200113110638083](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113110638083.png)</p>
<h4 id="（3）查看一下-4">（3）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w<br></code></pre></td></tr></table></figure>
<p>![image-20200113110659355](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113110659355.png)</p>
<h2 id="3-升级一下Deployment">3.升级一下Deployment</h2>
<h4 id="（1）编写一个readiness的yaml文件-4">（1）编写一个readiness的yaml文件</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@master ~]</span># <span class="hljs-selector-tag">cp</span> <span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.v1</span><span class="hljs-selector-class">.yaml</span> <span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.v2</span><span class="hljs-selector-class">.yaml</span><br></code></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">app.v2.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">app</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3000</span>        <span class="hljs-comment">#修改命令</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/tmp/healthy</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）运行一下并记录版本信息-2">（2）运行一下并记录版本信息</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f readiness.yaml --record<br></code></pre></td></tr></table></figure>
<h5 id="查看一下-2">查看一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout history deployment app<br></code></pre></td></tr></table></figure>
<p>![image-20200113111024791](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113111024791.png)</p>
<h4 id="（3）查看一下-5">（3）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w<br></code></pre></td></tr></table></figure>
<p>![image-20200113111125387](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113111125387.png)</p>
<h4 id="（4）再次升级一下deployment">（4）再次升级一下deployment</h4>
<h5 id="1-编写一个readiness的yaml文件">&lt;1&gt; 编写一个readiness的yaml文件</h5>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@master ~]</span># <span class="hljs-selector-tag">cp</span> <span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.v1</span><span class="hljs-selector-class">.yaml</span> <span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.v3</span><span class="hljs-selector-class">.yaml</span><br></code></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">app.v2.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">app</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3000</span>        <span class="hljs-comment">#修改命令</span><br></code></pre></td></tr></table></figure>
<h5 id="2-运行一下并记录版本信息">&lt;2&gt; 运行一下并记录版本信息</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f readiness.yaml --record<br></code></pre></td></tr></table></figure>
<h5 id="查看一下-3">查看一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout history deployment app<br></code></pre></td></tr></table></figure>
<p>![image-20200113111559864](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113111559864.png)</p>
<h5 id="3-查看一下">&lt;3&gt; 查看一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w<br></code></pre></td></tr></table></figure>
<p>![image-20200113111625947](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113111625947.png)</p>
<h2 id="4-回滚v2版本">4. 回滚v2版本</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout undo deployment app --<span class="hljs-attr">to-revision=</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-4">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod<br></code></pre></td></tr></table></figure>
<p>![image-20200113112216777](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113112216777.png)</p>
<h3 id="（1）编写一个readiness的yaml文件-5">（1）编写一个readiness的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">app.v2.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">app</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3000</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/tmp/healthy</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>
<p><strong>maxSurge：此参数控制滚动更新过程中，副本总数超过预期数的值。可以是整数，也可以是百分比，默认是1。</strong></p>
<p><strong>maxUnavailable：不可用pod的值，默认为1，可以是整数，也可以是百分比。</strong></p>
<h4 id="（2）-运行一下并记录版本信息">（2） 运行一下并记录版本信息</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f app.v2.yaml --record<br></code></pre></td></tr></table></figure>
<h5 id="查看一下-5">查看一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout history deployment app<br></code></pre></td></tr></table></figure>
<p>![image-20200113114726856](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113114726856.png)</p>
<h4 id="（3）-查看一下">（3） 查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w<br></code></pre></td></tr></table></figure>
<p>![image-20200113114755658](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113114755658.png)</p>
<h2 id="三、小实验">三、小实验</h2>
<h3 id="1）写一个Deployment资源对象，要求2个副本，nginx镜像。使用Readiness探测，自定义文件-test是否存在，容器开启之后10秒开始探测，时间间隔为10秒。"><strong>1）写一个Deployment资源对象，要求2个副本，nginx镜像。使用Readiness探测，自定义文件/test是否存在，容器开启之后10秒开始探测，时间间隔为10秒。</strong></h3>
<h5 id="（1）编写一个readiness的yaml文件-6">（1）编写一个readiness的yaml文件</h5>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nginx.yaml</span><br><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">readiness</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/nginx:v1</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/share/nginx/html/test</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>
<h5 id="（2）运行一下并记录版本信息-3">（2）运行一下并记录版本信息</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f nginx.yaml --record<br></code></pre></td></tr></table></figure>
<h5 id="查看一下-6">查看一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> rollout history deployment web<br></code></pre></td></tr></table></figure>
<p>![image-20200113122256692](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113122256692.png)</p>
<h5 id="（3）查看一下-6">（3）查看一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -w<br></code></pre></td></tr></table></figure>
<p>![image-20200113141908252](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113141908252.png)</p>
<h3 id="2）在运行之后两个Pod里，进入一个Pod，创建文件-test。"><strong>2）在运行之后两个Pod里，进入一个Pod，创建文件/test。</strong></h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl exec -it web-864c7cf7fc-gpxq4  /bin/bash</span><br>root@web-<span class="hljs-number">68444</span>bff8-xm22z:/<span class="hljs-comment"># touch /usr/share/nginx/html/test</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-7">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -w</span><br></code></pre></td></tr></table></figure>
<p>![image-20200113142148105](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113142148105.png)</p>
<h3 id="3）创建一个Service资源对象，跟上述Deployment进行关联，运行之后，查看Service资源详细信息，确认EndPoint负载均衡后端Pod。"><strong>3）创建一个Service资源对象，跟上述Deployment进行关联，运行之后，查看Service资源详细信息，确认EndPoint负载均衡后端Pod。</strong></h3>
<h4 id="（1）编写service的yaml文件">（1）编写service的yaml文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nginx-svc.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">90</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30321</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）执行一下">（2）执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nginx-svc.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="（3）给两个pod刚更改页面">（3）给两个pod刚更改页面</h4>
<h5 id="查看一下pod">查看一下pod</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -o wide</span><br></code></pre></td></tr></table></figure>
<h5 id="更改页面">更改页面</h5>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master</span> yaml]<span class="hljs-meta"># kubectl exec -it  web-864c7cf7fc-gpxq4  /bin/bash</span><br>root<span class="hljs-symbol">@web</span><span class="hljs-number">-864</span>c7cf7fc-gpxq4:/<span class="hljs-meta"># echo <span class="hljs-string">"123"</span>&gt;/usr/share/nginx/html/test</span><br>root<span class="hljs-symbol">@web</span><span class="hljs-number">-864</span>c7cf7fc-gpxq4:/<span class="hljs-meta"># exit</span><br><br>[root<span class="hljs-symbol">@master</span> yaml]<span class="hljs-meta"># kubectl exec -it  web-864c7cf7fc-pcrs9   /bin/bash</span><br>root<span class="hljs-symbol">@web</span><span class="hljs-number">-864</span>c7cf7fc-pcrs9:/<span class="hljs-meta"># echo <span class="hljs-string">"321"</span>&gt;/usr/share/nginx/html/test</span><br>root<span class="hljs-symbol">@web</span><span class="hljs-number">-864</span>c7cf7fc-pcrs9:/<span class="hljs-meta"># exit</span><br></code></pre></td></tr></table></figure>
<h3 id="4）观察状态之后，尝试将另一个Pod也写入-test文件，然后再去查看SVC对应的EndPoint的负载均衡情况。"><strong>4）观察状态之后，尝试将另一个Pod也写入/test文件，然后再去查看SVC对应的EndPoint的负载均衡情况。</strong></h3>
<h4 id="（1）查看一下service">（1）查看一下service</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get service</span><br></code></pre></td></tr></table></figure>
<p>![image-20200113144624099](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113144624099.png)</p>
<h4 id="（2）访问一下">（2）访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">30321</span>/test<br></code></pre></td></tr></table></figure>
<p>![image-20200113144514174](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113144514174.png)</p>
<h3 id></h3>
<h3 id="5）通过httpGet的探测方式，重新运行一下deployment资源，总结对比一下这两种Readiness探测方式。"><strong>5）通过httpGet的探测方式，重新运行一下deployment资源，总结对比一下这两种Readiness探测方式。</strong></h3>
<h4 id="（1）修改deployment的yaml文件">（1）修改deployment的yaml文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nginx.yaml</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">readiness</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/nginx:v1</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/usr/share/nginx/html/test</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）执行一下-2">（2）执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nginx.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="（3）查看一下pod">（3）查看一下pod</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -w</span><br></code></pre></td></tr></table></figure>
<p>![image-20200113151034766](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113151034766.png)</p>
<p><em><strong>maxSurge：此参数控制滚动更新过程中，副本总数超过预期数的值。可以是整数，也可以是百分比，默认是1。所以现在是3台pod</strong></em></p>
<h4 id="（4）访问一下-2">（4）访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master yaml]# curl <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">30321</span>/test<br></code></pre></td></tr></table></figure>
<p>![image-20200113151225572](G:\四期\虚拟化\kubernetes\k8s文档\07 pod健康检查.assets\image-20200113151225572.png)</p>
<h3 id="6）总结对比liveness和readiness探测的相同和不同之处，以及它们的使用场景。"><strong>6）总结对比liveness和readiness探测的相同和不同之处，以及它们的使用场景。</strong></h3>
]]></content>
  </entry>
  <entry>
    <title>09 Job资源对象</title>
    <url>/posts/e9be.html</url>
    <content><![CDATA[<h1>Job资源对象</h1>
<blockquote>
<p>**服务类的Pod容器：**RC、RS、DS、Deployment</p>
<p>**工作类的Pod容器：**Job—&gt;执行一次，或者批量执行处理程序，完成之后退出容器。</p>
</blockquote>
<p><strong>注意： 如果容器内执行任务有误，会根据容器的重启策略操作容器，不过这里</strong><br>
<strong>的容器重启策略只能是: Never和 OnFailure。</strong></p>
<h1>概念</h1>
<p><strong>在有些场景下，是想要运行一些容器执行某种特定的任务，任务一旦执行完成，容器也就没有存在的必要了。在这种场景下，创建pod就显得不那么合适。于是就是了Job，Job指的就是那些一次性任务。通过Job运行一个容器，当其任务执行完以后，就自动退出，集群也不再重新将其唤醒。</strong></p>
<p><strong>从程序的运行形态上来区分，可以将Pod分为两类：长时运行服务（jboss、mysql等）和一次性任务（数据计算、测试）。RC创建的Pod都是长时运行的服务，Job多用于执行一次性任务、批处理工作等，执行完成后便会停止（status.phase变为Succeeded）。</strong></p>
<h1>一、kubernetes支持以下几种job</h1>
<blockquote>
<ul>
<li><strong>非并行job：通常创建一个pod直至其成功结束。</strong></li>
<li><strong>固定结束次数的job：设置spec.completions,创建多个pod，直到.spec.completions个pod成功结束。</strong></li>
<li><strong>带有工作队列的并行job：设置.spec.Parallelism但不设置.spec.completions,当所有pod结束并且至少一个成功时，job就认为是成功。</strong></li>
</ul>
</blockquote>
<h2 id="Job-Controller">Job Controller</h2>
<p><strong>Job Controller负责根据Job Spec创建pod，并持续监控pod的状态，直至其成功结束，如果失败，则根据restartPolicy（只支持OnFailure和Never，不支持Always）决定是否创建新的pod再次重试任务。</strong></p>
<h2 id="例子"><strong>例子</strong></h2>
<h3 id="（1）编写一个job的yaml文件">（1）编写一个job的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim jop.yaml</span><br><span class="hljs-symbol">kind:</span> Job<br><span class="hljs-symbol">apiVersion:</span> batch/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-job<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      name:</span> test-job<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: hello<br><span class="hljs-symbol">        image:</span> busybox<br><span class="hljs-symbol">        command:</span> [<span class="hljs-string">"echo"</span>,<span class="hljs-string">"hello k8s job!"</span>]<br><span class="hljs-symbol">      restartPolicy:</span> Never<br></code></pre></td></tr></table></figure>
<h3 id="（2）执行一下">（2）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f jop.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（3）查看一下">（3）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115090831524](G:\四期\虚拟化\kubernetes\k8s文档\09 Jop资源对象.assets\image-20200115090831524.png)</p>
<h4 id="查看日志">查看日志</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl logs test-job-gs45w</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115091213349](G:\四期\虚拟化\kubernetes\k8s文档\09 Jop资源对象.assets\image-20200115091213349.png)</p>
<p><strong>我们可以看到job与其他资源对象不同，仅执行一次性任务，默认pod借宿运行后job即结束，状态为Completed。</strong></p>
<h3 id="（4）修改一下jop的yaml文件，把echo命令换成乱码">（4）修改一下jop的yaml文件，把echo命令换成乱码</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim jop.yaml</span><br><span class="hljs-symbol">kind:</span> Job<br><span class="hljs-symbol">apiVersion:</span> batch/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-job<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      name:</span> test-job<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: hello<br><span class="hljs-symbol">        image:</span> busybox<br><span class="hljs-symbol">        command:</span> [<span class="hljs-string">"asdasxsddwefew"</span>,<span class="hljs-string">"hello k8s job!"</span>] <span class="hljs-meta">#修改</span><br><span class="hljs-symbol">      restartPolicy:</span> Never<br></code></pre></td></tr></table></figure>
<h3 id="（5）先删除之前的pod">（5）先删除之前的pod</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete jobs.batch test-job</span><br></code></pre></td></tr></table></figure>
<h3 id="（6）执行一下">（6）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f jop.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（7）查看一下">（7）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -w</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115091647925](G:\四期\虚拟化\kubernetes\k8s文档\09 Jop资源对象.assets\image-20200115091647925.png)</p>
<p><em><strong>它会一直创建pod直到完成命令。</strong></em></p>
<h3 id="（8）修改一下jop的yaml文件，修改重启策略">（8）修改一下jop的yaml文件，修改重启策略</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim jop.yaml </span><br><span class="hljs-symbol">kind:</span> Job<br><span class="hljs-symbol">apiVersion:</span> batch/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-job<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      name:</span> test-job<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: hello<br><span class="hljs-symbol">        image:</span> busybox<br><span class="hljs-symbol">        command:</span> [<span class="hljs-string">"asdasxsddwefew"</span>,<span class="hljs-string">"hello k8s job!"</span>]<br><span class="hljs-symbol">      restartPolicy:</span> OnFailure<br></code></pre></td></tr></table></figure>
<h3 id="（9）先删除之前的pod">（9）先删除之前的pod</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete jobs.batch test-job</span><br></code></pre></td></tr></table></figure>
<h3 id="（10）执行一下">（10）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f jop.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（11）查看一下">（11）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -w</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115092801882](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115092801882.png)</p>
<p><em><strong>它会一直重启pod完成命令，直到重启到一定次数就会删除job。</strong></em></p>
<h1>二、提高Job的执行效率</h1>
<h2 id="1-我们可以在Job-spec字段下加上parallelism选项。表示同时运行多少个Pod执行任务。">1. 我们可以在Job.spec字段下加上<a href>parallelism</a>选项。表示同时运行多少个Pod执行任务。</h2>
<hr>
<h3 id="（1）编写一个job的yaml文件-2">（1）编写一个job的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim jop.yaml</span><br><span class="hljs-symbol">kind:</span> Job<br><span class="hljs-symbol">apiVersion:</span> batch/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-job<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  parallelism:</span> <span class="hljs-number">2</span>    <span class="hljs-meta">#同时启用几个pod</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      name:</span> test-job<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: hello<br><span class="hljs-symbol">        image:</span> busybox<br><span class="hljs-symbol">        command:</span> [<span class="hljs-string">"echo"</span>,<span class="hljs-string">"hello k8s job!"</span>]<br><span class="hljs-symbol">      restartPolicy:</span> OnFailure<br></code></pre></td></tr></table></figure>
<h3 id="（3）执行一下">（3）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f jop.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（4）查看一下">（4）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115093854913](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115093854913.png)</p>
<h4 id="查看日志-2">查看日志</h4>
<p>![image-20200115094002236](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115094002236.png)</p>
<h2 id="2-我们可以在Job-spec字段下加上complations选项。表示总共需要完成Pod的数量">2. 我们可以在Job.spec字段下加上complations选项。表示总共需要完成Pod的数量</h2>
<h3 id="（1）编写一个job的yaml文件-3">（1）编写一个job的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim jop.yaml</span><br><span class="hljs-symbol">kind:</span> Job<br><span class="hljs-symbol">apiVersion:</span> batch/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-job<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  complations:</span> <span class="hljs-number">8</span>            <span class="hljs-meta">#运行pod的总数量8个</span><br><span class="hljs-symbol">  parallelism:</span> <span class="hljs-number">2</span>            <span class="hljs-meta">#同时运行2个pod</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      name:</span> test-job<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: hello<br><span class="hljs-symbol">        image:</span> busybox<br><span class="hljs-symbol">        command:</span> [<span class="hljs-string">"echo"</span>,<span class="hljs-string">"hello k8s job!"</span>]<br><span class="hljs-symbol">      restartPolicy:</span> OnFailure<br></code></pre></td></tr></table></figure>
<p><strong>job 字段解释：</strong></p>
<blockquote>
<p><strong>标志Job结束需要成功运行的Pod个数，默认为1</strong><br>
<strong>parallelism：标志并行运行的Pod的个数，默认为1</strong><br>
<strong>activeDeadlineSeconds：标志失败Pod的重试最大时间，超过这个时间不会继续重试.</strong></p>
</blockquote>
<h3 id="（2）先删除之前的pod">（2）先删除之前的pod</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete jobs.batch test-job</span><br></code></pre></td></tr></table></figure>
<h3 id="（3）执行一下-2">（3）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f jop.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（4）查看一下-2">（4）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115094519494](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115094519494.png)</p>
<p><strong>可以看到pod是两个两个的启动的。</strong></p>
<h2 id="3-如何定时执行Job">3. 如何定时执行Job</h2>
<h3 id="（1）编写一个cronjob的yaml文件">（1）编写一个cronjob的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim cronjop.yaml</span><br><span class="hljs-symbol">kind:</span> CronJob<br><span class="hljs-symbol">apiVersion:</span> batch/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> hello<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  schedule:</span> <span class="hljs-string">"*/1 * * * *"</span> <span class="hljs-meta">#限定时间</span><br><span class="hljs-symbol">  jobTemplate:</span><br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      template:</span><br><span class="hljs-symbol">        spec:</span><br><span class="hljs-symbol">          containers:</span><br>          - name: hello<br><span class="hljs-symbol">            image:</span> busybox<br><span class="hljs-symbol">            command:</span> [<span class="hljs-string">"echo"</span>,<span class="hljs-string">"hello"</span>,<span class="hljs-string">"cronjob"</span>]<br><span class="hljs-symbol">          restartPolicy:</span> OnFailure<br></code></pre></td></tr></table></figure>
<h3 id="（2）先删除之前的pod-2">（2）先删除之前的pod</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete jobs.batch test-job</span><br></code></pre></td></tr></table></figure>
<h3 id="（3）执行一下-3">（3）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f jop.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（4）查看一下-3">（4）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115095857428](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115095857428.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get cronjobs.batch</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115095920740](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115095920740.png)</p>
<p><strong>此时查看Pod的状态，会发现，每分钟都会运行一个新的Pod来执行命令规定的任</strong><br>
<strong>务。</strong></p>
<h2 id="练习：规定2020-1-15-10-5分运行上面的crontab任务。">练习：规定2020.1.15.10.5分运行上面的crontab任务。</h2>
<h3 id="（1）编写一个cronjob的yaml文件-2">（1）编写一个cronjob的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim cronjop.yaml</span><br><span class="hljs-symbol">kind:</span> CronJob<br><span class="hljs-symbol">apiVersion:</span> batch/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> hello<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  schedule:</span> <span class="hljs-string">"5 10 15 1 *"</span> <span class="hljs-meta">#限定时间</span><br><span class="hljs-symbol">  jobTemplate:</span><br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      template:</span><br><span class="hljs-symbol">        spec:</span><br><span class="hljs-symbol">          containers:</span><br>          - name: hello<br><span class="hljs-symbol">            image:</span> busybox<br><span class="hljs-symbol">            command:</span> [<span class="hljs-string">"echo"</span>,<span class="hljs-string">"hello"</span>,<span class="hljs-string">"cronjob"</span>]<br><span class="hljs-symbol">          restartPolicy:</span> OnFailure<br></code></pre></td></tr></table></figure>
<h3 id="（2）先删除之前的pod-3">（2）先删除之前的pod</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete cronjobs.batch hello</span><br></code></pre></td></tr></table></figure>
<h3 id="（3）执行一下-4">（3）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f jop.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（4）查看一下-4">（4）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115100855819](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115100855819.png)</p>
<p><strong>这时会发现，如果规定具体时间，可能并不会执行任务。</strong></p>
<h3 id="（5）添加apiVersion库">（5）添加apiVersion库</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># vim /etc/kubernetes/manifests/kube-apiserver.yaml </span><br><span class="hljs-keyword">spec</span>:<br>  containers:<br>  - command:<br>    - kube-apiserver<br>    - --<span class="hljs-attr">runtime-config=</span>batch/<span class="hljs-attr">v2alpha1=</span><span class="hljs-literal">true</span>    <span class="hljs-comment">#添加</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115104218361](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115104218361.png)</p>
<h3 id="（6）重启kubelet">（6）重启kubelet</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># systemctl restart kubelet.service</span><br></code></pre></td></tr></table></figure>
<h3 id="（7）查看api版本">（7）查看api版本</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl api-versions</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115104521662](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115104521662.png)</p>
<h3 id="（8）编写一个cronjob的yaml文件">（8）编写一个cronjob的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim cronjop.yaml</span><br><span class="hljs-symbol">kind:</span> CronJob<br><span class="hljs-symbol">apiVersion:</span> batch/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> hello<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  schedule:</span> <span class="hljs-string">"47 10 15 1 *"</span> <span class="hljs-meta">#限定时间</span><br><span class="hljs-symbol">  jobTemplate:</span><br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      template:</span><br><span class="hljs-symbol">        spec:</span><br><span class="hljs-symbol">          containers:</span><br>          - name: hello<br><span class="hljs-symbol">            image:</span> busybox<br><span class="hljs-symbol">            command:</span> [<span class="hljs-string">"echo"</span>,<span class="hljs-string">"hello"</span>,<span class="hljs-string">"cronjob"</span>]<br><span class="hljs-symbol">          restartPolicy:</span> OnFailure<br></code></pre></td></tr></table></figure>
<h3 id="（9）执行一下">（9）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f jop.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（4）查看一下-5">（4）查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -w</span><br></code></pre></td></tr></table></figure>
<p>![image-20200115100855819](G:\四期\虚拟化\kubernetes\k8s文档\09 Job资源对象.assets\image-20200115100855819.png)</p>
<p><strong>注意：此时仍然不能正常运行指定时间的Job，这是因为K8s官方在cronjob这个资源对象的支持中还没有完善此功能，还待开发。</strong></p>
<p><strong>跟Job资源一样在cronjob.spec.jobTemplate.spec 下同样支持并发Job参数:</strong><br>
<strong>parallelism，也支持完成Pod的总数参数: completionsr</strong></p>
<h1>总结</h1>
<p><strong>Job 作为 Kubernetes 中用于处理任务的资源，与其他的资源没有太多的区别，它也使用 Kubernetes 中常见的控制器模式，监听 Informer 中的事件并运行 <code>syncHandler</code> 同步任务</strong></p>
<p><strong>而 CronJob 由于其功能的特殊性，每隔 10s 会从 apiserver 中取出资源并进行检查是否应该触发调度创建新的资源，需要注意的是 CronJob 并不能保证在准确的目标时间执行，执行会有一定程度的滞后。</strong></p>
<p><strong>两个控制器的实现都比较清晰，只是边界条件比较多，分析其实现原理时一定要多注意。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>10 复习 </title>
    <url>/posts/1b18.html</url>
    <content><![CDATA[<h1>虚拟化</h1>
<p><strong>云计算的分类</strong>：</p>
<blockquote>
<p><strong>基础及服务：laas</strong><br>
<strong>平台及服务：paas</strong><br>
<strong>软件及服务：saas</strong></p>
</blockquote>
<p><strong>docker虚拟化的底层原理:</strong> Namespace + Cgroup</p>
<p><strong>Namespace六项隔离:</strong></p>
<blockquote>
<p><strong>IPC: 共享内存,消息列队</strong><br>
<strong>MNT: 挂载点 文件系统</strong><br>
<strong>NET: 网络栈</strong><br>
<strong>PID: 进程编号</strong><br>
<strong>USER: 用户 组</strong><br>
<strong>UTS: 主机名 域名</strong><br>
<strong>namespace 六项隔离 实现了容器与宿主机 容器与容器之间的隔离</strong></p>
</blockquote>
<p><strong>Cgroup 四项作用：</strong></p>
<blockquote>
<p>**1） 资源的限制：**cgroup可以对进程组使用的资源总额进行限制<br>
**2） 优先级分配：**通过分配的cpu时间片数量以及硬盘IO带宽的大小，实际上相当于控制了进程运行的优先级别<br>
<strong>3） 资源统计：</strong> group可以统计系统资源使用量，比如gpu使用时间，内存使用量等，用于按量计费。同时还支持挂起动能，也就是说通过cgroup把所有 资源限制起来,对资源都不能使用，注意着并不是说我们的程序不能使用了,知识不能使用资源，处于等待状态。<br>
**4） 进程控制：**可以对进程组执行挂起、恢复等操作。</p>
</blockquote>
<p><strong>镜像是容器运行的核心，容器是镜像运行的后的实例。</strong></p>
<p><strong>DockerHub| registry  ----&gt;  pull</strong><br>
<strong>image :     save &gt;   |  load &lt;</strong><br>
<strong>run    ----&gt;  Container    ----&gt;   commit</strong>*<br>
<strong>Dockerfile</strong></p>
<p><strong>Docker 三剑客。</strong></p>
<blockquote>
<p><strong>docker  machine :自动化部署多台dockerHost 。</strong></p>
<p>​        <strong>Docker-compose: 它可以同时控制多个容器。</strong></p>
<p>​        <strong>yaml。</strong></p>
<p><strong>Docker Swarm：</strong></p>
<p>​        <strong>从单个的服务向集群的形势发展。</strong></p>
<p>​         <strong>高可用、高性能、高并发 ：为了防止单点故障。</strong></p>
<p>​         <strong>Service：服务  ----&gt; 包括运行什么服务，需要多个                          rep1icas（副本）, 外网如何访问。</strong></p>
</blockquote>
<h3 id="k8s"><strong>k8s</strong></h3>
<p>关闭防火墙、禁用selinux、修改主机名并加入域名解析、关闭swap 、时间同步、免密登录、打开iptables桥接</p>
<blockquote>
<p><strong>对硬件的基本要求： CPU：2核   MEM：2G</strong></p>
<p><strong>主机名：master node01 node02</strong></p>
<p><strong>时间必须同步</strong></p>
</blockquote>
<p><strong>kubctl：k8s客户端      kubeadm：工具  kubelet：客户端代理</strong></p>
<p><strong>组件：</strong></p>
<p>​		<strong>三层网络： DockerHost  &gt;   Pod  &gt; Service</strong></p>
<p>​        <strong>Deployment:        Service:</strong></p>
<h3 id="master组件">**master组件: **</h3>
<p><strong>kube- api( application interface) k8s的前端接口</strong></p>
<p>**Scheduler[集群分发调度器]**负责决定将Pod放在哪个Node上运行。在调度时，会充分考虑集群的拓扑结构，当前各个节点的负载情况，以及应对高可用、性能、数据亲和性和需求。</p>
<p><strong>Controller Manager[内部管理控制中心]</strong>：负责管理集群的各种资源，保证资源处于预期的状态。它由多种Controller组成，包括Replication Controller、Endpoints Controller、Namespace Controller、Serviceaccounts Controller等。</p>
<p>**Etcd：**负责保存k8s集群的配置信息和各种资源的状态信息。当数据发生变化时，etcd会快速的通知k8s相关组件。<a href>（第三方组件）它有可替换方案。Consul、zookeeper</a></p>
<p>**Flanner：**是k8s集群网络，可以保证Pod的跨主机通信。也有替换方案。</p>
<h3 id="Node组件：">Node组件：</h3>
<p><strong>Kubelet[节点上的Pod管家]</strong>：它是Node的agent(代理)，当Scheduler确定某 个Node上运行Pod之后，会将Pod的具体配置信息发送给该节点的kubelet,kubelet会根据这些信息创建和运行容器，并向Master报告运行状态。</p>
<p>**kube-proxy[负载均衡、路由转发]:**负责将访问service的TCP/UDP数据流转发到后端的容器。如果有多个副本，kube-proxy会实现负载均衡。</p>
<h3 id="yaml文件的一级字段">yaml文件的一级字段:</h3>
<p>​		<strong>VERSION:</strong><br>
​		<strong>KIND:</strong><br>
​		<strong>METADATA:</strong><br>
​		<strong>SPEC :</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">web.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>  <span class="hljs-comment">#资源对象是控制器</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span>   <span class="hljs-comment">#api的版本</span><br><span class="hljs-attr">metadata:</span>      <span class="hljs-comment">#描述kind（资源类型）</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span>   <span class="hljs-comment">#定义控制器名称</span><br>  <span class="hljs-string">namespace：</span>  <span class="hljs-comment">#名称空间</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>   <span class="hljs-comment">#副本数量</span><br>  <span class="hljs-attr">template:</span>     <span class="hljs-comment">#模板</span><br>    <span class="hljs-attr">metadata:</span>    <br>      <span class="hljs-attr">labels:</span>   <span class="hljs-comment">#标签</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">web_server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span>   <span class="hljs-comment">#指定容器</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span>  <span class="hljs-comment">#容器名称</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span>   <span class="hljs-comment">#使用的镜像</span><br></code></pre></td></tr></table></figure>
<p>​		<strong>Deployment（控制器)：</strong></p>
<p>​				**ReplicationController：**用来确保由其管控的Pod对象副本数量，能够满足用户期望，多则删除，少则通过模本创建</p>
<p>​				**RS（RpelicaSet）:**RS也是用于保证与label selector匹配的pod数量维持在期望状态</p>
<p>​		<strong>Service：</strong></p>
<p>​				<strong>type：默认Cluster IP</strong></p>
<p>​							<strong>NodePort：  30000-32767</strong></p>
<p>​		<strong>Deployment和Service关联：标签和标签选择器</strong></p>
<p>​		<strong>Namespace：</strong></p>
<p>​		<strong>Pod：最小单位</strong></p>
<p>​					<strong>镜像的下载策略：</strong></p>
<blockquote>
<p>​						**Always：**镜像标签为“laster”或镜像不存在时，总是从指定的仓库中获取镜像。</p>
<p>​						**IfNotPresent：**仅当本地镜像不存在时才从目标仓库下载。</p>
<p>​						**Never：**禁止从仓库中下载镜像，即只使用本地镜像。</p>
</blockquote>
<p>​					<strong>默认的标签 为latest：always</strong></p>
<p>​					<strong>Pod的重启策略：</strong></p>
<blockquote>
<p>​					<strong>Always：</strong>（默认情况下使用）但凡Pod对象终止就将其重启；<br>
​					**OnFailure：**仅在Pod对象出现错误时才将其重启；<br>
​					**Never：**从不重启；</p>
</blockquote>
<p>​				<strong>Pod的健康检查:</strong><br>
​					Liveness:   探测失败重启pod<br>
​					Readiness: 探测失败将pod设置为不可用<br>
kubelet：控制pod</p>
<p>DaemonSet :会在每一个节点都会运行，并且只运行一个Pod</p>
]]></content>
  </entry>
  <entry>
    <title>11 k8s持久化存储应用</title>
    <url>/posts/5849.html</url>
    <content><![CDATA[<h1>k8s存储: (持久化)</h1>
<p><strong>docker容器是有生命周期的。</strong></p>
<p><strong>volume</strong></p>
<h2 id="1-emptyDir（空目录）：-类似docker-数据持久化的-docer-manager-volume">**1.emptyDir（空目录）：**类似docker 数据持久化的:docer manager volume</h2>
<p><strong>使用场景:在同一 个Pod里，不同的容器，共享数据卷。</strong></p>
<p><strong>如果容器被删除，数据仍然存在，如果Pod被 删除，数据也会被删除。</strong></p>
<blockquote>
<p><strong>测试编写一个yaml文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">emptyDir.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">producer-consumer</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">producer</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/producer_dir</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">shared-volume</span><br>    <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">"hello k8s"</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/producer_dir/hello;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">30000</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">consumer</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/consumer_dir</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">shared-volume</span><br>    <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span> <span class="hljs-string">/consumer_dir/hello;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">30000</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">shared-volume</span><br>    <span class="hljs-attr">emptyDir:</span> <span class="hljs-string">&#123;&#125;</span><br></code></pre></td></tr></table></figure>
<p><strong>执行一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f emptyDir.yaml </span><br></code></pre></td></tr></table></figure>
<p><strong>查看一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod  </span><br></code></pre></td></tr></table></figure>
<p>![image-20200205095431565](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200205095431565.png)</p>
<p><strong>查看日志</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl logs  producer-consumer producer</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl logs  producer-consumer consumer</span><br></code></pre></td></tr></table></figure>
<p>![image-20200205095543780](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200205095543780.png)</p>
<p><strong>查看挂载的目录</strong></p>
<p><strong>node节点查看容器名，并通过容器名查看挂载的目录</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">[root@node01 shared-<span class="hljs-keyword">volume</span><span class="bash">]<span class="hljs-comment"># docker ps </span></span><br></code></pre></td></tr></table></figure>
<p>![image-20200205102007328](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200205102007328.png)</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>node01 <span class="hljs-keyword">shared</span>-volume]# docker inspect k8s_consumer_producer-consumer_default_9ec83f9e-e58b<span class="hljs-number">-4</span>bf8<span class="hljs-number">-8e16</span><span class="hljs-number">-85</span>b0f83febf9_0<br></code></pre></td></tr></table></figure>
<p>![image-20200205102048470](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200205102048470.png)</p>
<p><strong>进入挂载目录查看一下</strong></p>
<p>![image-20200205102128953](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200205102128953.png)</p>
</blockquote>
<h2 id="2-hostPath-Volume：类似docker-数据持久化的-bind-mount">2.hostPath Volume：类似docker 数据持久化的:bind mount</h2>
<p><strong>如果Pod被删除，数据会保留，相比较emptyDir要好一点。不过一旦host崩溃，hostPath也无法访问 了。</strong></p>
<p><strong>docker或者k8s集群本身的存储会采用hostPath这种方式。</strong></p>
<h2 id="3-Persistent-Volume-PV-持久卷-提前做好的，数据持久化的数据存放目录。">3.Persistent Volume| PV(持久卷) 提前做好的，数据持久化的数据存放目录。</h2>
<h3 id="Psesistent-Volume-Claim-PVC-持久卷使用声明-申请"><strong>Psesistent Volume Claim| PVC( 持久卷使用声明|申请)</strong></h3>
<h3 id="（1）基于nfs服务来做的PV和pvc"><strong>（1）基于nfs服务来做的PV和pvc</strong></h3>
<p><strong>下载nfs所需安装包</strong></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node02</span> ~]<span class="hljs-meta"># yum -y install nfs-utils  rpcbind</span><br></code></pre></td></tr></table></figure>
<p><strong>创建共享目录</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> /nfsdata<br></code></pre></td></tr></table></figure>
<p><strong>创建共享目录的权限</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> /etc/exports<br>/nfsdata *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure>
<p><strong>开启nfs和rpcbind</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> nfs-server.service <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> rpcbind<br></code></pre></td></tr></table></figure>
<p><strong>测试一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# showmount</span> -e<br></code></pre></td></tr></table></figure>
<p>![image-20200205105654925](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200205105654925.png)</p>
<h4 id="1-创建nfs-pv的yaml文件"><strong>&lt;1&gt;创建nfs-pv的yaml文件</strong></h4>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># cd yaml/</span><br>[root@master yaml]<span class="hljs-meta"># vim nfs-pv.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-pv<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span>   <span class="hljs-meta">#pv容量的大小</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">  accessModes:</span>  <span class="hljs-meta">#访问pv的模式</span><br>    - ReadWriteOnce <span class="hljs-meta">#能以读-写mount到单个的节点</span><br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Recycle<br><span class="hljs-symbol">  storageClassName:</span> nfs<br><span class="hljs-symbol">  nfs:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/nfsdata/</span>pv1<br><span class="hljs-symbol">    server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure>
<blockquote>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"> <span class="hljs-attribute">accessModes</span>:(PV支持的访问模式)<br>   - <span class="hljs-attribute">ReadWriteOnce</span>: 能以读-写mount到单个的节点<br>   - <span class="hljs-attribute">ReadWriteMany</span>: 能以读-写mount到多个的节点。<br>- <span class="hljs-attribute">ReadOnlyMnce</span>:  能以只读的方式mount到多个节点。<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">persistentVolumeReclaimPolicy </span>: (PV存储空间的回收策略是什么)<br>true<span class="hljs-attribute">Recycle</span>: 自动清除数据。<br>true<span class="hljs-attribute">Retain</span>: 需要管理员手动回收。<br>trueDelete： 云存储专用。<br></code></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-执行一下"><strong>&lt;2&gt;执行一下</strong></h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-pv.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="3-查看一下">&lt;3&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure>
<p>![image-20200205111307317](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200205111307317.png)</p>
<h4 id="1-创建nfs-pvc的yaml文件"><strong>&lt;1&gt;创建nfs-pvc的yaml文件</strong></h4>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim nfs-pvc.yaml</span><br><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-pvc<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteOnce<br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">  storageClassName:</span> nfs<br></code></pre></td></tr></table></figure>
<h4 id="2-执行一下-2"><strong>&lt;2&gt;执行一下</strong></h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-pvc.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="3-查看一下-2">&lt;3&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pvc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200205113407860](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200205113407860.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure>
<p>![image-20200205113512580](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200205113512580.png)</p>
<h3 id="（2）创建一个pod资源">（2）创建一个pod资源</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pod1</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>      <span class="hljs-attr">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">30000</span><br>      <span class="hljs-attr">volumeMounts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">"/mydata"</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">mydata</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mydata</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">test-pvc</span><br></code></pre></td></tr></table></figure>
<h4 id="1-执行一下">&lt;1&gt; 执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f pod.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="2-查看一下">&lt;2&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207100212328](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207100212328.png)</p>
<p><strong>可以看到现在没有开启成功</strong></p>
<h5 id="查看一下test-pod的信息看看是哪里的问题">查看一下test-pod的信息看看是哪里的问题</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe pod test-pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207123950227](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207123950227.png)</p>
<h5 id="那是因为pv的本地挂载目录没有创建好">那是因为pv的本地挂载目录没有创建好</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># mkdir /nfsdata/pv1/</span><br>//要和nfs-pv.yaml的名字一样<br></code></pre></td></tr></table></figure>
<h5 id="重新创建一下pod">重新创建一下pod</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete -f pod.yaml </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f pod.yaml </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207102822785](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207102822785.png)</p>
<h3 id="（3）test-pod创建hello创建文件并添加内容">（3）test-pod创建hello创建文件并添加内容</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl exec test-pod touch /mydata/hello</span><br></code></pre></td></tr></table></figure>
<p><strong>进入容器</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl exec -it test-pod  /bin/sh</span><br>/ <span class="hljs-comment"># echo 123 &gt; /mydata/hello</span><br>/ <span class="hljs-comment"># exit</span><br></code></pre></td></tr></table></figure>
<p><strong>挂载目录查看一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cat  /nfsdata/pv1/hello</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207104239153](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207104239153.png)</p>
<p><strong>和刚刚的一样</strong></p>
<h3 id="（4）测试回收策略">（4）测试回收策略</h3>
<h4 id="删除pod和pvc，pv">删除pod和pvc，pv</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete pod test-pod </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete pvc test-pvc </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete pv test-pv</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207104454636](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207104454636.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cat  /nfsdata/pv1/hello</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207104520048](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207104520048.png)</p>
<p><em><strong>文件已被回收</strong></em></p>
<h3 id="（5）修改pv的回收策略为手动">（5）修改pv的回收策略为手动</h3>
<h4 id="修改">修改</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nfs-pv.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pv</span><br><span class="hljs-attr">spec :</span><br>  <span class="hljs-attr">capacity :</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Retain</span>   <span class="hljs-comment">#修改</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata/pv1</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-pv.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="创建pod">创建pod</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f pod.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-2">查看一下</h4>
<p>![image-20200207105203009](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207105203009.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe pod test-pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207105248025](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207105248025.png)</p>
<h4 id="创建pvc">创建pvc</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-pvc.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下pod">查看一下pod</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207105402354](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207105402354.png)</p>
<h3 id="（6）test-pod创建hello创建文件并添加内容">（6）test-pod创建hello创建文件并添加内容</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl exec test-pod touch /mydata/k8s</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下挂载目录">查看一下挂载目录</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># ls /nfsdata/pv1/</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207105618318](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207105618318.png)</p>
<h4 id="删除pod和pvc，pv，再次查看挂载目录">删除pod和pvc，pv，再次查看挂载目录</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete pod test-pod </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete pvc test-pvc</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl delete pv test-pv</span><br></code></pre></td></tr></table></figure>
<h4 id="查看挂载目录">查看挂载目录</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># ls /nfsdata/pv1/</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207105757641](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207105757641.png)</p>
<p><em><strong>内容还在</strong></em></p>
<h2 id="4-mysql对数据持久化的应用">4.mysql对数据持久化的应用</h2>
<p><strong>最小化安装系统需要</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> mariadb<br></code></pre></td></tr></table></figure>
<h2 id="（1）通过之前的yaml文件，创建pv和pvc">（1）通过之前的yaml文件，创建pv和pvc</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f  nfs-pv.yaml </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f  nfs-pvc.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-3">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207110132199](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207110132199.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pvc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207110140002](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207110140002.png)</p>
<h2 id="（2）编写一个mysql的yaml文件">（2）编写一个mysql的yaml文件</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">mysql.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span>    <span class="hljs-comment">#支持等值的标签</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.6</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-number">123.</span><span class="hljs-string">com</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-storage</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/mysql</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-storage</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">test-pvc</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-2">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f mysql.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-4">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207110741833](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207110741833.png)</p>
<h2 id="（3）进入mysql容器">（3）进入mysql容器</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl exec -it test-mysql-569f8df4db-rkpwm  -- mysql -u root -p123.com</span><br></code></pre></td></tr></table></figure>
<h3 id="创建数据库">创建数据库</h3>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> yun33;<br></code></pre></td></tr></table></figure>
<h3 id="切换数据库">切换数据库</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">mysql&gt; <span class="hljs-keyword">use</span> <span class="hljs-title">yun33</span>;<br></code></pre></td></tr></table></figure>
<h3 id="创建表">创建表</h3>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams">mysql&gt; create <span class="hljs-keyword">table</span> my_id( id <span class="hljs-comment">int(4))</span>；<br></code></pre></td></tr></table></figure>
<h3 id="在表中插入数据">在表中插入数据</h3>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">insert</span> my_id <span class="hljs-keyword">values</span>(<span class="hljs-number">9527</span>);<br></code></pre></td></tr></table></figure>
<h3 id="查看表">查看表</h3>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> my_id;<br></code></pre></td></tr></table></figure>
<p>![image-20200207113808540](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207113808540.png)</p>
<h2 id="（4）查看本地的挂载目录">（4）查看本地的挂载目录</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># ls /nfsdata/pv1/</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207113909796](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207113909796.png)</p>
<h3 id="查看一下pod-2">查看一下pod</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -o wide -w</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207114050117](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207114050117.png)</p>
<h3 id="挂起node01">挂起node01</h3>
<p>![image-20200207114607518](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207114607518.png)</p>
<h2 id="（5）查看node02上面数据是否和刚才一样（验证数据的一致性）">（5）查看node02上面数据是否和刚才一样（验证数据的一致性）</h2>
<h3 id="进入数据库">进入数据库</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment">#  kubectl exec -it test-mysql-569f8df4db-nsdnz  -- mysql -u root -p123.com</span><br></code></pre></td></tr></table></figure>
<h3 id="查看数据库">查看数据库</h3>
<figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">mysql&gt; show databases<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>
<p>![image-20200207115253123](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207115253123.png)</p>
<h3 id="查看表-2">查看表</h3>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></table></figure>
<p>![image-20200207115352727](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207115352727.png)</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> my_id;<br></code></pre></td></tr></table></figure>
<p>![image-20200207113808540](G:\四期\虚拟化\kubernetes\k8s文档\11 k8s的存储.assets\image-20200207113808540.png)</p>
<p><em><strong>可以看到数据还在</strong></em></p>
<h2 id="5-总结">5. 总结</h2>
<h4 id="PV的访问控制类型"><strong>PV的访问控制类型</strong></h4>
<p><strong>accessModes:(PV支持的访问模式)</strong></p>
<ul>
<li><strong>ReadWriteOnce: 能以读-写mount到单个的节点</strong></li>
<li><strong>ReadWriteMany: 能以读-写mount到多个的节点。</strong></li>
<li><strong>ReadOnlyOnce: 能以只读的方式mount到单个节点。</strong></li>
</ul>
<h4 id="PV的空间回收策略"><strong>PV的空间回收策略</strong></h4>
<p><strong>persistentVolumeReclaimPolicy : (PV存储空间的回收策略是什么)</strong></p>
<p>​    <strong>Recycle: 自动清除数据。</strong></p>
<p>​    <strong>Retain: 需要管理员手动回收。</strong></p>
<p>​    <strong>Delete： 云存储专用。</strong></p>
<h4 id="PV和PVC相互关联"><strong>PV和PVC相互关联</strong></h4>
<p><strong>是通过accessModes和storageClassName模块关联的</strong></p>
<h4 id="Pod不断的重启">Pod不断的重启:</h4>
<p><strong>1、swap,没有关闭，导致集群运行不正常。</strong><br>
<strong>2、内存不足，运行服务也会重后。</strong></p>
<p>kubectl describe<br>
kubectl logs<br>
/var/ log/messages<br>
查看该节点的kubelet的日志。</p>
]]></content>
  </entry>
  <entry>
    <title>12 k8s的存储类</title>
    <url>/posts/sadd.html</url>
    <content><![CDATA[<h4 id="k8s有很多的服务，很多的资源对象。">k8s有很多的服务，很多的资源对象。</h4>
<p><strong>如果要去创建服务，做数据持久化，需要预先知道可用<code>PV</code>有哪些?</strong></p>
<p><strong>如果为了这个服务去提前创建<code>PV</code>，那么我们还需要知道，这个服务，大概需要多大的空间?</strong></p>
<h1>一，Storage Class（存储类）</h1>
<p><em><strong>作用：它可以动态的自动的创建所需要的PV</strong></em></p>
<p><strong>Provisioner（供给方，提供者）：及提供了存储资源的存储系统。k8s内建有多重供给方，这些供给方的名字都以“<a href="http://kubernetes.io" target="_blank" rel="noopener">kubernetes.io</a>”为前缀。并且还可以自定义。</strong></p>
<p><strong>Parameters（参数）：存储类使用参数描述要关联到的存储卷，注意不同的供给方参数也不同。</strong></p>
<p><strong>ReclaimPlicy: PV的回收策略，可用值有Delete(默认)和Retain</strong></p>
<h3 id="（1）确定基于NFS服务来做的SC。NFS开启">（1）确定基于NFS服务来做的SC。NFS开启</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># showmount -e</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210102349600](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210102349600.png)</p>
<h3 id="（2）需要RBAC权限。">（2）需要RBAC权限。</h3>
<p><em><strong>RBAC：rbac是k8s的API的安全策略，是基于用户的访问权限的控制。规定了谁，可以有什么样的权限。</strong></em></p>
<p><strong>为了给SC资源操作k8s集群的权限。</strong></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim rbac-rolebind.yaml</span><br><span class="hljs-symbol">kind:</span> Namespace<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> bdqn-test<br>---<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner<br><span class="hljs-symbol">  namespace:</span> bdqn-test<br>---<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  namespace:</span> bdqn-test<br><span class="hljs-symbol">rules:</span><br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumes"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"delete"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumeclaims"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"storage.k8s.io"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"storageclasses"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"events"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"update"</span>, <span class="hljs-string">"patch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"services"</span>, <span class="hljs-string">"endpoints"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>,<span class="hljs-string">"create"</span>,<span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>,<span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"extensions"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"podsecuritypolicies"</span>]<br><span class="hljs-symbol">      resourceNames:</span> [<span class="hljs-string">"nfs-provisioner"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"use"</span>]<br>---<br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> run-nfs-provisioner<br><span class="hljs-symbol">subjects:</span><br>  - kind: ServiceAccount<br><span class="hljs-symbol">    name:</span> nfs-provisioner<br><span class="hljs-symbol">    namespace:</span> bdqn-test<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure>
<p><strong>运行一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f rbac-rolebind.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（3）nfs-deployment">（3）nfs-deployment</h3>
<p><em><strong>作用：其实它是一个NFS客户端。但它通过K8S的内置的NFS驱动挂载远端的NFS服务器到本地目录；然后将自身作为storage provider，关联storage class。</strong></em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nfs-deployment.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">nfs-provisioner</span>    <span class="hljs-comment">#指定账户</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span>  <span class="hljs-string">/persistentvolumes</span>   <span class="hljs-comment">#指定容器内的挂载目录</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span>            <span class="hljs-comment">#这是这个容器内置的变量</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">bdqn-test</span>                  <span class="hljs-comment">#这是上面变量的值（名字）</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span>                  <span class="hljs-comment">#内置变量，用于指定nfs服务的IP</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span>                    <span class="hljs-comment">#内置变量，指定的是nfs共享的目录</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/nfsdata</span><br>      <span class="hljs-attr">volumes:</span>                                  <span class="hljs-comment">#这下面是指定上面挂载到容器内的nfs的路径及IP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata</span><br></code></pre></td></tr></table></figure>
<p><strong>执行一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-deployment.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（4）创建storageclass">（4）创建storageclass</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim test-storageclass.yaml</span><br><br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> stateful-nfs<br><span class="hljs-symbol">  namespace:</span> bdqn-test<br><span class="hljs-symbol">provisioner:</span> bdqn-test  <span class="hljs-meta">#这里要和第三个nfs-client-provisioner的env环境变量中的value值对应。</span><br><span class="hljs-symbol">reclaimPolicy:</span> Retain   <span class="hljs-meta">#回收策略为：retain，还有一个默认的值为“default”</span><br></code></pre></td></tr></table></figure>
<p><strong>执行一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f test-storageclass.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（5）创建PVC">（5）创建PVC</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim test-pvc.yaml</span><br><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-claim<br><span class="hljs-symbol">  namespace:</span> bdqn-test<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  storageClassName:</span> stateful-nfs   <span class="hljs-meta">#定义存储类的名字，要和SC的名字对应</span><br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteMany         <span class="hljs-meta">#访问模式为RWM</span><br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">500</span>Mi<br></code></pre></td></tr></table></figure>
<p><strong>执行一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f test-pvc.yaml</span><br></code></pre></td></tr></table></figure>
<p><strong>查看一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pvc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210221418144](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210221418144.png)</p>
<h3 id="（6）创建一个Pod">（6）创建一个Pod</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">test-pod.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">volumeMounts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-pvc</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/test</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-pvc</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">test-claim</span>  <span class="hljs-comment">#这的名字要和PVC的名字一致</span><br></code></pre></td></tr></table></figure>
<p><strong>执行一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f  test-pod.yaml</span><br></code></pre></td></tr></table></figure>
<p><strong>查看一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -n bdqn-test</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210111008028](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210111008028.png)</p>
<h3 id="（7）容器中添加内容，并查看挂载目录">（7）容器中添加内容，并查看挂载目录</h3>
<p><strong>进入容器修改页面内容</strong></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">[root@master yaml]# kubectl exec -it <span class="hljs-keyword">test</span>-pod -<span class="hljs-keyword">n</span> bdqn-<span class="hljs-keyword">test</span> /bin/<span class="hljs-keyword">sh</span><br>/ # <span class="hljs-keyword">cd</span> <span class="hljs-keyword">test</span>/<br>/<span class="hljs-keyword">test</span> # touch <span class="hljs-keyword">test</span>-<span class="hljs-keyword">file</span><br>/<span class="hljs-keyword">test</span> # echo 123456 &gt; <span class="hljs-keyword">test</span>-<span class="hljs-keyword">file</span> <br>/<span class="hljs-keyword">test</span> # <span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>-<span class="hljs-keyword">file</span> <br>123456<br></code></pre></td></tr></table></figure>
<p><strong>查看挂载目录</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master yaml]# ls /nfsdata/<br>bdqn-test-test-claim-pvc<span class="hljs-number">-79</span>ddfcf1<span class="hljs-number">-65</span>ae<span class="hljs-number">-455f</span><span class="hljs-number">-9e03</span><span class="hljs-number">-5</span>bcfe6c6ce15<br>web1<br>web2<br>[<span class="hljs-symbol">root@</span>master yaml]# cat /nfsdata/bdqn-test-test-claim-pvc<span class="hljs-number">-79</span>ddfcf1<span class="hljs-number">-65</span>ae<span class="hljs-number">-455f</span><span class="hljs-number">-9e03</span><span class="hljs-number">-5</span>bcfe6c6ce15/test-file <br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure>
<h1>二，如果，K8S集群中， 有很多类似的PV, PVC在去向PV申请空间的时候，不仅会考虑名称以及访问控制模式，还会考虑你申请空间的大小，会分配给你最合适大小的PV。</h1>
<h3 id="运行一个web服务，采用Deployment资源，基于nginx镜像，replicas为3个。数据持久化目录为nginx服务的主访问目录：-usr-share-nginx-html"><em>运行一个web服务，采用Deployment资源，基于nginx镜像，replicas为3个。数据持久化目录为nginx服务的主访问目录：/usr/share/nginx/html</em></h3>
<p><strong>创建一个PVC,与上述资源进行关联。</strong></p>
<h4 id="1-基于nfs服务来做的PV和pvc">1. 基于nfs服务来做的PV和pvc</h4>
<p><strong>下载nfs所需安装包</strong></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node02</span> ~]<span class="hljs-meta"># yum -y install nfs-utils  rpcbind</span><br></code></pre></td></tr></table></figure>
<p><strong>创建共享目录</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> /nfsdata<br></code></pre></td></tr></table></figure>
<p><strong>创建共享目录的权限</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> /etc/exports<br>/nfsdata *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure>
<p><strong>开启nfs和rpcbind</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> nfs-server.service <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> rpcbind<br></code></pre></td></tr></table></figure>
<p><strong>测试一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# showmount</span> -e<br></code></pre></td></tr></table></figure>
<p>![image-20200205105654925](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200205105654925.png)</p>
<h4 id="2-先创建两个PV-web-pV1-1G-web-pv2-2G">2.先创建两个PV, web- pV1(1G) ,web-pv2 (2G)</h4>
<p><strong>web1</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">web.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web-pv</span><br><span class="hljs-attr">spec :</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata/web1</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure>
<p><strong>web2</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">web2.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web-pv2</span><br><span class="hljs-attr">spec :</span><br>  <span class="hljs-attr">capacity :</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata/web2</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure>
<h4 id="3-创建所需文件夹">3.创建所需文件夹</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># mkdir /nfsdata/web1</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># mkdir /nfsdata/web2</span><br></code></pre></td></tr></table></figure>
<h4 id="4-执行一下web和web2">4.执行一下web和web2</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f web.yaml </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f web2.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="5-查看一下">5.查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210094332726](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210094332726.png)</p>
<h4 id="6-创建web的pvc的yaml文件">6.创建web的pvc的yaml文件</h4>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim web-pvc.yaml </span><br><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> web-pvc<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  accessModes:</span><br>  - ReadWriteOnce<br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">  storageClassName:</span> nfs<br></code></pre></td></tr></table></figure>
<p>​					执行一下</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f web-pvc.yaml</span><br></code></pre></td></tr></table></figure>
<p>​					查看一下</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pvc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210094701343](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210094701343.png)</p>
<p><strong>系统会自动给pvc一个相近内存的pv，所以选择了1G的那个</strong></p>
<h4 id="7-创建pod的yaml文件">7.创建pod的yaml文件</h4>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim web-pod.yaml</span><br><span class="hljs-symbol">apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> web-pod<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br><span class="hljs-symbol">      app:</span> nginx<br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> nginx<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - image: nginx<br><span class="hljs-symbol">        name:</span> nginx<br><span class="hljs-symbol">        volumeMounts:</span><br>        - name: web-test<br><span class="hljs-symbol">          mountPath:</span> <span class="hljs-meta-keyword">/usr/</span>share<span class="hljs-meta-keyword">/nginx/</span>html<br><span class="hljs-symbol">      volumes:</span><br>      - name: web-test<br><span class="hljs-symbol">        persistentVolumeClaim:</span><br><span class="hljs-symbol">          claimName:</span> web-pvc<br></code></pre></td></tr></table></figure>
<h5 id="执行一下">执行一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f web-pod.yaml</span><br></code></pre></td></tr></table></figure>
<h5 id="查看一下">查看一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210125236332](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210125236332.png)</p>
<h4 id="8-访问一下nginx的网页">8. 访问一下nginx的网页</h4>
<h5 id="查看一下nginx的ip">查看一下nginx的ip</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210134937483](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210134937483.png)</p>
<h5 id="进入容器设置网页内容">进入容器设置网页内容</h5>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">root@master yaml]<span class="hljs-comment"># kubectl exec -it web-pod-8686d9c594-qxhr9 /bin/bash</span><br>root@web-pod-<span class="hljs-number">8686</span>d9c594-qxhr9:<span class="hljs-regexp">/# cd /u</span>sr<span class="hljs-regexp">/share/</span>nginx<span class="hljs-regexp">/html/</span><br>root@web-pod-<span class="hljs-number">8686</span>d9c594-qxhr9:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<span class="hljs-comment"># ls</span><br>root@web-pod-<span class="hljs-number">8686</span>d9c594-qxhr9:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<span class="hljs-comment"># echo 123456 &gt; index.html</span><br>root@web-pod-<span class="hljs-number">8686</span>d9c594-qxhr9:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<span class="hljs-comment"># exit</span><br></code></pre></td></tr></table></figure>
<h5 id="访问一下">访问一下</h5>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master yaml]# curl <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.17</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210135153791](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210135153791.png)</p>
<h1>三，如果两个PV，大小一样，名称一样，访问控制模式不一样，PVC会关联哪一个? (验证PV和PVC 关联的时候，访问模式必须一样)</h1>
<h3 id="两个PV，大小一样，名称一样，访问控制模式不一样">两个PV，大小一样，名称一样，访问控制模式不一样</h3>
<h4 id="1-创建两个pv">&lt;1&gt;创建两个pv</h4>
<h5 id="web1">web1</h5>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">web1.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web-pv</span><br><span class="hljs-attr">spec :</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span>  <span class="hljs-comment">#能以读-写mount到单个的节点</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata/web1</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure>
<h5 id="web2">web2</h5>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">web2.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web-pv</span><br><span class="hljs-attr">spec :</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span>        <span class="hljs-comment">#能以读-写mount到多个的节点</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata/web1</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure>
<h5 id="创建所需文件">创建所需文件</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># mkdir /nfsdata/web1</span><br></code></pre></td></tr></table></figure>
<h5 id="执行一下-2">执行一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f web1.yaml </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f web2.yaml</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210140007119](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210140007119.png)</p>
<h4 id="2-创建pvc">&lt;2&gt;创建pvc</h4>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim web-pvc.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> web-pvc<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  accessModes:</span><br>  - ReadWriteMany    <span class="hljs-meta">#能以读-写mount到多个的节点</span><br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">  storageClassName:</span> nfs<br></code></pre></td></tr></table></figure>
<h5 id="执行一下-3">执行一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f web-pvc.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="3-查看一下">&lt;3&gt;查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210140227667](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210140227667.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pvc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210140258049](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210140258049.png)</p>
<p><strong>现在可以看到pv和pvc关联成功，但是为什么只有一个pv呢？（pv挂载的目录要相同）</strong></p>
<p><strong>那是因为当创建了两个相同名字的pv时它并不会认为这是两个不同的pv，而会把他们当成是同一个pv，后创建的pv会刷新前面创建的pv。然后，当创建了pvc，并且pvc的访问模式和后面创建pv的访问模式一样，他们就会关联成功，反之不成功。（当然这些条件下还需要考虑，pv的内存）</strong></p>
<h1>三，小实验</h1>
<h2 id="（1）以自己的名称创建一个名称空间。以下所有资源都在此名称空间之下。">（1）以自己的名称创建一个名称空间。以下所有资源都在此名称空间之下。</h2>
<h3 id="1-编写namespace的yam文件">&lt;1&gt;编写namespace的yam文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim namespace.yaml </span><br><span class="hljs-symbol">kind:</span> Namespace<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> xgp-znb<br></code></pre></td></tr></table></figure>
<h3 id="2-执行一下">&lt;2&gt;执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f namespace.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="3-查看一下-2">&lt;3&gt;查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get ns</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210141843553](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210141843553.png)</p>
<h2 id="（2）设置rbac权限。">（2）设置rbac权限。</h2>
<p><strong>下载所需镜像</strong></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">docker pull registry.<span class="hljs-keyword">cn</span>-hangzhou.aliyuncs.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">open</span>-ali/nfs-client-provisioner<br></code></pre></td></tr></table></figure>
<h3 id="1-编写rbac的yam文件">&lt;1&gt;编写rbac的yam文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim rbac-rolebind.yaml</span><br><span class="hljs-symbol">kind:</span> Namespace<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> xgp-znb<br>---<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner<br><span class="hljs-symbol">  namespace:</span> xgp-znb<br>---<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  namespace:</span> xgp-znb<br><span class="hljs-symbol">rules:</span><br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumes"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"delete"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumeclaims"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"storage.k8s.io"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"storageclasses"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"events"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"update"</span>, <span class="hljs-string">"patch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"services"</span>, <span class="hljs-string">"endpoints"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>,<span class="hljs-string">"create"</span>,<span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>,<span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"extensions"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"podsecuritypolicies"</span>]<br><span class="hljs-symbol">      resourceNames:</span> [<span class="hljs-string">"nfs-provisioner"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"use"</span>]<br>---<br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> run-nfs-provisioner<br><span class="hljs-symbol">subjects:</span><br>  - kind: ServiceAccount<br><span class="hljs-symbol">    name:</span> nfs-provisioner<br><span class="hljs-symbol">    namespace:</span> xgp-znb<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure>
<h3 id="2-执行一下-2">&lt;2&gt;执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f  rbac-rolebind.yaml</span><br></code></pre></td></tr></table></figure>
<h2 id="（3）创建nfs-deployment-yaml">（3）创建nfs-deployment.yaml</h2>
<h3 id="1-编写deployment的yam文件">&lt;1&gt;编写deployment的yam文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nfs-deployment.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-znb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">nfs-provisioner</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span>  <span class="hljs-string">/persistentvolumes</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">xgp-znb</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/nfsdata</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata</span><br></code></pre></td></tr></table></figure>
<h3 id="2-执行一下-3">&lt;2&gt;执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-deployment.yaml</span><br></code></pre></td></tr></table></figure>
<h2 id="（4）创建storageclass自动创建PV。">（4）创建storageclass自动创建PV。</h2>
<h3 id="1-编写storageclass的yam文件">&lt;1&gt;编写storageclass的yam文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim storageclass.yaml</span><br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-sc<br><span class="hljs-symbol">provisioner:</span> xgp-znb   <span class="hljs-meta">#通过provisioner字段关联到上述Deploy</span><br><span class="hljs-symbol">reclaimPolicy:</span> Retain<br></code></pre></td></tr></table></figure>
<h3 id="2-执行一下-4">&lt;2&gt;执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f storageclass.yaml</span><br></code></pre></td></tr></table></figure>
<h2 id="（5）创建PVC-2">（5）创建PVC</h2>
<h3 id="1-编写PVC的yaml文件">&lt;1&gt;编写PVC的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim pvc.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> test-claim<br><span class="hljs-symbol">  namespace:</span> xgp-znb<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  storageClassName:</span> test-sc<br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteMany<br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">500</span>Mi<br></code></pre></td></tr></table></figure>
<h3 id="2-执行一下-5">&lt;2&gt;执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f pvc.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="3-查看一下-3">&lt;3&gt;查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pvc -n xgp-znb</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210144220121](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210144220121.png)</p>
<h2 id="（6）创建一个Pod-基于nginx运行一个web服务，使用Deployment资源对象，replicas-3-持久化存储目录为默认主目录">（6）创建一个Pod, 基于nginx运行一个web服务，使用Deployment资源对象，replicas=3.持久化存储目录为默认主目录</h2>
<h3 id="1-编写deployment的yam文件-2">&lt;1&gt;编写deployment的yam文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-znb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web-test</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web-test</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">test-claim</span><br></code></pre></td></tr></table></figure>
<h3 id="2-执行一下-6">&lt;2&gt;执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f pvc.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="3-查看一下-4">&lt;3&gt;查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -n xgp-znb</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210211126708](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210211126708.png)</p>
<h2 id="（7）访问nginx页面">（7）访问nginx页面</h2>
<h3 id="修改nginx主页">修改nginx主页</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master yaml]# kubectl exec -it web-pod<span class="hljs-number">-8</span>cd956cc7<span class="hljs-number">-6</span>szjb -n xgp-znb /bin/bash<br><span class="hljs-comment">//进入容器之中</span><br><span class="hljs-symbol">root@</span>web-pod<span class="hljs-number">-8</span>cd956cc7<span class="hljs-number">-6</span>szjb:/# echo  xgp-znb &gt; /usr/share/nginx/html/index.html<br><span class="hljs-comment">//添加自定义内容主机</span><br></code></pre></td></tr></table></figure>
<h3 id="访问一下-2">访问一下</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master yaml]# curl <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.18</span><br></code></pre></td></tr></table></figure>
<p>![image-20200210211901467](G:\四期\虚拟化\kubernetes\k8s文档\12 k8s的存储类.assets\image-20200210211901467.png)</p>
<h1>四，五个可移植性建议</h1>
<ol>
<li><strong>把你的 pvc，和 其它一系列配置放一起， 比如说deployment，configmap</strong></li>
<li><strong>不要把你的pv放在其它配置里， 因为用户可能没有权限创建pv</strong></li>
<li><strong>初始化pvc 模版的时候， 提供一个storageclass</strong></li>
<li><strong>在你的工具软件中，watch那些没有bound的pvc，并呈现给用户</strong></li>
<li><strong>集群启动的时候启用DefaultStorageClass， 但是不要指定某一类特定的class， 因为不同provisioner的class，参数很难一致</strong></li>
</ol>
<h1>五，四个阶段(volumn phase)</h1>
<h4 id="1-在PVC中绑定一个PV，可以根据下面几种条件组合选择"><strong>1. 在PVC中绑定一个PV，可以根据下面几种条件组合选择</strong></h4>
<ul>
<li><strong>Access Modes， 按照访问模式选择pv</strong></li>
<li><strong>Resources， 按照资源属性选择， 比如说请求存储大小为8个G的pv</strong></li>
<li><strong>Selector， 按照pv的label选择</strong></li>
<li><strong>Class， 根据StorageClass的class名称选择, 通过annotation指定了Storage Class的名字, 来绑定特定类型的后端存储</strong></li>
</ul>
<h4 id="2-关于根据class过滤出pv的说明：">2. 关于根据class过滤出pv的说明：</h4>
<blockquote>
<p><strong>所有的 PVC 都可以在不使用 StorageClass 注解的情况下，直接使用某个动态存储。把一个StorageClass 对象标记为 “default” 就可以了。StorageClass 用注解<a href="https://link.zhihu.com/?target=http%3A//storageclass.beta.kubernetes.io/is-default-class">http://storageclass.beta.kubernetes.io/is-default-class</a> 就可以成为缺省存储。有了缺省的 StorageClass，用户创建 PVC 就不用 storage-class 的注解了，1.4 中新加入的DefaultStorageClass 准入控制器会自动把这个标注指向缺省存储类。PVC 指定特定storageClassName，如fast时， 绑定名称为fast的storageClassPVC中指定storageClassName为“”时， 绑定no class的pv（pv中无class annotation， 或者其值为“”）PVC不指定storageClassName时， DefaultStorageClass admission plugin 开启与否（在apiserver启动时可以指定）， 对default class的解析行为是不同的。当DefaultStorageClass admission plugin启用时， 针对没有storageClass annotation的pvc，DefaultStorageClass会分配一个默认的class， 这个默认的class需要用户指定，比如在创建storageclass对象时加入annotation,如 <a href="https://link.zhihu.com/?target=http%3A//storageclass.beta.kubernetes.io/is-default-class%3A">http://storageclass.beta.kubernetes.io/is-default-class:</a> “true” 。如果有多个默认的class， 则pvc会被拒绝创建， 如果用户没有指定默认的class， 则这个DefaultStorageClass admission plugin不会起任何作用。 pvc会找那些no class的pv做绑定。当DefaultStorageClass admission plugin没有启用时， 针对没有storageClass annotation的pvc， 会绑定no class的pv（pv中无class annotation， 或者其值为“”）</strong></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>14 k8s的Secret（密文）和configmap（明文）的使用教程</title>
    <url>/posts/a50d.html</url>
    <content><![CDATA[<h1>一、Secret</h1>
<p><em><strong>Secret :用来保存一些敏感信息，比如数据库的用户名密码或者秘钥。</strong></em></p>
<h2 id="举例-保存数据库的用户名和密码">举例:保存数据库的用户名和密码</h2>
<blockquote>
<p><strong>用户名：</strong>		<strong>root</strong><br>
<strong>密码：</strong>		   <strong><a href="http://123.com" target="_blank" rel="noopener">123.com</a></strong></p>
</blockquote>
<h3 id="1、通过–from-literal（文字的）">1、通过–from-literal（文字的）</h3>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master secret]# kubectl create<span class="hljs-built_in"> secret </span>generic mysecret1 <span class="hljs-attribute">--from-literal</span>=username=root <span class="hljs-attribute">--from-literal</span>=password=123.com<br></code></pre></td></tr></table></figure>
<blockquote>
<p><strong>generic：通用的，一般的加密方式</strong></p>
</blockquote>
<h4 id="查看一下">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl get secrets</span><br></code></pre></td></tr></table></figure>
<p><img src="http://xgp-cunchu.test.upcdn.net/k8s/image-20200214100419966.png" alt></p>
<p><strong>类型是Opaque（不透明的）</strong></p>
<h3 id="2、通过from-file（文件）">2、通过from-file（文件）</h3>
<h4 id="新建两个文件并分别写入用户名和密码">新建两个文件并分别写入用户名和密码</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># echo root &gt; username</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># echo 123.com  &gt; password</span><br></code></pre></td></tr></table></figure>
<h4 id="创建一个secret">创建一个secret</h4>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master secret]#  kubectl create<span class="hljs-built_in"> secret </span>generic mysecret2 <span class="hljs-attribute">--from-file</span>=username <span class="hljs-attribute">--from-file</span>=password<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-2">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl get secrets</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200214103506842.png" alt="image-20200214103506842"></p>
<h3 id="3、通过-from-env-file">3、通过-- from- env-file:</h3>
<h4 id="创建一个文件写入用户名和密码">创建一个文件写入用户名和密码</h4>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@master secret]</span><span class="hljs-comment">#vim env.txt </span><br><span class="hljs-attr">username</span>=root<br><span class="hljs-attr">password</span>=<span class="hljs-number">123</span>.com<br></code></pre></td></tr></table></figure>
<h4 id="创建一个secret-2">创建一个secret</h4>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master secret]# kubectl create<span class="hljs-built_in"> secret </span>generic mysecret3 <span class="hljs-attribute">--from-env-file</span>=env.txt<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-3">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl get secrets</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200214103905956.png" alt="image-20200214103905956"></p>
<h3 id="4、通过yaml配置文件">4、通过yaml配置文件</h3>
<h4 id="（1）把需要保存的数据加密（”base64“的方式）">（1）把需要保存的数据加密（”base64“的方式）</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># echo root | base64</span><br><span class="hljs-attr">cm9vdAo=</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># echo 123.com | base64</span><br><span class="hljs-attr">MTIzLmNvbQo=</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p><strong>解码：</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># echo -n cm9vdAo | base64 --decode </span><br>root<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># echo -n MTIzLmNvbQo | base64 --decode </span><br><span class="hljs-number">123</span>.com<br></code></pre></td></tr></table></figure>
</blockquote>
<h4 id="（2）编写secre4的yaml文件">（2）编写secre4的yaml文件</h4>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master secret]# vim secret4.yaml<br>apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: mysecret4<br>data:<br>  username: cm9vdAo=<br>  password: MTIzLmNvbQo=<br></code></pre></td></tr></table></figure>
<h5 id="执行一下">执行一下</h5>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl apply -f secret4.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="（3）查看一下">（3）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl get secrets</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200214104544899.png" alt="image-20200214104544899"></p>
<h2 id="如果来使用Secret资源">如果来使用Secret资源</h2>
<h3 id="1-以Volume挂载的方式">1. 以Volume挂载的方式</h3>
<h4 id="编写pod的yaml文件"><strong>编写pod的yaml文件</strong></h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">secret]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secret-test</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">"/etc/secret-test"</span>  <span class="hljs-comment">#pod中的路径</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span>                 <span class="hljs-comment">#是否只读</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secret-test</span><br>    <span class="hljs-attr">secret:</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">mysecret1</span><br></code></pre></td></tr></table></figure>
<p><strong>还可以自定义存放数据的文件名</strong></p>
<h4 id="执行一下-2">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl apply -f pod.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="进入容器查看保存的数据">进入容器查看保存的数据</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl exec -it mypod /bin/sh</span><br>/ <span class="hljs-comment"># cd /etc/secret-test/</span><br>/etc/secret-test <span class="hljs-comment"># ls</span><br>pasword   username<br></code></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>secret-test <span class="hljs-comment"># cat username </span><br>root<br><span class="hljs-regexp">/etc/</span>secret-test <span class="hljs-comment"># cat pasword </span><br><span class="hljs-number">123</span>.com<br></code></pre></td></tr></table></figure>
<h4 id="测试是否有只读权限">测试是否有只读权限</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">123.com/etc/secret-test <span class="hljs-comment"># echo admin &gt; username</span><br>/bin/sh: can't <span class="hljs-keyword">create</span> username: <span class="hljs-keyword">Read</span>-<span class="hljs-keyword">only</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure>
<h3 id="1-1-自定义存放数据的文件名的yaml文件">1.1 自定义存放数据的文件名的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span>  <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secret-test</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">"/etc/secret-test"</span>  <span class="hljs-comment">#pod中的路径</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span>                 <span class="hljs-comment">#是否只读</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secret-test</span><br>    <span class="hljs-attr">secret:</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">mysecret1</span><br>      <span class="hljs-attr">items:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">username</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">my-group/my-username</span>   <span class="hljs-comment">#自定义的容器中的目录</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">password</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">my-group/my-password</span>   <span class="hljs-comment">#自定义的容器中的目录</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-3">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f pod.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-4">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl exec -it mypod /bin/sh</span><br>//进入容器查看<br> <span class="hljs-comment"># cat /etc/secret-test/my-group/my-password </span><br><span class="hljs-number">123</span>.com <br> <span class="hljs-comment"># cat /etc/secret-test/my-group/my-username </span><br>root<br></code></pre></td></tr></table></figure>
<h3 id="1-2-如果，现在将secret资源内保存的数据进行更新，请问，使用此数据的应用内，数据是是否也会更新">1.2 如果，现在将secret资源内保存的数据进行更新，请问，使用此数据的应用内，数据是是否也会更新?</h3>
<p><strong>会实时更新(这里引用数据，是以volumes挂 载使用数据的方式)。</strong></p>
<p><strong>更新mysecret1的数据:   password  —&gt;  admin   YWRtaW4K (base64)</strong></p>
<p><strong>可以通过edit 命令，直接修改。</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl edit secrets mysecret1</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200217162834490.png" alt="image-20200217162834490"></p>
<h4 id="查看一下-5">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl exec -it mypod /bin/sh</span><br>//进入容器查看<br> <span class="hljs-comment"># cat /etc/secret-test/my-group/my-password </span><br>admin<br> <span class="hljs-comment"># cat /etc/secret-test/my-group/my-username </span><br>root<br></code></pre></td></tr></table></figure>
<p><em><strong>数据已经成功更新了</strong></em></p>
<h3 id="2、以环境变量的方式">2、以环境变量的方式</h3>
<p><strong>编写pod的yaml文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">secret]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod-env.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mypod2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SECRET_USERNAME</span><br>        <span class="hljs-attr">valueFrom:</span><br>          <span class="hljs-attr">secretKeyRef:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret2</span><br>            <span class="hljs-attr">key:</span> <span class="hljs-string">username</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SECRET_PASSWORD</span><br>        <span class="hljs-attr">valueFrom:</span><br>          <span class="hljs-attr">secretKeyRef:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret2</span><br>            <span class="hljs-attr">key:</span> <span class="hljs-string">password</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-4">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl apply -f pod-env.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-6">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200214111931566.png" alt="image-20200214111931566"></p>
<h4 id="进入容器查看保存的数据-2">进入容器查看保存的数据</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl exec -it mypod2 /bin/sh</span><br>/ <span class="hljs-comment"># echo $SECRET_USERNAME</span><br>root<br>/ <span class="hljs-comment"># echo $SECRET_PASSWORD</span><br><span class="hljs-number">123</span>.com<br></code></pre></td></tr></table></figure>
<h3 id="2-1-更新sevret文件的内容">2.1 更新sevret文件的内容</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl edit secrets mysecret2</span><br>//修改保存文件的内容<br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200217162834490.png" alt="image-20200217162834490"></p>
<h4 id="查看一下-7">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">secret</span>]<span class="hljs-comment"># kubectl exec -it mypod2 /bin/sh</span><br>/ <span class="hljs-comment"># echo $SECRET_USERNAME</span><br>root<br>/ <span class="hljs-comment"># echo $SECRET_PASSWORD</span><br><span class="hljs-number">123</span>.com<br></code></pre></td></tr></table></figure>
<p><em><strong>等待了一定时间后，可以看到这个数据并没有没有改变</strong></em></p>
<h2 id="总结">总结</h2>
<p><strong>如果引用secret数据的应用， 要求会随着secret资源对象内保存的数据的更新，而实时更新，那么应该使用volumes挂载的方式引用资源因为用环境变量的方式引用不会实时更新数据。</strong></p>
<h1>二、ConfigMap</h1>
<p><strong>和Secret资源类似，不同之处在于，secret 资源保存的是敏感信息，而Configmap保存的是以明文方式存放的数据。</strong></p>
<blockquote>
<p><strong>username：adam</strong></p>
<p><strong>age：18</strong></p>
</blockquote>
<h2 id="创建的四种方式">创建的四种方式</h2>
<h3 id="1、通过-from-literal-文字的">1、通过-- from- literal(文字的):</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master yaml]# kubectl create configmap myconfigmap1 --<span class="hljs-keyword">from</span>-literal=username=adam --<span class="hljs-keyword">from</span>-literal=age=<span class="hljs-number">18</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-8">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get cm</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200217103048235.png" alt="image-20200217103048235"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe cm</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200217103123130.png" alt="image-20200217103123130"></p>
<h3 id="2、通过–from-file-文件">2、通过–from-file (文件) :</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># echo adam &gt; username</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># echo 18 &gt; age</span><br></code></pre></td></tr></table></figure>
<h4 id="创建">创建</h4>
<figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas">[root@master yaml]# kubectl <span class="hljs-meta">create</span> configmap myconfigmap2 --<span class="hljs-meta">from</span>-<span class="hljs-meta">file</span>=username --<span class="hljs-meta">from</span>-<span class="hljs-meta">file</span>=age<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-9">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe cm</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200217103509006.png" alt="image-20200217103509006"></p>
<h3 id="3、通过–from-env-file">3、通过–from- env-file:</h3>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@master yaml]</span><span class="hljs-comment"># vim env.txt </span><br><span class="hljs-attr">username</span>=adam<br><span class="hljs-attr">age</span>=<span class="hljs-number">18</span><br></code></pre></td></tr></table></figure>
<h4 id="创建-2">创建</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl create configmap  myconfigmap3 --from-env-file=env.txt</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-10">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl describe cm</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200217165039190.png" alt="image-20200217165039190"></p>
<h3 id="4、通过yaml配置文件-2">4、通过yaml配置文件:</h3>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">[root@master</span> <span class="hljs-string">yaml]# vim configmap.yaml</span><br><span class="hljs-attr">apiVersion</span>: <span class="hljs-string">v1</span><br><span class="hljs-attr">kind</span>: <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">myconfigmap4</span><br><span class="hljs-attr">data</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">username</span>: <span class="hljs-string">'adam'</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-string">'18'</span><br></code></pre></td></tr></table></figure>
<h4 id="创建-3">创建</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f configmap.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-11">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe cm</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200217104428521.png" alt="image-20200217104428521"></p>
<h2 id="如何来使用configmap资源">如何来使用configmap资源</h2>
<h3 id="1-以Volume挂载的方式-2">1. 以Volume挂载的方式</h3>
<figure class="highlight smali"><table><tr><td class="code"><pre><code class="hljs smali">[root@master yaml]<span class="hljs-comment"># vim v-pod.yaml </span><br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: pod1<br>spec:<br>  containers:<br>  - name: mypod<br>    image: busybox<br>    args:<br>      - /bin/sh<br>      - -c<br>      - sleep 300000<br>    volumeMounts:<br>    - name: cmp-test<br>      mountPath: <span class="hljs-string">"/etc/cmp-test"</span><br>      readOnly: true<br>  volumes:<br>  - name: cmp-test<br>    configMap:<br>      name: myconfigmap1<br></code></pre></td></tr></table></figure>
<h4 id="执行一下-5">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl apply -f v-pod.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-12">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl exec -it pod1 /bin/sh</span><br>//进入容器查看一下<br> <span class="hljs-comment"># cat /etc/cmp-test/age </span><br><span class="hljs-number">18</span>/ <br> <span class="hljs-comment"># cat /etc/cmp-test/username </span><br>adam/<br></code></pre></td></tr></table></figure>
<h3 id="1-1-自定义存放数据的文件名的yaml文件-2">1.1 自定义存放数据的文件名的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">configmap]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">v-pod2.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cmp-test</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">"/etc/cmp-test"</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cmp-test</span><br>    <span class="hljs-attr">configMap:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">myconfigmap1</span><br>      <span class="hljs-attr">items:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">username</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">my-group/my-username</span>   <span class="hljs-comment">#自定义的容器中的目录</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">age</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">my-group/my-age</span>   <span class="hljs-comment">#自定义的容器中的目录</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-6">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl apply -f v-pod2.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-13">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl exec -it pod3 /bin/sh</span><br>//进入容器查看<br><span class="hljs-comment"># cat /etc/cmp-test/my-group/my-username </span><br>adam/ <br><span class="hljs-comment"># cat /etc/cmp-test/my-group/my-age </span><br><span class="hljs-number">18</span>/<br></code></pre></td></tr></table></figure>
<h3 id="1-2-如果，现在将secret资源内保存的数据进行更新，请问，使用此数据的应用内，数据是是否也会更新-2">1.2 如果，现在将secret资源内保存的数据进行更新，请问，使用此数据的应用内，数据是是否也会更新?</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl edit cm myconfigmap1</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200217172107999.png" alt="image-20200217172107999"></p>
<h4 id="查看一下-14">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl exec -it pod3 /bin/sh</span><br>//进入容器查看<br><span class="hljs-comment"># cat /etc/cmp-test/my-group/my-username </span><br>adam/ <br><span class="hljs-comment"># cat /etc/cmp-test/my-group/my-age </span><br><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>
<p><em><strong>可以看到更新成功</strong></em></p>
<h3 id="2-以环境变量的方式">2.以环境变量的方式</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">configmap]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">e-pod.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CONFIGMAP_NAME</span><br>        <span class="hljs-attr">valueFrom:</span><br>          <span class="hljs-attr">configMapKeyRef:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">myconfigmap2</span><br>            <span class="hljs-attr">key:</span> <span class="hljs-string">username</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CONFIGMAP_AGE</span><br>        <span class="hljs-attr">valueFrom:</span><br>          <span class="hljs-attr">configMapKeyRef:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">myconfigmap2</span><br>            <span class="hljs-attr">key:</span> <span class="hljs-string">age</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-7">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl apply -f e-pod.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-15">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl exec -it pod2 /bin/sh</span><br>//进入容器查看一下<br> <span class="hljs-comment"># echo $CONFIGMAP_NAME</span><br>adam<br> <span class="hljs-comment"># echo $CONFIGMAP_AGE</span><br><span class="hljs-number">18</span><br></code></pre></td></tr></table></figure>
<h3 id="2-1-更新sevret文件的内容-2">2.1 更新sevret文件的内容</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl edit cm myconfigmap2</span><br> //修改保存文件的内容<br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C14.assets%5Cimage-20200217172701793.png" alt="image-20200217172701793"></p>
<h4 id="查看一下-16">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">configmap</span>]<span class="hljs-comment"># kubectl exec -it pod2 /bin/sh</span><br>//进入容器查看一下<br> <span class="hljs-comment"># echo $CONFIGMAP_NAME</span><br>adam<br> <span class="hljs-comment"># echo $CONFIGMAP_AGE</span><br><span class="hljs-number">18</span><br></code></pre></td></tr></table></figure>
<p><em><strong>等待了一定时间后，可以看到这个数据并没有没有改变</strong></em></p>
<p><strong>可以看出这个configmap和secret的更新效果基本没有区别。</strong></p>
<h2 id="总结configmap、与secret资源有什么相同和不同之处。"><strong>总结configmap、与secret资源有什么相同和不同之处。</strong></h2>
<h3 id="Secret-与-ConfigMap-对比">Secret 与 ConfigMap 对比</h3>
<p><strong>相同点：</strong></p>
<blockquote>
<p><strong>key/value的形式</strong></p>
<p><strong>属于某个特定的namespace</strong></p>
<p><strong>可以导出到环境变量</strong></p>
<p><strong>可以通过目录/文件形式挂载</strong></p>
<p><strong>通过 volume 挂载的配置信息均可热更新</strong></p>
</blockquote>
<p><strong>不同点：</strong></p>
<blockquote>
<p><strong>Secret 可以被 ServerAccount 关联</strong></p>
<p><strong>Secret 可以存储 docker register 的鉴权信息，用在 ImagePullSecret 参数中，用于拉取私有仓库的镜像</strong></p>
<p><strong>Secret 支持 Base64 加密</strong></p>
<p><strong>Secret 分为 <a href="http://kubernetes.io/service-account-token%E3%80%81kubernetes.io/dockerconfigjson%E3%80%81Opaque" target="_blank" rel="noopener">kubernetes.io/service-account-token、kubernetes.io/dockerconfigjson、Opaque</a> 三种类型，而 Configmap 不区分类型</strong></p>
</blockquote>
<h2 id="总结以volumes挂载、和环境变量方式引用资源的相同和不同之处。">总结以volumes挂载、和环境变量方式引用资源的相同和不同之处。</h2>
<p><strong>volumes挂载(可根据更改数据更新)：引用自己创建的secret（密文）或configmap（明文），挂载到容器中指定的目录下。查看保存的文件时，根据自己所填路径和secret或configmap创建的文件，进行查看。</strong></p>
<p><strong>环境变量(不因更改数据更新)：引用自己创建的secret（密文）或configmap（明文），挂载到容器中指定的目录下。查看保存的文件时，根据自己环境变量，进行查看。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>13 k8s的StateFulSet</title>
    <url>/posts/asdf.html</url>
    <content><![CDATA[<h1>StatefulSet介绍</h1>
<h3 id="遇到的问题：">遇到的问题：</h3>
<p><strong>使用Deployment创建的Pod是无状态的，当挂在Volume之后，如果该Pod挂了，Replication Controller会再run一个来保证可用性，但是由于是无状态的，Pod挂了的时候与之前的Volume的关系就已经断开了，新起来的Pod无法找到之前的Pod。但是对于用户而言，他们对底层的Pod挂了没有感知，但是当Pod挂了之后就无法再使用之前挂载的磁盘了。</strong></p>
<h4 id="StatefulSet-是一种给Pod提供唯一标志的控制器，它可以保证部署和扩展的顺序。"><strong>StatefulSet: 是一种给Pod提供唯一标志的控制器，它可以保证部署和扩展的顺序。</strong></h4>
<blockquote>
<p><strong>Pod一致性：包含次序（启动、停止次序）、网络一致性。此一致性与Pod相关，与被调度到哪个node节点无关。</strong></p>
<p><strong>稳定的次序：对于N个副本的StatefulSet，每个Pod都在[0，N)的范围内分配一个数字序号，且是唯一的。</strong></p>
<p><strong>稳定的网络：Pod的hostname模式为(statefulset名称)- (序号)。</strong></p>
<p><strong>稳定的存储：通过VolumeClaimTemplate为每个Pod创建一个PV。删除、减少副本，不会删除相关的卷。</strong></p>
</blockquote>
<h4 id="1-RC、-RS、Deployment、DS。-无状态服务"><strong>(1) RC、 RS、Deployment、DS。-----&gt; 无状态服务</strong></h4>
<blockquote>
<p><strong>template(模板):根据模板 创建出来的Pod,它们J的状态都是一模一样的(除了名称，IP, 域名之外)</strong></p>
<p><strong>可以理解为:任何一个Pod, 都可以被删除，然后用新生成的Pod进行替换。</strong></p>
</blockquote>
<h4 id="2-有状态的服务-需要记录前一-次或者多次通信中的相关事件，以作为一下通信的分类标准。比如-mysql等数据库服务。-Pod的名称，不能随意变化。数据持久化的目录也是不一样，每一个Pod都有自己独有的数据持久化存储目录。"><strong>(2) 有状态的服务:  需要记录前一 次或者多次通信中的相关事件，以作为一下通信的分类标准。比如: mysql等数据库服务。(Pod的名称，不能随意变化。数据持久化的目录也是不一样，每一个Pod都有自己独有的数据持久化存储目录。)</strong></h4>
<blockquote>
<p><strong>mysql:主从关系。</strong></p>
</blockquote>
<p><strong>如果把之前无状态的服务比喻为牛、羊等牲畜，因为，这些到一定时候就可以出售。那么，有状态就比喻为:宠物，而宠物不像牲畜一样到达一定时候出售，人们往往会照顾宠物的一生。</strong></p>
<h4 id="3-每一个Pod-对应一个PVC-每一个PVC对应一个PV。"><strong>(3) 每一个Pod----&gt;对应一个PVC----&gt;每一个PVC对应一个PV。</strong></h4>
<blockquote>
<p><strong>storageclass:自动创建PV</strong></p>
<p><strong>需要解决:自动创建PVC。</strong></p>
</blockquote>
<h2 id="1，例子">1，例子</h2>
<h3 id="（1）创建一个statefulset的yaml文件">（1）创建一个statefulset的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">statefulset.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">headless-svc</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">headless-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">headless-pod</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span>     <span class="hljs-comment">#没有同一的ip</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">statefulset-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">headless-svc</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">headless-pod</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">headless-pod</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myhttpd</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<p><strong>Deployment : Deploy+RS+随机字符串(Pod的名称。)没有顺序的，可</strong><br>
<strong>以没随意替代的。</strong></p>
<blockquote>
<p><strong>1、headless-svc :无头服务。因为没有IP地址，所以它不具备负载均衡的功能了。因为statefulset要求Pod的名称是有顺序的，每一个Pod都不能被随意取代，也就是即使Pod重建之后，名称依然不变。为后端的每一个Pod去命名。</strong></p>
<p><strong>2、statefulSet:定义具体的应用</strong></p>
<p><strong>3、volumeClaimT emplates:自动创建PVC，为后端的Pod提供专有的存储。</strong></p>
</blockquote>
<h3 id="执行一下">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f statefulset.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212100101082](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212100101082.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br>//可看到这些pod是有顺序的<br></code></pre></td></tr></table></figure>
<p>![image-20200212102001181](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212102001181.png)</p>
<h1>一、创建StorageClass资源对象。</h1>
<h2 id="1、基于NFS服务，创建NFS服务。">1、基于NFS服务，创建NFS服务。</h2>
<p><strong>下载nfs所需安装包</strong></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node02</span> ~]<span class="hljs-meta"># yum -y install nfs-utils  rpcbind</span><br></code></pre></td></tr></table></figure>
<p><strong>创建共享目录</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> /nfsdata<br></code></pre></td></tr></table></figure>
<p><strong>创建共享目录的权限</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> /etc/exports<br>/nfsdata *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure>
<p><strong>开启nfs和rpcbind</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> nfs-server.service <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> rpcbind<br></code></pre></td></tr></table></figure>
<p><strong>测试一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# showmount</span> -e<br></code></pre></td></tr></table></figure>
<p>![image-20200205105654925](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200205105654925.png)</p>
<h2 id="2、创建rbac权限。">2、创建rbac权限。</h2>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim rbac-rolebind.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner<br><span class="hljs-symbol">  namespace:</span> default<br>---<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">rules:</span><br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumes"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"delete"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumeclaims"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"storage.k8s.io"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"storageclasses"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"events"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"update"</span>, <span class="hljs-string">"patch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"services"</span>, <span class="hljs-string">"endpoints"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>,<span class="hljs-string">"create"</span>,<span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>,<span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"extensions"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"podsecuritypolicies"</span>]<br><span class="hljs-symbol">      resourceNames:</span> [<span class="hljs-string">"nfs-provisioner"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"use"</span>]<br>---<br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> run-nfs-provisioner<br><span class="hljs-symbol">subjects:</span><br>  - kind: ServiceAccount<br><span class="hljs-symbol">    name:</span> nfs-provisioner<br><span class="hljs-symbol">    namespace:</span> default        <span class="hljs-meta">#必写字段</span><br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure>
<h3 id="执行一下-2">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f rbac-rolebind.yaml</span><br></code></pre></td></tr></table></figure>
<h2 id="3、创建Deployment资源对象，用Pod代替-真正的NFS服务。">3、创建Deployment资源对象，用Pod代替 真正的NFS服务。</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nfs-deployment.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">nfs-provisioner</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span>  <span class="hljs-string">/persistentvolumes</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">bdqn</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/nfsdata</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-3">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-deployment.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-2">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212104037272](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212104037272.png)</p>
<h2 id="4、创建storageclass的yaml文件">4、创建storageclass的yaml文件</h2>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim test-storageclass.yaml </span><br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> stateful-nfs<br><span class="hljs-symbol">provisioner:</span> bdqn  <span class="hljs-meta">#通过provisioner字段关联到上述Deploy</span><br><span class="hljs-symbol">reclaimPolicy:</span> Retain<br></code></pre></td></tr></table></figure>
<h3 id="执行一下-4">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f test-storageclass.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-3">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get sc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212104551911](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212104551911.png)</p>
<h1>二，解决自动创建pvc</h1>
<h2 id="1、创建statefulset的yaml文件">1、创建statefulset的yaml文件</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">statefulset.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">headless-svc</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">headless-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">headless-pod</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">statefulset-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">headless-svc</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">headless-pod</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">headless-pod</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">myhttpd</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/mnt</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span>  <span class="hljs-comment">#&gt; 自动创建PVC，为后端的Pod提供专有的存储。**</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">annotations:</span>   <span class="hljs-comment">#这是指定storageclass</span><br>        <span class="hljs-attr">volume.beta.kubernetes.io/storage-class:</span> <span class="hljs-string">stateful-nfs</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">100Mi</span><br></code></pre></td></tr></table></figure>
<p><strong>在此示例中：</strong></p>
<ul>
<li><strong>创建了一个名为 <code>headless-svc</code> 的 <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/service?hl=zh-cn" target="_blank" rel="noopener">Service</a> 对象，由 <code>metadata: name</code> 字段指示。该 Service 会定位一个名为 <code>headless-svc</code> 的应用，由 <code>labels: app: headless-svc</code> 和 <code>selector: app: headless-pod</code> 指示。该 Service 会公开端口 80 并将其命名为 <code>web</code>。而且该 Service 会控制网域并将互联网流量路由到 StatefulSet 部署的容器化应用。</strong></li>
<li><strong>使用三个副本 Pod (<code>replicas: 3</code>) 创建了一个名为 <code>web</code> 的 StatefulSet。</strong></li>
<li><strong>Pod 模板 (<code>spec: template</code>) 指示其 Pod 标记为 <code>app: headless-pod</code>。</strong></li>
<li><strong>Pod 规范 (<code>template: spec</code>) 指示 StatefulSet 的 Pod 运行一个容器 <code>myhttpd</code>，该容器运行版本为 <code>httpd</code> 映像。容器映像由 <a href="https://cloud.google.com/container-registry/docs/concepts/overview?hl=zh-cn" target="_blank" rel="noopener">Container Registry</a> 托管。</strong></li>
<li><strong>Pod 规范使用由 Service 打开的 <code>web</code> 端口。</strong></li>
<li><strong><code>template: spec: volumeMounts</code> 指定一个名为 <code>test</code> 的 <code>mountPath</code>。<code>mountPath</code> 是容器中应装载存储卷的路径。</strong></li>
<li><strong>StatefulSet 预配了一个具有 100mb 预配存储空间的 <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes?hl=zh-cn" target="_blank" rel="noopener">PersistentVolumeClaim</a>：<code>test</code>。</strong></li>
</ul>
<h3 id="执行一下-5">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f statefulset.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-4">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212105434510](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212105434510.png)</p>
<p><em><strong>如果第一个pod出现了问题，后面的pod就不会生成。</strong></em></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get statefulsets</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212105502430](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212105502430.png)</p>
<h2 id="2、-验证一下数据存储">2、 验证一下数据存储</h2>
<h4 id="容器中创建文件">容器中创建文件</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl exec -it statefulset-test-0 /bin/sh</span><br><span class="hljs-comment"># cd /mnt</span><br><span class="hljs-comment"># touch testfile</span><br><span class="hljs-comment"># exit</span><br></code></pre></td></tr></table></figure>
<h4 id="宿主机查看一下">宿主机查看一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master yaml]# ls /nfsdata/<span class="hljs-keyword">default</span>-test-statefulset-test<span class="hljs-number">-0</span>-pvc-bf1ae1d0-f496<span class="hljs-number">-4</span>d69-b33b<span class="hljs-number">-39e8</span>aa0a6e8d/<br>testfile<br></code></pre></td></tr></table></figure>
<h1>三、小实验</h1>
<p><strong>以自己的名称创建一个名称空间，以下所有资源都运行在此空间中。用statefuset资源运行一个httpd web服务，要求3个Pod，但是每个Pod的主界面内容不一样，并且都要做专有的数据持久化，尝试删除其中一个Pod，查看新生成的Pod，总结对比与之前Deployment资源控制器控制的Pod有什么不同之处？</strong></p>
<h2 id="（一）创建StorageClass资源对象。">（一）创建StorageClass资源对象。</h2>
<p><em><strong>注意：nfs服务要开启</strong></em></p>
<h3 id="1、创建namespace的yaml文件">1、创建namespace的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim namespace.yaml </span><br><span class="hljs-symbol">kind:</span> Namespace<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> xgp-lll    <span class="hljs-meta">#namespave的名称</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-6">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f namespace.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-5">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get namespaces</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212113542729](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212113542729.png)</p>
<h3 id="2-创建rbac权限。">2. 创建rbac权限。</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim rbac-rolebind.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner<br><span class="hljs-symbol">  namespace:</span> xgp-lll<br>---<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  namespace:</span> xgp-lll<br><span class="hljs-symbol">rules:</span><br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumes"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"delete"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumeclaims"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"storage.k8s.io"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"storageclasses"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"events"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"update"</span>, <span class="hljs-string">"patch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"services"</span>, <span class="hljs-string">"endpoints"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>,<span class="hljs-string">"create"</span>,<span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>,<span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"extensions"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"podsecuritypolicies"</span>]<br><span class="hljs-symbol">      resourceNames:</span> [<span class="hljs-string">"nfs-provisioner"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"use"</span>]<br>---<br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> run-nfs-provisioner<br><span class="hljs-symbol">subjects:</span><br>  - kind: ServiceAccount<br><span class="hljs-symbol">    name:</span> nfs-provisioner<br><span class="hljs-symbol">    namespace:</span> xgp-lll<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure>
<h4 id="执行一下-7">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f rbac-rolebind.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="3、创建Deployment资源对象，用Pod代替-真正的NFS服务。-2">3、创建Deployment资源对象，用Pod代替 真正的NFS服务。</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nfs-deployment.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-lll</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">nfs-provisioner</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span>  <span class="hljs-string">/persistentvolumes</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">xgp</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/nfsdata</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-8">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-deployment.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-6">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod  -n xgp-lll</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212115808607](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212115808607.png)</p>
<h3 id="4、创建storageclass的yaml文件-2">4、创建storageclass的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim test-storageclass.yaml </span><br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> stateful-nfs<br><span class="hljs-symbol">  namespace:</span> xgp-lll<br><span class="hljs-symbol">provisioner:</span> xgp  <span class="hljs-meta">#通过provisioner字段关联到上述Deploy</span><br><span class="hljs-symbol">reclaimPolicy:</span> Retain<br></code></pre></td></tr></table></figure>
<h4 id="执行一下-9">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f test-storageclass.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-7">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get sc -n  xgp-lll</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212120207679](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212120207679.png)</p>
<h2 id="（二）解决自动创建pvc">（二）解决自动创建pvc</h2>
<h3 id="1、创建statefulset的yaml文件-2">1、创建statefulset的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">headless-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-lll</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">headless-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">headless-pod</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">statefulset-test</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-lll</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">headless-svc</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">headless-pod</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">headless-pod</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">myhttpd</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/apache2/htdocs</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span>  <span class="hljs-comment">#&gt; 自动创建PVC，为后端的Pod提供专有的存储。**</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">annotations:</span>   <span class="hljs-comment">#这是指定storageclass</span><br>        <span class="hljs-attr">volume.beta.kubernetes.io/storage-class:</span> <span class="hljs-string">stateful-nfs</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">100Mi</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-10">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f statefulset.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-8">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -n xgp-lll</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212121256221](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212121256221.png)</p>
<h3 id="2、-验证一下数据存储-2">2、 验证一下数据存储</h3>
<h4 id="容器中创建文件-2">容器中创建文件</h4>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">第一个<br>[root<span class="hljs-variable">@master</span> yaml]<span class="hljs-comment"># kubectl exec -it -n xgp-lll statefulset-test-0 /bin/bash </span><br>root<span class="hljs-variable">@statefulset</span>-test-0<span class="hljs-symbol">:/usr/local/apache2</span><span class="hljs-comment"># echo 123 &gt; /usr/local/apache2/htdocs/index.html</span><br><br>第二个<br>[root<span class="hljs-variable">@master</span> yaml]<span class="hljs-comment"># kubectl exec -it -n xgp-lll statefulset-test-1 /bin/bash </span><br>root<span class="hljs-variable">@statefulset</span>-test<span class="hljs-number">-2</span><span class="hljs-symbol">:/usr/local/apache2</span><span class="hljs-comment"># echo 456 &gt; /usr/local/apache2/htdocs/index.html</span><br><br>第三个<br>[root<span class="hljs-variable">@master</span> yaml]<span class="hljs-comment"># kubectl exec -it -n xgp-lll statefulset-test-2 /bin/bash </span><br>root<span class="hljs-variable">@statefulset</span>-test<span class="hljs-number">-1</span><span class="hljs-symbol">:/usr/local/apache2</span><span class="hljs-comment"># echo 789 &gt; /usr/local/apache2/htdocs/index.html</span><br></code></pre></td></tr></table></figure>
<h4 id="宿主机查看一下-2">宿主机查看一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">第一个<br>[<span class="hljs-symbol">root@</span>master yaml]# cat /nfsdata/xgp-lll-test-statefulset-test<span class="hljs-number">-0</span>-pvc-ccaa02df<span class="hljs-number">-4721</span><span class="hljs-number">-4453</span>-a6ec<span class="hljs-number">-4f</span>2c928221d7/index.html <br><span class="hljs-number">123</span><br><br>第二个<br>[<span class="hljs-symbol">root@</span>master yaml]# cat /nfsdata/xgp-lll-test-statefulset-test<span class="hljs-number">-1</span>-pvc<span class="hljs-number">-88e60</span>a58<span class="hljs-number">-97</span>ea<span class="hljs-number">-4986</span><span class="hljs-number">-91</span>d5-a3a6e907deac/index.html <br><span class="hljs-number">456</span><br><br><br>第三个<br>[<span class="hljs-symbol">root@</span>master yaml]# cat /nfsdata/xgp-lll-test-statefulset-test<span class="hljs-number">-2</span>-pvc<span class="hljs-number">-4</span>eb2bbe2<span class="hljs-number">-63</span>d2<span class="hljs-number">-431</span>a-ba3e-b7b8d7e068d3/index.html <br><span class="hljs-number">789</span><br></code></pre></td></tr></table></figure>
<h4 id="访问一下">访问一下</h4>
<p>![image-20200212131705416](G:\四期\虚拟化\kubernetes\k8s文档\13 k8s的StateFulSet.assets\image-20200212131705416.png)</p>
<p><strong>扩容、缩容:在此过程中，Pod的生成或删除操作也是有顺序性的。</strong></p>
<p><strong>升级操作</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">kubectl</span> <span class="hljs-selector-tag">explain</span> <span class="hljs-selector-tag">sts</span><span class="hljs-selector-class">.spec</span><span class="hljs-selector-class">.updateStrategy</span><span class="hljs-selector-class">.rollingUpdate</span><span class="hljs-selector-class">.partition</span><br></code></pre></td></tr></table></figure>
<p><strong>partition：如果partition后面的值等于N, N+的都会更新。默认值为0（所有都会更新）。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>15 Ingress-nginx</title>
    <url>/posts/dsfj.html</url>
    <content><![CDATA[<h1>Ingress-nginx</h1>
<p><strong>简单的理解:  原先暴露的service,现在给定个统一的访问入口。</strong></p>
<h2 id="1-创建一个web服务，用deployment资源，-用httpd镜像，然后创建一个service资源与之关联。">1) 创建一个web服务，用deployment资源， 用httpd镜像，然后创建一个service资源与之关联。</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">ingress]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy_1.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bdqn-ns</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpd-deploy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">bdqn-ns</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">httpd</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpd-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">bdqn-ns</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-port</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31033</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f deploy_1.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get svc -n bdqn-ns</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219093450798.png" alt="image-20200219093450798"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get pod -n bdqn-ns</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219093511785.png" alt="image-20200219093511785"></p>
<h3 id="访问一下">访问一下</h3>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219093653692.png" alt="image-20200219093653692"></p>
<h2 id="2-创建一个web服务，用deployment-资源，用tomcat-8-5-45镜像。">2) 创建一个web服务，用deployment 资源，用tomcat:8.5.45镜像。</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">ingress]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy_2.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-deploy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">bdqn-tomcat</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat:8.5.45</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">bdqn-tomcat</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-port</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32033</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-2">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f deploy_2.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-2">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get pod -n bdqn-ns</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219094056123.png" alt="image-20200219094056123"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get svc -n bdqn-ns</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219094146341.png" alt="image-20200219094146341"></p>
<h3 id="访问一下-2">访问一下</h3>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219100037136.png" alt="image-20200219100037136"></p>
<h2 id="3-在k8s集群前边部署一个反向代理服务器，这个服务器代理这k8s集群内部的service资源。">3) 在k8s集群前边部署一个反向代理服务器，这个服务器代理这k8s集群内部的service资源。</h2>
<h3 id="1-Ingress"><strong>1. Ingress:</strong></h3>
<p><strong>（1）Ingress	controller:</strong></p>
<p><strong>将新加入的Ingress转化为反向代理服务器的配置文件，并使之生效。(动态的感知k8s集群内Ingress资源的变化。）</strong></p>
<p><strong>（2）Ingress :</strong></p>
<p><strong>Ingress:将反向代理服务器的配置抽象成一个Ingress对象，每添加一个新的服务，只需要写一个新的Ingress的yaml文件即可。</strong></p>
<h3 id="2-Nginx-反向代理服务器。">2. Nginx :反向代理服务器。</h3>
<p>​	<strong>需要解决了两个问题:</strong></p>
<p>​		<strong>1、动态的配置服务。</strong></p>
<p>​		<strong>2、减少不必要的端口暴露。</strong></p>
<p>​	<strong>基于nginx的ingress controller根据不同的开发公司，又分为两种:<br>
​		1、k8s社区版的: Ingerss - nginx.<br>
​		2、nginx公司自己开发的: nginx- ingress .</strong></p>
<h3 id="3-在gitbub上找到所需的ingress的yaml文件">3. 在gitbub上找到所需的ingress的yaml文件</h3>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219103818065.png" alt="image-20200219103818065"></p>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219103248246.png" alt="image-20200219103248246"></p>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219103252620.png" alt="image-20200219103252620"></p>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219103537536.png" alt="image-20200219103537536"></p>
<h3 id="4-master下载">4. master下载</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="5-修改-mandatory-yaml-文件">5. 修改 mandatory.yaml 文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># vim mandatory.yaml</span><br>      hostNetwork: <span class="hljs-literal">true</span>   <span class="hljs-comment">#213</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219104346146.png" alt="image-20200219104346146"></p>
<p><strong>---------如果ingress-controller镜像下载不成功，可以直接使用下边的镜像。</strong><br>
<strong>docker pull <a href="http://registry.cn-hangzhou.aliyuncs.com/ilanni/nginx-ingress-controller:0.22.0" target="_blank" rel="noopener">registry.cn-hangzhou.aliyuncs.com/ilanni/nginx-ingress-controller:0.22.0</a></strong></p>
<p><strong>需要注意的是，如果使用上述镜像，需要将deployment资源指定的镜像名称进行修改。</strong></p>
<p><strong>修改的是madatory.yaml文件里的deployment资源。</strong></p>
<p><strong>在deployment资源中，如果添加了此字段，意味着Pod中运行的应用可以直接使用node节点的端口，这样node节 点主机所在网络的其他主机，就可以通过访问该端口访问此应用。(类似于docker映射到宿主机 上的端口。)</strong></p>
<h4 id="（1）执行一下">（1）执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f mandatory.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）查看一下">（2）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get pod -n ingress-nginx</span><br></code></pre></td></tr></table></figure>
<h3 id="6-创建一个service的yaml文件">6. 创建一个service的yaml文件</h3>
<h4 id="（1）执行一下-2">（1）执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f mandatory.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）查看一下-2">（2）查看一下</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">ingress]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">mandatory-svc.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ingress-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">ingress-nginx</span><br></code></pre></td></tr></table></figure>
<p><strong>（1）执行一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f mandatory-svc.yaml</span><br></code></pre></td></tr></table></figure>
<p><strong>（2）查看一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get svc -n ingress-nginx</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219111029408.png" alt="image-20200219111029408"></p>
<h2 id="4）创建Ingress资源。">4）创建Ingress资源。</h2>
<p><strong>ingress ：</strong><br>
<strong>ingress-nginx-controller: 动态感知ingress 资源的变化</strong><br>
<strong>ingress: 创建svc与ingress-nginx-controller 关联的规则</strong></p>
<h3 id="（1）编写ingress的yaml文件">（1）编写ingress的yaml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">ingress.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bdqn-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bdqn-ns</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span>             <span class="hljs-comment">#规则 </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">ingress.bdqn.com</span>   <span class="hljs-comment">#域名</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">httpd-svc</span>       <span class="hljs-comment">#关联service</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span>              <span class="hljs-comment">#关联service的映射端口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/tomcat</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">tomcat-svc</span>      <span class="hljs-comment">#关联service</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span>	           <span class="hljs-comment">#关联service的映射端口</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-3">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f ingress.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-3">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod -n ingress-nginx -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200221094602218](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221094602218.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get ingresses. -n bdqn-ns</span><br></code></pre></td></tr></table></figure>
<p>![image-20200221092912191](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221092912191.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe ingresses. -n bdqn-ns</span><br></code></pre></td></tr></table></figure>
<p>![image-20200221093013134](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221093013134.png)</p>
<h4 id="进入pod查看一下">进入pod查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl exec -it -n ingress-nginx nginx-ingress-controller-5954d475b6-24k92 /bin/sh</span><br>/etc/nginx $ cat nginx.conf<br></code></pre></td></tr></table></figure>
<p>![image-20200221094404491](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221094404491.png)</p>
<p>![image-20200221094408211](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221094408211.png)</p>
<h3 id="（2）访问一下">（2）访问一下</h3>
<h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。"><strong>进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</strong></h4>
<p>![image-20200221103807318](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103807318.png)</p>
<h4 id="访问http-ingress-bdqn-com">访问http://ingress.bdqn.com/</h4>
<p>![image-20200221095323635](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221095323635.png)</p>
<h4 id="访问http-ingress-bdqn-com-tomcat">访问http://ingress.bdqn.com/tomcat</h4>
<p>![image-20200221102354657](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221102354657.png)</p>
<h2 id="5）为ingress-nginx创建一个service（使用官网的service文件就可以）">5）为ingress-nginx创建一个service（使用官网的service文件就可以）</h2>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219103818065.png" alt="image-20200219103818065"></p>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219103248246.png" alt="image-20200219103248246"></p>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5C15.assets%5Cimage-20200219103252620.png" alt="image-20200219103252620"></p>
<p>![image-20200221103351973](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103351973.png)</p>
<p><em><strong>复制上面的网址</strong></em></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># wget  https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/provider/baremetal/service-nodeport.yaml</span><br>//下载文件到<span class="hljs-literal">master</span>节点<br></code></pre></td></tr></table></figure>
<h3 id="执行一下，下载的service文件">执行一下，下载的service文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f service-nodeport.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-4">查看一下</h3>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master yaml]# kubectl <span class="hljs-builtin-name">get</span><span class="hljs-built_in"> service </span>-n ingress-nginx<br></code></pre></td></tr></table></figure>
<p>![image-20200221103644779](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103644779.png)</p>
<h3 id="访问一下-3">访问一下</h3>
<h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。-2">进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</h4>
<p>![image-20200221103835847](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103835847.png)</p>
<h3 id="访问http-ingress-bdqn-com-30817">访问http://ingress.bdqn.com:30817/</h3>
<p>![image-20200221103927247](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103927247.png)</p>
<h3 id="访问http-ingress-bdqn-com-30817-tomcat">访问http://ingress.bdqn.com:30817/tomcat</h3>
<p>![image-20200221103950477](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221103950477.png)</p>
<p><strong>Service -Nodeport:因为ingress - nginx - controller运行在了集群内的其中一个节点，为了保证即使这个节点宕机，我们对应的域名仍然能够正常访问服务，所以我们将ingress -nginx- controller也暴露为一个service资源。</strong></p>
<h2 id="练习">练习:</h2>
<p>​    <strong>创建一个deploymen资源，基于nginx镜像，repolicas：2个.然后创建一个service资源关联这个deployment资源。最后创建一个ingress资源，<a href="http://xn--svcingress-ui2pp14ahmcbv2dk27ivg4b.bdqn.com/nginx" target="_blank" rel="noopener">将上述svc关联到ingress.bdqn.com/nginx</a> 目录下。</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">lianxi.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-666</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-666</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-666</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-nginx</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-666</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">xgp-nginx</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-port</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30000</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xgp-666</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">ingress.xgp.com</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">xgp-svc</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-4">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f lianxi.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-5">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe ingresses. -n xgp-666</span><br></code></pre></td></tr></table></figure>
<p>![image-20200221112302483](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221112302483.png)</p>
<h3 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。-3"><strong>进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</strong></h3>
<h3 id="添加完之后访问一下http-ingress-xgp-com">添加完之后访问一下http://ingress.xgp.com/</h3>
<p>![image-20200221112416946](G:\四期\虚拟化\kubernetes\k8s文档\15 Ingress-nginx.assets\image-20200221112416946.png)</p>
]]></content>
  </entry>
  <entry>
    <title>16 ingress资源的应用 </title>
    <url>/posts/qwen.html</url>
    <content><![CDATA[<h1>Ingress实现虚拟主机的方案</h1>
<h2 id="1、首先确定要运行ingress-nginx-controller服务。"><strong>1、首先确定要运行ingress-nginx-controller服务。</strong></h2>
<h3 id="在gitbub上找到所需的ingress的yaml文件">在gitbub上找到所需的ingress的yaml文件</h3>
<p>![image-20200219103818065](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200219103818065.png)</p>
<p>![image-20200219103248246](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200219103248246.png)</p>
<p>![image-20200219103252620](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200219103252620.png)</p>
<p>![image-20200219103537536](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200219103537536.png)</p>
<h3 id="4-master下载">4. master下载</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="5-修改-mandatory-yaml-文件">5. 修改 mandatory.yaml 文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># vim mandatory.yaml</span><br>      hostNetwork: <span class="hljs-literal">true</span>   <span class="hljs-comment">#213</span><br></code></pre></td></tr></table></figure>
<p>![image-20200219104346146](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200219104346146.png)</p>
<h4 id="（1）执行一下">（1）执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f mandatory.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）查看一下">（2）查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get pod -n ingress-nginx</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224123916253](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224123916253.png)</p>
<h2 id="2、将ingress-nginx-controller暴露为一个Service资源对象。"><strong>2、将ingress-nginx-controller暴露为一个Service资源对象。</strong></h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">service-nodeport.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">ingress-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">ingress-nginx</span><br><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure>
<h4 id="（1）执行一下-2"><strong>（1）执行一下</strong></h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f service-nodeport.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="（2）查看一下-2"><strong>（2）查看一下</strong></h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get svc -n ingress-nginx</span><br></code></pre></td></tr></table></figure>
<p>![image-20200219111029408](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200219111029408.png)</p>
<h2 id="3、创建一个deployment资源，和一个service资源，-并相互关联。">3、创建一个deployment资源，和一个service资源， 并相互关联。</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy1.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deploy1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx1</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx1</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f deploy1.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224091013907](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224091013907.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224091036678](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224091036678.png)</p>
<h3 id="然后复制deploy1-yaml资源工创建另外”一对“服务。">然后复制deploy1.yaml资源工创建另外”一对“服务。</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy2.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deploy2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx2</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx2</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx2</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-2">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f deploy2.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-2">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get deployments.</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224091747509](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224091747509.png)</p>
<h2 id="4-创建ingress的yaml文件，关联是svc1和svc2">4. 创建ingress的yaml文件，关联是svc1和svc2</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">ingress.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">www1.bdqn.com</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>          <span class="hljs-attr">backend:</span><br>            <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc-1</span><br>            <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">www2.bdqn.com</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>          <span class="hljs-attr">backend:</span><br>            <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc-2</span><br>            <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-3">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f ingress.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-3">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get ingresses.</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224092438021](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224092438021.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe ingresses. ingress-1</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224092823654](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224092823654.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl describe ingresses. ingress-2</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224092846086](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224092846086.png)</p>
<h2 id="5、由于实验环境限制，所以自己用来模拟-一个域名。">5、由于实验环境限制，所以自己用来模拟-一个域名。</h2>
<h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。">进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</h4>
<p>![image-20200224092744445](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224092744445.png)</p>
<h4 id="访问一下">访问一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get svc -n ingress-nginx </span><br>//查看映射的端口<br></code></pre></td></tr></table></figure>
<p>![image-20200224093328158](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224093328158.png)</p>
<p><a href="http://www1.bdqn.com:30817/" target="_blank" rel="noopener">http://www1.bdqn.com:30817/</a></p>
<p>![image-20200224094944536](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224094944536.png)</p>
<p><a href="http://www2.bdqn.com:30817/" target="_blank" rel="noopener">http://www2.bdqn.com:30817/</a></p>
<p>![image-20200224095008674](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224095008674.png)</p>
<h4 id="总结上述示例的pod是如何一步一步可以使client访问到的，总结如下：">总结上述示例的pod是如何一步一步可以使client访问到的，总结如下：</h4>
<p><strong>后端pod===》service====》ingress规则====》写入Ingress-nginx-controller配置文件并自动重载使更改生效===》对本机进行域名解析====》实现client通过域名的IP+端口都可以访问到后端pod</strong></p>
<h1>Ingress资源实现https代理安全访问。</h1>
<p><strong>在上面的操作中，实现了使用ingress-nginx为后端所有pod提供一个统一的入口，那么，有一个非常严肃的问题需要考虑，就是如何为我们的pod配置CA证书来实现HTTPS访问？在pod中直接配置CA么？那需要进行多少重复性的操作？而且，pod是随时可能被kubelet杀死再创建的。当然这些问题有很多解决方法，比如直接将CA配置到镜像中，但是这样又需要很多个CA证书。</strong></p>
<p><strong>这里有更简便的一种方法，就拿上面的情况来说，后端有多个pod，pod与service进行关联，service又被ingress规则发现并动态写入到ingress-nginx-controller容器中，然后又为ingress-nginx-controller创建了一个Service映射到群集节点上的端口，来供client来访问。</strong></p>
<p>![image-20200224143045045](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224143045045.png)</p>
<p><strong>在上面的一系列流程中，关键的点就在于ingress规则，我们只需要在ingress的yaml文件中，为域名配置CA证书即可，只要可以通过HTTPS访问到域名，至于这个域名是怎么关联到后端提供服务的pod，这就是属于k8s群集内部的通信了，即便是使用http来通信，也无伤大雅。</strong></p>
<h2 id="1-生成证书">1. 生成证书</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># mkdir https</span><br>//创建一个放置证书的目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cd https/</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=testsvc /O=testsvc"</span><br>//生成证书<br></code></pre></td></tr></table></figure>
<p>![image-20200224100716121](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224100716121.png)</p>
<h2 id="2-创建secret资源，-保存证书。">2. 创建secret资源， 保存证书。</h2>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl create<span class="hljs-built_in"> secret </span>tls tls-secret <span class="hljs-attribute">--key</span>=tls.key --cert tls.crt<br></code></pre></td></tr></table></figure>
<h2 id="3、创建一个deploy3-yaml文件，模拟一个web服务。">3、创建一个deploy3.yaml文件，模拟一个web服务。</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy3.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deploy3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx3</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx3</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx3</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-4">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f deploy3.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-4">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224104212886](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224104212886.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224104240133](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224104240133.png)</p>
<h2 id="4、创建对应的ingress规则。">4、创建对应的ingress规则。</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">https]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">ingress.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">tls:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">www3.bdqn.com</span>           <span class="hljs-comment">#域名</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">tls-secret</span>    <span class="hljs-comment">#保存的证书</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">www3.bdqn.com</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>          <span class="hljs-attr">backend:</span><br>            <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc-3</span><br>            <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-5">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f ingress.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-5">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get ingresses.</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224105525215](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224105525215.png)</p>
<h2 id="5-查找对应service-nodePort的443端口映射的端口，直接用浏览器访问即可。">5.查找对应service nodePort的443端口映射的端口，直接用浏览器访问即可。</h2>
<h4 id="进入本机的-C-Windows-System32-drivers-etc-，-修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。-2">进入本机的 C:\Windows\System32\drivers\etc ， 修改hosts文件，添加Pod（ingress-controller）运行所在的节点IP。</h4>
<p>![image-20200224105118183](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224105118183.png)</p>
<h4 id="查看映射端口">查看映射端口</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc -n ingress-nginx</span><br></code></pre></td></tr></table></figure>
<p>![image-20200224105347424](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224105347424.png)</p>
<p><a href="https://www3.bdqn.com:31372/" target="_blank" rel="noopener">https://www3.bdqn.com:31372/</a></p>
<p>![image-20200224105409448](G:\四期\虚拟化\kubernetes\k8s文档\16 ingress资源的应用 .assets\image-20200224105409448.png)</p>
<p><strong>k8s集群利用了“一切皆为资源”的原理，把生成的ca证书当成一个公共的资源来使用，使用时只需绑定保存的ca证书即可，不像之前一样，需要一个一个的创建ca证书，然后在关联起来，方便好用又快捷。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>17 k8s的监控</title>
    <url>/posts/ewrt.html</url>
    <content><![CDATA[<h1>一、k8s的UI访问界面-dashboard</h1>
<p><strong>在dashboard中，虽然可以做到创建、删除、修改资源等操作，但通常情况下，我们会把它当做健康k8s集群的软件。</strong></p>
<p><strong>作为Kubernetes的Web用户界面，用户可以通过Dashboard在Kubernetes集群中部署容器化的应用，对应用进行问题处理和管理，并对集群本身进行管理。通过Dashboard，用户可以查看集群中应用的运行情况，同时也能够基于Dashboard创建或修改部署、任务、服务等Kubernetes的资源。通过部署向导，用户能够对部署进行扩缩容，进行滚动更新、重启Pod和部署新应用。当然，通过Dashboard也能够查看Kubernetes资源的状态。</strong></p>
<h2 id="1、Dashboard提供的功能">1、Dashboard提供的功能</h2>
<p><strong>在默认情况下，Dashboard显示默认(default)命名空间下的对象，也可以通过命名空间选择器选择其他的命名空间。在Dashboard用户界面中能够显示集群大部分的对象类型。</strong></p>
<h3 id="1）集群管理"><strong>1）集群管理</strong></h3>
<p><strong>集群管理视图用于对节点、命名空间、持久化存储卷、角色和存储类进行管理。 节点视图显示CPU和内存的使用情况，以及此节点的创建时间和运行状态。 命名空间视图会显示集群中存在哪些命名空间，以及这些命名空间的运行状态。角色视图以列表形式展示集群中存在哪些角色，这些角色的类型和所在的命名空间。 持久化存储卷以列表的方式进行展示，可以看到每一个持久化存储卷的存储总量、访问模式、使用状态等信息；管理员也能够删除和编辑持久化存储卷的YAML文件。</strong></p>
<h3 id="2）-工作负载"><strong>2）</strong> <strong>工作负载</strong></h3>
<p><strong>工作负载视图显示部署、副本集、有状态副本集等所有的工作负载类型。在此视图中，各种工作负载会按照各自的类型进行组织。 工作负载的详细信息视图能够显示应用的详细信息和状态信息，以及对象之间的关系。</strong></p>
<h3 id="3）-服务发现和负载均衡"><strong>3）</strong> <strong>服务发现和负载均衡</strong></h3>
<p><strong>服务发现视图能够将集群内容的服务暴露给集群外的应用，集群内外的应用可以通过暴露的服务调用应用，外部的应用使用外部的端点，内部的应用使用内部端点</strong>。</p>
<h3 id="4）-存储"><strong>4）</strong> <strong>存储</strong></h3>
<p><strong>存储视图显示被应用用来存储数据的持久化存储卷申明资源。</strong></p>
<h3 id="5）-配置"><strong>5）</strong> <strong>配置</strong></h3>
<p><strong>配置视图显示集群中应用运行时所使用配置信息，Kubernetes提供了配置字典（ConfigMaps）和秘密字典（Secrets），通过配置视图，能够编辑和管理配置对象，以及查看隐藏的敏感信息。</strong></p>
<h3 id="6）-日志视图"><strong>6）</strong> <strong>日志视图</strong></h3>
<p><strong>Pod列表和详细信息页面提供了查看日志视图的链接，通过日志视图不但能够查看Pod的日志信息，也能够查看Pod容器的日志信息。通过Dashboard能够根据向导创建和部署一个容器化的应用，当然也可以通过手工的方式输入指定应用信息，或者通过上传YAML和JSON文件来创建和不受应用。</strong></p>
<h2 id="2、下载所需yaml文件和镜像">2、下载所需yaml文件和镜像</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># docker pull kubernetesui/dashboard:v2.0.0-rc5</span><br></code></pre></td></tr></table></figure>
<h2 id="3、修改-recommended-yaml">3、修改 recommended.yaml</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">https]#vim</span> <span class="hljs-string">recommended.yaml</span> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>            <span class="hljs-comment">#添加40</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f recommended.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc -n kubernetes-dashboard</span><br></code></pre></td></tr></table></figure>
<p>![image-20200226085710776](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226085710776.png)</p>
<h2 id="3、浏览器访问https-192-168-1-21-32306">3、浏览器访问https://192.168.1.21:32306</h2>
<p><strong>PS:如果是使用的旧版本的dashboard, 使用谷歌浏览器登录，可能是不成功的，需要换成其他的浏览器，比如:火狐。</strong></p>
<p>![image-20200226110629545](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226110629545.png)</p>
<h2 id="4、基于token的方法登录dashboard">4、基于token的方法登录dashboard</h2>
<h3 id="1-创建一个dashboard的管理用户">&lt;1&gt;创建一个dashboard的管理用户</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl create serviceaccount dashboard-admin -n kube-system</span><br></code></pre></td></tr></table></figure>
<h3 id="2-绑定用户为集群管理用户">&lt;2&gt;绑定用户为集群管理用户</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br></code></pre></td></tr></table></figure>
<h3 id="3-获取Token">&lt;3&gt;获取Token</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get secrets -n kube-system | grep dashboard-admin</span><br>//先得到Token的名称<br></code></pre></td></tr></table></figure>
<p>![image-20200226090141138](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226090141138.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl describe secrets -n kube-system  dashboard-admin-token-62bh9</span><br>//查看上述得到的secret资源的详细信息，会得到token<br></code></pre></td></tr></table></figure>
<p>![image-20200226090425136](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226090425136.png)</p>
<h3 id="4-在浏览器上使用token登录。">&lt;4&gt;在浏览器上使用token登录。</h3>
<p>![image-20200226090838680](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226090838680.png)</p>
<p>![image-20200226091007042](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226091007042.png)</p>
<p><strong>创建一个资源</strong></p>
<p>![image-20200226094008072](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226094008072.png)</p>
<p>![image-20200226094127460](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226094127460.png)</p>
<p><strong>查看是否创建成功</strong></p>
<p>![image-20200226094149479](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226094149479.png)</p>
<p>![image-20200226094209114](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226094209114.png)</p>
<h2 id="5、基于kubeconfig配置文件的方法登录dashboard">5、基于kubeconfig配置文件的方法登录dashboard</h2>
<h3 id="1-获取Token">&lt;1&gt;获取Token</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get secrets -n kube-system | grep dashboard-admin</span><br>//先得到Token的名称<br></code></pre></td></tr></table></figure>
<p>![image-20200226090141138](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226090141138.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl describe secrets -n kube-system  dashboard-admin-token-62bh9</span><br>//查看上述得到的secret资源的详细信息，会得到token<br></code></pre></td></tr></table></figure>
<p>![image-20200226090425136](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226090425136.png)</p>
<h3 id="2-生成kubeconfig配置文件。">&lt;2&gt;生成kubeconfig配置文件。</h3>
<p><strong>设置一个环境变量代表获取的token</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> <span class="hljs-identifier">https</span>]</span># DASH_TOKEN=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">secrets</span> -<span class="hljs-params">n</span> <span class="hljs-params">kube</span>-<span class="hljs-params">system</span> <span class="hljs-params">dashboard</span>-<span class="hljs-params">admin</span>-<span class="hljs-params">token</span>-62bh9  -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=&#123;.<span class="hljs-params">data</span>.<span class="hljs-params">token</span>&#125; | <span class="hljs-params">base64</span> -<span class="hljs-params">d</span>)</span><br></code></pre></td></tr></table></figure>
<p><strong>将k8s集群的配置信息写入kubeconfig配置文件中。</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl<span class="hljs-built_in"> config </span>set-cluster kubernetes <span class="hljs-attribute">--server</span>=192.168.1.21:6443 <span class="hljs-attribute">--kubeconfig</span>=/root/.dashboard-admin.conf<br></code></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl<span class="hljs-built_in"> config </span>set-credentials dashboard-admin <span class="hljs-attribute">--token</span>=<span class="hljs-variable">$DASH_TOKEN</span> <span class="hljs-attribute">--kubeconfig</span>=/root/.dashboard-admin.conf<br></code></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl<span class="hljs-built_in"> config </span>set-context dashboard-admin@kubernetes <span class="hljs-attribute">--cluster</span>=kubernetes <span class="hljs-attribute">--user</span>=dashboard-admin <span class="hljs-attribute">--kubeconfig</span>=/root/.dashboard-admin.conf<br></code></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master https]# kubectl<span class="hljs-built_in"> config </span>use-context dashboard-admin@kubernetes <span class="hljs-attribute">--kubeconfig</span>=/root/.dashboard-admin.conf<br></code></pre></td></tr></table></figure>
<h3 id="3-将生成的-root-dashboard-admin-conf的配置文件，导出并做保存。">&lt;3&gt;将生成的/root/.dashboard-admin.conf的配置文件，导出并做保存。</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># sz /root/.dashboard-admin.conf </span><br>//导出到自己习惯的位置即可<br></code></pre></td></tr></table></figure>
<h3 id="4-从浏览器选择kubeconfig的登录方式，然后导入配置文件即可。">&lt;4&gt;从浏览器选择kubeconfig的登录方式，然后导入配置文件即可。</h3>
<p>![image-20200226100349876](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226100349876.png)</p>
<p>![image-20200226100424656](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226100424656.png)</p>
<h1>二、部署weave-scope监控k8s集群</h1>
<h2 id="1、在github上查找scope的yaml文件">1、在github上查找scope的yaml文件</h2>
<h3 id="（1）github上搜索scope"><strong>（1）github上搜索scope</strong></h3>
<p>![image-20200226104345720](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226104345720.png)</p>
<h3 id="（2）进入k8s的部署scope的说明"><strong>（2）进入k8s的部署scope的说明</strong></h3>
<p>![image-20200226104445086](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226104445086.png)</p>
<h3 id="（3）选择k8s的部署"><strong>（3）选择k8s的部署</strong></h3>
<p>![image-20200226104603800](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226104603800.png)</p>
<p>![image-20200226104711134](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226104711134.png)</p>
<h3 id="（4）复制上面的链接，并下载yaml文件">（4）复制上面的链接，并下载yaml文件</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># wget https://cloud.weave.works/k8s/scope.yaml</span><br></code></pre></td></tr></table></figure>
<h2 id="2、修改下载的yaml文件并运行">2、修改下载的yaml文件并运行</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">scope.yaml</span>  <span class="hljs-comment">#编辑yaml文件</span><br><span class="hljs-comment">#跳转至213行，修改其service的端口类型</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>         <span class="hljs-comment">#修改类型为NodePort</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br>          <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">targetPort:</span> <span class="hljs-number">4040</span><br></code></pre></td></tr></table></figure>
<h3 id="（1）执行一下">（1）执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f scope.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（2）查看容器的运行情况，确定处于正常运行">（2）查看容器的运行情况，确定处于正常运行</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get  pod -o wide -n weave</span><br></code></pre></td></tr></table></figure>
<p>![image-20200226105456676](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226105456676.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc -n weave</span><br></code></pre></td></tr></table></figure>
<p>![image-20200226105545660](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226105545660.png)</p>
<blockquote>
<p><strong>#DaemonSet资源对象：weave-scope-agent（代理）：负责收集节点的信息；</strong><br>
<strong>#deployment资源对象:weave-scope-app(应用)：从agent获取数据，通过web UI展示并与用户交互；</strong><br>
<strong>#DaemonSet资源对象的特性和deployment相比，就是DaemonSet资源对象会在每个节点上都运行且只能运行一个pod。</strong><br>
<strong>#由于每个节点都需要监控，所以用到了DaemonSet这种资源对象</strong></p>
</blockquote>
<h2 id="3、浏览器访问一下http-192-168-1-21-31841">3、浏览器访问一下http://192.168.1.21:31841/</h2>
<p>![image-20200226105729990](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226105729990.png)</p>
<p><strong>在scope的web界面中，可以查看很多的东西，pod、node节点等详细信息，包括打开容器的终端，查看其日志信息等等</strong></p>
<h1>三、部署Prometheus服务</h1>
<p><em><strong>PS:在这里部署的prometheus,并不是Prometheus官网提供的，而是使用的coreos提供的prometheus项目。</strong></em></p>
<h3 id="在部署之前，先来了解一下Prometheus各个组件的作用吧！"><strong>在部署之前，先来了解一下Prometheus各个组件的作用吧！</strong></h3>
<ul>
<li><strong>MetricsServer:</strong>  是k8s集群资源使用情况的聚合器，收集数据给k8s集群内使用，如kubectl,hpa,scheduler等。</li>
<li><strong>Prometheus Operator</strong> : 是一个系统检测和警报工具箱，用来存储监控数据。</li>
<li><strong>Prometheus node-exporter</strong> ：收集k8s集群资源的数据，指定告警规则。</li>
<li><strong>Prometheus</strong> ：收集apiserver，scheduler，controller-manager，kubelet组件的数据，通过http协议传输。</li>
<li><strong>Grafana:</strong> 可视化数据统计和监控平台。</li>
</ul>
<h2 id="1、在github上搜索coreos-prometheus">1、在github上搜索coreos/prometheus</h2>
<p>![image-20200226111843047](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226111843047.png)</p>
<p>![](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226112039813.png)</p>
<p><strong>复制链接</strong></p>
<h2 id="2、克隆github上的promethes项目">2、克隆github上的promethes项目</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">promethes</span>]<span class="hljs-comment"># yum -y install git</span><br>//下载git命令<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">promethes</span>]<span class="hljs-comment"># git clone  https://github.com/coreos/kube-prometheus.git</span><br>//克隆github上的项目<br></code></pre></td></tr></table></figure>
<p>![image-20200226114748815](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226114748815.png)</p>
<h2 id="3、修改grafapa-service-yaml文件-更改为nodePort的暴露方式，暴露端口为31001-。">3、修改grafapa-service.yaml文件, 更改为nodePort的暴露方式，暴露端口为31001.。</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">promethes]#</span> <span class="hljs-string">cd</span> <span class="hljs-string">kube-prometheus/manifests/</span><br><span class="hljs-string">//进入kube-prometheus的manifests目录</span><br><span class="hljs-string">[root@master</span> <span class="hljs-string">manifests]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">grafana-service.yaml</span>    <span class="hljs-comment">#修改grafana的yaml文件</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">grafana</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">grafana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>       <span class="hljs-comment">#改为NodePort类型</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31001</span>    <span class="hljs-comment">#映射到宿主机31001端口</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">grafana</span><br></code></pre></td></tr></table></figure>
<h2 id="3-修改prometheus-service-yaml文件，-更改为nodePort的暴露方式，暴露端口为31002">3.修改prometheus-service.yaml文件， 更改为nodePort的暴露方式，暴露端口为31002.</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">manifests]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">prometheus-service.yaml</span>    <span class="hljs-comment">#修改prometheus的yaml文件</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">prometheus:</span> <span class="hljs-string">k8s</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>      <span class="hljs-comment">#改为NodePort类型</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31002</span>    <span class="hljs-comment">#映射到宿主机31002端口</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">prometheus:</span> <span class="hljs-string">k8s</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br></code></pre></td></tr></table></figure>
<h2 id="4、修改alertmanager-service-yaml文件，-更改为nodePort的暴露方式，暴露端口为31003">4、修改alertmanager-service.yaml文件， 更改为nodePort的暴露方式，暴露端口为31003</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">manifests]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">alertmanager-service.yaml</span>    <span class="hljs-comment">#修改alertmanager的yaml文件</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">alertmanager:</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">alertmanager-main</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>             <span class="hljs-comment">#改为NodePort类型</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9093</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31003</span>         <span class="hljs-comment">#映射到宿主机31003端口</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">alertmanager:</span> <span class="hljs-string">main</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br></code></pre></td></tr></table></figure>
<h2 id="5、将setup目录中所有的yaml文件-全部运行。是运行以上yaml文件的基础环境配置。">5、将setup目录中所有的yaml文件,全部运行。是运行以上yaml文件的基础环境配置。</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># cd setup/</span><br>//进入setup/目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># kubectl apply -f setup/</span><br>//运行setup目录中所有的yaml文件<br></code></pre></td></tr></table></figure>
<h2 id="6、将主目录-kube-prometheus-中所有的yaml文件-全部运行。">6、将主目录(kube-prometheus)中所有的yaml文件,全部运行。</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># cd ..</span><br>//返回上一级目录（kube-prometheus）<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">kube-prometheus</span>]<span class="hljs-comment"># kubectl apply -f manifests/</span><br>//运行kube-prometheus目录中所有的yaml文件<br></code></pre></td></tr></table></figure>
<h3 id="查看一下-2">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -n monitoring<br></code></pre></td></tr></table></figure>
<p>![image-20200226203237647](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226203237647.png)</p>
<p><strong>部署成功之后，可以运行一条命令， 查看资源使用情况(MetricsServer必须部署成功)</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">images</span>]<span class="hljs-comment"># kubectl top node</span><br></code></pre></td></tr></table></figure>
<p>![image-20200228085819377](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200228085819377.png)</p>
<h2 id="7、浏览器访问一下http-192-168-1-21-31001">7、浏览器访问一下http://192.168.1.21:31001</h2>
<p><strong>客户端访问群集中任意节点的IP+30100端口，即可看到以下界面（默认用户名和密码都是admin）</strong></p>
<p>![image-20200226203416325](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226203416325.png)</p>
<p><strong>根据提示更改密码：</strong></p>
<p>![image-20200226203613578](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226203613578.png)</p>
<h3 id="（1）添加模板">（1）添加模板</h3>
<p>![image-20200226203911457](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226203911457.png)</p>
<p><strong>依次点击“import”进行导入下面三个模板：</strong></p>
<p>![image-20200226204011409](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226204011409.png)</p>
<h3 id="（2）进行以下点击，即可查看群集内的监控状态">（2）进行以下点击，即可查看群集内的监控状态</h3>
<p>![image-20200226204247627](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226204247627.png)</p>
<p>![image-20200226204306014](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226204306014.png)</p>
<p><strong>以下可看到监控状态</strong></p>
<p>![image-20200226204632455](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226204632455.png)</p>
<p>![image-20200226204638784](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200226204638784.png)</p>
<h2 id="8、导入监控模板">8、导入监控模板</h2>
<p><strong>从grafana的官网搜索</strong><a href="https://grafana.com/" target="_blank" rel="noopener">https://grafana.com/</a></p>
<p>![image-20200228093639900](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200228093639900.png)</p>
<p><strong>复制以下这个模板的id</strong></p>
<p>![](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200228093854640.png)</p>
<p>![image-20200228094048611](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200228094048611.png)</p>
<p>![image-20200228094320274](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200228094320274.png)</p>
<p>![image-20200228094224276](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200228094224276.png)</p>
<p>![image-20200228094348407](G:\四期\虚拟化\kubernetes\k8s文档\17 k8s的监控.assets\image-20200228094348407.png)</p>
<p><strong>现在可以看到监控画面了</strong></p>
]]></content>
  </entry>
  <entry>
    <title>18 k8s的HPA自动扩容与缩容</title>
    <url>/posts/2643.html</url>
    <content><![CDATA[<h1>HPA</h1>
<p><strong>可以根据当前Pod资源的使用率，比如说CPU、磁盘、内存等进行副本Pod的动态的扩容与缩容。</strong></p>
<p><strong>前提条件:系统应该能否获取到当前Pod的资源使用情况 (意思是可以执行kubectl top pod命令,并且能够得到反馈信息)。</strong></p>
<p><strong>heapster：这个组件之前是集成在k8s集群的,不过在1.12版本之后被移除了。如果还想使用此功能，应该部署metricServer, 这个k8s集群资源使用情况的聚合器。</strong></p>
<p><strong>这里，我们使用一个测试镜像， 这个镜像基于php-apache制作的docker镜像，包含了一些可以运行cpu密集计算任务的代码。</strong></p>
<h2 id="1、创建一个deployment控制器">1、创建一个deployment控制器</h2>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]#docker pull mirrorgooglecontainers/hpa-example:latest<br><span class="hljs-comment">//下载hpa-example镜像</span><br><br>[<span class="hljs-symbol">root@</span>master ~]# kubectl run php-apache --image=mirrorgooglecontainers/hpa-example --requests=cpu=<span class="hljs-number">200</span>m --expose  --port=<span class="hljs-number">80</span><br><span class="hljs-comment">//基于hpa-example镜像，运行一个deployment控制器，请求CPU的资源为200m，暴露一个80端口</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments.<br></code></pre></td></tr></table></figure>
<p>![image-20200228102643352](G:\四期\虚拟化\kubernetes\k8s文档\18 HPA自动容与蒲容.assets\image-20200228102643352.png)</p>
<h2 id="2、创建HPA控制器">2、创建HPA控制器</h2>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl <span class="hljs-built_in">auto</span>scale deployment php-apache --cpu-percent=<span class="hljs-number">50</span> --min=<span class="hljs-number">1</span> --max=<span class="hljs-number">10</span><br><span class="hljs-comment">//当deployment资源对象的CPU使用率达到50%时，就进行扩容，最多可以扩容到10个</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-2">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get hpa<br></code></pre></td></tr></table></figure>
<p>![image-20200228101908398](G:\四期\虚拟化\kubernetes\k8s文档\18 HPA自动容与蒲容.assets\image-20200228101908398.png)</p>
<h2 id="3、测试（master开启三个端口）">3、测试（master开启三个端口）</h2>
<p><strong>新开启多个终端，对pod进行死循环请求php-apache的pod</strong></p>
<h3 id="端口一">端口一</h3>
<h4 id="（1）创建一个应用，用来不停的访问我们刚刚创建的php-apache的svc资源。">（1）创建一个应用，用来不停的访问我们刚刚创建的php-apache的svc资源。</h4>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master ~]# kubectl <span class="hljs-builtin-name">run</span> -i --tty load-generator <span class="hljs-attribute">--image</span>=busybox /bin/sh<br></code></pre></td></tr></table></figure>
<h4 id="（2）进入Pod内，执行以下这条命令-用来模拟访问php-apache的svc资源。">（2）进入Pod内，执行以下这条命令.用来模拟访问php-apache的svc资源。</h4>
<figure class="highlight d"><table><tr><td class="code"><pre><code class="hljs d">[root<span class="hljs-keyword">@master</span> ~]# <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span> wget -q -O- http:<span class="hljs-comment">//php-apache.default.svc.cluster.local ; done</span><br><span class="hljs-comment">//不停地向php-apache的svc资源，发送ok</span><br></code></pre></td></tr></table></figure>
<h3 id="端口二">端口二</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get hpa -w<br>//实时查看pod的cpu状态<br></code></pre></td></tr></table></figure>
<p>![image-20200228133816724](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228133816724.png)</p>
<p><strong>可以看到php-apache的cpu使用情况已经超过了50%</strong></p>
<h3 id="端口三">端口三</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">images</span>]<span class="hljs-comment"># kubectl get pod -w</span><br>//实时查看pod的状态<br></code></pre></td></tr></table></figure>
<p>![image-20200228134105507](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228134105507.png)</p>
<p><strong>可以看到当php-apache的cpu使用情况超过50%后，就会不断生成新的php-apache来进行负载均衡（目前设置的上线时10个），当然，如果cpu使用情况下降到50%，master就会陆续地删除php-apache，这样的使用可以减少不必要的资源浪费、资源分配不均等情况。</strong></p>
<h1>二、资源限制</h1>
<h2 id="1、基于Pod">1、基于Pod</h2>
<p><strong>Kubernetes对资源的限制实际上是通过cgroup来控制的，cgroup 是容器的一组用来控制内核如何运行进程的相关属性集合。针对内存、CPU 和各种设备都有对应的cgroup</strong></p>
<p><strong>默认情况下，Pod运行没有CPU和内存的限额。这意味着系统中的任何 Pod将能够像执行该Pod所在的节点一样，消耗足够多的CPU和内存。一般会针对某些应用的pod资源进行资源限制，这个资源限制是通过</strong></p>
<p><strong>resources的requests和limits来实现</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> cgroup-pod.yaml<br></code></pre></td></tr></table></figure>
<p>![image-20200228153809932](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228153809932.png)</p>
<p><strong>requests: 要分配的资源，limits为最高请求的资源值。可以简单的理解为初始值和最大值。</strong></p>
<h2 id="2、基于名称空间"><strong>2、基于名称空间</strong></h2>
<h3 id="1）-计算资源配额">1） 计算资源配额</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> compute-resources.yaml<br></code></pre></td></tr></table></figure>
<p>![image-20200228153818288](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228153818288.png)</p>
<h3 id="2）配置对象数量配额限制">2）配置对象数量配额限制</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> object-counts.yaml<br></code></pre></td></tr></table></figure>
<p>![image-20200228153828002](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228153828002.png)</p>
<h3 id="3）-配置CPU和内存的LimitRange">3） 配置CPU和内存的LimitRange</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> limitRange.yaml<br></code></pre></td></tr></table></figure>
<p>![image-20200228153834705](G:\四期\虚拟化\kubernetes\k8s文档\18 k8s的HPA自动容与缩容.assets\image-20200228153834705.png)</p>
<p><strong>default 即 limit的值。</strong></p>
<p><strong>defaultRequest 即 request的值。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>19 k8s的helm入门</title>
    <url>/posts/wqrw.html</url>
    <content><![CDATA[<h1>一、Helm介绍</h1>
<p><strong><code>helm</code>是基于<code>kubernetes</code> 的包管理器。它之于 <code>kubernetes</code> 就如 <code>yum</code> 之于 <code>centos</code>，<code>pip</code> 之于 <code>python，npm</code> 之于 <code>javascript</code></strong></p>
<p><strong>那 <code>helm</code> 的引入对于管理集群有哪些帮助呢？</strong></p>
<ul>
<li><strong>更方便地部署基础设施，如 <code>gitlab</code>，<code>postgres</code>，<code>prometheus</code>，<code>grafana</code> 等</strong></li>
<li><strong>更方便地部署自己的应用，为公司内部的项目配置 Chart，使用 <code>helm</code> 结合 CI，在 k8s 中部署应用一行命令般简单</strong></li>
</ul>
<h2 id="1、Helm用途">1、Helm用途</h2>
<p><strong>Helm把Kubernetes资源(比如deployments、services或 ingress等) 打包到一个chart中，而chart被保存到chart仓库。通过chart仓库可用来存储和分享chart。Helm使发布可配置，支持发布应用配置的版本管理，简化了Kubernetes部署应用的版本控制、打包、发布、删除、更新等操作。</strong></p>
<p><strong>做为Kubernetes的一个包管理工具，用来管理charts——预先配置好的安装包资源，有点类似于Ubuntu的APT和CentOS中的yum。</strong></p>
<h4 id="Helm具有如下功能：">Helm具有如下功能：</h4>
<ul>
<li><strong>创建新的chart</strong></li>
<li><strong>chart打包成tgz格式</strong></li>
<li><strong>上传chart到chart仓库或从仓库中下载chart</strong></li>
<li><strong>在Kubernetes集群中安装或卸载chart</strong></li>
<li><strong>管理用Helm安装的chart的发布周期</strong></li>
</ul>
<h4 id="使用Helm可以完成以下事情：">使用Helm可以完成以下事情：</h4>
<ul>
<li><strong>管理Kubernetes manifest files</strong></li>
<li><strong>管理Helm安装包charts</strong></li>
<li><strong>基于chart的Kubernetes应用分发</strong></li>
</ul>
<h2 id="2、Helm组件及相关术语">2、Helm组件及相关术语</h2>
<p><strong>开始接触Helm时遇到的一个常见问题就是Helm中的一些概念和术语非常让人迷惑，我开始学习Helm就遇到这个问题。</strong></p>
<p><strong>因此我们先了解一下Helm的这些相关概念和术语。</strong></p>
<h3 id="包管理工具"><strong>包管理工具:</strong></h3>
<ul>
<li>
<p><strong>Helm: Kubernetes的应用打包工具，也是命令行工具的名称。</strong></p>
</li>
<li>
<p><strong>Helm CLI：是 Helm 客户端，可以在本地执行</strong></p>
</li>
<li>
<p><strong>Tiller: Helm的服务端，部署在Kubernetes集群中，用于处理Helm的相关命令。</strong></p>
<blockquote>
<p><strong>helm的作用：像centos7中的yum命令一样，管理软件包，只不过helm这儿管理的是在k8s上安装的各种容器。</strong></p>
<p><strong>tiller的作用：像centos7的软件仓库一样，简单说类似于/etc/yum.repos.d目录下的xxx.repo。</strong></p>
</blockquote>
</li>
<li>
<p><strong>Repoistory: Helm的软件仓库，repository本质上是一个web服务器，该服务器保存了chart软件包以供下载，并有提供一个该repository的chart包的清单文件以供查询。在使用时，Helm可以对接多个不同的Repository。</strong></p>
</li>
<li>
<p><strong>Charts：是一个Helm的程序包，它包含了运行一个kubernetes应用程序所需要的镜像、依赖关系和资源定义等。</strong></p>
</li>
<li>
<p><strong>Release：应用程序运行Charts之后，得到的一个实例。</strong></p>
<blockquote>
<p><strong>需要特别注意的是， Helm中提到的Release和我们通常概念中的版本有所不同，这里的Release可以理解为Helm使用Chart包部署的一个应用实例。</strong></p>
<p><strong>其实Helm中的Release叫做Deployment更合适。估计因为Deployment这个概念已经被Kubernetes使用了，因此Helm才采用了Release这个术语。</strong></p>
</blockquote>
</li>
</ul>
<h3 id="命令介绍">命令介绍</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> search<br>//查看可用的Charts包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> inspect  stable/redis<br>//查看stable/redis包的详细信息<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm fetch stable/mysql</span><br>//直接下载stable/mysql的chart包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install stable/redis -n redis --dry-run <br>//基于stable/redis包运行一个名为redis的服务（把--dry-run去掉之后相当于安装了一个服务）<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> list<br>//查看安装的服务<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> delete redis<br>//删除这个服务<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm upgrade --set imageTag=5.7.15 xgp-mysql stable/mysql -f values.yaml </span><br>//mysql服务的升级<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment">#  helm history xgp-mysql</span><br>//查看历史版本<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm rollback xgp-mysql 1  </span><br>//回滚到版本一<br></code></pre></td></tr></table></figure>
<h2 id="3、组件架构">3、组件架构</h2>
<p>![](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302214010170.png)</p>
<p><strong><code>Helm Client</code> 是用户命令行工具，其主要负责如下：</strong></p>
<ul>
<li><strong>本地 chart 开发</strong></li>
<li><strong>仓库管理</strong></li>
<li><strong>与 Tiller sever 交互</strong></li>
<li><strong>发送预安装的 chart</strong></li>
<li><strong>查询 release 信息</strong></li>
<li><strong>要求升级或卸载已存在的 release</strong></li>
</ul>
<p><strong><code>Tiller Server</code>是一个部署在<code>Kubernetes</code>集群内部的 server，其与 Helm client、Kubernetes API server 进行交互。Tiller server 主要负责如下：</strong></p>
<ul>
<li><strong>监听来自 Helm client 的请求</strong></li>
<li><strong>通过 chart 及其配置构建一次发布</strong></li>
<li><strong>安装 chart 到<code>Kubernetes</code>集群，并跟踪随后的发布</strong></li>
<li><strong>通过与<code>Kubernetes</code>交互升级或卸载 chart</strong></li>
<li><strong>简单的说，client 管理 charts，而 server 管理发布 release</strong></li>
</ul>
<h3 id="helm客户端">helm客户端</h3>
<p><strong>helm客户端是一个命令行工具，负责管理charts、reprepository和release。它通过gPRC API（使用kubectl port-forward将tiller的端口映射到本地，然后再通过映射后的端口跟tiller通信）向tiller发送请求，并由tiller来管理对应的Kubernetes资源。</strong></p>
<h3 id="tiller服务端">tiller服务端</h3>
<p><strong>tiller接收来自helm客户端的请求，并把相关资源的操作发送到Kubernetes，负责管理（安装、查询、升级或删除等）和跟踪Kubernetes资源。为了方便管理，tiller把release的相关信息保存在kubernetes的ConfigMap中。</strong><br>
<strong>tiller对外暴露gRPC API，供helm客户端调用。</strong></p>
<h2 id="4、工作原理">4、工作原理</h2>
<h4 id="Chart-Install-过程："><strong>Chart Install 过程：</strong></h4>
<ul>
<li><strong>Helm从指定的目录或者tgz文件中解析出Chart结构信息</strong></li>
<li><strong>Helm将指定的Chart结构和Values信息通过gRPC传递给Tiller</strong></li>
<li><strong>Tiller根据Chart和Values生成一个Release</strong></li>
<li><strong>Tiller将Release发送给Kubernetes运行。</strong></li>
</ul>
<h4 id="Chart-Update过程："><strong>Chart Update过程：</strong></h4>
<ul>
<li><strong>Helm从指定的目录或者tgz文件中解析出Chart结构信息</strong></li>
<li><strong>Helm将要更新的Release的名称和Chart结构，Values信息传递给Tiller</strong></li>
<li><strong>Tiller生成Release并更新指定名称的Release的History</strong></li>
<li><strong>Tiller将Release发送给Kubernetes运行</strong></li>
</ul>
<h4 id="Chart-Rollback">Chart Rollback</h4>
<ul>
<li><strong>helm将会滚的release名称传递给tiller</strong></li>
<li><strong>tiller根据release名称查找history</strong></li>
<li><strong>tiller从history中获取到上一个release</strong></li>
<li><strong>tiller将上一个release发送给kubernetes用于替换当前release</strong></li>
</ul>
<h4 id="Chart处理依赖">Chart处理依赖</h4>
<p><strong>Tiller 在处理 Chart 时，直接将 Chart 以及其依赖的所有 Charts 合并为一个 Release，同时传递给 Kubernetes。因此 Tiller 并不负责管理依赖之间的启动顺序。Chart 中的应用需要能够自行处理依赖关系。</strong></p>
<h1>二、安装部署helm工具（客户端）</h1>
<p>![image-20200302084446678](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302084446678.png)</p>
<h4 id="前提要求"><strong>前提要求</strong></h4>
<ul>
<li><strong>Kubernetes1.5以上版本</strong></li>
<li><strong>集群可访问到的镜像仓库</strong></li>
<li><strong>执行helm命令的主机可以访问到kubernetes集群</strong></li>
</ul>
<h3 id="（1）下载helm的包">（1）下载helm的包</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#docker</span> pull gcr.io/kubernetes-helm/tiller:v2.<span class="hljs-number">14.3</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# wget</span> https://get.helm.sh/helm-v2.<span class="hljs-number">14.3</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure>
<h3 id="（2）把helm包的命令，复制到本地">（2）把helm包的命令，复制到本地</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># mv linux-amd64/helm /usr/local/bin/</span><br>//移动命令目录到/usr/local/bin/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># chmod +x /usr/local/bin/helm </span><br>//给予执行权限<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm help</span><br>//验证是否安装成功<br></code></pre></td></tr></table></figure>
<h3 id="（3）设置命令自动补全">（3）设置命令自动补全</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment">#  echo 'source &lt;(helm completion bash)' &gt;&gt; /etc/profile</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># . /etc/profile</span><br>//刷新一下<br></code></pre></td></tr></table></figure>
<h2 id="2、安装Tiller-server（服务端，需要创建授权用户）">2、安装Tiller server（服务端，需要创建授权用户）</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">tiller-rbac.yaml</span>   <span class="hljs-comment">#创建授权用户</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f tiller-rbac.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（1）Tiller-server的环境初始化">（1）Tiller server的环境初始化</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm init  --service-account=tiller</span><br>//helm的服务端就是Tiller（因为是访问外国的网站，可能需要多次执行）<br></code></pre></td></tr></table></figure>
<h4 id="查看一下">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># kubectl get deployment. -n kube-system</span><br></code></pre></td></tr></table></figure>
<p>![image-20200228120107088](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200228120107088.png)</p>
<p><strong>现在发现没有开启，那是因为默认下载的Google的镜像，下载不下来</strong></p>
<h3 id="（2）设置镜像源改为阿里云的">（2）设置镜像源改为阿里云的</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-2">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm version</span><br></code></pre></td></tr></table></figure>
<p>![image-20200228120548734](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200228120548734.png)</p>
<h2 id="3、部署一个实例helm-install-charts-n-Release名称。">3、部署一个实例helm install + charts -n   Release名称。</h2>
<blockquote>
<p><strong>1、关于这个Release的描述。</strong></p>
<p><strong>2、关于这个Release资源的描述。</strong></p>
<p><strong>3、怎么使用这个Release。</strong></p>
</blockquote>
<h3 id="（1）Helm部署安装一个Mysql服务。">（1）Helm部署安装一个Mysql服务。</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> search mysql<br>//查看关于mysqk的Charts包<br></code></pre></td></tr></table></figure>
<p>![image-20200302091903599](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302091903599.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install stable/mysql -n mysql <br>//基于stable/mysql包安装一个名为MySQL的服务<br></code></pre></td></tr></table></figure>
<h3 id="查看一下-3">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> list<br></code></pre></td></tr></table></figure>
<p>![image-20200302092055970](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302092055970.png)</p>
<h3 id="（2）Charts包解压过后的目录">（2）Charts包解压过后的目录:</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# cd</span> .helm/cache/archive<br>//查看helm缓存<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">archive</span>]<span class="hljs-comment"># ls</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302093625736](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302093625736.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm fetch stable/mysql</span><br>//直接下载stable/mysql的chart包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">archive</span>]<span class="hljs-comment"># tar -zxf mysql-0.3.5.tgz </span><br>//解压一下MySQL包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">archive</span>]<span class="hljs-comment"># tree -C mysql </span><br>//树状图查看解压出来的mysql目录，-C:显示颜色<br></code></pre></td></tr></table></figure>
<p>![image-20200302093816396](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302093816396.png)</p>
<blockquote>
<p><strong>Chart.yaml：这个chart包的概要信息。（name和version 这两是必填项，其他可选。）</strong></p>
<p><strong>README md：是这个chart包的一个使用帮助文档。</strong></p>
<p><strong>templates：chart包内各种资源对象的模板。</strong></p>
<blockquote>
<p><strong>deployment.yaml：deployment 控制器的 Go 模板文件</strong></p>
<p><strong>_helpers.tpl：以 _ 开头的文件不会部署到 k8s 上，可用于定制通用信息</strong></p>
<p><strong>NOTES.txt：Chart 部署到集群后的一些信息</strong></p>
<p><strong>service.yaml：service 的 Go 模板文件</strong></p>
</blockquote>
<p><strong>values.yaml：是这个chart包的默认的值，可以被templet内的yaml文件使用。</strong></p>
</blockquote>
<h3 id="（3）Helm部署安装-个Mysql服务。">（3）Helm部署安装-个Mysql服务。</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">14</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">15</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull busybox:<span class="hljs-number">1.25</span>.<span class="hljs-number">0</span><br>下载所需的mysql镜像<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> delete mysql --purge <br>//删除之前的MySQL服务并清除缓存<br></code></pre></td></tr></table></figure>
<h3 id="（4）设置共享目录">（4）设置共享目录</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# yum</span> -y install rpcbind nfs-utils<br>//安装nfs<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> /data<br>//创建共享目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> /etc/exports<br>/data *(rw,sync,no_root_squash)<br>//设置共享目录权限<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> restart rpcbind<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> restart nfs-server<br>//重启nfs服务<br><br>测试一下<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# showmount</span> -e<br></code></pre></td></tr></table></figure>
<p>![image-20200302105307662](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302105307662.png)</p>
<h3 id="（5）创建pv">（5）创建pv</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master xgp]<span class="hljs-meta"># vim nfs-pv1.yml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mysqlpv<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">8</span>Gi<br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Recycle<br><span class="hljs-symbol">  nfs:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/data/</span>mysqlpv<br><span class="hljs-symbol">    server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>[root@master xgp]<span class="hljs-meta"># mkdir /data/mysqlpv</span><br><span class="hljs-comment">//创建所需目录</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-2">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl apply -f nfs-pv1.yml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-4">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302110137247](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302110137247.png)</p>
<h3 id="（6）创建一个mysql服务">（6）创建一个mysql服务</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># helm install stable/mysql -n bdqn-mysql --set mysqlRootPassword=123.com</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-5">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302111518710](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302111518710.png)</p>
<h3 id="（7）进入pod并查看一下">（7）进入pod并查看一下</h3>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@master xgp]# kubectl exec -it bdqn-mysql-mysql-7b89c7b99-8ff2r -- mysql -u root -p123.com<br>mysql&gt; show databases;<br><span class="hljs-code">+--------------------+</span><br>| Database           |<br><span class="hljs-code">+--------------------+</span><br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br>| sys                |<br><span class="hljs-code">+--------------------+</span><br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure>
<h2 id="4、mysql服务的升级与回滚">4、mysql服务的升级与回滚</h2>
<h3 id="（1）mysql服务的升级">（1）mysql服务的升级</h3>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master mysql]# helm<span class="hljs-built_in"> upgrade </span>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">imageTag</span>=5.7.15 bdqn-mysql stable/mysql -f values.yaml<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-6">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302115511986](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302115511986.png)</p>
<h3 id="（2）mysql服务的回滚">（2）mysql服务的回滚</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment">#  helm history bdqn-mysql</span><br>//查看历史版本<br></code></pre></td></tr></table></figure>
<p>![image-20200302115645118](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302115645118.png)</p>
<h4 id="回滚到版本一">回滚到版本一</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm rollback bdqn-mysql 1</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-7">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302115823991](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302115823991.png)</p>
<h1>三、小实验</h1>
<p><strong>在部署mysql的时候，如何开启storageclass，以及如何将service资源对象的类型更改为NodePort, 如何使用?</strong></p>
<p><strong>将上述部署的实例进行升级回滚操作。升级的时候镜像改为： mysql:5.7.15版本。回滚到最初的版本。</strong></p>
<h2 id="1、基于NFS服务，创建NFS服务。">1、基于NFS服务，创建NFS服务。</h2>
<p><strong>下载nfs所需安装包</strong></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node02</span> ~]<span class="hljs-meta"># yum -y install nfs-utils  rpcbind</span><br></code></pre></td></tr></table></figure>
<p><strong>创建共享目录</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> -p /xgp/wsd<br></code></pre></td></tr></table></figure>
<p><strong>创建共享目录的权限</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> /etc/exports<br>/xgp *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure>
<p><strong>开启nfs和rpcbind（三台都要）</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> nfs-server.service <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">start</span> rpcbind<br></code></pre></td></tr></table></figure>
<p><strong>测试一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# showmount</span> -e<br></code></pre></td></tr></table></figure>
<p>![image-20200302143413268](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302143413268.png)</p>
<h2 id="2、创建StorageClass资源对象。">2、创建StorageClass资源对象。</h2>
<h3 id="（1）创建rbac权限。">（1）创建rbac权限。</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim rbac.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner<br><span class="hljs-symbol">  namespace:</span> default<br>---<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">rules:</span><br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumes"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"delete"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumeclaims"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"storage.k8s.io"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"storageclasses"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"events"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"update"</span>, <span class="hljs-string">"patch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"services"</span>, <span class="hljs-string">"endpoints"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>,<span class="hljs-string">"create"</span>,<span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>,<span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"extensions"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"podsecuritypolicies"</span>]<br><span class="hljs-symbol">      resourceNames:</span> [<span class="hljs-string">"nfs-provisioner"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"use"</span>]<br>---<br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> run-nfs-provisioner<br><span class="hljs-symbol">subjects:</span><br>  - kind: ServiceAccount<br><span class="hljs-symbol">    name:</span> nfs-provisioner<br><span class="hljs-symbol">    namespace:</span> default        <span class="hljs-meta">#必写字段</span><br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure>
<h4 id="执行一下-3">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f rbac.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（2）创建Deployment资源对象，用Pod代替-真正的NFS服务。">（2）创建Deployment资源对象，用Pod代替 真正的NFS服务。</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nfs-deployment.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">nfs-provisioner</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span>  <span class="hljs-string">/persistentvolumes</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">xgp</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/xgp/wsd</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/xgp/wsd</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-4">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-deployment.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-8">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200212104037272](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200212104037272.png)</p>
<h3 id="（3）创建storageclass的yaml文件">（3）创建storageclass的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim xgp-storageclass.yaml </span><br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> xgp-nfs<br><span class="hljs-symbol">provisioner:</span> xgp  <span class="hljs-meta">#通过provisioner字段关联到上述Deploy</span><br><span class="hljs-symbol">reclaimPolicy:</span> Retain<br></code></pre></td></tr></table></figure>
<h4 id="执行一下-5">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f test-storageclass.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-9">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get sc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302163422262](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302163422262.png)</p>
<h2 id="3、创建一个mysql服务">3、创建一个mysql服务</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">14</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">15</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull busybox:<span class="hljs-number">1.25</span>.<span class="hljs-number">0</span><br>//下载所需镜像<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># helm fetch stable/mysql</span><br>//直接下载stable/mysql的chart包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># tar -zxf mysql-0.3.5.tgz </span><br>//解压mysql包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cd mysql/</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># vim values.yaml </span><br>//修改values.yaml文件，添加storageClass存储卷和更改svc的模式为NodePort<br></code></pre></td></tr></table></figure>
<p>![image-20200302164514380](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302164514380.png)</p>
<p>![image-20200302164620871](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302164620871.png)</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">[root@master mysql]# helm install stable/mysql -n xgp-mysql --<span class="hljs-keyword">set</span> mysqlRootPassword=<span class="hljs-number">123</span>.<span class="hljs-keyword">com</span> -<span class="hljs-keyword">f</span> <span class="hljs-built_in">values</span>.yaml <br>//基于<span class="hljs-built_in">values</span>.yaml和stable/mysql开启一个密码为<span class="hljs-number">123</span>.<span class="hljs-keyword">com</span>的mysqlpod<br></code></pre></td></tr></table></figure>
<h3 id="查看一下-10">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302174753877](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302174753877.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get pod -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302170330864](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302170330864.png)</p>
<h2 id="4、进入pod并查看一下">4、进入pod并查看一下</h2>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@master mysql]#  kubectl exec -it xgp-mysql-mysql-67c6fb5f9-dn7s2 -- mysql -u root -p123.com<br>mysql&gt; show databases;<br><span class="hljs-code">+--------------------+</span><br>| Database           |<br><span class="hljs-code">+--------------------+</span><br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br>| sys                |<br><span class="hljs-code">+--------------------+</span><br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure>
<h2 id="5、mysql服务的升级与回滚">5、mysql服务的升级与回滚</h2>
<h3 id="（1）mysql服务的升级-2">（1）mysql服务的升级</h3>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master mysql]# helm<span class="hljs-built_in"> upgrade </span>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">imageTag</span>=5.7.15 xgp-mysql stable/mysql -f values.yaml<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-11">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302115511986](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302115511986.png)</p>
<h3 id="（2）服务的回滚">（2）服务的回滚</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment">#  helm history xgp-mysql</span><br>//查看历史版本<br></code></pre></td></tr></table></figure>
<p>![image-20200302175135110](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302175135110.png)</p>
<h4 id="回滚到版本一-2">回滚到版本一</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># helm rollback xgp-mysql 1</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-12">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get deployments. -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200302115823991](G:\四期\虚拟化\kubernetes\k8s文档\19 k8s的helm入门.assets\image-20200302115823991.png)</p>
<h2 id="6、进入pod并查看一下">6、进入pod并查看一下</h2>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@master mysql]#  kubectl exec -it xgp-mysql-mysql-67c6fb5f9-dn7s2 -- mysql -u root -p123.com<br>mysql&gt; show databases;<br><span class="hljs-code">+--------------------+</span><br>| Database           |<br><span class="hljs-code">+--------------------+</span><br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br>| sys                |<br><span class="hljs-code">+--------------------+</span><br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure>
<h1>四、总结</h1>
<p><strong>Helm作为kubernetes应用的包管理以及部署工具，提供了应用打包，发布，版本管理以及部署，升级，回退等功能。Helm以Chart软件包的形式简化Kubernetes的应用管理，提高了对用户的友好性。</strong></p>
<h2 id="使用心得">使用心得</h2>
<p><strong>helm 客户端的功能非常简单，直接参考官网文档即可。</strong></p>
<p><strong>列一下相关使用心得：</strong></p>
<ul>
<li><strong>Helm 的所有功能都是围绕着 chart、release 和 repository 的；</strong></li>
<li><strong>仅初始化客户端相关配置且仅建立本地仓库，可执行 <code>helm init --client-only --skip-refresh</code>；</strong></li>
<li><strong>查找 chart 的方式是通过 HELM_HOME（默认是 ~/.helm 目录）下的 repositories 目录进行的，几个重要文件或目录为 cache、repositories/cache；</strong></li>
<li><strong>修改 chart index.yaml 的 url，可执行 <code>helm serve --url http://demo.com</code> 来重新 reindex；</strong></li>
<li><strong>依赖关系管理，requirements定义，子 chart 值定义；</strong></li>
<li><strong>install 、 update 的方式管理不方便，这样需要维护 chart 的版本关系，集成 install 和 update ，组成类似 k8s 中的 apply 命令；</strong></li>
<li><strong>package 命令 -u 可以更新依赖，建议推到 repositiories 前先 package ，否则后期可能出现依赖检测不全的错误；</strong></li>
<li><strong>release 相关的信息存储在 k8s 的 configmap 中，命名形式为 release_name.v1 的格式。 rollback 相关功能就是通过存储在 configmap 中的信息进行回滚的；</strong></li>
<li><strong>Helm 客户端与 k8s 中的 TillerServer 是通过 k8s 提供的 port-forward 来实现的，而 port-forward 需要在指定节点上部署 socat；</strong></li>
<li><strong>TillerServer 可以不部署在 k8s 中， 此时 Helm 客户端需要通过 HELM_HOST 环境变量来指定 TillerServer 的地址和端口；</strong></li>
<li><strong>建议 TillerServer 部署在 k8s 中，既然 Helm 为 CNCF 的一员，那么就尽量把云原生做到极致吧；</strong></li>
<li><strong>写 chart 时多参考官方最佳实践，<a href="https://docs.helm.sh/chart_best_practices/" target="_blank" rel="noopener">The Chart Best Practices Guide</a>；</strong></li>
</ul>
<h2 id="不足">不足</h2>
<p><strong>Helm 虽然提供了 install、update 命令来安装或更新对应的 release，但这给使用者带来了需要维护 release 状态的压力。举个例子，在还没安装 release 之前，release 是不存在的，update 操作是会失败的。反之已经存在的 release，install 操作也会失败。其实大部分情况下我是不需要知道 release 的状态的，不管它存在还是不存在，我执行的命令就是我希望的意图，我希望 release 能成为我执行命令后的状态。这一点上 k8s 的 apply 命令就非常好，不需要用户来维护资源的状态。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>21 k8s的持续集成</title>
    <url>/posts/c0fd.html</url>
    <content><![CDATA[<h2 id="实验环境">实验环境</h2>
<table>
<thead>
<tr>
<th>IP</th>
<th>主机名称</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>192.168.1.21</strong></td>
<td><strong>master</strong></td>
<td><strong>k8s</strong></td>
</tr>
<tr>
<td><strong>192.168.1.22</strong></td>
<td><strong>node01</strong></td>
<td><strong>k8s</strong></td>
</tr>
<tr>
<td><strong>192.168.1.10</strong></td>
<td><strong>git</strong></td>
<td><strong>gitlab</strong></td>
</tr>
<tr>
<td><strong>192.168.1.13</strong></td>
<td><strong>jenkins</strong></td>
<td><strong>jenkins</strong></td>
</tr>
</tbody>
</table>
<p>![image-20200309134708695](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200309134708695.png)</p>
<p><strong>总体流程：</strong></p>
<ul>
<li><strong>在开发机开发代码后提交到gitlab</strong></li>
<li><strong>之后通过webhook插件触发jenkins进行构建，jenkins将代码打成docker镜像，push到docker-registry</strong></li>
<li><strong>之后将在k8s-master上执行rc、service的创建，进而创建Pod，从私服拉取镜像，根据该镜像启动容器</strong></li>
</ul>
<p><strong>应用构建和发布流程说明。</strong></p>
<ol>
<li><strong>用户向Gitlab提交代码，代码中必须包含<code>Dockerfile</code></strong></li>
<li><strong>将代码提交到远程仓库</strong></li>
<li><strong>用户在发布应用时需要填写git仓库地址和分支、服务类型、服务名称、资源数量、实例个数，确定后触发Jenkins自动构建</strong></li>
<li><strong>Jenkins的CI流水线自动编译代码并打包成docker镜像推送到Harbor镜像仓库</strong></li>
<li><strong>Jenkins的CI流水线中包括了自定义脚本，根据我们已准备好的kubernetes的YAML模板，将其中的变量替换成用户输入的选项</strong></li>
<li><strong>生成应用的kubernetes YAML配置文件</strong></li>
<li><strong>更新Ingress的配置，根据新部署的应用的名称，在ingress的配置文件中增加一条路由信息</strong></li>
<li><strong>更新PowerDNS，向其中插入一条DNS记录，IP地址是边缘节点的IP地址。关于边缘节点，请查看<a href="https://jimmysong.io/kubernetes-handbook/practice/edge-node-configuration.html" target="_blank" rel="noopener">边缘节点配置</a></strong></li>
<li><strong>Jenkins调用kubernetes的API，部署应用</strong></li>
</ol>
<h1>一、前期工作</h1>
<h2 id="1、先验证k8s集群（1-21和1-22）">1、先验证k8s集群（1.21和1.22）</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get nodes<br></code></pre></td></tr></table></figure>
<p>![image-20200306083959440](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306083959440.png)</p>
<h2 id="2、master部署私有仓库">2、master部署私有仓库</h2>
<h3 id="Docker01部署"><strong>Docker01部署</strong></h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">72</span> docker pull registry<br><span class="hljs-comment">//下载registry镜像</span><br><br><span class="hljs-number">73</span> docker run -itd --name registry -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> --restart=always registry:latest<br><span class="hljs-comment">//基于registry镜像，启动一台容器</span><br><br><span class="hljs-number">78</span> vim /usr/lib/systemd/system/docker.service #<span class="hljs-number">13</span>行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span> <br><br><span class="hljs-number">80</span> systemctl daemon-reload<br><span class="hljs-number">81</span> systemctl restart docker.service<br><span class="hljs-comment">//重启docker</span><br><br><span class="hljs-number">76</span> docker tag httpd:latest <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>/web:v1 <br><span class="hljs-number">76</span> docker tag httpd:latest <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>/web:v2<br><span class="hljs-comment">//把容器重命名一个标签</span><br><br><span class="hljs-number">77</span> docker ps<br></code></pre></td></tr></table></figure>
<p>![image-20200309101144205](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200309101144205.png)</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">78</span> vim /usr/lib/systemd/system/docker.service #<span class="hljs-number">13</span>行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span> <br><br><br><span class="hljs-number">80</span> systemctl daemon-reload<br><span class="hljs-number">81</span> systemctl restart docker.service<br><span class="hljs-comment">//重启docker</span><br><br><span class="hljs-number">100</span> docker push <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>/web:v1<br><span class="hljs-number">100</span> docker push <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>/web:v2<br><span class="hljs-comment">//上传容器到私有仓库</span><br></code></pre></td></tr></table></figure>
<h3 id="Docker02和docker03加入私有仓库"><strong>Docker02和docker03加入私有仓库</strong></h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">78</span> vim /usr/lib/systemd/system/docker.service #<span class="hljs-number">13</span>行修改<br>ExecStart=/usr/bin/dockerd --insecure-registry <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span>:<span class="hljs-number">5000</span>  <br><br><span class="hljs-number">80</span> systemctl daemon-reload<br><span class="hljs-number">81</span> systemctl restart docker.service<br><span class="hljs-comment">//重启docker</span><br><br><span class="hljs-number">99</span> docker pull <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web:v1<br><span class="hljs-comment">//测试下载</span><br></code></pre></td></tr></table></figure>
<h2 id="3、然后重要的地方到了，建立-yaml配置文件让kubernetes自己控制容器集群。"><strong>3、然后重要的地方到了，建立 yaml配置文件让kubernetes自己控制容器集群。</strong></h2>
<p><em><strong>用来模拟我们部署的服务</strong></em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">app]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web:v1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span>     <span class="hljs-comment">#改为本地仓库下载</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>
<p>执行一下</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl apply -f deploy.yaml</span><br></code></pre></td></tr></table></figure>
<p>查看一下</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200306085507559](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306085507559.png)</p>
<h3 id="可是容器的ip只能在容器本机上访问，集群内的其他主机和集群外的主机都没办法访问，这个时候就需要将容器的端口映射到服务器上的端口了，所以需要做一个service的模板。service-模板可以将容器的端口映射到服务器的端口上，并且可以固定映射在服务器上的端口。"><strong>可是容器的ip只能在容器本机上访问，集群内的其他主机和集群外的主机都没办法访问，这个时候就需要将容器的端口映射到服务器上的端口了，所以需要做一个service的模板。service 模板可以将容器的端口映射到服务器的端口上，并且可以固定映射在服务器上的端口。</strong></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">app]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deploy-svc.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31234</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br></code></pre></td></tr></table></figure>
<p><strong>执行一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl apply -f deploy-svc.yaml</span><br></code></pre></td></tr></table></figure>
<p><strong>查看一下</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200306085725863](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306085725863.png)</p>
<p><strong>访问一下http://192.168.1.21:31234/</strong></p>
<p>![image-20200306085846077](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306085846077.png)</p>
<h3 id="《ok-kubernetes-完毕，-开始配置-jenkins-gitlab联动》"><strong>《ok kubernetes</strong> <strong>完毕， 开始配置 jenkins+gitlab联动》</strong></h3>
<h3 id="4、git和jenkins加入私有仓库">4、git和jenkins加入私有仓库</h3>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-number">78</span> vim /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">systemd</span>/<span class="hljs-title">system</span>/<span class="hljs-title">docker</span>.<span class="hljs-title">service</span> <span class="hljs-comment">#13行修改</span></span><br>ExecStart=<span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/dockerd --insecure-registry 192.168.1.11:5000  </span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">80 systemctl daemon-reload</span><br><span class="hljs-regexp">81 systemctl restart docker.service</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/重启docker</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">99 docker pull 192.168.1.11/busybox</span>:v1<br>/<span class="hljs-regexp">/测试下载</span><br></code></pre></td></tr></table></figure>
<h3 id="5、jenkins服务器向k8smaster做免密登录">5、jenkins服务器向k8smaster做免密登录</h3>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">100 </span>ssh-copy-id <span class="hljs-number">192.168.1.21</span><br></code></pre></td></tr></table></figure>
<h1>二、安装jenkins（1.13）</h1>
<h3 id="安装java环境">安装java环境</h3>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal">[root@jenkins ~]<span class="hljs-comment"># tar -zxf jdk-8u231-linux-x64.tar.gz</span><br><br>[root@jenkins ~]<span class="hljs-comment"># mv jdk1.8.0_131 /usr/java</span><br><span class="hljs-comment">#注意 这里有位置敏感，不要多一个“/”</span><br>[root@jenkins ~]<span class="hljs-comment"># vim /etc/profile #在最下面写</span><br><br>export JAVA_HOME=<span class="hljs-regexp">/usr/java</span><br>export JRE_HOME=<span class="hljs-regexp">/usr/java</span><span class="hljs-regexp">/jre</span><br><span class="hljs-regexp">export PATH=$JAVA_HOME/bin</span>:$JRE_HOME/<span class="hljs-symbol">bin:</span>$PATH<br>export CLASSPATH=$JAVA_HOME/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">tools</span>.<span class="hljs-title">jar</span>:$<span class="hljs-title">JAVA_HOME</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">dt</span>.<span class="hljs-title">jar</span></span><br><br>[root@jenkins ~]<span class="hljs-comment">#  source /etc/profile</span><br>/<span class="hljs-regexp">/环境变量生效</span><br><span class="hljs-regexp">[root@jenkins ~]#  java -version</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/验证环境变量</span><br></code></pre></td></tr></table></figure>
<p>![image-20200306091443071](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306091443071.png)</p>
<h3 id="安装tomcat">安装tomcat</h3>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># tar -zxf apache-tomcat-7.0.54.tar.gz </span><br>[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># mv apache-tomcat-7.0.54 /usr/tomcat7</span><br>[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># cd /usr/tomcat7/webapps/</span><br>[<span class="hljs-meta">root@jenkins webapps</span>]<span class="hljs-meta"># rm -rf *</span><br>[<span class="hljs-meta">root@jenkins webapps</span>]<span class="hljs-meta"># cp /root/jenkins.war . #这几步是jenkins的包放进了tomcat里</span><br>[<span class="hljs-meta">root@jenkins webapps</span>]<span class="hljs-meta"># vim /usr/tomcat7/conf/server.xml </span><br><span class="hljs-comment">//修改tomcat的字符集</span><br></code></pre></td></tr></table></figure>
<p>![image-20200306092022390](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306092022390.png)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@jenkins webapps]<span class="hljs-comment"># cd /usr/tomcat7/bin/</span><br><br>[root@jenkins bin]<span class="hljs-comment"># vim catalina.sh </span><br><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">export</span> CATALINA_OPTS=<span class="hljs-string">"-DJENKINS_HOME=/data/jenkins"</span><br><span class="hljs-built_in">export</span> JENKINS_JAVA_OPTIONS=<span class="hljs-string">"-Djava.awt.headless=true -Dhudson.ClassicPluginStrategy.noBytecodeTransformer=true"</span><br>//这两行添加的是jenkins的家目录位置，这个很重要<br><br>[root@jenkins bin]<span class="hljs-comment"># ./catalina.sh start </span><br>//启动tomcat<br></code></pre></td></tr></table></figure>
<p>![image-20200306092523262](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306092523262.png)</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>jenkins bin]# netstat -anput | grep <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure>
<p>![image-20200306110511541](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306110511541.png)</p>
<h3 id="浏览器安装jenkins">浏览器安装jenkins</h3>
<p><a href="http://192.168.1.11:8080/jenkins" target="_blank" rel="noopener">http://192.168.1.11:8080/jenkins</a></p>
<p>![image-20200306110627790](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306110627790.png)</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@jenkins bin</span>]<span class="hljs-meta"># cat /data/jenkins/secrets/initialAdminPassword</span><br>c577cbf75d934878a94b0f9e00ada328   <span class="hljs-comment">//复制密码</span><br></code></pre></td></tr></table></figure>
<h3 id="（1）推荐安装">（1）推荐安装</h3>
<p>![image-20200308124155279](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200308124155279.png)</p>
<p><strong>#左边是自动安装， 右边是自定义安装，我们选左边的，如果不是这个画面则说明网络很卡或者没有网(推荐使用右边的，然后选择不安装插件，之后可以自定义安装）</strong></p>
<p>![image-20200306151852889](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306151852889.png)</p>
<h3 id="（2）这个是自定义安装（自己上传的包）">（2）这个是自定义安装（自己上传的包）</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web bin]# ./catalina.sh stop<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web ~]# cd /data/jenkins/plugins/<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web jenkins]# mv plugins plugins/.bk<br>然后上传plugins.tar.gz包：<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web jenkins]# tar -zxf plugins.tar.gz <br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web ~]# cd /usr/tomcat7/bin/<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web bin]# ./catalina.sh stop<br>[<span class="hljs-symbol">root@</span><span class="hljs-built_in">auto</span>web bin]# ./catalina.sh start<br></code></pre></td></tr></table></figure>
<p>![image-20200306110627790](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306110627790.png)</p>
<p><strong>输入密码后断网</strong></p>
<p>![image-20200308124449039](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200308124449039.png)</p>
<p>![image-20200308123936170](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200308123936170.png)</p>
<h3 id="（3）两个剩下的方法一样">（3）两个剩下的方法一样</h3>
<p>![image-20200306151900827](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306151900827.png)</p>
<p>![image-20200306151905668](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306151905668.png)</p>
<p>![image-20200306151911675](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306151911675.png)</p>
<h4 id="下载中文插件"><strong>下载中文插件</strong></h4>
<p><strong>系统管理-----&gt;插件管理-----&gt;avalilable(可选)然后搜索localization-zh-cn</strong></p>
<p>![image-20200306152834083](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306152834083.png)</p>
<p>![image-20200306152957419](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306152957419.png)</p>
<p><strong>然后还需要3个插件</strong></p>
<p>![image-20200306153713286](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306153713286.png)</p>
<h1>三、安装gitlab（1.10）</h1>
<p><strong>GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 .gitlab-ci.yaml 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机(vmware、virtualbox)进行 build等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下</strong></p>
<p>![image-20200309140112958](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200309140112958.png)</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># yum -y install curl policycoreutils openssh-server openssh-clients postfix git</span><br><span class="hljs-meta"># systemctl enable sshd</span><br><span class="hljs-meta"># systemctl start sshd</span><br><span class="hljs-meta"># systemctl enable postfix</span><br><span class="hljs-meta"># systemctl start postfix</span><br></code></pre></td></tr></table></figure>
<p>![image-20200306112315163](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306112315163.png)</p>
<h3 id="安装gitlab-ce"><strong>安装gitlab-ce</strong></h3>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">[root@git ~]# curl -sS http<span class="hljs-variable">s:</span>//packages.gitlab.<span class="hljs-keyword">com</span>/install/repositories/gitlab/gitlab-<span class="hljs-keyword">ce</span>/script.rpm.<span class="hljs-keyword">sh</span> | sudo bash<br></code></pre></td></tr></table></figure>
<p><strong>注：由于网络问题，国内用户，使用清华大学的镜像源进行安装：</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># vim /etc/yum.repos.d/gitlab-ce.repo</span><br>[<span class="hljs-meta">gitlab-ce</span>]<br>name=gitlab-ce<br>baseurl=http:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br>repo_gpgcheck=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">0</span><br>enabled=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-comment">//packages.gitlab.com/gpg.key</span><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># yum makecache</span><br><span class="hljs-comment">//保存到本地</span><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># yum -y install gitlab-ce </span><br><span class="hljs-meta">#这两条命令是把gitlab源先加入了yum，然后yum下载gitlab</span><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># vim /etc/gitlab/gitlab.rb </span><br><span class="hljs-comment">//修改端口是为了防止端口冲突，因为80默认是http服务的 </span><br><br>external_url <span class="hljs-string">'http://192.168.1.21:90'</span>  <span class="hljs-meta">#端口， unicorn默认是8080 也是tomcat的端口 </span><br>unicorn[<span class="hljs-string">'listen'</span>] = <span class="hljs-string">'127.0.0.1'</span><br>unicorn[<span class="hljs-string">'port'</span>] = <span class="hljs-number">3000</span> <br><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># gitlab-ctl reconfigure </span><br><span class="hljs-comment">//启动gitlab，这个过程可能会有点慢</span><br><br><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># ls /etc/yum.repos.d/</span><br><span class="hljs-comment">//查看一下</span><br></code></pre></td></tr></table></figure>
<p>![image-20200306141100803](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306141100803.png)</p>
<h3 id="访问192-168-1-10-90">访问192.168.1.10:90</h3>
<p><strong>在网页配置用户密码后则安装完毕。用户默认root，这里让设置一个密码再登录，<a href="http://xn--12345-of3np30ehqhlqe.com" target="_blank" rel="noopener">这里设置12345.com</a>（相对较短的密码不让设置）</strong></p>
<p>![image-20200306141728312](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306141728312.png)</p>
<p>![image-20200306142041682](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306142041682.png)</p>
<p>![image-20200306142219600](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306142219600.png)</p>
<h1>四、jenkins和gitlab相互关联</h1>
<p><strong>jenkins：工具集成平台</strong></p>
<p><strong>gitlab: 软件托管平台</strong></p>
<p><strong>部署这两个服务的联动，需要经过ssh验证。</strong></p>
<h2 id="1、首先我们需要在gitlab上绑定jenkins服务器的ssh公钥，这里我们使用的是root用户的公私钥，切记生产环境是不允许随便用root的">1、<strong>首先我们需要在gitlab上绑定jenkins服务器的ssh公钥，这里我们使用的是root用户的公私钥，切记生产环境是不允许随便用root的</strong></h2>
<h3 id="（1）jenkins"><strong>（1）jenkins</strong></h3>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># ssh-keygen -t rsa </span><br><span class="hljs-comment">//然后不输入只回车会生成一对公私钥</span><br></code></pre></td></tr></table></figure>
<h4 id="默认在-root-ssh-目录里"><strong>默认在/root/.ssh/目录里</strong></h4>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">[root@jenkins ~]<span class="hljs-comment"># cat /root/.ssh/id_rsa.pub </span><br><span class="hljs-regexp">//</span>查看公钥并复制<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMA4+je3NsxZrF2v8TPLXJp1ejwy1YokXipEFyGVNo5IbtkiBDwBLOAl5i7yromY8YGgoNNriE2g89IM<span class="hljs-regexp">/44BGC5UDCokQ69Ze9Ta9Kynv3/</span><span class="hljs-number">1</span>PDFXIABJJG0f6LsUqt0nKFaFoGz3ZuYAnl6AzLpXEic8DBDrsFk+UGrxvMfSEqHlYO2b7jRXE1HGRnqI<span class="hljs-regexp">/IcVB190cLT1kmBKi7hSqUNBc1cY6t3a6gGiBpp9tc8PW4r/</span>RcLblhAL1LKx8x37NOZkqox8IMh3eM<span class="hljs-regexp">/wtWwAVFlI8XU+sz9akzJOVmd1ArT5Q4w8WA/u</span>VHCDUGVI<span class="hljs-regexp">/fli/</span>ZRv+mNZyF3EH26runctb5LkCT root@jenkins<br></code></pre></td></tr></table></figure>
<h3 id="（2）gitlab">（2）gitlab</h3>
<p>![image-20200306195836403](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306195836403.png)</p>
<h4 id="在这里放刚才拷贝的公钥保存就行了。"><strong>在这里放刚才拷贝的公钥保存就行了。</strong></h4>
<p>![image-20200306200026493](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306200026493.png)</p>
<p>![image-20200306200103458](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306200103458.png)</p>
<h4 id="我们先在gitlab上创建一个代码仓库-点击-new-project"><strong>我们先在gitlab上创建一个代码仓库 点击 new project</strong></h4>
<p>![image-20200306200156932](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306200156932.png)</p>
<p><strong>输入一个仓库的名字，权限选择公共的（public）然后直接点击创建</strong></p>
<p>![image-20200306200431858](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306200431858.png)</p>
<h4 id="点击新建一个new-file"><strong>点击新建一个new.file</strong></h4>
<p>![image-20200306201437862](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306201437862.png)</p>
<h4 id="写入代码，起一个名字然后保存"><strong>写入代码，起一个名字然后保存</strong></h4>
<p>![image-20200306201558158](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306201558158.png)</p>
<h4 id="创建好了，然后在本地测试一下是否可用"><strong>创建好了，然后在本地测试一下是否可用</strong></h4>
<p>![image-20200306201744679](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306201744679.png)</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># mkdir xgp</span><br>[<span class="hljs-meta">root@git ~</span>]<span class="hljs-meta"># cd xgp/</span><br>[<span class="hljs-meta">root@git xgp</span>]<span class="hljs-meta"># git clone git@192.168.1.10:root/xgp-demo.git</span><br><span class="hljs-comment">//克隆xgp-demo仓库到本地</span><br><br>[<span class="hljs-meta">root@git xgp</span>]<span class="hljs-meta"># ls xgp-demo/</span><br>index.html<br>[<span class="hljs-meta">root@git xgp</span>]<span class="hljs-meta"># cat xgp-demo/index.html </span><br>print: <span class="hljs-string">"hello word!!!"</span><br><span class="hljs-comment">//查看一下</span><br></code></pre></td></tr></table></figure>
<h3 id="（3）自动构建">（3）自动构建</h3>
<p><strong>安装插件</strong></p>
<p><strong>先进入到之前查看插件的地方</strong></p>
<p><strong>系统设置----插件管理----高级_—上传插件gitlab-oauth、gitlab-plugin、 windows-slaves、ruby-runt ime、gitlab-hook</strong></p>
<p>![image-20200306212734302](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306212734302.png)</p>
<h3 id="（4）如果可以用，则打开jenkins-点击新建">（4）如果可以用，则打开jenkins 点击新建</h3>
<p>![image-20200306202647670](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306202647670.png)</p>
<p>![image-20200306202724313](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306202724313.png)</p>
<h4 id="地址粘贴进去以后没有报错则没错"><strong>地址粘贴进去以后没有报错则没错</strong></h4>
<p>![image-20200306203441474](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306203441474.png)</p>
<p><strong>但是很伤心它报错了，那是因为jenkins和git没有关联上</strong></p>
<h3 id="解决">解决</h3>
<p>![image-20200306203407502](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306203407502.png)</p>
<h4 id="git主机生成ssh密钥">git主机生成ssh密钥</h4>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># ssh-keygen -t rsa </span><br><span class="hljs-comment">//然后不输入只回车会生成一对公私钥</span><br>[<span class="hljs-meta">root@jenkins ~</span>]<span class="hljs-meta"># cat /root/.ssh/id_rsa   </span><br><span class="hljs-comment">//查看密钥并复制</span><br></code></pre></td></tr></table></figure>
<p>![image-20200306203947496](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306203947496.png)</p>
<p>![image-20200306204232588](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306204232588.png)</p>
<p><strong>下面的这个插件很重要，就是他实现自动化更新的webhook插件，安装过了就会有这条，然后点击这条下面出来的这些东西保持默认就行。同时注意复制</strong></p>
<p><strong>这个里面写的是jenkins构建时候会执行的shell脚本，这个是最重要的，就是他实现了下端kubernetes自动更新容器的操作。</strong></p>
<p>![image-20200306204512237](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306204512237.png)</p>
<p>![image-20200306204948462](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306204948462.png)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>backupcode=<span class="hljs-string">"/data/backcode/<span class="hljs-variable">$JOB_NAME</span>/<span class="hljs-variable">$BUILD_NUMBER</span>"</span>  <br>mkdir -p <span class="hljs-variable">$backupcode</span>     <span class="hljs-comment">#jenkins创建上述目录</span><br>chmod 644 <span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/<span class="hljs-string">"<span class="hljs-variable">$JOB_NAME</span>"</span>/*<br>rsync -acP   <span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/<span class="hljs-string">"<span class="hljs-variable">$JOB_NAME</span>"</span>/*  <span class="hljs-variable">$backupcode</span> <span class="hljs-comment">#$JENKINS_HOME和$JOB_NAME同步最新消息</span><br><span class="hljs-comment">#ssh root@192.168.1.21 sed -i 's/v1/v2/g' /root/app/deploy.yaml #更改镜像版本</span><br><span class="hljs-built_in">echo</span> From  192.168.1.21:5000/web:v1 &gt; <span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/Dockerfile<br><span class="hljs-built_in">echo</span> COPY ./<span class="hljs-string">"<span class="hljs-variable">$JOB_NAME</span>"</span>/* /usr/<span class="hljs-built_in">local</span>/apache2/htdocs/ &gt;&gt; <span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/Dockerfile<br>docker rmi 192.168.1.21:5000/web:v1<br>docker build -t 192.168.1.21:5000/web:v1 /<span class="hljs-string">"<span class="hljs-variable">$JENKINS_HOME</span>"</span>/workspace/.<br>docker push 192.168.1.21:5000/web:v1<br>ssh root@192.168.1.21 kubectl delete deployment web<br>ssh root@192.168.1.21 kubectl apply -f /root/app/deploy.yaml<br></code></pre></td></tr></table></figure>
<blockquote>
<p><strong>$JOB_NAME：项目名称</strong></p>
<p><strong>$BUILD_NUMBER：第几次构建</strong></p>
<p><strong>$JENKINS_HOME：jenkins的家目录</strong></p>
</blockquote>
<p><strong>完事以后先别保存，首先复制一下上面的jenkins地址，然后去gitlab上绑定webhook</strong></p>
<p>![image-20200306213050759](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306213050759.png)</p>
<p><strong>保存，登陆gitlab，点击下图这个设置</strong></p>
<p>![image-20200306213514819](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306213514819.png)</p>
<p>![image-20200306213829519](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306213829519.png)</p>
<p><strong>测试显示下图 的蓝条说明jenkins 已经连通了gitlab</strong></p>
<p>![image-20200306214117715](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306214117715.png)</p>
<p>![image-20200306215322180](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306215322180.png)</p>
<h4 id="回到Jenkins开启匿名访问权限"><strong>回到Jenkins开启匿名访问权限</strong></h4>
<p>![image-20200306215429619](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306215429619.png)</p>
<p>![image-20200306215504413](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306215504413.png)</p>
<p>![	](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306215539717.png)</p>
<p>![image-20200306215611348](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306215611348.png)</p>
<p><strong>测试显示下图 的蓝条说明jenkins 已经连通了gitlab</strong></p>
<p>![image-20200306214126410](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200306214126410.png)</p>
<p><strong>好了，jenkins和gitlab 都已经互相的ssh通过了，然后我们最后需要做的一个ssh是关于jenkins</strong></p>
<p><strong>///注意，这里是从git和jenkins向master节点做免密登录。</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>git ~]# ssh-copy-id <span class="hljs-symbol">root@</span><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>[<span class="hljs-symbol">root@</span>jenkins ~]# ssh-copy-id <span class="hljs-symbol">root@</span><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure>
<p><strong>好了，环境全部部署完毕！！！。开始测试</strong></p>
<h1>五、测试</h1>
<p><strong>测试的方法很简单，就是在gitlab上新建代码，删除代码，修改代码，都会触发webhook进行自动部署。最终会作用在所有的nginx容器中，也就是我们的web服务器。</strong></p>
<p>![image-20200309100434912](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200309100434912.png)</p>
<p><strong>这里我修改了之前建立的 index.html文件 保存以后，就打开浏览器 一直访问kubernetes-node 里面的容器了</strong></p>
<p>![image-20200309100445830](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200309100445830.png)</p>
<p>![image-20200309100530210](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200309100530210.png)</p>
<h2 id="访问一下http-192-168-1-21-31234">访问一下http://192.168.1.21:31234/</h2>
<p><em><strong>如果没有变，应该注意查看是否在jenkins上构建完成，等以小会就可以了。</strong></em></p>
<p>![image-20200309100557309](G:\四期\虚拟化\kubernetes\k8s文档\21 k8s持续集成.assets\image-20200309100557309.png)</p>
<p><strong>构建成功</strong></p>
<h1>六、GitLab CI 总结</h1>
<p><strong>CS 架构</strong><br>
GitLab 作为 Server 端，控制 Runner 端执行一系列的 CI 任务；代码 clone 等无需关心，GitLab 会自动处理好一切；Runner 每次都会启动新的容器执行 CI 任务</p>
<p><strong>容器即环境</strong><br>
在 Runner 使用 Docker build 的前提下；所有依赖切换、环境切换应当由切换不同镜像实现，即 build 那就使用 build 的镜像，deploy 就用带有 deploy 功能的镜像；通过不同镜像容器实现完整的环境隔离</p>
<p><strong>CI即脚本</strong><br>
不同的 CI 任务实际上就是在使用不同镜像的容器中执行 <a href="https://www.centos.bz/tag/shell/" target="_blank" rel="noopener">SHELL</a> 命令，自动化 CI 就是执行预先写好的一些小脚本</p>
<p><strong>敏感信息走环境变量</strong><br>
一切重要的敏感信息，如账户密码等，不要写到 CI 配置中，直接放到 GitLab 的环境变量中；GitLab 会保证将其推送到远端 Runner 的 SHELL 变量中</p>
]]></content>
  </entry>
  <entry>
    <title>20 k8s的helm模板</title>
    <url>/posts/c224.html</url>
    <content><![CDATA[<h1>自定义helm模板</h1>
<p><a href="https://hub.helm.sh/" target="_blank" rel="noopener">https://hub.helm.sh/</a></p>
<h2 id="1、开发自己的chare包">1、开发自己的chare包</h2>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># helm create mychare<br><span class="hljs-comment">//创建一个名为mychare的chare包</span><br><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># tree -C mychare/<br><span class="hljs-comment">//以树状图查看一下chare包</span><br>mychare/<br>├── charts<br>├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Chart</span>.</span></span>yaml<br>├── templates<br>│   ├── deployment.yaml<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_helpers</span>.</span></span>tpl<br>│   ├── ingress.yaml<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NOTES</span>.</span></span>txt<br>│   ├── service.yaml<br>│   └── tests<br>│       └── test-connection.yaml<br>└── values.yaml<br></code></pre></td></tr></table></figure>
<h2 id="2、调试chart">2、调试chart</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># cd</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install --dry-run --debug mychare<br>//检查这个mychare是否有问题<br></code></pre></td></tr></table></figure>
<h2 id="3、安装chart">3、安装chart</h2>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node02</span> ~]<span class="hljs-meta"># docker pull nginx:stable</span><br></code></pre></td></tr></table></figure>
<h3 id="（1）通过仓库安装">（1）通过仓库安装</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># helm search redis</span><br>//搜索chare包<br></code></pre></td></tr></table></figure>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># helm repo list</span><br>//查看是否有能访问仓库<br></code></pre></td></tr></table></figure>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># helm install stable/redis</span><br>//安装<br></code></pre></td></tr></table></figure>
<h3 id="（2）通过tar包安装">（2）通过tar包安装</h3>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># helm fetch stable/redis<br><span class="hljs-comment">//直接下载chare包</span><br><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># tar -zxf redis-<span class="hljs-number">1.1</span>.<span class="hljs-number">15.</span>tgz<br><span class="hljs-comment">//解压下载的chare包</span><br><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">master</span> ~]</span># tree -C redis<br>redis<br>├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Chart</span>.</span></span>yaml<br>├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">README</span>.</span></span>md<br>├── templates<br>│   ├── deployment.yaml<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_helpers</span>.</span></span>tpl<br>│   ├── networkpolicy.yaml<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NOTES</span>.</span></span>txt<br>│   ├── pvc.yaml<br>│   ├── secrets.yaml<br>│   └── svc.yaml<br>└── values.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（3）通过chare本地目录安装">（3）通过chare本地目录安装</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> fetch stable/redis<br>//直接下载chare包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# tar</span> -zxf redis-<span class="hljs-number">1.1</span>.<span class="hljs-number">15</span>.tgz<br>//解压下载的chare包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install redis<br></code></pre></td></tr></table></figure>
<h3 id="（4）通过URL安装">（4）通过URL安装</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install https://example.com/charts/foo-<span class="hljs-number">1.2</span>.<span class="hljs-number">3</span>.tgz<br></code></pre></td></tr></table></figure>
<p>使用本地目录安装：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# cd</span> mychare/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># vim values.yaml</span><br></code></pre></td></tr></table></figure>
<p>![image-20200304094840738](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304094840738.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mychare</span>]<span class="hljs-comment"># cd templates/</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">templates</span>]<span class="hljs-comment"># vim service.yaml</span><br></code></pre></td></tr></table></figure>
<p>![image-20200304095647172](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304095647172.png)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master templates]# cd <span class="hljs-built_in">..</span><br>[root@master mychare]# helm install -n test <span class="hljs-built_in">..</span>/mychare/<br>[root@master ~]# helm<span class="hljs-built_in"> upgrade </span>test mychare/ -f  mychare/values.yaml<br></code></pre></td></tr></table></figure>
<h2 id="4、例子">4、例子</h2>
<p><strong>使用mychart部署一个实例: xgp。使用镜像为私有镜像v1 版本。</strong></p>
<p><strong>完成之后，镜像版本。</strong></p>
<p><strong>全部成功之后，将实例做一个升级，将镜像改为v2版本。</strong></p>
<h3 id="更改镜像为私有镜像">更改镜像为私有镜像</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> mychare/values.yaml<br></code></pre></td></tr></table></figure>
<p>![image-20200304104416415](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304104416415.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  helm</span> install -n xgp mychare/ -f mychare/values.yaml<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200304104645260](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304104645260.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vim</span> mychare/values.yaml<br></code></pre></td></tr></table></figure>
<p>![image-20200304105120894](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304105120894.png)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master ~]# helm<span class="hljs-built_in"> upgrade </span> xgp mychare/  -f mychare/values.yaml <br>[root@master ~]# kubectl <span class="hljs-builtin-name">get</span> deployments. -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200304105211506](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304105211506.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> edit deployments. xgp-mychare<br></code></pre></td></tr></table></figure>
<p>![image-20200304105334541](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304105334541.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200304105359184](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304105359184.png)</p>
<h1>创建自己的Repo仓库</h1>
<h2 id="1、node01启动一个httpd的容器">1、node01启动一个httpd的容器</h2>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@node01 ~</span>]<span class="hljs-meta"># mkdir /var/xgp</span><br><span class="hljs-comment">//创建一个目录</span><br>[<span class="hljs-meta">root@node01 ~</span>]<span class="hljs-meta"># docker pull httpd</span><br><span class="hljs-comment">//下载httpd镜像</span><br>[<span class="hljs-meta">root@node02 ~</span>]<span class="hljs-meta"># docker run -d -p 8080:80 -v /var/xgp:/usr/local/apache2/htdocs httpd</span><br><span class="hljs-comment">//启动一个httpd的容器</span><br></code></pre></td></tr></table></figure>
<h2 id="2、master节点上，将mychart目录打包。">2、master节点上，将mychart目录打包。</h2>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# helm package mychare/<br>Successfully packaged chart <span class="hljs-keyword">and</span> saved it to: /root/mychare<span class="hljs-number">-0.1</span><span class="hljs-number">.0</span>.tgz<br></code></pre></td></tr></table></figure>
<h2 id="3、生成仓库的index文件。">3、生成仓库的index文件。</h2>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# mkdir myrepo<br><span class="hljs-comment">//创建一个目录存放打包的chare</span><br>[<span class="hljs-symbol">root@</span>master ~]# mv mychare<span class="hljs-number">-0.1</span><span class="hljs-number">.0</span>.tgz myrepo/<br><span class="hljs-comment">//移动打包好的文件</span><br>[<span class="hljs-symbol">root@</span>master ~]# helm repo index myrepo/ --url http:<span class="hljs-comment">//192.168.1.22:8080/charts</span><br><span class="hljs-comment">//生成仓库的index文件</span><br>[<span class="hljs-symbol">root@</span>master ~]# ls myrepo/<br>index.yaml  mychare<span class="hljs-number">-0.1</span><span class="hljs-number">.0</span>.tgz<br></code></pre></td></tr></table></figure>
<h2 id="4、将生成的tar包和index-yaml上传到node01的-var-www-charts目录下">4、将生成的tar包和index.yaml上传到node01的/var/www/charts目录下.</h2>
<h3 id="node01创建目录">node01创建目录</h3>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node01</span> ~]<span class="hljs-meta"># mkdir /var/xgp/charts</span><br></code></pre></td></tr></table></figure>
<h3 id="master移动动到">master移动动到</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# scp</span> myrepo/* node01:/var/xgp/charts/<br></code></pre></td></tr></table></figure>
<h3 id="node01查看一下">node01查看一下</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>node01 ~]# ls /var/xgp/charts/<br>index.yaml  mychare<span class="hljs-number">-0.1</span><span class="hljs-number">.0</span>.tgz<br></code></pre></td></tr></table></figure>
<h2 id="5、添加新的repo仓库。">5、添加新的repo仓库。</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo add newrepo http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br></code></pre></td></tr></table></figure>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo list<br></code></pre></td></tr></table></figure>
<p>![image-20200304112410286](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304112410286.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> search mychare<br></code></pre></td></tr></table></figure>
<p>![image-20200304112443931](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304112443931.png)</p>
<h2 id="6、我们就可以直接使用新的repo仓库部署实例了。">6、我们就可以直接使用新的repo仓库部署实例了。</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install newrepo/mychare -n wsd<br></code></pre></td></tr></table></figure>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> list<br></code></pre></td></tr></table></figure>
<p>![image-20200304112515084](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304112515084.png)</p>
<h2 id="7-如果以后仓库中新添加了chart包-需要用helm-repo-update命玲更新本地的index文件。">7.如果以后仓库中新添加了chart包,需要用helm repo update命玲更新本地的index文件。</h2>
<p>练习：<br>
新创建一个bdqn.的chart包。然后将chart包上传到上述repo源中。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> create bdqn<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> package bdqn/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mv</span> bdqn-<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>.tgz myrepo/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  helm</span> repo index myrepo/ --url http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">myrepo</span>]<span class="hljs-comment"># scp bdqn-0.1.0.tgz index.yaml  node01:/var/xgp/charts</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">myrepo</span>]<span class="hljs-comment"># helm repo update</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">myrepo</span>]<span class="hljs-comment"># helm search bdqn</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">myrepo</span>]<span class="hljs-comment"># helm install http://192.168.1.22:8080/charts/bdqn-0.1.0.tgz</span><br></code></pre></td></tr></table></figure>
<h2 id="1）创建helm的私有仓库，以自己的名字命名。">1）创建helm的私有仓库，以自己的名字命名。</h2>
<h3 id="1、node01启动一个httpd的容器-2">1、node01启动一个httpd的容器</h3>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">root@node01 ~</span>]<span class="hljs-meta"># mkdir /var/xgp</span><br><span class="hljs-comment">//创建一个目录</span><br>[<span class="hljs-meta">root@node01 ~</span>]<span class="hljs-meta"># docker pull httpd</span><br><span class="hljs-comment">//下载httpd镜像</span><br>[<span class="hljs-meta">root@node02 ~</span>]<span class="hljs-meta"># docker run -d -p 8080:80 -v /var/xgp:/usr/local/apache2/htdocs httpd</span><br><span class="hljs-comment">//启动一个httpd的容器</span><br></code></pre></td></tr></table></figure>
<h3 id="3、生成仓库的index文件。-2">3、生成仓库的index文件。</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> xgprepo<br>//创建一个目录存放打包的chare<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo index xgprepo/ --url http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br>//生成仓库的index文件<br></code></pre></td></tr></table></figure>
<h3 id="4、将生成的index-yaml上传到node01的-var-www-charts目录下">4、将生成的index.yaml上传到node01的/var/www/charts目录下.</h3>
<h4 id="node01创建目录-2">node01创建目录</h4>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node01</span> ~]<span class="hljs-meta"># mkdir /var/xgp/charts</span><br></code></pre></td></tr></table></figure>
<h4 id="master移动动到-2">master移动动到</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# scp</span> xgprepo/* node01:/var/xgp/charts/<br></code></pre></td></tr></table></figure>
<h4 id="node01查看一下-2">node01查看一下</h4>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node01</span> ~]<span class="hljs-meta"># ls /var/xgp/charts/</span><br>index.yaml<br></code></pre></td></tr></table></figure>
<h3 id="5、添加新的repo仓库">5、添加新的repo仓库</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo add xgp http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo list<br></code></pre></td></tr></table></figure>
<p>![image-20200304132528938](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304132528938.png)</p>
<h2 id="2）-自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为-30000">2） 自定义一个chart包，要求这个包运行一个httpd的服务，使用私有镜像v1版本。3个副本Pod，service类型更改为NodePort，端口指定为:30000</h2>
<h4 id="自定义一个chart包">自定义一个chart包</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> create wsd<br>//创建一个名为wsd的chares包<br></code></pre></td></tr></table></figure>
<h4 id="按照要求修改配置文件">按照要求修改配置文件</h4>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master ~]<span class="hljs-meta"># cd wsd/</span><br><span class="hljs-comment">//进入这个chart包</span><br>[root@master wsd]<span class="hljs-meta"># vim values.yaml</span><br><span class="hljs-comment">//修改wsd的配置文件</span><br><span class="hljs-symbol">replicaCount:</span> <span class="hljs-number">3</span>                         <span class="hljs-meta">#三个副本</span><br><br><span class="hljs-symbol">image:</span><br><span class="hljs-symbol">  repository:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span>:<span class="hljs-number">5000</span>/web      <span class="hljs-meta">#更改镜像为私有镜像</span><br><span class="hljs-symbol">  tag:</span> v1                                <span class="hljs-meta">#镜像标签v1</span><br><span class="hljs-symbol">  pullPolicy:</span> IfNotPresent              <br><br><span class="hljs-symbol">imagePullSecrets:</span> []<br><span class="hljs-symbol">nameOverride:</span> <span class="hljs-string">""</span><br><span class="hljs-symbol">fullnameOverride:</span> <span class="hljs-string">""</span><br><br><span class="hljs-symbol">service:</span><br><span class="hljs-symbol">  type:</span> NodePort              <span class="hljs-meta">#修改模式为映射端口</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">  nodePort:</span> <span class="hljs-number">30000</span>             <span class="hljs-meta">#添加端口</span><br><br>[root@master wsd]<span class="hljs-meta"># vim templates/service.yaml </span><br><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Service<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> &#123;&#123; include <span class="hljs-string">"wsd.fullname"</span> . &#125;&#125;<br><span class="hljs-symbol">  labels:</span><br>&#123;&#123; include <span class="hljs-string">"wsd.labels"</span> . | indent <span class="hljs-number">4</span> &#125;&#125;<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  type:</span> &#123;&#123; .Values.service.type &#125;&#125;<br><span class="hljs-symbol">  ports:</span><br>    - port: &#123;&#123; .Values.service.port &#125;&#125;<br><span class="hljs-symbol">      targetPort:</span> http<br><span class="hljs-symbol">      protocol:</span> TCP<br><span class="hljs-symbol">      name:</span> http<br><span class="hljs-symbol">      nodePort:</span> &#123;&#123; .Values.service.nodePort &#125;&#125;    <span class="hljs-meta">#“添加”能让服务识别到nodePort的端口</span><br><span class="hljs-symbol">  selector:</span><br>    app.kubernetes.io/name: &#123;&#123; include <span class="hljs-string">"wsd.name"</span> . &#125;&#125;<br>    app.kubernetes.io/instance: &#123;&#123; .Release.Name &#125;&#125;<br></code></pre></td></tr></table></figure>
<h4 id="测试一下">测试一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> install -n wsd  wsd/ -f wsd/values.yaml<br></code></pre></td></tr></table></figure>
<p>![image-20200304134959273](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304134959273.png)</p>
<h4 id="查看一下镜像版本">查看一下镜像版本</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200304135106081](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304135106081.png)</p>
<h4 id="访问一下">访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure>
<p>![image-20200304150609552](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304150609552.png)</p>
<h2 id="3-将实例进行更新，要求镜像生产v2版本。">3)  将实例进行更新，要求镜像生产v2版本。</h2>
<p><strong>私有镜像和官方镜像升级有所不同，官方的只需通过 （helm upgrade --set imageTag=“标签” 服务名称 charts包名 ）进行更改标签即可，而私有镜像需通过更改values.yaml中的标签才行比较麻烦一点。</strong></p>
<h3 id="1、修改values-yaml">1、修改values.yaml</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">wsd/values.yaml</span> <br><br><span class="hljs-comment"># Default values for wsd.</span><br><span class="hljs-comment"># This is a YAML-formatted file.</span><br><span class="hljs-comment"># Declare variables to be passed into your templates.</span><br><br><span class="hljs-attr">replicaCount:</span> <span class="hljs-number">3</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><span class="hljs-string">:5000/web</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">v2</span>                            <span class="hljs-comment">#修改标签为v2</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">helm</span> <span class="hljs-string">upgrade</span> <span class="hljs-string">wsd</span> <span class="hljs-string">wsd/</span> <span class="hljs-string">-f</span> <span class="hljs-string">wsd/values.yaml</span><br><span class="hljs-string">//基于配置文件刷新一下wsd服务</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200304140054269](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304140054269.png)</p>
<h4 id="访问一下-2">访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure>
<p>![image-20200304150742815](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304150742815.png)</p>
<h3 id="2、使用edit进行版本更新">2、使用edit进行版本更新</h3>
<p><em><strong>确定wsd这个服务开启</strong></em></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> edit deployments. wsd<br></code></pre></td></tr></table></figure>
<p>![](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304140425336.png)</p>
<h4 id="查看一下-2">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get deployments. -o wide<br></code></pre></td></tr></table></figure>
<p>![image-20200304140520342](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304140520342.png)</p>
<h4 id="访问一下-3">访问一下</h4>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure>
<p>![image-20200304150839440](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304150839440.png)</p>
<h2 id="4）重新定义一个chart包，名称为-new-test-将这个包上传到上述私有仓库中。">4）重新定义一个chart包，名称为: new-test,将这个包上传到上述私有仓库中。</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo list<br></code></pre></td></tr></table></figure>
<p>![image-20200304142059023](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304142059023.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> create xgp-wsd<br>//创建一个名为xgp-wsd的charts包<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> package xgp-wsd/<br>//将xgp-wsd打包在当前目录<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mv</span> xgp-wsd-<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>.tgz xgprepo/<br>//把打包文件放到仓库目录<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo index xgprepo/ --url http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.22</span>:<span class="hljs-number">8080</span>/charts<br>//把仓库目录新加入的charts包信息记录在index.yaml中，使得其他加入的主机可以识别到，仓库的charts包<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# scp</span> xgprepo/* node01:/var/xgp/charts<br>//将仓库目录的文件移动到httpd服务上，使各个主机可以访问，下载仓库的charts包<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> repo update <br>//更新一下chart存储库<br></code></pre></td></tr></table></figure>
<h3 id="查看一下-3">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# helm</span> search xgp-wsd<br></code></pre></td></tr></table></figure>
<p>![image-20200304142009776](G:\四期\虚拟化\kubernetes\k8s文档\20 k8s的helm模板.assets\image-20200304142009776.png)</p>
]]></content>
  </entry>
  <entry>
    <title>22 考试</title>
    <url>/posts/gssl.html</url>
    <content><![CDATA[<h2 id="创建镜像的方法">创建镜像的方法</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@master xgp]# vim Dockerfile<br>FROM nginx<br>ADD index.htm /usr/share/nginx/html/<br>//创建Dockerfile<br><br>[root@master test]# echo "&lt;h1&gt;version 01 wsd&lt;/h1&gt;" &gt; index.html<br>[root@master test]# docker build -t 192.168.1.1:5000/nginx .<br>[root@master test]# echo "&lt;h1&gt;version 02 wsd&lt;/h1&gt;" &gt; index.html <br>[root@master test]# docker build -t 192.168.1.1:5000/nginx:v1.14 <br>[root@master test]# echo "&lt;h1&gt;version 03 wsd&lt;/h1&gt;" &gt; index.html .<br>[root@master test]# docker build -t 192.168.1.1:5000/nginx:v1.15 .<br>//创建不同index.html文件，生成测试镜像<br><br>[root@master test]# docker push 192.168.1.1:5000/nginx<br>[root@master test]# docker push 192.168.1.1:5000/nginx:v1.14<br>[root@master test]# docker push 192.168.1.1:5000/nginx:v1.15<br>//上传镜像<br></code></pre></td></tr></table></figure>
<h1>2) deployment名字为:nginx,保证运行3个Pod.service名字为：nginx-svc。映射到主机端口：31234.（10分）</h1>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">docker</span> <span class="hljs-string">pull</span> <span class="hljs-string">nginx</span><br><span class="hljs-string">//下载nginx镜像</span><br><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">deployment.yaml</span> <br><span class="hljs-string">//编写deployment和service的yaml文件</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31234</span><br></code></pre></td></tr></table></figure>
<h2 id="执行一下">执行一下</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f deployment.yaml</span><br></code></pre></td></tr></table></figure>
<h2 id="查看一下">查看一下</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p><img src="http://q9npprkue.bkt.clouddn.com/image-20200315100201329.png" alt="image-20200315100201329"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5CUntitled.assets%5Cimage-20200315100228967.png" alt="image-20200315100228967"></p>
<h2 id="访问一下http-192-168-1-21-31234">访问一下http://192.168.1.21:31234/</h2>
<p><img src="/posts/G:%5C%E5%9B%9B%E6%9C%9F%5C%E8%99%9A%E6%8B%9F%E5%8C%96%5Ckubernetes%5Ck8s%E6%96%87%E6%A1%A3%5CUntitled.assets%5Cimage-20200315100419217.png" alt="image-20200315100419217"></p>
<h1>3) 共有3个版本，版本1对应image镜像为：nginx，版本2对应的image为：nginx:1.14.版本3对应的版本为:nginx:1.15.分别运行各版本，每个版本要有在浏览器的访问验证。（10分）</h1>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># docker pull nginx</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># docker pull nginx:1.14</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># docker pull nginx:1.15</span><br>//下载所需镜像<br></code></pre></td></tr></table></figure>
<h2 id="编写deployment的yaml文件">编写deployment的yaml文件</h2>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim banben1.yaml</span><br><span class="hljs-comment">//编写deployment和service的yaml文件</span><br><br><span class="hljs-symbol">apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> nginx-svc        <br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: nginx         <br><span class="hljs-symbol">        image:</span> nginx         <span class="hljs-meta">#更改一下镜像（1.14和1.15的）</span><br>[root@master yaml]<span class="hljs-meta"># vim banben2.yaml</span><br><span class="hljs-comment">//编写deployment和service的yaml文件</span><br><br><span class="hljs-symbol">apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx2<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> nginx-svc        <br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: nginx         <br><span class="hljs-symbol">        image:</span> nginx:<span class="hljs-number">1.14</span>        <span class="hljs-meta">#更改一下镜像（1.14和1.15的）</span><br>[root@master yaml]<span class="hljs-meta"># vim banben3.yaml</span><br><span class="hljs-comment">//编写deployment和service的yaml文件</span><br><br><span class="hljs-symbol">apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx3<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> nginx-svc        <br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: nginx         <br><span class="hljs-symbol">        image:</span> nginx:<span class="hljs-number">1.15</span>         <span class="hljs-meta">#更改一下镜像（1.14和1.15的）</span><br></code></pre></td></tr></table></figure>
<h2 id="编写service的yaml文件">编写service的yaml文件</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">ngnix-svc.yaml</span> <br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-svc</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31235</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下（记录版本信息）">执行一下（记录版本信息）</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f banben1.yaml --record </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f banben2.yaml --record </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f banben3.yaml --record </span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f ngnix-svc.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-2">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315145551904](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315145551904.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315142530998](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315142530998.png)</p>
<h3 id="访问一下-http-192-168-1-21-31235">访问一下 <a href="http://192.168.1.21:31235/" target="_blank" rel="noopener">http://192.168.1.21:31235/</a></h3>
<p>![image-20200315143242088](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315143242088.png)</p>
<h1>4)运行到版本3之后，进行回滚操作回滚到版本4.（5分）</h1>
<h2 id="查看记录的版本信息">查看记录的版本信息</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment">#  kubectl rollout history deployment nginx</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315142738558](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315142738558.png)</p>
<h3 id="回滚到指定版本">回滚到指定版本</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl rollout undo deployment nginx --to-revision=<span class="hljs-number">4</span><br><span class="hljs-comment">//这里指定的是版本信息的编号</span><br></code></pre></td></tr></table></figure>
<h3 id="访问一下">访问一下</h3>
<p>![image-20200315143715792](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315143715792.png)</p>
<h1>5) 此时更改默认的3个Pod的访问界面,.版本1的访问界面内容为：考生名称+version:No1.版本2的访问界面:考生名称+version:No2,以此类推。（5分）</h1>
<h3 id="修改POD页面内容（三台不一样）">修改POD页面内容（三台不一样）</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# kubectl exec -it xgp-web<span class="hljs-number">-8</span>d5f9656f<span class="hljs-number">-8</span>z7d9 /bin/bash<br><span class="hljs-comment">//根据pod名称进入pod之中</span><br></code></pre></td></tr></table></figure>
<h3 id="进入容器后修改页面内容">进入容器后修改页面内容</h3>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1</span><br>[root<span class="hljs-symbol">@master</span> yaml]<span class="hljs-meta"># kubectl exec -it nginx-d6c5c85cb-8vcvt /bin/bash</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb<span class="hljs-number">-8</span>vcvt:/<span class="hljs-meta"># echo <span class="hljs-string">"&lt;h1&gt;version 01 wushaodong&lt;/h1&gt;"</span>   &gt; /usr/share/nginx/html/index.html </span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb<span class="hljs-number">-8</span>vcvt:/<span class="hljs-meta"># exit</span><br><br><span class="hljs-number">2</span><br>[root<span class="hljs-symbol">@master</span> yaml]<span class="hljs-meta"># kubectl exec -it nginx-d6c5c85cb-bxvvt /bin/bash</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb-bxvvt:/<span class="hljs-meta"># echo <span class="hljs-string">"&lt;h1&gt;version 02 wushaodong&lt;/h1&gt;"</span>   &gt; /usr/share/nginx/html/index.html</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb-bxvvt:/<span class="hljs-meta"># exit</span><br><br><span class="hljs-number">3</span><br>[root<span class="hljs-symbol">@master</span> yaml]<span class="hljs-meta"># kubectl exec -it nginx-d6c5c85cb-lhlz9 /bin/bash</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb-lhlz9:/<span class="hljs-meta"># echo <span class="hljs-string">"&lt;h1&gt;version 03 wushaodong&lt;/h1&gt;"</span>   &gt; /usr/share/nginx/html/index.html</span><br>root<span class="hljs-symbol">@nginx</span>-d6c5c85cb-lhlz9:/<span class="hljs-meta"># exit</span><br></code></pre></td></tr></table></figure>
<h1>6) 验证界面是否会会有轮训效果，并加以分析论述。（5分）</h1>
<p><em><strong>不要在浏览器里测试轮询，有缓存</strong></em></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master ~]# curl <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">31235</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315150130146](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315150130146.png)</p>
<p><strong>答：会有轮询的效果，kubernetes 内部的负载均衡是通过 iptables 的 probability 特性来做到的，kube-proxy通过iptables 将访问 Service 的流量转发到后端 Pod，而且使用类似轮询的负载均衡策略。</strong></p>
<h1>7) 创建一个NFS PV，NFS共享目录为：考生名称。PV名称为：new-pv。创建一个PVC，名称为new-pvc。单独创建一个pod，使用new-pv，运行之后，验证nfs是否使用成功。（10分）</h1>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# yum</span> -y install nfs-utils rpcbind<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># mkdir /wushaodong</span><br>//创建指定名称的共享目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># echo "/wushaodong *(rw,sync,no_root_squash)" &gt; /etc/exports</span><br>//编写共享目录的权限<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  systemctl</span> <span class="hljs-literal">start</span> nfs-server<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#  systemctl</span> <span class="hljs-literal">start</span> rpcbind<br>//启动服务<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># showmount -e</span><br>//测试一下<br></code></pre></td></tr></table></figure>
<p>![image-20200315152012176](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315152012176.png)</p>
<h2 id="1、创建一个NFS-PV的yaml文件">1、创建一个NFS PV的yaml文件</h2>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim new-pv.yaml</span><br><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> new-xgp<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Recycle<br><span class="hljs-symbol">  storageClassName:</span> nfs<br><span class="hljs-symbol">  nfs:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/wushaodong/</span>new-pv<br><span class="hljs-symbol">    server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br><br>[root@master yaml]<span class="hljs-meta"># mkdir /wushaodong/new-pv</span><br><span class="hljs-comment">//创建指定目录</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-2">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply  -f  new-pv.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-3">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315152639218](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315152639218.png)</p>
<h2 id="2、创建一个PVC的yaml文件">2、创建一个PVC的yaml文件</h2>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim new-pvc.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> new-pvc<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  accessModes:</span>            <span class="hljs-meta">#要和pv的一直否则关联不成功</span><br>  - ReadWriteOnce<br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">  storageClassName:</span> nfs   <span class="hljs-meta">#要和pv的一直否则关联不成功</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-3">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply  -f  new-pvc.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-4">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pvc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315153049267](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315153049267.png)</p>
<h2 id="3、单独创建一个pod，使用new-pv">3、单独创建一个pod，使用new-pv</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">pod.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xgp-pod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/wushaodong</span>  <span class="hljs-comment">#容器的被挂载目录</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">volumedata</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volumedata</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">new-pvc</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-4">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f pod.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-5">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315153837882](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315153837882.png)</p>
<h2 id="4、测试一下">4、测试一下</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">[root@master yaml]<span class="hljs-meta"># kubectl exec -it xgp-pod /bin/sh</span><br><span class="hljs-comment">//进入pod</span><br><span class="hljs-meta">#  echo <span class="hljs-meta-string">"xgpIwsd"</span> &gt; /wushaodong/xgp.txt</span><br><span class="hljs-comment">//添加内容到挂载目录</span><br><span class="hljs-meta"># exit</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下，挂载目录是否有添加内容">查看一下，挂载目录是否有添加内容</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cat /wushaodong/new-pv/xgp.txt</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315154239587](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315154239587.png)</p>
<h1>8）请简述k8s集群中，master节点有哪些组件，node节点有哪些组件，作用分别有什么作用，各组件又是怎么交互的。（5分）</h1>
<h2 id="master节点">master节点</h2>
<p><strong>1. API server[资源操作入口]</strong>：是k8s集群的前端接口，各种各样客户端工具以及k8s的其他组件可以通过它管理k8s集群的各种资源。它提供了HTTP/HTTPS RESTful API,即K8S API。</p>
<blockquote>
<ul>
<li>提供了资源对象的唯一操作入口，其他所有组件都必须通过它提供的API来操作资源数据，只有API Server与存储通信，其他模块通过API Server访问集群状态。</li>
</ul>
<p>第一，是为了保证集群状态访问的安全。</p>
<p>第二，是为了隔离集群状态访问的方式和后端存储实现的方式：API Server是状态访问的方式，不会因为后端存储技术etcd的改变而改变。</p>
<ul>
<li>作为kubernetes系统的入口，封装了核心对象的增删改查操作，以<a href="https://www.centos.bz/tag/restful/" target="_blank" rel="noopener">RESTFul</a>接口方式提供给外部客户和内部组件调用。对相关的资源数据“全量查询”+“变化监听”，实时完成相关的业务功能。</li>
</ul>
</blockquote>
<p><strong>2. Scheduler[集群分发调度器]</strong>：负责决定将Pod放在哪个Node上运行。在调度时，会充分考虑集群的拓扑结构，当前各个节点的负载情况，以及应对高可用、性能、数据亲和性和需求。</p>
<blockquote>
<p>1.Scheduler收集和分析当前Kubernetes集群中所有Minion节点的资源(内存、CPU)负载情况，然后依此分发新建的Pod到Kubernetes集群中可用的节点。</p>
<p>2.实时监测Kubernetes集群中未分发和已分发的所有运行的Pod。</p>
<p>3.Scheduler也监测Minion节点信息，由于会频繁查找Minion节点，Scheduler会缓存一份最新的信息在本地。</p>
<p>4.最后，Scheduler在分发Pod到指定的Minion节点后，会把Pod相关的信息Binding写回API Server。</p>
</blockquote>
<p><strong>4. Controller Manager[内部管理控制中心]</strong>：负责管理集群的各种资源，保证资源处于预期的状态。它由多种Controller组成，包括Replication Controller、Endpoints Controller、Namespace Controller、Serviceaccounts Controller等。</p>
<blockquote>
<p>实现集群故障检测和恢复的自动化工作，负责执行各种控制器，主要有：</p>
<p>1.endpoint-controller：定期关联<a href="https://www.centos.bz/tag/service/" target="_blank" rel="noopener">service</a>和pod(关联信息由endpoint对象维护)，保证service到pod的映射总是最新的。</p>
<p>2.replication-controller：定期关联replicationController和pod，保证replicationController定义的复制数量与实际运行pod的数量总是一致的。</p>
</blockquote>
<p>**5. Etcd：**负责保存k8s集群的配置信息和各种资源的状态信息。当数据发生变化时，etcd会快速的通知k8s相关组件。<a href>（第三方组件）它有可替换方案。Consul、zookeeper</a></p>
<p><strong>6. Pod:</strong> k8s集群的最小组成单位。一个Pod内，可以运行一个或多个容器。大多数情况下，一个Pod内只有一个Container容器。</p>
<p>**7. Flanner：**是k8s集群网络，可以保证Pod的跨主机通信。也有替换方案。</p>
<h2 id="Node节点">Node节点</h2>
<p><strong>Kubelet[节点上的Pod管家]</strong>：它是Node的agent(代理)，当Scheduler确定某 个Node上运行Pod之后，会将Pod的具体配置信息发送给该节点的kubelet,kubelet会根据这些信息创建和运行容器，并向Master报告运行状态。</p>
<blockquote>
<ul>
<li>负责Node节点上pod的创建、修改、监控、删除等全生命周期的管理</li>
<li>定时上报本Node的状态信息给API Server。</li>
<li>kubelet是Master API Server和Minion之间的桥梁，接收Master API Server分配给它的commands和work，与持久性键值存储etcd、file、server和http进行交互，读取配置信息。</li>
<li>具体的工作如下：</li>
</ul>
<p>设置容器的环境变量、给容器绑定<a href="https://www.centos.bz/tag/volume/" target="_blank" rel="noopener">Volume</a>、给容器绑定Port、根据指定的Pod运行一个单一容器、给指定的Pod创建network 容器。</p>
<p>同步Pod的状态、同步Pod的状态、从<a href="https://www.centos.bz/tag/cadvisor/" target="_blank" rel="noopener">cAdvisor</a>获取<a href="https://www.centos.bz/tag/container/" target="_blank" rel="noopener">Container</a> info、 pod info、 root info、 <a href="https://www.centos.bz/tag/machine/" target="_blank" rel="noopener">machine</a> info。</p>
<p>在容器中运行命令、杀死容器、删除Pod的所有容器。</p>
</blockquote>
<p>**kube-proxy[负载均衡、路由转发]:**负责将访问service的TCP/UDP数据流转发到后端的容器。如果有多个<br>
副本，kube-proxy会实现负载均衡。</p>
<blockquote>
<ul>
<li>Proxy是为了解决外部网络能够访问跨机器集群中容器提供的应用服务而设计的，运行在每个Node上。Proxy提供TCP/UDP sockets的proxy，每创建一种Service，Proxy主要从etcd获取Services和Endpoints的配置信息（也可以从file获取），然后根据配置信息在Minion上启动一个Proxy的进程并监听相应的服务端口，当外部请求发生时，Proxy会根据Load Balancer将请求分发到后端正确的容器处理。</li>
<li>Proxy不但解决了同一主宿机相同服务端口冲突的问题，还提供了Service转发服务端口对外提供服务的能力，Proxy后端使用了随机、轮循负载均衡算法。</li>
</ul>
</blockquote>
<h2 id="各个组件的作用以及架构工作流程">各个组件的作用以及架构工作流程:</h2>
<p><strong>1) kubectl发送部署 请求到API server</strong><br>
<strong>2) APIserver通知Controller Manager创建一个Deployment资源。</strong><br>
<strong>3) Scheduler执行调度任务,将两个副本Pod分发到node01和node02. 上。</strong><br>
<strong>4) node01和node02, 上的kubelet在各自节点上创建并运行Pod。</strong></p>
<h3 id="补充">补充</h3>
<p><strong>1.应用的配置和当前的状态信息保存在etcd中，执行kubectl get pod时API server会从etcd中读取这些数据。</strong></p>
<p><strong>2.flannel会为每个Pod分配一个IP。 但此时没有创建Service资源，目前kube-proxy还没有参与进来。</strong></p>
<h1>9）部署一个dashboard。（5分）</h1>
<h2 id="1、下载所需yaml文件和镜像">1、下载所需yaml文件和镜像</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># docker pull kubernetesui/dashboard:v2.0.0-rc5</span><br></code></pre></td></tr></table></figure>
<h2 id="2、修改-recommended-yaml">2、修改 recommended.yaml</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">https]#vim</span> <span class="hljs-string">recommended.yaml</span> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>            <span class="hljs-comment">#添加40</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure>
<h3 id="执行一下-5">执行一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl apply -f recommended.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="查看一下-6">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get svc -n kubernetes-dashboard</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315154708443](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315154708443.png)</p>
<h2 id="3、浏览器访问https-192-168-1-21-30949">3、浏览器访问https://192.168.1.21:30949/</h2>
<p><strong>PS:如果是使用的旧版本的dashboard, 使用Google浏览器登录，可能是不成功的，需要换成其他的浏览器，比如:火狐。</strong></p>
<p>![image-20200315154859800](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315154859800.png)</p>
<p>![image-20200315154929279](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315154929279.png)</p>
<h2 id="4、基于token的方法登录dashboard">4、基于token的方法登录dashboard</h2>
<h3 id="1-创建一个dashboard的管理用户">&lt;1&gt;创建一个dashboard的管理用户</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl create serviceaccount dashboard-admin -n kube-system</span><br></code></pre></td></tr></table></figure>
<h3 id="2-绑定用户为集群管理用户">&lt;2&gt;绑定用户为集群管理用户</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br></code></pre></td></tr></table></figure>
<h3 id="3-获取Token">&lt;3&gt;获取Token</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl get secrets -n kube-system | grep dashboard-admin</span><br>//先得到Token的名称<br></code></pre></td></tr></table></figure>
<p>![image-20200315155029875](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315155029875.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">https</span>]<span class="hljs-comment"># kubectl describe secrets -n kube-system  dashboard-admin-token-j874n</span><br>//查看上述得到的secret资源的详细信息，会得到token<br></code></pre></td></tr></table></figure>
<p>![image-20200315155147297](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315155147297.png)</p>
<h3 id="4-在浏览器上使用token登录。">&lt;4&gt;在浏览器上使用token登录。</h3>
<p>![image-20200315155307433](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315155307433.png)</p>
<p>![image-20200315155326746](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315155326746.png)</p>
<p><strong>成功界面</strong></p>
<h1>10）使用helm的方式，部署mysql服务，要求使用storageclass作为持久化存储，服务运行之后，进入数据库，创建一个test库，库中一张test表，内容为： 9527.</h1>
<h1>然后模拟数据库Pod失败，待Pod重启后，查看对应数据是否还存在？（10分）</h1>
<h2 id="1、安装部署helm工具">1、安装部署helm工具</h2>
<h3 id="（1）下载helm的包">（1）下载helm的包</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]#docker</span> pull gcr.io/kubernetes-helm/tiller:v2.<span class="hljs-number">14.3</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# wget</span> https://get.helm.sh/helm-v2.<span class="hljs-number">14.3</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure>
<h3 id="（2）把helm包的命令，复制到本地">（2）把helm包的命令，复制到本地</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># mv linux-amd64/helm /usr/local/bin/</span><br>//移动命令目录到/usr/local/bin/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># chmod +x /usr/local/bin/helm </span><br>//给予执行权限<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm help</span><br>//验证是否安装成功<br></code></pre></td></tr></table></figure>
<h3 id="（3）设置命令自动补全">（3）设置命令自动补全</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment">#  echo 'source &lt;(helm completion bash)' &gt;&gt; /etc/profile</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># . /etc/profile</span><br>//刷新一下<br></code></pre></td></tr></table></figure>
<h2 id="2、安装Tiller-server（服务端，需要创建授权用户）">2、安装Tiller server（服务端，需要创建授权用户）</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">~]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">tiller-rbac.yaml</span>   <span class="hljs-comment">#创建授权用户</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-6">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> apply -f tiller-rbac.yaml<br></code></pre></td></tr></table></figure>
<h3 id="（1）Tiller-server的环境初始化">（1）Tiller server的环境初始化</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm init  --service-account=tiller</span><br>//helm的服务端就是Tiller（因为是访问外国的网站，可能需要多次执行）<br></code></pre></td></tr></table></figure>
<h4 id="查看一下-7">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># kubectl get deployment. -n kube-system</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315163043816](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315163043816.png)</p>
<p><strong>现在发现没有开启，那是因为默认下载的Google的镜像，下载不下来</strong></p>
<h3 id="（2）设置镜像源改为阿里云的">（2）设置镜像源改为阿里云的</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-8">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">helm</span>]<span class="hljs-comment"># helm version</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315163313031](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315163313031.png)</p>
<h2 id="3、基于NFS服务，创建共享。">3、基于NFS服务，创建共享。</h2>
<p><strong>因为上面已经做过了，所以现在只需创建目录和设置权限即可</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># mkdir /xgpwsd</span><br>//创建目录<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># echo '/xgpwsd *(rw,sync,no_root_squash)' &gt;&gt; /etc/exports</span><br>//设置共享目录权限<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># systemctl restart nfs-server</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># systemctl restart rpcbind</span><br>//重启nfs服务<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">heml</span>]<span class="hljs-comment"># showmount -e</span><br>//测试一下<br></code></pre></td></tr></table></figure>
<p>![image-20200315164157425](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315164157425.png)</p>
<h2 id="4、创建pv">4、创建pv</h2>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master xgp]<span class="hljs-meta"># vim nfs-pv1.yml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mysqlpv<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">8</span>Gi<br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Recycle<br><span class="hljs-symbol">  nfs:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/xgpwsd/</span>xgp<br><span class="hljs-symbol">    server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>[root@master xgp]<span class="hljs-meta"># mkdir /xgpwsd/xgp</span><br><span class="hljs-comment">//创建所需目录</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-7">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl apply -f nfs-pv1.yml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-9">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl get pv</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315182950429](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315182950429.png)</p>
<h2 id="5、创建StorageClass资源对象。">5、创建StorageClass资源对象。</h2>
<h3 id="（1）创建rbac权限。">（1）创建rbac权限。</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim rbac.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner<br><span class="hljs-symbol">  namespace:</span> default<br>---<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">rules:</span><br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumes"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"delete"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"persistentvolumeclaims"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>, <span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"storage.k8s.io"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"storageclasses"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>, <span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"events"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"watch"</span>, <span class="hljs-string">"create"</span>, <span class="hljs-string">"update"</span>, <span class="hljs-string">"patch"</span>]<br>   -  apiGroups: [<span class="hljs-string">""</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"services"</span>, <span class="hljs-string">"endpoints"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"get"</span>,<span class="hljs-string">"create"</span>,<span class="hljs-string">"list"</span>, <span class="hljs-string">"watch"</span>,<span class="hljs-string">"update"</span>]<br>   -  apiGroups: [<span class="hljs-string">"extensions"</span>]<br><span class="hljs-symbol">      resources:</span> [<span class="hljs-string">"podsecuritypolicies"</span>]<br><span class="hljs-symbol">      resourceNames:</span> [<span class="hljs-string">"nfs-provisioner"</span>]<br><span class="hljs-symbol">      verbs:</span> [<span class="hljs-string">"use"</span>]<br>---<br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> run-nfs-provisioner<br><span class="hljs-symbol">subjects:</span><br>  - kind: ServiceAccount<br><span class="hljs-symbol">    name:</span> nfs-provisioner<br><span class="hljs-symbol">    namespace:</span> default        <span class="hljs-meta">#必写字段</span><br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> nfs-provisioner-runner<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure>
<h4 id="执行一下-8">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f rbac.yaml</span><br></code></pre></td></tr></table></figure>
<h3 id="（2）创建Deployment资源对象，用Pod代替-真正的NFS服务。">（2）创建Deployment资源对象，用Pod代替 真正的NFS服务。</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">[root@master</span> <span class="hljs-string">yaml]#</span> <span class="hljs-string">vim</span> <span class="hljs-string">nfs-deployment.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">nfs-provisioner</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span>  <span class="hljs-string">/persistentvolumes</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">xgp</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/xgpwsd/wsd</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.21</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/xgpwsd/wsd</span><br>            <br><span class="hljs-string">[root@master</span> <span class="hljs-string">heml]#</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">/xgpwsd/wsd</span><br><span class="hljs-string">//创建指定目录</span><br></code></pre></td></tr></table></figure>
<h4 id="执行一下-9">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f nfs-deployment.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-10">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315164706266](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315164706266.png)</p>
<h3 id="（3）创建storageclass的yaml文件">（3）创建storageclass的yaml文件</h3>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># vim xgp-storageclass.yaml </span><br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> xgp-nfs<br><span class="hljs-symbol">provisioner:</span> xgp  <span class="hljs-meta">#通过provisioner字段关联到上述Deploy</span><br><span class="hljs-symbol">reclaimPolicy:</span> Retain<br></code></pre></td></tr></table></figure>
<h4 id="执行一下-10">执行一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl apply -f xgp-storageclass.yaml</span><br></code></pre></td></tr></table></figure>
<h4 id="查看一下-11">查看一下</h4>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl get sc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315164758857](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315164758857.png)</p>
<h2 id="6、创建一个mysql服务">6、创建一个mysql服务</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# docker</span> pull mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">14</span><br>//下载所需镜像<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># helm fetch stable/mysql</span><br>//直接下载stable/mysql的chart包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># tar -zxf mysql-0.3.5.tgz </span><br>//解压mysql包<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># cd mysql/</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># vim values.yaml </span><br>//修改values.yaml文件，添加storageClass存储卷<br></code></pre></td></tr></table></figure>
<p>![image-20200315173613775](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315173613775.png)</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">[root@master mysql]# helm install stable/mysql -n xgp-mysql --<span class="hljs-keyword">set</span> mysqlRootPassword=<span class="hljs-number">123</span>.<span class="hljs-keyword">com</span> -<span class="hljs-keyword">f</span> <span class="hljs-built_in">values</span>.yaml <br>//基于<span class="hljs-built_in">values</span>.yaml和stable/mysql开启一个密码为<span class="hljs-number">123</span>.<span class="hljs-keyword">com</span>的mysqlpod<br></code></pre></td></tr></table></figure>
<h3 id="查看一下-12">查看一下</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315173526818](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315173526818.png)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get pod -o wide</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315173702896](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315173702896.png)</p>
<h2 id="7、进入mysql数据库，创建一个test库，库中一张test表，内容为：-9527。">7、进入mysql数据库，创建一个test库，库中一张test表，内容为： 9527。</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">xgp</span>]<span class="hljs-comment"># kubectl exec -it bdqn-mysql-mysql-7b89c7b99-8ff2r -- mysql -u root -p123.com</span><br></code></pre></td></tr></table></figure>
<h3 id="创建数据库">创建数据库</h3>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> test;<br></code></pre></td></tr></table></figure>
<h3 id="切换数据库">切换数据库</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">mysql&gt; <span class="hljs-keyword">use</span> <span class="hljs-title">test</span>;<br></code></pre></td></tr></table></figure>
<h3 id="创建表">创建表</h3>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams">mysql&gt; create <span class="hljs-keyword">table</span> test( id <span class="hljs-comment">int(4))</span>；<br></code></pre></td></tr></table></figure>
<h3 id="在表中插入数据">在表中插入数据</h3>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">insert</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">9527</span>);<br></code></pre></td></tr></table></figure>
<h3 id="查看表">查看表</h3>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test;<br></code></pre></td></tr></table></figure>
<p>![image-20200315181155502](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315181155502.png)</p>
<h2 id="8、模拟数据库Pod失败，待Pod重启后，查看对应数据是否还存在？">8、模拟数据库Pod失败，待Pod重启后，查看对应数据是否还存在？</h2>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>master mysql]# kubectl delete pod xgp-mysql-mysql<span class="hljs-number">-67</span>c6fb5f9<span class="hljs-number">-4</span>h4kz<br><span class="hljs-comment">//删除这个pod让他重新生成</span><br></code></pre></td></tr></table></figure>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl get pod</span><br></code></pre></td></tr></table></figure>
<p>![image-20200315181626553](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315181626553.png)</p>
<h3 id="进入新的pod查看">进入新的pod查看</h3>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span>]<span class="hljs-comment"># kubectl exec -it xgp-mysql-mysql-67c6fb5f9-k4c29 -- mysql -u root -p123.com</span><br></code></pre></td></tr></table></figure>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">mysql&gt; use test;<br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>mysql&gt; select * from test;<br><span class="hljs-code">+------+</span><br>| id   |<br><span class="hljs-code">+------+</span><br>| 9527 |<br><span class="hljs-code">+------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>
<p>![image-20200315181720939](G:\四期\虚拟化\kubernetes\k8s文档\22 考试.assets\image-20200315181720939.png)</p>
]]></content>
  </entry>
  <entry>
    <title>可爱的我</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>网站感想</title>
    <url>/about/site.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>contact</title>
    <url>/contact/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/canvas-nest/README.html</url>
    <content><![CDATA[<h1>Theme NexT Canvas Nest</h1>
<p><img src="https://img.shields.io/badge/NexT-v7.3.0+-blue?style=flat-square" alt="Theme Version"></p>
<p><a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="noopener">canvas-nest.js</a> for <a href="https://github.com/theme-next" target="_blank" rel="noopener">NexT</a>.</p>
<h2 id="Install">Install</h2>
<h3 id="Step-1-→-Go-to-Hexo-dir">Step 1 → Go to Hexo dir</h3>
<p>Change dir to <strong>Hexo</strong> directory. There must be <code>scaffolds</code>, <code>source</code>, <code>themes</code> and other directories:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">cd</span> hexo<br>$ ls<br>scaffolds  <span class="hljs-built_in">source</span>  themes  _config.yml  package.json<br></code></pre></td></tr></table></figure>
<h3 id="Step-2-→-Create-footer-swig">Step 2 → Create <code>footer.swig</code></h3>
<p>Create a file named <code>footer.swig</code> in <code>hexo/source/_data</code> directory (create <code>_data</code> directory if it does not exist).</p>
<p>Edit this file and add the following content:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"0,0,255"</span> <span class="hljs-attr">opacity</span>=<span class="hljs-string">"0.5"</span> <span class="hljs-attr">zIndex</span>=<span class="hljs-string">"-1"</span> <span class="hljs-attr">count</span>=<span class="hljs-string">"99"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>You can customize these options.</p>
<h3 id="Step-3-→-Set-it-up">Step 3 → Set it up</h3>
<p>In the NexT <code>_config.yml</code>, uncomment <code>footer</code> under the <code>custom_file_path</code> section.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Define custom file paths.</span><br><span class="hljs-comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span><br><span class="hljs-attr">custom_file_path:</span><br>  <span class="hljs-comment">#head: source/_data/head.swig</span><br>  <span class="hljs-comment">#header: source/_data/header.swig</span><br>  <span class="hljs-comment">#sidebar: source/_data/sidebar.swig</span><br>  <span class="hljs-comment">#postMeta: source/_data/post-meta.swig</span><br>  <span class="hljs-comment">#postBodyEnd: source/_data/post-body-end.swig</span><br>  <span class="hljs-attr">footer:</span> <span class="hljs-string">source/_data/footer.swig</span><br>  <span class="hljs-comment">#bodyEnd: source/_data/body-end.swig</span><br>  <span class="hljs-comment">#variable: source/_data/variables.styl</span><br>  <span class="hljs-comment">#mixin: source/_data/mixins.styl</span><br>  <span class="hljs-comment">#style: source/_data/styles.styl</span><br></code></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/canvas-nest/canvas-nest-nomobile.min.js</url>
    <content><![CDATA[!function(){
	var userAgentInfo = navigator.userAgent;
    var Agents = ["iPad", "iPhone", "Android", 
          "SymbianOS", "Windows Phone",
           "iPod", "webOS", "BlackBerry", "IEMobile"];
    for (var v = 0; v < Agents.length; v++) {
      if (userAgentInfo.indexOf(Agents[v]) > 0) {
        return;
      }
    }
	function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j("script"),w=i.length,v=i[w-1];return{l:w,z:o(v,"zIndex",-1),o:o(v,"opacity",0.5),c:o(v,"color","0,0,0"),n:o(v,"count",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle="rgba("+s.c+","+(A+0.2)+")",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement("canvas"),s=l(),c="c_n"+s.l,e=u.getContext("2d"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText="position:fixed;top:0;left:0;z-index:"+s.z+";opacity:"+s.o;j("body")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();</0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y></0?-1:1,i.ya*=i.y>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/canvas-nest/canvas-nest.min.js</url>
    <content><![CDATA[!function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j("script"),w=i.length,v=i[w-1];return{l:w,z:o(v,"zIndex",-1),o:o(v,"opacity",0.5),c:o(v,"color","0,0,0"),n:o(v,"count",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle="rgba("+s.c+","+(A+0.2)+")",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement("canvas"),s=l(),c="c_n"+s.l,e=u.getContext("2d"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText="position:fixed;top:0;left:0;z-index:"+s.z+";opacity:"+s.o;j("body")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();</0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y></0?-1:1,i.ya*=i.y>]]></content>
  </entry>
</search>
